
IOT_HTTP_WebServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190f8  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00173b88  08019330  08019330  0001a330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0818ceb8  0818ceb8  0018e2b0  2**0
                  CONTENTS
  4 .ARM          00000008  0818ceb8  0818ceb8  0018deb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0818cec0  0818cec0  0018e2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0818cec0  0818cec0  0018dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0818cec8  0818cec8  0018dec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0818ced0  0018e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003208  200002b0  0818d180  0018e2b0  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  200034b8  0818d180  0018e4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0018e2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036e2d  00000000  00000000  0018e2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006fb5  00000000  00000000  001c5113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028a0  00000000  00000000  001cc0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ec3  00000000  00000000  001ce968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ff71  00000000  00000000  001d082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039f0a  00000000  00000000  0021079c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00162669  00000000  00000000  0024a6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  003acd0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf50  00000000  00000000  003acd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  003b8ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200002b0 	.word	0x200002b0
 8000254:	00000000 	.word	0x00000000
 8000258:	08019318 	.word	0x08019318

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200002b4 	.word	0x200002b4
 8000274:	08019318 	.word	0x08019318

08000278 <strcmp>:
 8000278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800027c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	bf28      	it	cs
 8000284:	429a      	cmpcs	r2, r3
 8000286:	d0f7      	beq.n	8000278 <strcmp>
 8000288:	1ad0      	subs	r0, r2, r3
 800028a:	4770      	bx	lr

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	@ 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb8:	f000 b9b4 	b.w	8001024 <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f83c 	bl	8000d40 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_d2lz>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	460d      	mov	r5, r1
 8000cde:	f7ff ff0b 	bl	8000af8 <__aeabi_dcmplt>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <__aeabi_d2lz+0x1c>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cec:	f000 b80a 	b.w	8000d04 <__aeabi_d2ulz>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cf6:	f000 f805 	bl	8000d04 <__aeabi_d2ulz>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_d2ulz>:
 8000d04:	b5d0      	push	{r4, r6, r7, lr}
 8000d06:	2200      	movs	r2, #0
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <__aeabi_d2ulz+0x34>)
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fc81 	bl	8000614 <__aeabi_dmul>
 8000d12:	f7ff ff57 	bl	8000bc4 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc02 	bl	8000520 <__aeabi_ui2d>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <__aeabi_d2ulz+0x38>)
 8000d20:	f7ff fc78 	bl	8000614 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff faba 	bl	80002a4 <__aeabi_dsub>
 8000d30:	f7ff ff48 	bl	8000bc4 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <__udivmoddi4>:
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d46:	460c      	mov	r4, r1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d14d      	bne.n	8000de8 <__udivmoddi4+0xa8>
 8000d4c:	428a      	cmp	r2, r1
 8000d4e:	460f      	mov	r7, r1
 8000d50:	4684      	mov	ip, r0
 8000d52:	4696      	mov	lr, r2
 8000d54:	fab2 f382 	clz	r3, r2
 8000d58:	d960      	bls.n	8000e1c <__udivmoddi4+0xdc>
 8000d5a:	b14b      	cbz	r3, 8000d70 <__udivmoddi4+0x30>
 8000d5c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d60:	f1c3 0220 	rsb	r2, r3, #32
 8000d64:	409f      	lsls	r7, r3
 8000d66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d74:	fa1f f48e 	uxth.w	r4, lr
 8000d78:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d7c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d80:	fb06 7711 	mls	r7, r6, r1, r7
 8000d84:	fb01 f004 	mul.w	r0, r1, r4
 8000d88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x62>
 8000d90:	eb1e 0202 	adds.w	r2, lr, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x60>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f200 812d 	bhi.w	8000ffa <__udivmoddi4+0x2ba>
 8000da0:	4639      	mov	r1, r7
 8000da2:	1a12      	subs	r2, r2, r0
 8000da4:	fa1f fc8c 	uxth.w	ip, ip
 8000da8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dac:	fb06 2210 	mls	r2, r6, r0, r2
 8000db0:	fb00 f404 	mul.w	r4, r0, r4
 8000db4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000db8:	4564      	cmp	r4, ip
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x8e>
 8000dbc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x8c>
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	f200 811a 	bhi.w	8001000 <__udivmoddi4+0x2c0>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd2:	ebac 0c04 	sub.w	ip, ip, r4
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	b125      	cbz	r5, 8000de4 <__udivmoddi4+0xa4>
 8000dda:	fa2c f303 	lsr.w	r3, ip, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	e9c5 3200 	strd	r3, r2, [r5]
 8000de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d905      	bls.n	8000df8 <__udivmoddi4+0xb8>
 8000dec:	b10d      	cbz	r5, 8000df2 <__udivmoddi4+0xb2>
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	2100      	movs	r1, #0
 8000df4:	4608      	mov	r0, r1
 8000df6:	e7f5      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000df8:	fab3 f183 	clz	r1, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d14d      	bne.n	8000e9c <__udivmoddi4+0x15c>
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	f0c0 80f2 	bcc.w	8000fea <__udivmoddi4+0x2aa>
 8000e06:	4290      	cmp	r0, r2
 8000e08:	f080 80ef 	bcs.w	8000fea <__udivmoddi4+0x2aa>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	4623      	mov	r3, r4
 8000e10:	4608      	mov	r0, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e6      	beq.n	8000de4 <__udivmoddi4+0xa4>
 8000e16:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1a:	e7e3      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f040 80a2 	bne.w	8000f66 <__udivmoddi4+0x226>
 8000e22:	1a8a      	subs	r2, r1, r2
 8000e24:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e28:	fa1f f68e 	uxth.w	r6, lr
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e32:	fb07 2014 	mls	r0, r7, r4, r2
 8000e36:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb06 f004 	mul.w	r0, r6, r4
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d90f      	bls.n	8000e66 <__udivmoddi4+0x126>
 8000e46:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4290      	cmp	r0, r2
 8000e5a:	d903      	bls.n	8000e64 <__udivmoddi4+0x124>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	f000 80c8 	beq.w	8000ff4 <__udivmoddi4+0x2b4>
 8000e64:	4644      	mov	r4, r8
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	fa1f fc8c 	uxth.w	ip, ip
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	fb00 f606 	mul.w	r6, r0, r6
 8000e78:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e7c:	4566      	cmp	r6, ip
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x152>
 8000e80:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x150>
 8000e8a:	4566      	cmp	r6, ip
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c6>
 8000e90:	4610      	mov	r0, r2
 8000e92:	ebac 0c06 	sub.w	ip, ip, r6
 8000e96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9a:	e79d      	b.n	8000dd8 <__udivmoddi4+0x98>
 8000e9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eae:	40f4      	lsrs	r4, r6
 8000eb0:	408a      	lsls	r2, r1
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	ea4e 030c 	orr.w	r3, lr, ip
 8000eb8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ebc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec4:	fa1f fc87 	uxth.w	ip, r7
 8000ec8:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ecc:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed4:	fb00 f90c 	mul.w	r9, r0, ip
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x1ba>
 8000edc:	193c      	adds	r4, r7, r4
 8000ede:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee2:	bf2c      	ite	cs
 8000ee4:	f04f 0b01 	movcs.w	fp, #1
 8000ee8:	f04f 0b00 	movcc.w	fp, #0
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	d903      	bls.n	8000ef8 <__udivmoddi4+0x1b8>
 8000ef0:	f1bb 0f00 	cmp.w	fp, #0
 8000ef4:	f000 8093 	beq.w	800101e <__udivmoddi4+0x2de>
 8000ef8:	4650      	mov	r0, sl
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f06:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d906      	bls.n	8000f24 <__udivmoddi4+0x1e4>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f1c:	d201      	bcs.n	8000f22 <__udivmoddi4+0x1e2>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d87a      	bhi.n	8001018 <__udivmoddi4+0x2d8>
 8000f22:	4643      	mov	r3, r8
 8000f24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f28:	eba4 040c 	sub.w	r4, r4, ip
 8000f2c:	fba0 9802 	umull	r9, r8, r0, r2
 8000f30:	4544      	cmp	r4, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	4643      	mov	r3, r8
 8000f36:	d302      	bcc.n	8000f3e <__udivmoddi4+0x1fe>
 8000f38:	d106      	bne.n	8000f48 <__udivmoddi4+0x208>
 8000f3a:	45ce      	cmp	lr, r9
 8000f3c:	d204      	bcs.n	8000f48 <__udivmoddi4+0x208>
 8000f3e:	3801      	subs	r0, #1
 8000f40:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f44:	eb68 0307 	sbc.w	r3, r8, r7
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x222>
 8000f4a:	ebbe 020c 	subs.w	r2, lr, ip
 8000f4e:	eb64 0403 	sbc.w	r4, r4, r3
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	40cc      	lsrs	r4, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e73e      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000f66:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6a:	f1c3 0120 	rsb	r1, r3, #32
 8000f6e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f7c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f80:	fa1f f68e 	uxth.w	r6, lr
 8000f84:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	fb07 4410 	mls	r4, r7, r0, r4
 8000f8e:	0c11      	lsrs	r1, r2, #16
 8000f90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f94:	fb00 f406 	mul.w	r4, r0, r6
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d90e      	bls.n	8000fba <__udivmoddi4+0x27a>
 8000f9c:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa4:	bf2c      	ite	cs
 8000fa6:	f04f 0901 	movcs.w	r9, #1
 8000faa:	f04f 0900 	movcc.w	r9, #0
 8000fae:	428c      	cmp	r4, r1
 8000fb0:	d902      	bls.n	8000fb8 <__udivmoddi4+0x278>
 8000fb2:	f1b9 0f00 	cmp.w	r9, #0
 8000fb6:	d02c      	beq.n	8001012 <__udivmoddi4+0x2d2>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	1b09      	subs	r1, r1, r4
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fca:	fb04 f106 	mul.w	r1, r4, r6
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d907      	bls.n	8000fe2 <__udivmoddi4+0x2a2>
 8000fd2:	eb1e 0202 	adds.w	r2, lr, r2
 8000fd6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fda:	d201      	bcs.n	8000fe0 <__udivmoddi4+0x2a0>
 8000fdc:	4291      	cmp	r1, r2
 8000fde:	d815      	bhi.n	800100c <__udivmoddi4+0x2cc>
 8000fe0:	4644      	mov	r4, r8
 8000fe2:	1a52      	subs	r2, r2, r1
 8000fe4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fe8:	e721      	b.n	8000e2e <__udivmoddi4+0xee>
 8000fea:	1a86      	subs	r6, r0, r2
 8000fec:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	e70e      	b.n	8000e12 <__udivmoddi4+0xd2>
 8000ff4:	3c02      	subs	r4, #2
 8000ff6:	4472      	add	r2, lr
 8000ff8:	e735      	b.n	8000e66 <__udivmoddi4+0x126>
 8000ffa:	3902      	subs	r1, #2
 8000ffc:	4472      	add	r2, lr
 8000ffe:	e6d0      	b.n	8000da2 <__udivmoddi4+0x62>
 8001000:	44f4      	add	ip, lr
 8001002:	3802      	subs	r0, #2
 8001004:	e6e3      	b.n	8000dce <__udivmoddi4+0x8e>
 8001006:	44f4      	add	ip, lr
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x152>
 800100c:	3c02      	subs	r4, #2
 800100e:	4472      	add	r2, lr
 8001010:	e7e7      	b.n	8000fe2 <__udivmoddi4+0x2a2>
 8001012:	3802      	subs	r0, #2
 8001014:	4471      	add	r1, lr
 8001016:	e7d0      	b.n	8000fba <__udivmoddi4+0x27a>
 8001018:	3b02      	subs	r3, #2
 800101a:	443c      	add	r4, r7
 800101c:	e782      	b.n	8000f24 <__udivmoddi4+0x1e4>
 800101e:	3802      	subs	r0, #2
 8001020:	443c      	add	r4, r7
 8001022:	e76a      	b.n	8000efa <__udivmoddi4+0x1ba>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <bsp_init>:
  * @brief  Initialize the bsp modules
  * @param  None
  * @retval Web Server status
  */
int bsp_init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  int status = BSP_ERROR_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]

  /* Initialize GREEN led */
  status |= BSP_LED_Init(LED_GREEN);
 8001032:	2001      	movs	r0, #1
 8001034:	f002 fb5c 	bl	80036f0 <BSP_LED_Init>
 8001038:	4602      	mov	r2, r0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	607b      	str	r3, [r7, #4]

  /* Initialize RED led */
  status |= BSP_LED_Init(LED_RED);
 8001040:	2000      	movs	r0, #0
 8001042:	f002 fb55 	bl	80036f0 <BSP_LED_Init>
 8001046:	4602      	mov	r2, r0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4313      	orrs	r3, r2
 800104c:	607b      	str	r3, [r7, #4]

  return status;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <webserver_console_config>:
  * @brief  Configure the console
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Set parameter to be configured */
  Console_UARTHandle.Instance                    = USART1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <webserver_console_config+0x74>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <webserver_console_config+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
  Console_UARTHandle.Init.BaudRate               = 115200;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <webserver_console_config+0x74>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  Console_UARTHandle.Init.WordLength             = UART_WORDLENGTH_8B;
 800106a:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <webserver_console_config+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  Console_UARTHandle.Init.StopBits               = UART_STOPBITS_1;
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <webserver_console_config+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  Console_UARTHandle.Init.Parity                 = UART_PARITY_NONE;
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <webserver_console_config+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  Console_UARTHandle.Init.Mode                   = UART_MODE_TX_RX;
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <webserver_console_config+0x74>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  Console_UARTHandle.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <webserver_console_config+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  Console_UARTHandle.Init.OverSampling           = UART_OVERSAMPLING_16;
 8001088:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <webserver_console_config+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  Console_UARTHandle.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <webserver_console_config+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  Console_UARTHandle.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <webserver_console_config+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
  Console_UARTHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <webserver_console_config+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Initialize the UART mode */
  if (HAL_UART_Init(&Console_UARTHandle) != HAL_OK)
 80010a0:	480a      	ldr	r0, [pc, #40]	@ (80010cc <webserver_console_config+0x74>)
 80010a2:	f00f fd66 	bl	8010b72 <HAL_UART_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <webserver_console_config+0x5a>
  {
    return CONSOLE_ERROR;
 80010ac:	f06f 0302 	mvn.w	r3, #2
 80010b0:	e009      	b.n	80010c6 <webserver_console_config+0x6e>
  }

  /* Disable the UART FIFO mode */
  if (HAL_UARTEx_DisableFifoMode(&Console_UARTHandle) != HAL_OK)
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <webserver_console_config+0x74>)
 80010b4:	f010 fb7f 	bl	80117b6 <HAL_UARTEx_DisableFifoMode>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <webserver_console_config+0x6c>
  {
    return CONSOLE_ERROR;
 80010be:	f06f 0302 	mvn.w	r3, #2
 80010c2:	e000      	b.n	80010c6 <webserver_console_config+0x6e>
  }

  return WEBSERVER_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002cc 	.word	0x200002cc
 80010d0:	40013800 	.word	0x40013800

080010d4 <webserver_console_print_header>:
  * @brief  Print web server application header in hyperterminal
  * @param  None
  * @retval None
  */
void webserver_console_print_header(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  printf("\r\n");
 80010d8:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <webserver_console_print_header+0x20>)
 80010da:	f014 f807 	bl	80150ec <puts>
  printf("=======================================================================================================\r\n");
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <webserver_console_print_header+0x24>)
 80010e0:	f014 f804 	bl	80150ec <puts>
  printf("============================       STM32U5 Webserver Demonstration        =============================\r\n");
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <webserver_console_print_header+0x28>)
 80010e6:	f014 f801 	bl	80150ec <puts>
  printf("=======================================================================================================\r\n");
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <webserver_console_print_header+0x24>)
 80010ec:	f013 fffe 	bl	80150ec <puts>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08019330 	.word	0x08019330
 80010f8:	08019334 	.word	0x08019334
 80010fc:	080193a0 	.word	0x080193a0

08001100 <webserver_console_get_ssid>:
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_get_ssid(ap_t *net_wifi_registred_hotspot,
                                                   char *SSID)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  char ch;
  uint32_t count = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]

  /* Print get SSID message */
  printf("\r\n");
 800110e:	482b      	ldr	r0, [pc, #172]	@ (80011bc <webserver_console_get_ssid+0xbc>)
 8001110:	f013 ffec 	bl	80150ec <puts>
  printf("*** Please enter your wifi ssid : =====================================================================\r\n");
 8001114:	482a      	ldr	r0, [pc, #168]	@ (80011c0 <webserver_console_get_ssid+0xc0>)
 8001116:	f013 ffe9 	bl	80150ec <puts>

  /* Clear pending characters */
  if (HAL_UART_AbortReceive(&Console_UARTHandle) != HAL_OK)
 800111a:	482a      	ldr	r0, [pc, #168]	@ (80011c4 <webserver_console_get_ssid+0xc4>)
 800111c:	f00f feee 	bl	8010efc <HAL_UART_AbortReceive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <webserver_console_get_ssid+0x2c>
  {
    return CONSOLE_ERROR;
 8001126:	f06f 0302 	mvn.w	r3, #2
 800112a:	e043      	b.n	80011b4 <webserver_console_get_ssid+0xb4>

  /* Repeat receiving character until getting all SSID */
  do
  {
    /* Get entered character */
    if (HAL_UART_Receive(&Console_UARTHandle, (uint8_t *) &ch, 1, HAL_MAX_DELAY) != HAL_OK)
 800112c:	f107 010b 	add.w	r1, r7, #11
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2201      	movs	r2, #1
 8001136:	4823      	ldr	r0, [pc, #140]	@ (80011c4 <webserver_console_get_ssid+0xc4>)
 8001138:	f00f fe09 	bl	8010d4e <HAL_UART_Receive>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <webserver_console_get_ssid+0x48>
    {
      return CONSOLE_ERROR;
 8001142:	f06f 0302 	mvn.w	r3, #2
 8001146:	e035      	b.n	80011b4 <webserver_console_get_ssid+0xb4>
    }

    /* Store entered character */
    SSID[count] = ch;
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	7afa      	ldrb	r2, [r7, #11]
 8001150:	701a      	strb	r2, [r3, #0]
    count++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]

    /* Print entered character */
    if ((ch != 0) && (ch != '\r') && (ch != '\n'))
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <webserver_console_get_ssid+0x72>
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	2b0d      	cmp	r3, #13
 8001162:	d006      	beq.n	8001172 <webserver_console_get_ssid+0x72>
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d003      	beq.n	8001172 <webserver_console_get_ssid+0x72>
    {
      printf("%c",ch);
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	4618      	mov	r0, r3
 800116e:	f013 ff5f 	bl	8015030 <putchar>
    }

  }
  while ((ch != '\r') && (ch != 0) && (ch !='\n'));
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	2b0d      	cmp	r3, #13
 8001176:	d005      	beq.n	8001184 <webserver_console_get_ssid+0x84>
 8001178:	7afb      	ldrb	r3, [r7, #11]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <webserver_console_get_ssid+0x84>
 800117e:	7afb      	ldrb	r3, [r7, #11]
 8001180:	2b0a      	cmp	r3, #10
 8001182:	d1d3      	bne.n	800112c <webserver_console_get_ssid+0x2c>

  /* Clear end of characters symbols */
  do
  {
    SSID[count] = 0;
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    count--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3b01      	subs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]

  }
  while((SSID[count] == '\r') || (SSID[count] == '\n'));
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b0d      	cmp	r3, #13
 800119e:	d0f1      	beq.n	8001184 <webserver_console_get_ssid+0x84>
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0a      	cmp	r3, #10
 80011aa:	d0eb      	beq.n	8001184 <webserver_console_get_ssid+0x84>

  /* Store user SSID */
  net_wifi_registred_hotspot->ssid = SSID;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	601a      	str	r2, [r3, #0]

  return WEBSERVER_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08019330 	.word	0x08019330
 80011c0:	0801940c 	.word	0x0801940c
 80011c4:	200002cc 	.word	0x200002cc

080011c8 <webserver_console_get_password>:
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_get_password(ap_t *net_wifi_registred_hotspot,
                                                       char *PassWord)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  char ch;
  uint32_t count = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Print get PWD message */
  printf("\r\n");
 80011d6:	482e      	ldr	r0, [pc, #184]	@ (8001290 <webserver_console_get_password+0xc8>)
 80011d8:	f013 ff88 	bl	80150ec <puts>
  printf("*** Please enter your wifi password : =================================================================\r\n");
 80011dc:	482d      	ldr	r0, [pc, #180]	@ (8001294 <webserver_console_get_password+0xcc>)
 80011de:	f013 ff85 	bl	80150ec <puts>

  /* Clear pending characters */
  if (HAL_UART_AbortReceive(&Console_UARTHandle) != HAL_OK)
 80011e2:	482d      	ldr	r0, [pc, #180]	@ (8001298 <webserver_console_get_password+0xd0>)
 80011e4:	f00f fe8a 	bl	8010efc <HAL_UART_AbortReceive>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <webserver_console_get_password+0x2c>
  {
    return CONSOLE_ERROR;
 80011ee:	f06f 0302 	mvn.w	r3, #2
 80011f2:	e048      	b.n	8001286 <webserver_console_get_password+0xbe>
  }

  /* Repeat receiving character until getting all SSID */
  do
  {
    if (HAL_UART_Receive(&Console_UARTHandle, (uint8_t *) &ch, 1, HAL_MAX_DELAY) != HAL_OK)
 80011f4:	f107 010b 	add.w	r1, r7, #11
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	2201      	movs	r2, #1
 80011fe:	4826      	ldr	r0, [pc, #152]	@ (8001298 <webserver_console_get_password+0xd0>)
 8001200:	f00f fda5 	bl	8010d4e <HAL_UART_Receive>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <webserver_console_get_password+0x48>
    {
      return CONSOLE_ERROR;
 800120a:	f06f 0302 	mvn.w	r3, #2
 800120e:	e03a      	b.n	8001286 <webserver_console_get_password+0xbe>
    }

    PassWord[count] = ch;
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	7afa      	ldrb	r2, [r7, #11]
 8001218:	701a      	strb	r2, [r3, #0]
    count++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]

    /* Print entered character */
    if ((ch != '\n') && (ch != 0) && (ch != '\r'))
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	2b0a      	cmp	r3, #10
 8001224:	d008      	beq.n	8001238 <webserver_console_get_password+0x70>
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <webserver_console_get_password+0x70>
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	2b0d      	cmp	r3, #13
 8001230:	d002      	beq.n	8001238 <webserver_console_get_password+0x70>
    {
      printf("*");
 8001232:	202a      	movs	r0, #42	@ 0x2a
 8001234:	f013 fefc 	bl	8015030 <putchar>
    }

  }
  while ((ch != '\n') && (ch != '\r') && (ch != 0));
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d005      	beq.n	800124a <webserver_console_get_password+0x82>
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	2b0d      	cmp	r3, #13
 8001242:	d002      	beq.n	800124a <webserver_console_get_password+0x82>
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1d4      	bne.n	80011f4 <webserver_console_get_password+0x2c>

  /* Clear end of characters symbols */
  do
  {
    PassWord[count] = 0;
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
    count--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]

  }
  while ((PassWord[count] == '\n') || (PassWord[count] == ' ') || (PassWord[count] == '\r'));
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d0f1      	beq.n	800124a <webserver_console_get_password+0x82>
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b20      	cmp	r3, #32
 8001270:	d0eb      	beq.n	800124a <webserver_console_get_password+0x82>
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b0d      	cmp	r3, #13
 800127c:	d0e5      	beq.n	800124a <webserver_console_get_password+0x82>

  /* Store user PWD */
  net_wifi_registred_hotspot->pwd = PassWord;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	605a      	str	r2, [r3, #4]

  return WEBSERVER_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	08019330 	.word	0x08019330
 8001294:	08019478 	.word	0x08019478
 8001298:	200002cc 	.word	0x200002cc

0800129c <__io_putchar>:

/**
  * @brief  Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  while (HAL_OK != HAL_UART_Transmit(&Console_UARTHandle, (uint8_t *) &ch, 1, 30000))
 80012a4:	bf00      	nop
 80012a6:	1d39      	adds	r1, r7, #4
 80012a8:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012ac:	2201      	movs	r2, #1
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <__io_putchar+0x28>)
 80012b0:	f00f fcaf 	bl	8010c12 <HAL_UART_Transmit>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f5      	bne.n	80012a6 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200002cc 	.word	0x200002cc

080012c8 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  char ch;

  while (HAL_OK != HAL_UART_Receive(&Console_UARTHandle, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 80012ce:	bf00      	nop
 80012d0:	1df9      	adds	r1, r7, #7
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2201      	movs	r2, #1
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <__io_getchar+0x28>)
 80012da:	f00f fd38 	bl	8010d4e <HAL_UART_Receive>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f5      	bne.n	80012d0 <__io_getchar+0x8>
  {
    ;
  }

  return ch;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002cc 	.word	0x200002cc

080012f4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
     - Configure the Flash prefetch
     - Configure the Systick to generate an interrupt each 1 msec
     - Set NVIC Group Priority to 3
     - Low Level Initialization
  */
  HAL_Init();
 80012f8:	f007 ff26 	bl	8009148 <HAL_Init>

  /* Enable the Instruction Cache */
  instruction_cache_enable();
 80012fc:	f000 fac5 	bl	800188a <instruction_cache_enable>

  /* Configure the System clock to have a frequency of 120 MHz */
  system_clock_config();
 8001300:	f000 facc 	bl	800189c <system_clock_config>

  /* Initialize bsp resources */
  bsp_init();
 8001304:	f7ff fe90 	bl	8001028 <bsp_init>

  /* Demonstration entry */
  app_entry();
 8001308:	f001 fc8a 	bl	8002c20 <app_entry>

  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <main+0x18>

08001310 <HAL_MspInit>:

/**
  * Initializes the Global MCU Support Package.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
  /* Enable VDDIO2 supply */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_MspInit+0x70>)
 8001318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800131c:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <HAL_MspInit+0x70>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_MspInit+0x70>)
 8001328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001334:	f00a fa6e 	bl	800b814 <HAL_PWREx_EnableVddIO2>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_MspInit+0x70>)
 800133a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <HAL_MspInit+0x70>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <HAL_MspInit+0x70>)
 800134a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_MspInit+0x70>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135c:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_MspInit+0x70>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_MspInit+0x70>)
 8001368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001374:	f00a fa5e 	bl	800b834 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	46020c00 	.word	0x46020c00

08001384 <HAL_SPI_MspInit>:
* @brief  SPI MSP Initialization
* @param  hspi : SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0be      	sub	sp, #248	@ 0xf8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct       = {0};
 800138c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	22c8      	movs	r2, #200	@ 0xc8
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f014 f8e7 	bl	8015578 <memset>

  /* Check SPI instance */
  if (hspi->Instance == SPI2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <HAL_SPI_MspInit+0xf4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d15c      	bne.n	800146e <HAL_SPI_MspInit+0xea>
  {
    /* Peripherals clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013b4:	4b31      	ldr	r3, [pc, #196]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ba:	4a30      	ldr	r2, [pc, #192]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPDMA1_CLK_ENABLE();
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d8:	4a28      	ldr	r2, [pc, #160]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <HAL_SPI_MspInit+0xf8>)
 8001402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

    /* Configure peripheral kernel clock */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800140e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection   = RCC_SPI2CLKSOURCE_PCLK1;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f00b fcc1 	bl	800cdac <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_SPI_MspInit+0xb0>
    {
      webserver_process_error();
 8001430:	f001 fc28 	bl	8002c84 <webserver_process_error>
    }

    /* SPI2 GPIO Configuration */
    GPIO_InitStruct.Pin       = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1;
 8001434:	231a      	movs	r3, #26
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800144c:	2305      	movs	r3, #5
 800144e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <HAL_SPI_MspInit+0xfc>)
 800145a:	f008 f99d 	bl	8009798 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	203c      	movs	r0, #60	@ 0x3c
 8001464:	f008 f80a 	bl	800947c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001468:	203c      	movs	r0, #60	@ 0x3c
 800146a:	f008 f821 	bl	80094b0 <HAL_NVIC_EnableIRQ>
  }
}
 800146e:	bf00      	nop
 8001470:	37f8      	adds	r7, #248	@ 0xf8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40003800 	.word	0x40003800
 800147c:	46020c00 	.word	0x46020c00
 8001480:	42020c00 	.word	0x42020c00

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0bc      	sub	sp, #240	@ 0xf0
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	22c8      	movs	r2, #200	@ 0xc8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f014 f867 	bl	8015578 <memset>

  /* Initializes the peripherals clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014aa:	f04f 0201 	mov.w	r2, #1
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b6:	2300      	movs	r3, #0
 80014b8:	663b      	str	r3, [r7, #96]	@ 0x60
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f00b fc74 	bl	800cdac <HAL_RCCEx_PeriphCLKConfig>

  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

  /* USART1 GPIO Configuration */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e8:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001500:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800151a:	2307      	movs	r3, #7
 800151c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001524:	4619      	mov	r1, r3
 8001526:	4808      	ldr	r0, [pc, #32]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 8001528:	f008 f936 	bl	8009798 <HAL_GPIO_Init>

  /* USART1 interrupt Init */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	203d      	movs	r0, #61	@ 0x3d
 8001532:	f007 ffa3 	bl	800947c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001536:	203d      	movs	r0, #61	@ 0x3d
 8001538:	f007 ffba 	bl	80094b0 <HAL_NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	37f0      	adds	r7, #240	@ 0xf0
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	46020c00 	.word	0x46020c00
 8001548:	42020000 	.word	0x42020000

0800154c <HAL_LPTIM_MspInit>:
* @brief  LPTIM MSP Init
* @param  hlptim : LPTIM handle
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ce      	sub	sp, #312	@ 0x138
 8001550:	af00      	add	r7, sp, #0
 8001552:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001556:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800155a:	6018      	str	r0, [r3, #0]
  RCC_OscInitTypeDef       RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Enable LSE clock */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800155c:	2304      	movs	r3, #4
 800155e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001562:	2381      	movs	r3, #129	@ 0x81
 8001564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001572:	4618      	mov	r0, r3
 8001574:	f00a f96e 	bl	800b854 <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_LPTIM_MspInit+0x36>
  {
    webserver_process_error();
 800157e:	f001 fb81 	bl	8002c84 <webserver_process_error>
  }

  /* Select the LSE clock as LPTIM peripheral clock */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001582:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001586:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800158a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9c1 2300 	strd	r2, r3, [r1]
  RCC_PeriphCLKInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001596:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800159a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800159e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a2:	679a      	str	r2, [r3, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00b fbff 	bl	800cdac <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_LPTIM_MspInit+0x6c>
  {
    webserver_process_error();
 80015b4:	f001 fb66 	bl	8002c84 <webserver_process_error>
  }

  /* Enable LPTIM clock */
  __HAL_RCC_LPTIM1_CLK_ENABLE();
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015be:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015ce:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80015d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015e4:	681b      	ldr	r3, [r3, #0]

  /* Force the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_FORCE_RESET();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015f2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Release the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_RELEASE_RESET();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015fc:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_LPTIM_MspInit+0xd4>)
 80015fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001602:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* USART1 interrupt DeInit */
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 15, 15);
 8001606:	220f      	movs	r2, #15
 8001608:	210f      	movs	r1, #15
 800160a:	2043      	movs	r0, #67	@ 0x43
 800160c:	f007 ff36 	bl	800947c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001610:	2043      	movs	r0, #67	@ 0x43
 8001612:	f007 ff4d 	bl	80094b0 <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	46020c00 	.word	0x46020c00

08001624 <NMI_Handler>:
/**********************************************************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <SecureFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001682:	f007 fdff 	bl	8009284 <HAL_IncTick>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&Wifi_SPIHandle);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <SPI2_IRQHandler+0x10>)
 8001692:	f00e ff8d 	bl	80105b0 <HAL_SPI_IRQHandler>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000bdc 	.word	0x20000bdc

080016a0 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MXCHIP_NOTIFY_Pin);
 80016a4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016a8:	f008 fb76 	bl	8009d98 <HAL_GPIO_EXTI_IRQHandler>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(MXCHIP_FLOW_Pin);
 80016b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016b8:	f008 fb6e 	bl	8009d98 <HAL_GPIO_EXTI_IRQHandler>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&LPTIMHandle);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <LPTIM1_IRQHandler+0x10>)
 80016c6:	f009 fc3a 	bl	800af3e <HAL_LPTIM_IRQHandler>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000364 	.word	0x20000364

080016d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ee:	f013 ffd9 	bl	80156a4 <__errno>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2216      	movs	r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
	return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_exit>:

void _exit (int status)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001716:	bf00      	nop
 8001718:	e7fd      	b.n	8001716 <_exit+0x12>

0800171a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e00a      	b.n	8001742 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172c:	f7ff fdcc 	bl	80012c8 <__io_getchar>
 8001730:	4601      	mov	r1, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbf0      	blt.n	800172c <_read+0x12>
	}

return len;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e009      	b.n	800177a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fd94 	bl	800129c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbf1      	blt.n	8001766 <_write+0x12>
	}
	return len;
 8001782:	687b      	ldr	r3, [r7, #4]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_close>:

int _close(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b4:	605a      	str	r2, [r3, #4]
	return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_isatty>:

int _isatty(int file)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f013 ff3e 	bl	80156a4 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200c0000 	.word	0x200c0000
 8001854:	00008000 	.word	0x00008000
 8001858:	20000360 	.word	0x20000360
 800185c:	200034b8 	.word	0x200034b8

08001860 <system_init>:
  * @brief  Initialize the system application
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Configure the console */
  if (webserver_console_config() != WEBSERVER_OK)
 8001864:	f7ff fbf8 	bl	8001058 <webserver_console_config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <system_init+0x14>
  {
    return SYSTEM_ERROR;
 800186e:	f06f 0301 	mvn.w	r3, #1
 8001872:	e008      	b.n	8001886 <system_init+0x26>
  }

  /* Configure the LPTIM peripheral */
  if (lptim_config() != WEBSERVER_OK)
 8001874:	f000 f87e 	bl	8001974 <lptim_config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <system_init+0x24>
  {
    return SYSTEM_ERROR;
 800187e:	f06f 0301 	mvn.w	r3, #1
 8001882:	e000      	b.n	8001886 <system_init+0x26>
  }

  return WEBSERVER_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}

0800188a <instruction_cache_enable>:
  * @brief  Enable ICACHE with 1-way set-associative configuration.
  * @param  None
  * @retval None
  */
void instruction_cache_enable(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* Configure ICACHE associativity mode */
  HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 800188e:	2000      	movs	r0, #0
 8001890:	f009 f934 	bl	800aafc <HAL_ICACHE_ConfigAssociativityMode>

  /* Enable ICACHE */
  HAL_ICACHE_Enable();
 8001894:	f009 f952 	bl	800ab3c <HAL_ICACHE_Enable>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <system_clock_config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_clock_config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09e      	sub	sp, #120	@ 0x78
 80018a0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2260      	movs	r2, #96	@ 0x60
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f013 fe5c 	bl	8015578 <memset>

  /* Configure the main internal regulator output voltage */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018c0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80018c4:	f009 ff1a 	bl	800b6fc <HAL_PWREx_ControlVoltageScaling>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <system_clock_config+0x38>
  {
    return SYSTEM_ERROR;
 80018ce:	f06f 0301 	mvn.w	r3, #1
 80018d2:	e04a      	b.n	800196a <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 80018d4:	2338      	movs	r3, #56	@ 0x38
 80018d6:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSI48State          = RCC_HSI48_ON;
 80018d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 80018de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80018e8:	2310      	movs	r3, #16
 80018ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIDiv              = RCC_LSI_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80018f4:	2302      	movs	r3, #2
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80018f8:	2301      	movs	r3, #1
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMBOOST       = RCC_PLLMBOOST_DIV4;
 80018fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001900:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM            = 3;
 8001902:	2303      	movs	r3, #3
 8001904:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN            = 15;
 8001906:	230f      	movs	r3, #15
 8001908:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP            = 2;
 800190a:	2302      	movs	r3, #2
 800190c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ            = 2;
 800190e:	2302      	movs	r3, #2
 8001910:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR            = 2;
 8001912:	2302      	movs	r3, #2
 8001914:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLLVCIRANGE_1;
 8001916:	230c      	movs	r3, #12
 8001918:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4618      	mov	r0, r3
 8001922:	f009 ff97 	bl	800b854 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <system_clock_config+0x96>
  {
    return SYSTEM_ERROR;
 800192c:	f06f 0301 	mvn.w	r3, #1
 8001930:	e01b      	b.n	800196a <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8001932:	231f      	movs	r3, #31
 8001934:	663b      	str	r3, [r7, #96]	@ 0x60
                                     RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001936:	2303      	movs	r3, #3
 8001938:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800194a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800194e:	2103      	movs	r1, #3
 8001950:	4618      	mov	r0, r3
 8001952:	f00a fe5b 	bl	800c60c <HAL_RCC_ClockConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <system_clock_config+0xc6>
  {
    return SYSTEM_ERROR;
 800195c:	f06f 0301 	mvn.w	r3, #1
 8001960:	e003      	b.n	800196a <system_clock_config+0xce>
  }

  /* Configure the Systick */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001962:	2004      	movs	r0, #4
 8001964:	f007 fdd4 	bl	8009510 <HAL_SYSTICK_CLKSourceConfig>

  return WEBSERVER_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3778      	adds	r7, #120	@ 0x78
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <lptim_config>:
  * @brief  Initialize the LPTIM peripheral
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef lptim_config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
   *  Counter Trigger = Software trigger
   *  Output Polarity = High
   *  Update mode     = Immediate (Registers are immediately updated after any
   *                    write access)
   */
  LPTIMHandle.Instance = LPTIM1;
 800197a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <lptim_config+0xb0>)
 800197c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a28 <lptim_config+0xb4>)
 800197e:	601a      	str	r2, [r3, #0]

  LPTIMHandle.Init.Clock.Source                  = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001980:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <lptim_config+0xb0>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  LPTIMHandle.Init.Clock.Prescaler               = LPTIM_PRESCALER_DIV1;
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <lptim_config+0xb0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  LPTIMHandle.Init.CounterSource                 = LPTIM_COUNTERSOURCE_INTERNAL;
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <lptim_config+0xb0>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28
  LPTIMHandle.Init.UltraLowPowerClock.Polarity   = LPTIM_CLOCKPOLARITY_RISING;
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <lptim_config+0xb0>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  LPTIMHandle.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001998:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <lptim_config+0xb0>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  LPTIMHandle.Init.Trigger.Source                = LPTIM_TRIGSOURCE_SOFTWARE;
 800199e:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <lptim_config+0xb0>)
 80019a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a4:	615a      	str	r2, [r3, #20]
  LPTIMHandle.Init.Trigger.ActiveEdge            = LPTIM_ACTIVEEDGE_RISING;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <lptim_config+0xb0>)
 80019a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019ac:	619a      	str	r2, [r3, #24]
  LPTIMHandle.Init.Period                        = PERIOD_VALUE;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <lptim_config+0xb0>)
 80019b0:	f240 6267 	movw	r2, #1639	@ 0x667
 80019b4:	621a      	str	r2, [r3, #32]
  LPTIMHandle.Init.RepetitionCounter             = 0;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <lptim_config+0xb0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize LPTIM peripheral according to the passed parameters */
  if (HAL_LPTIM_Init(&LPTIMHandle) != HAL_OK)
 80019bc:	4819      	ldr	r0, [pc, #100]	@ (8001a24 <lptim_config+0xb0>)
 80019be:	f009 f8cd 	bl	800ab5c <HAL_LPTIM_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <lptim_config+0x5a>
  {
    return SYSTEM_ERROR;
 80019c8:	f06f 0301 	mvn.w	r3, #1
 80019cc:	e026      	b.n	8001a1c <lptim_config+0xa8>
  }

  /* Register LPTIM callback */
  if (HAL_LPTIM_RegisterCallback(&LPTIMHandle, HAL_LPTIM_UPDATE_EVENT_CB_ID, LPTIM_UpdateEventCallback) != HAL_OK)
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <lptim_config+0xb8>)
 80019d0:	2109      	movs	r1, #9
 80019d2:	4814      	ldr	r0, [pc, #80]	@ (8001a24 <lptim_config+0xb0>)
 80019d4:	f009 fcb8 	bl	800b348 <HAL_LPTIM_RegisterCallback>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <lptim_config+0x70>
  {
    return SYSTEM_ERROR;
 80019de:	f06f 0301 	mvn.w	r3, #1
 80019e2:	e01b      	b.n	8001a1c <lptim_config+0xa8>
  /*
  *  Period = 99
  *  Pulse  = 49
  *  According to this configuration, the duty cycle will be equal to 50%
  */
  sConfig.Pulse      = PULSE_VALUE;
 80019e4:	f240 3333 	movw	r3, #819	@ 0x333
 80019e8:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = LPTIM_OCPOLARITY_LOW;
 80019ea:	2301      	movs	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&LPTIMHandle, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <lptim_config+0xb0>)
 80019f6:	f009 fa6f 	bl	800aed8 <HAL_LPTIM_OC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <lptim_config+0x92>
  {
    return SYSTEM_ERROR;
 8001a00:	f06f 0301 	mvn.w	r3, #1
 8001a04:	e00a      	b.n	8001a1c <lptim_config+0xa8>
  }

  /* Start the LPTIM PWM */
  if (HAL_LPTIM_PWM_Start_IT(&LPTIMHandle, LPTIM_CHANNEL_1) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <lptim_config+0xb0>)
 8001a0a:	f009 f9b3 	bl	800ad74 <HAL_LPTIM_PWM_Start_IT>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <lptim_config+0xa6>
  {
    return SYSTEM_ERROR;
 8001a14:	f06f 0301 	mvn.w	r3, #1
 8001a18:	e000      	b.n	8001a1c <lptim_config+0xa8>
  }

  return WEBSERVER_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000364 	.word	0x20000364
 8001a28:	46004400 	.word	0x46004400
 8001a2c:	08001a31 	.word	0x08001a31

08001a30 <LPTIM_UpdateEventCallback>:
  * @brief  Update event callback in non-blocking mode.
  * @param  hlptim : Pointer to LPTIM handle
  * @retval None
  */
static void LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Toggle GREEN led */
  BSP_LED_Toggle(LED_GREEN);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f001 fef5 	bl	8003828 <BSP_LED_Toggle>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a80 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a4c:	f007 fb44 	bl	80090d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a52:	e003      	b.n	8001a5c <LoopCopyDataInit>

08001a54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a5a:	3104      	adds	r1, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a5c:	480a      	ldr	r0, [pc, #40]	@ (8001a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a64:	d3f6      	bcc.n	8001a54 <CopyDataInit>
	ldr	r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a68:	e002      	b.n	8001a70 <LoopFillZerobss>

08001a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a6c:	f842 3b04 	str.w	r3, [r2], #4

08001a70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <LoopForever+0x16>)
	cmp	r2, r3
 8001a72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a74:	d3f9      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f013 fe1b 	bl	80156b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff fc3b 	bl	80012f4 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a80:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a84:	0818ced0 	.word	0x0818ced0
	ldr	r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a8c:	200002b0 	.word	0x200002b0
	ldr	r2, =_sbss
 8001a90:	200002b0 	.word	0x200002b0
	ldr	r3, = _ebss
 8001a94:	200034b8 	.word	0x200034b8

08001a98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_IRQHandler>
	...

08001a9c <webserver_http_encode_html_response>:
  * @param  html_size     : html body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_html_response(char *html_response,
                                                            int html_size)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(html_response, 0, strlen((char *)html_response));
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe fbe7 	bl	800028c <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f013 fd57 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(html_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001aca:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f013 fe14 	bl	80156fe <strcpy>

  /* Add http server header */
  strcat(html_response, http_headers[HTTP_HEADER_SERVER]);
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f013 fd53 	bl	8015588 <strcat>

  /* Add http control headers */
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_ORIGIN]);
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f013 fd4d 	bl	8015588 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_METHODS]);
 8001aee:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f013 fd47 	bl	8015588 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_HEADERS]);
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f013 fd41 	bl	8015588 <strcat>

  /* Add http content type header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f013 fd3b 	bl	8015588 <strcat>
  strcat(html_response, http_content_types[HTTP_HEADER_CONTENT_HTML]);
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <webserver_http_encode_html_response+0xf4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f013 fd35 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f013 fd2f 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f013 fd29 	bl	8015588 <strcat>
  sprintf(body_length, "%d", html_size);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4915      	ldr	r1, [pc, #84]	@ (8001b94 <webserver_http_encode_html_response+0xf8>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f013 fbcc 	bl	80152dc <siprintf>
  strcat(html_response, body_length);
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f013 fd1c 	bl	8015588 <strcat>
  strcat(html_response, "\r\n");
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fb9b 	bl	800028c <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <webserver_http_encode_html_response+0xfc>)
 8001b60:	8811      	ldrh	r1, [r2, #0]
 8001b62:	7892      	ldrb	r2, [r2, #2]
 8001b64:	8019      	strh	r1, [r3, #0]
 8001b66:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(html_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f013 fd0a 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(html_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <webserver_http_encode_html_response+0xf0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f013 fd04 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000030 	.word	0x20000030
 8001b94:	080196b0 	.word	0x080196b0
 8001b98:	080196b4 	.word	0x080196b4

08001b9c <webserver_http_encode_css_response>:
  * @param  css_size     : css body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_css_response(char *css_response,
                                                           int css_size)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(css_response, 0, strlen((char *)css_response));
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7fe fb67 	bl	800028c <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f013 fcd7 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(css_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f013 fd94 	bl	80156fe <strcpy>

  /* Add http server header */
  strcat(css_response, http_headers[HTTP_HEADER_SERVER]);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f013 fcd3 	bl	8015588 <strcat>

  /* Add http content type header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f013 fccd 	bl	8015588 <strcat>
  strcat(css_response, http_content_types[HTTP_HEADER_CONTENT_CSS]);
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <webserver_http_encode_css_response+0xd0>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f013 fcc7 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f013 fcc1 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f013 fcbb 	bl	8015588 <strcat>
  sprintf(body_length, "%d", css_size);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4915      	ldr	r1, [pc, #84]	@ (8001c70 <webserver_http_encode_css_response+0xd4>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f013 fb5e 	bl	80152dc <siprintf>
  strcat(css_response, body_length);
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f013 fcae 	bl	8015588 <strcat>
  strcat(css_response, "\r\n");
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7fe fb2d 	bl	800028c <strlen>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c74 <webserver_http_encode_css_response+0xd8>)
 8001c3c:	8811      	ldrh	r1, [r2, #0]
 8001c3e:	7892      	ldrb	r2, [r2, #2]
 8001c40:	8019      	strh	r1, [r3, #0]
 8001c42:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(css_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f013 fc9c 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(css_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <webserver_http_encode_css_response+0xcc>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f013 fc96 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000030 	.word	0x20000030
 8001c70:	080196b0 	.word	0x080196b0
 8001c74:	080196b4 	.word	0x080196b4

08001c78 <webserver_http_encode_js_response>:
  * @param  js_size     : js body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_js_response(char *js_response,
                                                          int js_size)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(js_response, 0, strlen((char *)js_response));
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7fe faf9 	bl	800028c <strlen>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f013 fc69 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(js_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001ca6:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f013 fd26 	bl	80156fe <strcpy>

  /* Add http server header */
  strcat(js_response, http_headers[HTTP_HEADER_SERVER]);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f013 fc65 	bl	8015588 <strcat>

  /* Add http content type header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001cbe:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f013 fc5f 	bl	8015588 <strcat>
  strcat(js_response, http_content_types[HTTP_HEADER_CONTENT_JS]);
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <webserver_http_encode_js_response+0xd0>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f013 fc59 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f013 fc53 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f013 fc4d 	bl	8015588 <strcat>
  sprintf(body_length, "%d", js_size);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	4915      	ldr	r1, [pc, #84]	@ (8001d4c <webserver_http_encode_js_response+0xd4>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f013 faf0 	bl	80152dc <siprintf>
  strcat(js_response, body_length);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f013 fc40 	bl	8015588 <strcat>
  strcat(js_response, "\r\n");
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7fe fabf 	bl	800028c <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a0e      	ldr	r2, [pc, #56]	@ (8001d50 <webserver_http_encode_js_response+0xd8>)
 8001d18:	8811      	ldrh	r1, [r2, #0]
 8001d1a:	7892      	ldrb	r2, [r2, #2]
 8001d1c:	8019      	strh	r1, [r3, #0]
 8001d1e:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(js_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f013 fc2e 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(js_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <webserver_http_encode_js_response+0xcc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f013 fc28 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000030 	.word	0x20000030
 8001d4c:	080196b0 	.word	0x080196b0
 8001d50:	080196b4 	.word	0x080196b4

08001d54 <webserver_http_encode_favicon_response>:
  * @param  favicon_size     : favicon body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_favicon_response(char *favicon_response,
                                                               int favicon_size)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(favicon_response, 0, strlen((char *)favicon_response));
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fa8b 	bl	800028c <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f013 fbfb 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(favicon_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f013 fcb8 	bl	80156fe <strcpy>

  /* Add http server header */
  strcat(favicon_response, http_headers[HTTP_HEADER_SERVER]);
 8001d8e:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4619      	mov	r1, r3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f013 fbf7 	bl	8015588 <strcat>

  /* Add http cache control header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CACHE_CONTROL]);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f013 fbf1 	bl	8015588 <strcat>

  /* Add http content type header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f013 fbeb 	bl	8015588 <strcat>
  strcat(favicon_response, http_content_types[HTTP_HEADER_CONTENT_FAVICON]);
 8001db2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e30 <webserver_http_encode_favicon_response+0xdc>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f013 fbe5 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f013 fbdf 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f013 fbd9 	bl	8015588 <strcat>
  sprintf(body_length, "%d", favicon_size);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4915      	ldr	r1, [pc, #84]	@ (8001e34 <webserver_http_encode_favicon_response+0xe0>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f013 fa7c 	bl	80152dc <siprintf>
  strcat(favicon_response, body_length);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f013 fbcc 	bl	8015588 <strcat>
  strcat(favicon_response, "\r\n");
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7fe fa4b 	bl	800028c <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001e38 <webserver_http_encode_favicon_response+0xe4>)
 8001e00:	8811      	ldrh	r1, [r2, #0]
 8001e02:	7892      	ldrb	r2, [r2, #2]
 8001e04:	8019      	strh	r1, [r3, #0]
 8001e06:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f013 fbba 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(favicon_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <webserver_http_encode_favicon_response+0xd8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f013 fbb4 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000030 	.word	0x20000030
 8001e34:	080196b0 	.word	0x080196b0
 8001e38:	080196b4 	.word	0x080196b4

08001e3c <webserver_http_encode_sensor_response>:
  * @param  sensor_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_sensor_response(char *sensor_response,
                                                              int sensor_size)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(sensor_response, 0, strlen(sensor_response));
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7fe fa17 	bl	800028c <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f013 fb87 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(sensor_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <webserver_http_encode_sensor_response+0xb4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f013 fc44 	bl	80156fe <strcpy>

  /* Add http content type header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <webserver_http_encode_sensor_response+0xb4>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f013 fb83 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <webserver_http_encode_sensor_response+0xb4>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f013 fb7d 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <webserver_http_encode_sensor_response+0xb4>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f013 fb77 	bl	8015588 <strcat>
  sprintf(body_length, "%d", sensor_size);
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4914      	ldr	r1, [pc, #80]	@ (8001ef4 <webserver_http_encode_sensor_response+0xb8>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f013 fa1a 	bl	80152dc <siprintf>
  strcat(sensor_response, body_length);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f013 fb6a 	bl	8015588 <strcat>
  strcat(sensor_response, "\r\n");
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe f9e9 	bl	800028c <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <webserver_http_encode_sensor_response+0xbc>)
 8001ec4:	8811      	ldrh	r1, [r2, #0]
 8001ec6:	7892      	ldrb	r2, [r2, #2]
 8001ec8:	8019      	strh	r1, [r3, #0]
 8001eca:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <webserver_http_encode_sensor_response+0xb4>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f013 fb58 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(sensor_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <webserver_http_encode_sensor_response+0xb4>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f013 fb52 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	080196b0 	.word	0x080196b0
 8001ef8:	080196b4 	.word	0x080196b4

08001efc <webserver_http_encode_woff2_response>:
  * @param  woff2_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_woff2_response(char *woff2_response,
                                                             int woff2_size)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(woff2_response, 0, strlen(woff2_response));
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe f9b7 	bl	800028c <strlen>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f013 fb27 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(woff2_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001f2a:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <webserver_http_encode_woff2_response+0xb4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f013 fbe4 	bl	80156fe <strcpy>

  /* Add http content type header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <webserver_http_encode_woff2_response+0xb4>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f013 fb23 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <webserver_http_encode_woff2_response+0xb4>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4619      	mov	r1, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f013 fb1d 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <webserver_http_encode_woff2_response+0xb4>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f013 fb17 	bl	8015588 <strcat>
  sprintf(body_length, "%d", woff2_size);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4914      	ldr	r1, [pc, #80]	@ (8001fb4 <webserver_http_encode_woff2_response+0xb8>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f013 f9ba 	bl	80152dc <siprintf>
  strcat(woff2_response, body_length);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f013 fb0a 	bl	8015588 <strcat>
  strcat(woff2_response, "\r\n");
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe f989 	bl	800028c <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <webserver_http_encode_woff2_response+0xbc>)
 8001f84:	8811      	ldrh	r1, [r2, #0]
 8001f86:	7892      	ldrb	r2, [r2, #2]
 8001f88:	8019      	strh	r1, [r3, #0]
 8001f8a:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <webserver_http_encode_woff2_response+0xb4>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f013 faf8 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(woff2_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <webserver_http_encode_woff2_response+0xb4>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f013 faf2 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	080196b0 	.word	0x080196b0
 8001fb8:	080196b4 	.word	0x080196b4

08001fbc <webserver_http_encode_json_response>:
  * @param  json_size     : json body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_json_response(char *json_response,
                                                            int json_size)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(json_response, 0, strlen(json_response));
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe f957 	bl	800028c <strlen>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f013 fac7 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(json_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001fea:	4b24      	ldr	r3, [pc, #144]	@ (800207c <webserver_http_encode_json_response+0xc0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f013 fb84 	bl	80156fe <strcpy>

  /* Add http content type header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <webserver_http_encode_json_response+0xc0>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f013 fac3 	bl	8015588 <strcat>
  strcat(json_response, http_content_types[HTTP_HEADER_CONTENT_JSON]);
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <webserver_http_encode_json_response+0xc4>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f013 fabd 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <webserver_http_encode_json_response+0xc0>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f013 fab7 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <webserver_http_encode_json_response+0xc0>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f013 fab1 	bl	8015588 <strcat>
  sprintf(body_length, "%d", json_size);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4915      	ldr	r1, [pc, #84]	@ (8002084 <webserver_http_encode_json_response+0xc8>)
 800202e:	4618      	mov	r0, r3
 8002030:	f013 f954 	bl	80152dc <siprintf>
  strcat(json_response, body_length);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f013 faa4 	bl	8015588 <strcat>
  strcat(json_response, "\r\n");
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7fe f923 	bl	800028c <strlen>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a0e      	ldr	r2, [pc, #56]	@ (8002088 <webserver_http_encode_json_response+0xcc>)
 8002050:	8811      	ldrh	r1, [r2, #0]
 8002052:	7892      	ldrb	r2, [r2, #2]
 8002054:	8019      	strh	r1, [r3, #0]
 8002056:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(json_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <webserver_http_encode_json_response+0xc0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f013 fa92 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(json_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <webserver_http_encode_json_response+0xc0>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f013 fa8c 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000
 8002080:	20000030 	.word	0x20000030
 8002084:	080196b0 	.word	0x080196b0
 8002088:	080196b4 	.word	0x080196b4

0800208c <webserver_http_encode_image_response>:
  * @param  image_size     : image body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_image_response(char *image_response,
                                                             int image_size)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(image_response, 0, strlen(image_response));
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe f8ef 	bl	800028c <strlen>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f013 fa5f 	bl	8015578 <memset>

  /* Add http accept header */
  strcpy(image_response, http_headers[HTTP_HEADER_ACCEPT]);
 80020ba:	4b24      	ldr	r3, [pc, #144]	@ (800214c <webserver_http_encode_image_response+0xc0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f013 fb1c 	bl	80156fe <strcpy>

  /* Add http content type header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <webserver_http_encode_image_response+0xc0>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f013 fa5b 	bl	8015588 <strcat>
  strcat(image_response, http_content_types[HTTP_HEADER_CONTENT_IMAGE]);
 80020d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <webserver_http_encode_image_response+0xc4>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4619      	mov	r1, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f013 fa55 	bl	8015588 <strcat>

  /* Add http content range header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 80020de:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <webserver_http_encode_image_response+0xc0>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f013 fa4f 	bl	8015588 <strcat>

  /* Add http content length header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <webserver_http_encode_image_response+0xc0>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f013 fa49 	bl	8015588 <strcat>
  sprintf(body_length, "%d", image_size);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4915      	ldr	r1, [pc, #84]	@ (8002154 <webserver_http_encode_image_response+0xc8>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f013 f8ec 	bl	80152dc <siprintf>
  strcat(image_response, body_length);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f013 fa3c 	bl	8015588 <strcat>
  strcat(image_response, "\r\n");
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe f8bb 	bl	800028c <strlen>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a0e      	ldr	r2, [pc, #56]	@ (8002158 <webserver_http_encode_image_response+0xcc>)
 8002120:	8811      	ldrh	r1, [r2, #0]
 8002122:	7892      	ldrb	r2, [r2, #2]
 8002124:	8019      	strh	r1, [r3, #0]
 8002126:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(image_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <webserver_http_encode_image_response+0xc0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f013 fa2a 	bl	8015588 <strcat>

  /* Add http end of headers */
  strcat(image_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <webserver_http_encode_image_response+0xc0>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f013 fa24 	bl	8015588 <strcat>

  return WEBSERVER_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000000 	.word	0x20000000
 8002150:	20000030 	.word	0x20000030
 8002154:	080196b0 	.word	0x080196b0
 8002158:	080196b4 	.word	0x080196b4

0800215c <webserver_http_start>:
  * @brief  Start HTTP web server process
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_http_start(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b090      	sub	sp, #64	@ 0x40
 8002160:	af02      	add	r7, sp, #8
  /* The IPv4 network socket for this server, to bind with the port to listen to. */
  struct net_sockaddr_in s_addr_in = {0};
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  net_ip_addr_t ip_addr_in = {0};
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  int32_t timeout = MX_WIFI_CMD_TIMEOUT;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	61bb      	str	r3, [r7, #24]
  int32_t sock = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Create a TCP socket. */
  printf("\r\n");
 800217e:	485a      	ldr	r0, [pc, #360]	@ (80022e8 <webserver_http_start+0x18c>)
 8002180:	f012 ffb4 	bl	80150ec <puts>
  printf("*** Create TCP socket\r\n");
 8002184:	4859      	ldr	r0, [pc, #356]	@ (80022ec <webserver_http_start+0x190>)
 8002186:	f012 ffb1 	bl	80150ec <puts>
  if ((sock = net_socket(NET_AF_INET, NET_SOCK_STREAM, NET_IPPROTO_TCP)) < 0)
 800218a:	2206      	movs	r2, #6
 800218c:	2101      	movs	r1, #1
 800218e:	2002      	movs	r0, #2
 8002190:	f010 f99a 	bl	80124c8 <net_socket>
 8002194:	6378      	str	r0, [r7, #52]	@ 0x34
 8002196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002198:	2b00      	cmp	r3, #0
 800219a:	da05      	bge.n	80021a8 <webserver_http_start+0x4c>
  {
    printf("*** Fail : Socket not created !!!!\r\n");
 800219c:	4854      	ldr	r0, [pc, #336]	@ (80022f0 <webserver_http_start+0x194>)
 800219e:	f012 ffa5 	bl	80150ec <puts>
    return SOCKET_ERROR;
 80021a2:	f06f 0307 	mvn.w	r3, #7
 80021a6:	e09b      	b.n	80022e0 <webserver_http_start+0x184>
  }
  printf("*** TCP socket created\r\n");
 80021a8:	4852      	ldr	r0, [pc, #328]	@ (80022f4 <webserver_http_start+0x198>)
 80021aa:	f012 ff9f 	bl	80150ec <puts>

  printf("*** net_setsockopt ...\r\n");
 80021ae:	4852      	ldr	r0, [pc, #328]	@ (80022f8 <webserver_http_start+0x19c>)
 80021b0:	f012 ff9c 	bl	80150ec <puts>
  net_setsockopt(sock, NET_SOL_SOCKET, NET_SO_BINDTODEVICE, Netif, sizeof(&Netif));
 80021b4:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <webserver_http_start+0x1a0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2204      	movs	r2, #4
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	2203      	movs	r2, #3
 80021be:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80021c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021c4:	f010 fcce 	bl	8012b64 <net_setsockopt>
  net_setsockopt(sock, NET_SOL_SOCKET, NET_SO_RCVTIMEO, &timeout, sizeof(timeout));
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	2204      	movs	r2, #4
 80021ce:	9200      	str	r2, [sp, #0]
 80021d0:	f241 0206 	movw	r2, #4102	@ 0x1006
 80021d4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80021d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021da:	f010 fcc3 	bl	8012b64 <net_setsockopt>

  /* Bind socket */
  printf("*** Set port and bind socket\r\n");
 80021de:	4848      	ldr	r0, [pc, #288]	@ (8002300 <webserver_http_start+0x1a4>)
 80021e0:	f012 ff84 	bl	80150ec <puts>
  s_addr_in.sin_family = NET_AF_INET;
 80021e4:	2302      	movs	r3, #2
 80021e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  s_addr_in.sin_len    = sizeof(s_addr_in);
 80021ea:	2310      	movs	r3, #16
 80021ec:	f887 3020 	strb.w	r3, [r7, #32]

  net_if_get_ip_address(Netif, &ip_addr_in);
 80021f0:	4b42      	ldr	r3, [pc, #264]	@ (80022fc <webserver_http_start+0x1a0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f107 021c 	add.w	r2, r7, #28
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f00f ff4c 	bl	8012098 <net_if_get_ip_address>
  s_addr_in.sin_addr.s_addr = ip_addr_in.addr;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24

  net_set_port((struct net_sockaddr *)&s_addr_in, HTTP_SERVER_PORT);
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	2150      	movs	r1, #80	@ 0x50
 800220a:	4618      	mov	r0, r3
 800220c:	f00f fb9c 	bl	8011948 <net_set_port>
  if (net_bind(sock, (struct net_sockaddr *)&s_addr_in, sizeof(s_addr_in)) != 0U)
 8002210:	f107 0320 	add.w	r3, r7, #32
 8002214:	2210      	movs	r2, #16
 8002216:	4619      	mov	r1, r3
 8002218:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800221a:	f010 f995 	bl	8012548 <net_bind>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <webserver_http_start+0xd4>
  {
    printf("*** Fail : Socket not binded !!!!\r\n");
 8002224:	4837      	ldr	r0, [pc, #220]	@ (8002304 <webserver_http_start+0x1a8>)
 8002226:	f012 ff61 	bl	80150ec <puts>
    return SOCKET_ERROR;
 800222a:	f06f 0307 	mvn.w	r3, #7
 800222e:	e057      	b.n	80022e0 <webserver_http_start+0x184>
  }
  printf("*** Port and socket binded\r\n");
 8002230:	4835      	ldr	r0, [pc, #212]	@ (8002308 <webserver_http_start+0x1ac>)
 8002232:	f012 ff5b 	bl	80150ec <puts>

  /* listen for incoming connections */
  printf("*** Listen for incoming connections\r\n");
 8002236:	4835      	ldr	r0, [pc, #212]	@ (800230c <webserver_http_start+0x1b0>)
 8002238:	f012 ff58 	bl	80150ec <puts>
  if (net_listen(sock, 5) != 0U)
 800223c:	2105      	movs	r1, #5
 800223e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002240:	f010 fa92 	bl	8012768 <net_listen>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <webserver_http_start+0xfa>
  {
    printf("*** Fail : Listening not started !!!!\r\n");
 800224a:	4831      	ldr	r0, [pc, #196]	@ (8002310 <webserver_http_start+0x1b4>)
 800224c:	f012 ff4e 	bl	80150ec <puts>
    return SOCKET_ERROR;
 8002250:	f06f 0307 	mvn.w	r3, #7
 8002254:	e044      	b.n	80022e0 <webserver_http_start+0x184>
  }
  printf("*** Listening started \r\n");
 8002256:	482f      	ldr	r0, [pc, #188]	@ (8002314 <webserver_http_start+0x1b8>)
 8002258:	f012 ff48 	bl	80150ec <puts>

  printf("--> Please connect to %s:%" PRIu32 "\n",
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4618      	mov	r0, r3
 8002262:	f00f fb5b 	bl	801191c <net_ntoa>
 8002266:	4601      	mov	r1, r0
         net_ntoa(&ip_addr_in), (uint32_t)NET_NTOHS(s_addr_in.sin_port));
 8002268:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800226a:	ba5b      	rev16	r3, r3
 800226c:	b29b      	uxth	r3, r3
  printf("--> Please connect to %s:%" PRIu32 "\n",
 800226e:	461a      	mov	r2, r3
 8002270:	4829      	ldr	r0, [pc, #164]	@ (8002318 <webserver_http_start+0x1bc>)
 8002272:	f012 fecb 	bl	801500c <iprintf>

  /* Infinite loop to serve socket communication */
  while (1)
  {
    struct net_sockaddr_in s_addr_in_remote_host = {0};
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
    uint32_t s_addr_in_remote_host_len = sizeof(s_addr_in_remote_host);
 8002284:	2310      	movs	r3, #16
 8002286:	607b      	str	r3, [r7, #4]

    /* Accept net socket requests */
    const int32_t newconn = net_accept(sock, (struct net_sockaddr *)&s_addr_in_remote_host, (uint32_t *)&s_addr_in_remote_host_len);
 8002288:	1d3a      	adds	r2, r7, #4
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	4619      	mov	r1, r3
 8002290:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002292:	f010 f9d1 	bl	8012638 <net_accept>
 8002296:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if a valid new connection is requested */
    if (newconn > 0)
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	dd1b      	ble.n	80022d6 <webserver_http_start+0x17a>
    {
      net_ip_addr_t ip_addr_in_remote_host = {0};
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
      ip_addr_in_remote_host.addr = s_addr_in_remote_host.sin_addr.s_addr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	603b      	str	r3, [r7, #0]

      printf("Request from %s:%" PRIu32 "\n",
 80022a6:	463b      	mov	r3, r7
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00f fb37 	bl	801191c <net_ntoa>
 80022ae:	4601      	mov	r1, r0
             net_ntoa(&ip_addr_in_remote_host), (uint32_t)NET_NTOHS(s_addr_in_remote_host.sin_port));
 80022b0:	897b      	ldrh	r3, [r7, #10]
 80022b2:	ba5b      	rev16	r3, r3
 80022b4:	b29b      	uxth	r3, r3
      printf("Request from %s:%" PRIu32 "\n",
 80022b6:	461a      	mov	r2, r3
 80022b8:	4818      	ldr	r0, [pc, #96]	@ (800231c <webserver_http_start+0x1c0>)
 80022ba:	f012 fea7 	bl	801500c <iprintf>

      /* Treat net socket requests */
      if (http_treat_request(newconn) != WEBSERVER_OK)
 80022be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022c0:	f000 f832 	bl	8002328 <http_treat_request>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0d5      	beq.n	8002276 <webserver_http_start+0x11a>
      {
        printf("*** Fail : Invalid HTTP request !!!!\r\n");
 80022ca:	4815      	ldr	r0, [pc, #84]	@ (8002320 <webserver_http_start+0x1c4>)
 80022cc:	f012 ff0e 	bl	80150ec <puts>
        return SOCKET_ERROR;
 80022d0:	f06f 0307 	mvn.w	r3, #7
 80022d4:	e004      	b.n	80022e0 <webserver_http_start+0x184>
      }
    }
    else
    {
      printf("*** Fail : Invalid socket connection !!!! \r\n");
 80022d6:	4813      	ldr	r0, [pc, #76]	@ (8002324 <webserver_http_start+0x1c8>)
 80022d8:	f012 ff08 	bl	80150ec <puts>
      return SOCKET_ERROR;
 80022dc:	f06f 0307 	mvn.w	r3, #7
    }
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3738      	adds	r7, #56	@ 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	080196b8 	.word	0x080196b8
 80022ec:	080196bc 	.word	0x080196bc
 80022f0:	080196d4 	.word	0x080196d4
 80022f4:	080196f8 	.word	0x080196f8
 80022f8:	08019710 	.word	0x08019710
 80022fc:	20000bd8 	.word	0x20000bd8
 8002300:	08019728 	.word	0x08019728
 8002304:	08019748 	.word	0x08019748
 8002308:	0801976c 	.word	0x0801976c
 800230c:	08019788 	.word	0x08019788
 8002310:	080197b0 	.word	0x080197b0
 8002314:	080197d8 	.word	0x080197d8
 8002318:	080197f0 	.word	0x080197f0
 800231c:	08019810 	.word	0x08019810
 8002320:	08019828 	.word	0x08019828
 8002324:	08019850 	.word	0x08019850

08002328 <http_treat_request>:
  * @brief  Treat webserver HTTP request
  * @param  socket : connection socket
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_treat_request(int32_t socket)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
  static unsigned char recv_buffer[HTTP_RECEIVE_BUFFER_SIZE];

  /* Clear receive buffer */
  memset((void*)recv_buffer, 0, sizeof(recv_buffer));
 8002330:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002334:	2100      	movs	r1, #0
 8002336:	48a0      	ldr	r0, [pc, #640]	@ (80025b8 <http_treat_request+0x290>)
 8002338:	f013 f91e 	bl	8015578 <memset>

  /* Read the http request */
  if (net_recv(socket, recv_buffer, HTTP_RECEIVE_BUFFER_SIZE, 0) < 0)
 800233c:	2300      	movs	r3, #0
 800233e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002342:	499d      	ldr	r1, [pc, #628]	@ (80025b8 <http_treat_request+0x290>)
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f010 fafd 	bl	8012944 <net_recv>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	da02      	bge.n	8002356 <http_treat_request+0x2e>
  {
    return HTTP_ERROR;
 8002350:	f06f 0306 	mvn.w	r3, #6
 8002354:	e1c4      	b.n	80026e0 <http_treat_request+0x3b8>
  }

  /* Treat get cmd */
  if (strncmp((char *)recv_buffer, http_get_cmd, http_get_cmd_size) == 0U)
 8002356:	4b99      	ldr	r3, [pc, #612]	@ (80025bc <http_treat_request+0x294>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	4998      	ldr	r1, [pc, #608]	@ (80025c0 <http_treat_request+0x298>)
 800235e:	4896      	ldr	r0, [pc, #600]	@ (80025b8 <http_treat_request+0x290>)
 8002360:	f013 f921 	bl	80155a6 <strncmp>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 81ad 	bne.w	80026c6 <http_treat_request+0x39e>
  {
    /* Send html */
    if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_html_cmd, http_html_cmd_size) == 0U)
 800236c:	4b93      	ldr	r3, [pc, #588]	@ (80025bc <http_treat_request+0x294>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a91      	ldr	r2, [pc, #580]	@ (80025b8 <http_treat_request+0x290>)
 8002372:	4413      	add	r3, r2
 8002374:	4a93      	ldr	r2, [pc, #588]	@ (80025c4 <http_treat_request+0x29c>)
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4993      	ldr	r1, [pc, #588]	@ (80025c8 <http_treat_request+0x2a0>)
 800237a:	4618      	mov	r0, r3
 800237c:	f013 f913 	bl	80155a6 <strncmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <http_treat_request+0x72>
    {
      http_send_response(socket, HTTP_HEADER_HTML_ID, http_header_response, html_buff, html_buff_size);
 8002386:	4b91      	ldr	r3, [pc, #580]	@ (80025cc <http_treat_request+0x2a4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4b90      	ldr	r3, [pc, #576]	@ (80025d0 <http_treat_request+0x2a8>)
 800238e:	4a91      	ldr	r2, [pc, #580]	@ (80025d4 <http_treat_request+0x2ac>)
 8002390:	2100      	movs	r1, #0
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9b6 	bl	8002704 <http_send_response>
 8002398:	e198      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send css shunk */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_css_chunk_cmd, http_css_chunk_cmd_size) == 0U)
 800239a:	4b88      	ldr	r3, [pc, #544]	@ (80025bc <http_treat_request+0x294>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a86      	ldr	r2, [pc, #536]	@ (80025b8 <http_treat_request+0x290>)
 80023a0:	4413      	add	r3, r2
 80023a2:	4a8d      	ldr	r2, [pc, #564]	@ (80025d8 <http_treat_request+0x2b0>)
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	498d      	ldr	r1, [pc, #564]	@ (80025dc <http_treat_request+0x2b4>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f013 f8fc 	bl	80155a6 <strncmp>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <http_treat_request+0xa0>
    {
      http_send_response(socket, HTTP_HEADER_CSS_ID, http_header_response, css_shunk_buff, css_shunk_buff_size);
 80023b4:	4b8a      	ldr	r3, [pc, #552]	@ (80025e0 <http_treat_request+0x2b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4b8a      	ldr	r3, [pc, #552]	@ (80025e4 <http_treat_request+0x2bc>)
 80023bc:	4a85      	ldr	r2, [pc, #532]	@ (80025d4 <http_treat_request+0x2ac>)
 80023be:	2102      	movs	r1, #2
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f99f 	bl	8002704 <http_send_response>
 80023c6:	e181      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send main css */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_css_main_cmd, http_css_main_cmd_size) == 0U)
 80023c8:	4b7c      	ldr	r3, [pc, #496]	@ (80025bc <http_treat_request+0x294>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7a      	ldr	r2, [pc, #488]	@ (80025b8 <http_treat_request+0x290>)
 80023ce:	4413      	add	r3, r2
 80023d0:	4a85      	ldr	r2, [pc, #532]	@ (80025e8 <http_treat_request+0x2c0>)
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4985      	ldr	r1, [pc, #532]	@ (80025ec <http_treat_request+0x2c4>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f013 f8e5 	bl	80155a6 <strncmp>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <http_treat_request+0xce>
    {
      http_send_response(socket, HTTP_HEADER_CSS_ID, http_header_response, css_main_buff, css_main_buff_size);
 80023e2:	4b83      	ldr	r3, [pc, #524]	@ (80025f0 <http_treat_request+0x2c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4b82      	ldr	r3, [pc, #520]	@ (80025f4 <http_treat_request+0x2cc>)
 80023ea:	4a7a      	ldr	r2, [pc, #488]	@ (80025d4 <http_treat_request+0x2ac>)
 80023ec:	2102      	movs	r1, #2
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f988 	bl	8002704 <http_send_response>
 80023f4:	e16a      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send js shunk */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_js_chunk_cmd, http_js_chunk_cmd_size) == 0U)
 80023f6:	4b71      	ldr	r3, [pc, #452]	@ (80025bc <http_treat_request+0x294>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	@ (80025b8 <http_treat_request+0x290>)
 80023fc:	4413      	add	r3, r2
 80023fe:	4a7e      	ldr	r2, [pc, #504]	@ (80025f8 <http_treat_request+0x2d0>)
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	497e      	ldr	r1, [pc, #504]	@ (80025fc <http_treat_request+0x2d4>)
 8002404:	4618      	mov	r0, r3
 8002406:	f013 f8ce 	bl	80155a6 <strncmp>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <http_treat_request+0xfc>
    {
      http_send_response(socket, HTTP_HEADER_JS_ID, http_header_response, js_shunk_buff, js_shunk_buff_size);
 8002410:	4b7b      	ldr	r3, [pc, #492]	@ (8002600 <http_treat_request+0x2d8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	4b7b      	ldr	r3, [pc, #492]	@ (8002604 <http_treat_request+0x2dc>)
 8002418:	4a6e      	ldr	r2, [pc, #440]	@ (80025d4 <http_treat_request+0x2ac>)
 800241a:	2101      	movs	r1, #1
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f971 	bl	8002704 <http_send_response>
 8002422:	e153      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send main js */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_js_main_cmd, http_js_main_cmd_size) == 0U)
 8002424:	4b65      	ldr	r3, [pc, #404]	@ (80025bc <http_treat_request+0x294>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a63      	ldr	r2, [pc, #396]	@ (80025b8 <http_treat_request+0x290>)
 800242a:	4413      	add	r3, r2
 800242c:	4a76      	ldr	r2, [pc, #472]	@ (8002608 <http_treat_request+0x2e0>)
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4976      	ldr	r1, [pc, #472]	@ (800260c <http_treat_request+0x2e4>)
 8002432:	4618      	mov	r0, r3
 8002434:	f013 f8b7 	bl	80155a6 <strncmp>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <http_treat_request+0x12a>
    {
      http_send_response(socket, HTTP_HEADER_JS_ID, http_header_response, js_main_buff, js_main_buff_size);
 800243e:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <http_treat_request+0x2e8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4b73      	ldr	r3, [pc, #460]	@ (8002614 <http_treat_request+0x2ec>)
 8002446:	4a63      	ldr	r2, [pc, #396]	@ (80025d4 <http_treat_request+0x2ac>)
 8002448:	2101      	movs	r1, #1
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f95a 	bl	8002704 <http_send_response>
 8002450:	e13c      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send favicon */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_favicon_cmd, http_favicon_cmd_size) == 0U)
 8002452:	4b5a      	ldr	r3, [pc, #360]	@ (80025bc <http_treat_request+0x294>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a58      	ldr	r2, [pc, #352]	@ (80025b8 <http_treat_request+0x290>)
 8002458:	4413      	add	r3, r2
 800245a:	4a6f      	ldr	r2, [pc, #444]	@ (8002618 <http_treat_request+0x2f0>)
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	496f      	ldr	r1, [pc, #444]	@ (800261c <http_treat_request+0x2f4>)
 8002460:	4618      	mov	r0, r3
 8002462:	f013 f8a0 	bl	80155a6 <strncmp>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <http_treat_request+0x158>
    {
      http_send_response(socket, HTTP_HEADER_FAVICON_ID, http_header_response, favicon_buff, favicon_buff_size);
 800246c:	4b6c      	ldr	r3, [pc, #432]	@ (8002620 <http_treat_request+0x2f8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4b6c      	ldr	r3, [pc, #432]	@ (8002624 <http_treat_request+0x2fc>)
 8002474:	4a57      	ldr	r2, [pc, #348]	@ (80025d4 <http_treat_request+0x2ac>)
 8002476:	2103      	movs	r1, #3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f943 	bl	8002704 <http_send_response>
 800247e:	e125      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send json */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_json_cmd, http_json_cmd_size) == 0U)
 8002480:	4b4e      	ldr	r3, [pc, #312]	@ (80025bc <http_treat_request+0x294>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a4c      	ldr	r2, [pc, #304]	@ (80025b8 <http_treat_request+0x290>)
 8002486:	4413      	add	r3, r2
 8002488:	4a67      	ldr	r2, [pc, #412]	@ (8002628 <http_treat_request+0x300>)
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4967      	ldr	r1, [pc, #412]	@ (800262c <http_treat_request+0x304>)
 800248e:	4618      	mov	r0, r3
 8002490:	f013 f889 	bl	80155a6 <strncmp>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <http_treat_request+0x186>
    {
      http_send_response(socket, HTTP_HEADER_JSON_ID, http_header_response, json_buff, json_buff_size);
 800249a:	4b65      	ldr	r3, [pc, #404]	@ (8002630 <http_treat_request+0x308>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4b64      	ldr	r3, [pc, #400]	@ (8002634 <http_treat_request+0x30c>)
 80024a2:	4a4c      	ldr	r2, [pc, #304]	@ (80025d4 <http_treat_request+0x2ac>)
 80024a4:	2109      	movs	r1, #9
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f92c 	bl	8002704 <http_send_response>
 80024ac:	e10e      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send font */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_font_cmd, http_font_cmd_size) == 0U)
 80024ae:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <http_treat_request+0x294>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a41      	ldr	r2, [pc, #260]	@ (80025b8 <http_treat_request+0x290>)
 80024b4:	4413      	add	r3, r2
 80024b6:	4a60      	ldr	r2, [pc, #384]	@ (8002638 <http_treat_request+0x310>)
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	4960      	ldr	r1, [pc, #384]	@ (800263c <http_treat_request+0x314>)
 80024bc:	4618      	mov	r0, r3
 80024be:	f013 f872 	bl	80155a6 <strncmp>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <http_treat_request+0x1b4>
    {
      http_send_response(socket, HTTP_HEADER_FONT_ID, http_header_response, font_buff, font_buff_size);
 80024c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002640 <http_treat_request+0x318>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002644 <http_treat_request+0x31c>)
 80024d0:	4a40      	ldr	r2, [pc, #256]	@ (80025d4 <http_treat_request+0x2ac>)
 80024d2:	2108      	movs	r1, #8
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f915 	bl	8002704 <http_send_response>
 80024da:	e0f7      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send image */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_image_cmd, http_image_cmd_size) == 0U)
 80024dc:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <http_treat_request+0x294>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a35      	ldr	r2, [pc, #212]	@ (80025b8 <http_treat_request+0x290>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <http_treat_request+0x320>)
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	4958      	ldr	r1, [pc, #352]	@ (800264c <http_treat_request+0x324>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f013 f85b 	bl	80155a6 <strncmp>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <http_treat_request+0x1e2>
    {
      http_send_response(socket, HTTP_HEADER_IMAGE_ID, http_header_response, image_buff, image_buff_size);
 80024f6:	4b56      	ldr	r3, [pc, #344]	@ (8002650 <http_treat_request+0x328>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <http_treat_request+0x32c>)
 80024fe:	4a35      	ldr	r2, [pc, #212]	@ (80025d4 <http_treat_request+0x2ac>)
 8002500:	210a      	movs	r1, #10
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8fe 	bl	8002704 <http_send_response>
 8002508:	e0e0      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send read temperature response */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_temperature_cmd, http_read_temperature_cmd_size) == 0U)
 800250a:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <http_treat_request+0x294>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <http_treat_request+0x290>)
 8002510:	4413      	add	r3, r2
 8002512:	4a51      	ldr	r2, [pc, #324]	@ (8002658 <http_treat_request+0x330>)
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	4951      	ldr	r1, [pc, #324]	@ (800265c <http_treat_request+0x334>)
 8002518:	4618      	mov	r0, r3
 800251a:	f013 f844 	bl	80155a6 <strncmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11d      	bne.n	8002560 <http_treat_request+0x238>
    {
      float temperature_value = 0;
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
      webserver_temp_sensor_read(&temperature_value);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fa76 	bl	8002a20 <webserver_temp_sensor_read>
      sprintf(http_sensor_value, "%g", temperature_value);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f814 	bl	8000564 <__aeabi_f2d>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4947      	ldr	r1, [pc, #284]	@ (8002660 <http_treat_request+0x338>)
 8002542:	4848      	ldr	r0, [pc, #288]	@ (8002664 <http_treat_request+0x33c>)
 8002544:	f012 feca 	bl	80152dc <siprintf>
      http_send_response(socket, HTTP_HEADER_SENSOR_ID, http_header_response, http_sensor_value, strlen(http_sensor_value));
 8002548:	4846      	ldr	r0, [pc, #280]	@ (8002664 <http_treat_request+0x33c>)
 800254a:	f7fd fe9f 	bl	800028c <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4b44      	ldr	r3, [pc, #272]	@ (8002664 <http_treat_request+0x33c>)
 8002554:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <http_treat_request+0x2ac>)
 8002556:	2104      	movs	r1, #4
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8d3 	bl	8002704 <http_send_response>
 800255e:	e0b5      	b.n	80026cc <http_treat_request+0x3a4>
    }
    /* Send read pressure response */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_pressure_cmd, http_read_pressure_cmd_size) == 0U)
 8002560:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <http_treat_request+0x294>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	@ (80025b8 <http_treat_request+0x290>)
 8002566:	4413      	add	r3, r2
 8002568:	4a3f      	ldr	r2, [pc, #252]	@ (8002668 <http_treat_request+0x340>)
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	493f      	ldr	r1, [pc, #252]	@ (800266c <http_treat_request+0x344>)
 800256e:	4618      	mov	r0, r3
 8002570:	f013 f819 	bl	80155a6 <strncmp>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d17a      	bne.n	8002670 <http_treat_request+0x348>
    {
      float pressure_value = 0;
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
      webserver_press_sensor_read(&pressure_value);
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fac3 	bl	8002b10 <webserver_press_sensor_read>
      sprintf(http_sensor_value, "%g", pressure_value);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd ffe9 	bl	8000564 <__aeabi_f2d>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4932      	ldr	r1, [pc, #200]	@ (8002660 <http_treat_request+0x338>)
 8002598:	4832      	ldr	r0, [pc, #200]	@ (8002664 <http_treat_request+0x33c>)
 800259a:	f012 fe9f 	bl	80152dc <siprintf>
      http_send_response(socket, HTTP_HEADER_SENSOR_ID, http_header_response, http_sensor_value, strlen(http_sensor_value));
 800259e:	4831      	ldr	r0, [pc, #196]	@ (8002664 <http_treat_request+0x33c>)
 80025a0:	f7fd fe74 	bl	800028c <strlen>
 80025a4:	4603      	mov	r3, r0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <http_treat_request+0x33c>)
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <http_treat_request+0x2ac>)
 80025ac:	2104      	movs	r1, #4
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8a8 	bl	8002704 <http_send_response>
 80025b4:	e08a      	b.n	80026cc <http_treat_request+0x3a4>
 80025b6:	bf00      	nop
 80025b8:	200005fc 	.word	0x200005fc
 80025bc:	0801abbc 	.word	0x0801abbc
 80025c0:	0801abb4 	.word	0x0801abb4
 80025c4:	0801abc4 	.word	0x0801abc4
 80025c8:	0801abc0 	.word	0x0801abc0
 80025cc:	0808c5c8 	.word	0x0808c5c8
 80025d0:	0808bd10 	.word	0x0808bd10
 80025d4:	20000408 	.word	0x20000408
 80025d8:	0801abe0 	.word	0x0801abe0
 80025dc:	0801abc8 	.word	0x0801abc8
 80025e0:	08077338 	.word	0x08077338
 80025e4:	08068ccc 	.word	0x08068ccc
 80025e8:	0801abfc 	.word	0x0801abfc
 80025ec:	0801abe4 	.word	0x0801abe4
 80025f0:	08068cc8 	.word	0x08068cc8
 80025f4:	0801ace0 	.word	0x0801ace0
 80025f8:	0801ac14 	.word	0x0801ac14
 80025fc:	0801ac00 	.word	0x0801ac00
 8002600:	0818c76c 	.word	0x0818c76c
 8002604:	08116244 	.word	0x08116244
 8002608:	0801ac2c 	.word	0x0801ac2c
 800260c:	0801ac18 	.word	0x0801ac18
 8002610:	08116240 	.word	0x08116240
 8002614:	0810e990 	.word	0x0810e990
 8002618:	0801ac7c 	.word	0x0801ac7c
 800261c:	0801ac6c 	.word	0x0801ac6c
 8002620:	0807835c 	.word	0x0807835c
 8002624:	0807733c 	.word	0x0807733c
 8002628:	0801ac68 	.word	0x0801ac68
 800262c:	0801ac58 	.word	0x0801ac58
 8002630:	0818c8ac 	.word	0x0818c8ac
 8002634:	0818c770 	.word	0x0818c770
 8002638:	0801ac54 	.word	0x0801ac54
 800263c:	0801ac30 	.word	0x0801ac30
 8002640:	0808bd0c 	.word	0x0808bd0c
 8002644:	08078360 	.word	0x08078360
 8002648:	0801ac9c 	.word	0x0801ac9c
 800264c:	0801ac80 	.word	0x0801ac80
 8002650:	0810e98c 	.word	0x0810e98c
 8002654:	0808c5cc 	.word	0x0808c5cc
 8002658:	0801acb4 	.word	0x0801acb4
 800265c:	0801aca0 	.word	0x0801aca0
 8002660:	0801987c 	.word	0x0801987c
 8002664:	200003f4 	.word	0x200003f4
 8002668:	0801acc8 	.word	0x0801acc8
 800266c:	0801acb8 	.word	0x0801acb8
    }
    /* Send read humidity response */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_humidity_cmd, http_read_humidity_cmd_size) == 0U)
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <http_treat_request+0x3c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <http_treat_request+0x3c4>)
 8002676:	4413      	add	r3, r2
 8002678:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <http_treat_request+0x3c8>)
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	491d      	ldr	r1, [pc, #116]	@ (80026f4 <http_treat_request+0x3cc>)
 800267e:	4618      	mov	r0, r3
 8002680:	f012 ff91 	bl	80155a6 <strncmp>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d120      	bne.n	80026cc <http_treat_request+0x3a4>
    {
      float humidity_value = 0;
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
      webserver_humid_sensor_read(&humidity_value);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4618      	mov	r0, r3
 8002696:	f000 faae 	bl	8002bf6 <webserver_humid_sensor_read>
      sprintf(http_sensor_value, "%g", humidity_value);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff61 	bl	8000564 <__aeabi_f2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4914      	ldr	r1, [pc, #80]	@ (80026f8 <http_treat_request+0x3d0>)
 80026a8:	4814      	ldr	r0, [pc, #80]	@ (80026fc <http_treat_request+0x3d4>)
 80026aa:	f012 fe17 	bl	80152dc <siprintf>
      http_send_response(socket, HTTP_HEADER_SENSOR_ID, http_header_response, http_sensor_value, strlen(http_sensor_value));
 80026ae:	4813      	ldr	r0, [pc, #76]	@ (80026fc <http_treat_request+0x3d4>)
 80026b0:	f7fd fdec 	bl	800028c <strlen>
 80026b4:	4603      	mov	r3, r0
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <http_treat_request+0x3d4>)
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <http_treat_request+0x3d8>)
 80026bc:	2104      	movs	r1, #4
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f820 	bl	8002704 <http_send_response>
 80026c4:	e002      	b.n	80026cc <http_treat_request+0x3a4>
    }
  }
  else
  {
    return HTTP_ERROR;
 80026c6:	f06f 0306 	mvn.w	r3, #6
 80026ca:	e009      	b.n	80026e0 <http_treat_request+0x3b8>
  }

  /* Close connection socket */
  if (net_closesocket(socket) != 0)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f010 f9c5 	bl	8012a5c <net_closesocket>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <http_treat_request+0x3b6>
  {
    return HTTP_ERROR;
 80026d8:	f06f 0306 	mvn.w	r3, #6
 80026dc:	e000      	b.n	80026e0 <http_treat_request+0x3b8>
  }

  return WEBSERVER_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	0801abbc 	.word	0x0801abbc
 80026ec:	200005fc 	.word	0x200005fc
 80026f0:	0801acdc 	.word	0x0801acdc
 80026f4:	0801accc 	.word	0x0801accc
 80026f8:	0801987c 	.word	0x0801987c
 80026fc:	200003f4 	.word	0x200003f4
 8002700:	20000408 	.word	0x20000408

08002704 <http_send_response>:
static WebServer_StatusTypeDef http_send_response(int32_t socket,
                                                  uint32_t headers_id,
                                                  char *headers_buff,
                                                  const char *body_buff,
                                                  uint32_t data_size)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  /* Send HTTP header response */
  if (http_send_headers_response(socket, headers_id, headers_buff, data_size) != WEBSERVER_OK)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f817 	bl	800274c <http_send_headers_response>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <http_send_response+0x26>
  {
    return HTTP_ERROR;
 8002724:	f06f 0306 	mvn.w	r3, #6
 8002728:	e00b      	b.n	8002742 <http_send_response+0x3e>
  }

  /* Send HTTP body response */
  if (http_send(socket, (const char *)body_buff, data_size) != WEBSERVER_OK)
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8ae 	bl	8002890 <http_send>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <http_send_response+0x3c>
  {
    return HTTP_ERROR;
 800273a:	f06f 0306 	mvn.w	r3, #6
 800273e:	e000      	b.n	8002742 <http_send_response+0x3e>
  }

  return WEBSERVER_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <http_send_headers_response>:
  */
static WebServer_StatusTypeDef http_send_headers_response(int32_t socket,
                                                          uint32_t headers_id,
                                                          char *headers_buff,
                                                          uint32_t data_size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  /* Check header ID */
  switch(headers_id)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d871      	bhi.n	8002844 <http_send_headers_response+0xf8>
 8002760:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <http_send_headers_response+0x1c>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002795 	.word	0x08002795
 800276c:	080027c1 	.word	0x080027c1
 8002770:	080027ab 	.word	0x080027ab
 8002774:	080027d7 	.word	0x080027d7
 8002778:	08002803 	.word	0x08002803
 800277c:	08002845 	.word	0x08002845
 8002780:	08002845 	.word	0x08002845
 8002784:	08002845 	.word	0x08002845
 8002788:	080027ed 	.word	0x080027ed
 800278c:	08002819 	.word	0x08002819
 8002790:	0800282f 	.word	0x0800282f
  {
    /* Send HTML header response */
  case HTTP_HEADER_HTML_ID:
    {
      if (webserver_http_encode_html_response(headers_buff, data_size) != WEBSERVER_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff f97f 	bl	8001a9c <webserver_http_encode_html_response>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d052      	beq.n	800284a <http_send_headers_response+0xfe>
      {
        return HTTP_ERROR;
 80027a4:	f06f 0306 	mvn.w	r3, #6
 80027a8:	e06e      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send CSS header response */
  case HTTP_HEADER_CSS_ID:
    {
      if (webserver_http_encode_css_response(headers_buff, data_size) != WEBSERVER_OK)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f9f4 	bl	8001b9c <webserver_http_encode_css_response>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d049      	beq.n	800284e <http_send_headers_response+0x102>
      {
        return HTTP_ERROR;
 80027ba:	f06f 0306 	mvn.w	r3, #6
 80027be:	e063      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send JS header response */
  case HTTP_HEADER_JS_ID:
    {
      if (webserver_http_encode_js_response(headers_buff, data_size) != WEBSERVER_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fa57 	bl	8001c78 <webserver_http_encode_js_response>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d040      	beq.n	8002852 <http_send_headers_response+0x106>
      {
        return HTTP_ERROR;
 80027d0:	f06f 0306 	mvn.w	r3, #6
 80027d4:	e058      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send favicon header response */
  case HTTP_HEADER_FAVICON_ID:
    {
      if (webserver_http_encode_favicon_response(headers_buff, data_size) != WEBSERVER_OK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff faba 	bl	8001d54 <webserver_http_encode_favicon_response>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d037      	beq.n	8002856 <http_send_headers_response+0x10a>
      {
        return HTTP_ERROR;
 80027e6:	f06f 0306 	mvn.w	r3, #6
 80027ea:	e04d      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send font header response */
  case HTTP_HEADER_FONT_ID:
    {
      if (webserver_http_encode_woff2_response(headers_buff, data_size) != WEBSERVER_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fb83 	bl	8001efc <webserver_http_encode_woff2_response>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02e      	beq.n	800285a <http_send_headers_response+0x10e>
      {
        return HTTP_ERROR;
 80027fc:	f06f 0306 	mvn.w	r3, #6
 8002800:	e042      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send sensor header response */
  case HTTP_HEADER_SENSOR_ID:
    {
      if (webserver_http_encode_sensor_response(headers_buff, data_size) != WEBSERVER_OK)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fb18 	bl	8001e3c <webserver_http_encode_sensor_response>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d025      	beq.n	800285e <http_send_headers_response+0x112>
      {
        return HTTP_ERROR;
 8002812:	f06f 0306 	mvn.w	r3, #6
 8002816:	e037      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send JSON header response */
  case HTTP_HEADER_JSON_ID:
    {
      if (webserver_http_encode_json_response(headers_buff, data_size) != WEBSERVER_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fbcd 	bl	8001fbc <webserver_http_encode_json_response>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01c      	beq.n	8002862 <http_send_headers_response+0x116>
      {
        return HTTP_ERROR;
 8002828:	f06f 0306 	mvn.w	r3, #6
 800282c:	e02c      	b.n	8002888 <http_send_headers_response+0x13c>
    }

    /* Send image header response */
  case HTTP_HEADER_IMAGE_ID:
    {
      if (webserver_http_encode_image_response(headers_buff, data_size) != WEBSERVER_OK)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fc2a 	bl	800208c <webserver_http_encode_image_response>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d013      	beq.n	8002866 <http_send_headers_response+0x11a>
      {
        return HTTP_ERROR;
 800283e:	f06f 0306 	mvn.w	r3, #6
 8002842:	e021      	b.n	8002888 <http_send_headers_response+0x13c>
      break;
    }

    /* Invalid header ID */
  default:
    return HTTP_ERROR;
 8002844:	f06f 0306 	mvn.w	r3, #6
 8002848:	e01e      	b.n	8002888 <http_send_headers_response+0x13c>
      break;
 800284a:	bf00      	nop
 800284c:	e00c      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 800284e:	bf00      	nop
 8002850:	e00a      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 8002852:	bf00      	nop
 8002854:	e008      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 8002856:	bf00      	nop
 8002858:	e006      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 800285a:	bf00      	nop
 800285c:	e004      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <http_send_headers_response+0x11c>
      break;
 8002866:	bf00      	nop
    break;
  }

  /* Send HTTP built response */
  if (http_send(socket, (const char *)headers_buff, strlen((char*)headers_buff)) != WEBSERVER_OK)
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fd fd0f 	bl	800028c <strlen>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f80b 	bl	8002890 <http_send>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <http_send_headers_response+0x13a>
  {
    return HTTP_ERROR;
 8002880:	f06f 0306 	mvn.w	r3, #6
 8002884:	e000      	b.n	8002888 <http_send_headers_response+0x13c>
  }

  return WEBSERVER_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <http_send>:
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_send(int32_t socket,
                                         const char *frame,
                                         uint32_t frame_size)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Setup send information */
  uint32_t data_size = frame_size;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t data_idx  = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]

  /* Check remaining data */
  while (data_size > 0U)
 80028a4:	e02b      	b.n	80028fe <http_send+0x6e>
  {
    if (data_size >= MAX_SOCKET_DATASIZE)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 80028ac:	d317      	bcc.n	80028de <http_send+0x4e>
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], MAX_SOCKET_DATASIZE, 0) <= 0U)
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	18d1      	adds	r1, r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f00f ffc4 	bl	8012848 <net_send>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <http_send+0x3c>
      {
        return HTTP_ERROR;
 80028c6:	f06f 0306 	mvn.w	r3, #6
 80028ca:	e01c      	b.n	8002906 <http_send+0x76>
      }

      /* Update send information */
      data_size -= MAX_SOCKET_DATASIZE;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80028d2:	617b      	str	r3, [r7, #20]
      data_idx += MAX_SOCKET_DATASIZE;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	e00f      	b.n	80028fe <http_send+0x6e>
    }
    else
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], data_size, 0) <= 0U)
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	18d1      	adds	r1, r2, r3
 80028e4:	2300      	movs	r3, #0
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f00f ffad 	bl	8012848 <net_send>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <http_send+0x6a>
      {
        return HTTP_ERROR;
 80028f4:	f06f 0306 	mvn.w	r3, #6
 80028f8:	e005      	b.n	8002906 <http_send+0x76>
      }

      /* Update send information */
      data_size = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  while (data_size > 0U)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1d0      	bne.n	80028a6 <http_send+0x16>
    }
  }

  return WEBSERVER_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <webserver_sensors_start>:
  * @brief  Start temperature, pressure and humidity sensors acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_sensors_start(void)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
  int   status = BSP_ERROR_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]

  /* De-Initialize function */
  status |= BSP_ENV_SENSOR_DeInit(0);
 8002918:	2000      	movs	r0, #0
 800291a:	f001 fc3d 	bl	8004198 <BSP_ENV_SENSOR_DeInit>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4313      	orrs	r3, r2
 8002924:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_DeInit(1);
 8002926:	2001      	movs	r0, #1
 8002928:	f001 fc36 	bl	8004198 <BSP_ENV_SENSOR_DeInit>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	607b      	str	r3, [r7, #4]

  /* Start sensors */
  status |= webserver_press_sensor_start();
 8002934:	f000 f888 	bl	8002a48 <webserver_press_sensor_start>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	607b      	str	r3, [r7, #4]
  status |= webserver_humid_sensor_start();
 8002940:	f000 f8fa 	bl	8002b38 <webserver_humid_sensor_start>
 8002944:	4602      	mov	r2, r0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	607b      	str	r3, [r7, #4]
  status |= webserver_temp_sensor_start();
 800294c:	f000 f809 	bl	8002962 <webserver_temp_sensor_start>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	607b      	str	r3, [r7, #4]

  return status;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <webserver_temp_sensor_start>:
  * @brief  Start temperature sensor acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_temp_sensor_start(void)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
  float outputDataRate = 0;
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
  int   status         = BSP_ERROR_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]

  /* Initialize function */
  status |= BSP_ENV_SENSOR_Init(0, ENV_TEMPERATURE);
 8002972:	2101      	movs	r1, #1
 8002974:	2000      	movs	r0, #0
 8002976:	f001 fbc3 	bl	8004100 <BSP_ENV_SENSOR_Init>
 800297a:	4602      	mov	r2, r0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4313      	orrs	r3, r2
 8002980:	607b      	str	r3, [r7, #4]

  /* Enable function */
  status |= BSP_ENV_SENSOR_Enable(0, ENV_TEMPERATURE);
 8002982:	2101      	movs	r1, #1
 8002984:	2000      	movs	r0, #0
 8002986:	f001 fc3d 	bl	8004204 <BSP_ENV_SENSOR_Enable>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4313      	orrs	r3, r2
 8002990:	607b      	str	r3, [r7, #4]

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 12.5f);
 8002992:	eeb2 0a09 	vmov.f32	s0, #41	@ 0x41480000  12.5
 8002996:	2101      	movs	r1, #1
 8002998:	2000      	movs	r0, #0
 800299a:	f001 fce7 	bl	800436c <BSP_ENV_SENSOR_SetOutputDataRate>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_TEMPERATURE, &outputDataRate);
 80029a6:	463b      	mov	r3, r7
 80029a8:	461a      	mov	r2, r3
 80029aa:	2101      	movs	r1, #1
 80029ac:	2000      	movs	r0, #0
 80029ae:	f001 fc81 	bl	80042b4 <BSP_ENV_SENSOR_GetOutputDataRate>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 12.5f)
 80029ba:	edd7 7a00 	vldr	s15, [r7]
 80029be:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80029c2:	eef4 7a47 	vcmp.f32	s15, s14
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	d003      	beq.n	80029d4 <webserver_temp_sensor_start+0x72>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f063 0305 	orn	r3, r3, #5
 80029d2:	607b      	str	r3, [r7, #4]
  }

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 7.0f);
 80029d4:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 80029d8:	2101      	movs	r1, #1
 80029da:	2000      	movs	r0, #0
 80029dc:	f001 fcc6 	bl	800436c <BSP_ENV_SENSOR_SetOutputDataRate>
 80029e0:	4602      	mov	r2, r0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_TEMPERATURE, &outputDataRate);
 80029e8:	463b      	mov	r3, r7
 80029ea:	461a      	mov	r2, r3
 80029ec:	2101      	movs	r1, #1
 80029ee:	2000      	movs	r0, #0
 80029f0:	f001 fc60 	bl	80042b4 <BSP_ENV_SENSOR_GetOutputDataRate>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 7.0f)
 80029fc:	edd7 7a00 	vldr	s15, [r7]
 8002a00:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8002a04:	eef4 7a47 	vcmp.f32	s15, s14
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	d003      	beq.n	8002a16 <webserver_temp_sensor_start+0xb4>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f063 0305 	orn	r3, r3, #5
 8002a14:	607b      	str	r3, [r7, #4]
  }

  return status;
 8002a16:	687b      	ldr	r3, [r7, #4]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <webserver_temp_sensor_read>:
  * @brief  Read temperature sensor acquisition value.
  * @param  None
  * @retval BSP status
  */
int webserver_temp_sensor_read(float *value)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  int   status = BSP_ERROR_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get value function */
  status |= BSP_ENV_SENSOR_GetValue(0, ENV_TEMPERATURE, value);
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2000      	movs	r0, #0
 8002a32:	f001 fcf7 	bl	8004424 <BSP_ENV_SENSOR_GetValue>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  return status;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <webserver_press_sensor_start>:
  * @brief  Start pressure sensor acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_press_sensor_start(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  float outputDataRate = 0;
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	603b      	str	r3, [r7, #0]
  int   status         = BSP_ERROR_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]

  /* Initialize function */
  status |= BSP_ENV_SENSOR_Init(1, ENV_PRESSURE);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f001 fb50 	bl	8004100 <BSP_ENV_SENSOR_Init>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	607b      	str	r3, [r7, #4]

  /* Enable function */
  status |= BSP_ENV_SENSOR_Enable(1, ENV_PRESSURE);
 8002a68:	2102      	movs	r1, #2
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f001 fbca 	bl	8004204 <BSP_ENV_SENSOR_Enable>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	607b      	str	r3, [r7, #4]

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 75.0f);
 8002a78:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002b08 <webserver_press_sensor_start+0xc0>
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f001 fc74 	bl	800436c <BSP_ENV_SENSOR_SetOutputDataRate>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_PRESSURE, &outputDataRate);
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2102      	movs	r1, #2
 8002a92:	2001      	movs	r0, #1
 8002a94:	f001 fc0e 	bl	80042b4 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 75.0f)
 8002aa0:	edd7 7a00 	vldr	s15, [r7]
 8002aa4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002b08 <webserver_press_sensor_start+0xc0>
 8002aa8:	eef4 7a47 	vcmp.f32	s15, s14
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	d003      	beq.n	8002aba <webserver_press_sensor_start+0x72>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f063 0305 	orn	r3, r3, #5
 8002ab8:	607b      	str	r3, [r7, #4]
  }

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 50.0f);
 8002aba:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002b0c <webserver_press_sensor_start+0xc4>
 8002abe:	2102      	movs	r1, #2
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 fc53 	bl	800436c <BSP_ENV_SENSOR_SetOutputDataRate>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_PRESSURE, &outputDataRate);
 8002ace:	463b      	mov	r3, r7
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f001 fbed 	bl	80042b4 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 50.0f)
 8002ae2:	edd7 7a00 	vldr	s15, [r7]
 8002ae6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002b0c <webserver_press_sensor_start+0xc4>
 8002aea:	eef4 7a47 	vcmp.f32	s15, s14
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	d003      	beq.n	8002afc <webserver_press_sensor_start+0xb4>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f063 0305 	orn	r3, r3, #5
 8002afa:	607b      	str	r3, [r7, #4]
  }

  return status;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	42960000 	.word	0x42960000
 8002b0c:	42480000 	.word	0x42480000

08002b10 <webserver_press_sensor_read>:
  * @brief  Read pressure sensor acquisition value.
  * @param  None
  * @retval BSP status
  */
int webserver_press_sensor_read(float *value)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  int   status = BSP_ERROR_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Get value function */
  status |= BSP_ENV_SENSOR_GetValue(1, ENV_PRESSURE, value);
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	2102      	movs	r1, #2
 8002b20:	2001      	movs	r0, #1
 8002b22:	f001 fc7f 	bl	8004424 <BSP_ENV_SENSOR_GetValue>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  return status;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <webserver_humid_sensor_start>:
  * @brief  Start humidity sensor acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_humid_sensor_start(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
  float outputDataRate = 0;
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	603b      	str	r3, [r7, #0]
  int   status         = BSP_ERROR_NONE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	607b      	str	r3, [r7, #4]

  /* Initialize function */
  status |= BSP_ENV_SENSOR_Init(0, ENV_HUMIDITY);
 8002b48:	2104      	movs	r1, #4
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f001 fad8 	bl	8004100 <BSP_ENV_SENSOR_Init>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	607b      	str	r3, [r7, #4]

  /* Enable function */
  status |= BSP_ENV_SENSOR_Enable(0, ENV_HUMIDITY);
 8002b58:	2104      	movs	r1, #4
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f001 fb52 	bl	8004204 <BSP_ENV_SENSOR_Enable>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	607b      	str	r3, [r7, #4]

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 12.5f);
 8002b68:	eeb2 0a09 	vmov.f32	s0, #41	@ 0x41480000  12.5
 8002b6c:	2104      	movs	r1, #4
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f001 fbfc 	bl	800436c <BSP_ENV_SENSOR_SetOutputDataRate>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	607b      	str	r3, [r7, #4]

  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_HUMIDITY, &outputDataRate);
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2104      	movs	r1, #4
 8002b82:	2000      	movs	r0, #0
 8002b84:	f001 fb96 	bl	80042b4 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 12.5f)
 8002b90:	edd7 7a00 	vldr	s15, [r7]
 8002b94:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002b98:	eef4 7a47 	vcmp.f32	s15, s14
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	d003      	beq.n	8002baa <webserver_humid_sensor_start+0x72>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f063 0305 	orn	r3, r3, #5
 8002ba8:	607b      	str	r3, [r7, #4]
  }

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 7.0f);
 8002baa:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8002bae:	2104      	movs	r1, #4
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f001 fbdb 	bl	800436c <BSP_ENV_SENSOR_SetOutputDataRate>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_HUMIDITY, &outputDataRate);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f001 fb75 	bl	80042b4 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 7.0f)
 8002bd2:	edd7 7a00 	vldr	s15, [r7]
 8002bd6:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8002bda:	eef4 7a47 	vcmp.f32	s15, s14
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	d003      	beq.n	8002bec <webserver_humid_sensor_start+0xb4>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f063 0305 	orn	r3, r3, #5
 8002bea:	607b      	str	r3, [r7, #4]
  }

  return status;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <webserver_humid_sensor_read>:
  * @brief  Read humidity sensor acquisition value.
  * @param  None
  * @retval BSP status
  */
int webserver_humid_sensor_read(float *value)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  int   status = BSP_ERROR_NONE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Get value function */
  status |= BSP_ENV_SENSOR_GetValue(0, ENV_HUMIDITY, value);
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	2104      	movs	r1, #4
 8002c06:	2000      	movs	r0, #0
 8002c08:	f001 fc0c 	bl	8004424 <BSP_ENV_SENSOR_GetValue>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  return status;
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <app_entry>:
  * @brief  App main program
  * @param  None
  * @retval None
  */
void app_entry(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* No buffer for printf usage, just print characters one by one.*/
  setbuf(stdout, NULL);
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <app_entry+0x60>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f012 fa65 	bl	80150fc <setbuf>

  /* Initialize web server system */
  if (system_init() != WEBSERVER_OK)
 8002c32:	f7fe fe15 	bl	8001860 <system_init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <app_entry+0x20>
  {
    webserver_process_error();
 8002c3c:	f000 f822 	bl	8002c84 <webserver_process_error>
  }

  /* Initialize WiFi connection */
  if (webserver_wifi_init() != WEBSERVER_OK)
 8002c40:	f000 f82c 	bl	8002c9c <webserver_wifi_init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <app_entry+0x2e>
  {
    webserver_process_error();
 8002c4a:	f000 f81b 	bl	8002c84 <webserver_process_error>
  }

  /* Print web server header in hyperterminal */
  webserver_console_print_header();
 8002c4e:	f7fe fa41 	bl	80010d4 <webserver_console_print_header>

  /* Connect to available WiFi */
  if (webserver_wifi_connect() != WEBSERVER_OK)
 8002c52:	f000 f853 	bl	8002cfc <webserver_wifi_connect>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <app_entry+0x40>
  {
    webserver_process_error();
 8002c5c:	f000 f812 	bl	8002c84 <webserver_process_error>
  }

  /* Start sensors */
  if (webserver_sensors_start() != BSP_ERROR_NONE)
 8002c60:	f7ff fe55 	bl	800290e <webserver_sensors_start>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <app_entry+0x4e>
  {
    webserver_process_error();
 8002c6a:	f000 f80b 	bl	8002c84 <webserver_process_error>
  }

  /* Start web server */
  if (webserver_http_start() != WEBSERVER_OK)
 8002c6e:	f7ff fa75 	bl	800215c <webserver_http_start>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <app_entry+0x5c>
  {
    webserver_process_error();
 8002c78:	f000 f804 	bl	8002c84 <webserver_process_error>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200000f0 	.word	0x200000f0

08002c84 <webserver_process_error>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void webserver_process_error(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c88:	b672      	cpsid	i
}
 8002c8a:	bf00      	nop
  /* Disable all interrupts */
  __disable_irq();

  /* De-Initialize GREEN led */
  BSP_LED_DeInit(LED_GREEN);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f000 fd81 	bl	8003794 <BSP_LED_DeInit>

  /* Turn ON RED led */
  BSP_LED_On(LED_RED);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f000 fdaa 	bl	80037ec <BSP_LED_On>

  while(1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <webserver_process_error+0x14>

08002c9c <webserver_wifi_init>:
  * @brief  Initialize WiFi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* WiFi IO configuration */
  Wifi_IO_Init();
 8002ca0:	f000 f95c 	bl	8002f5c <Wifi_IO_Init>

  /* WiFi SPI initialization and configuration */
  if (Wifi_SPI_Config() != WEBSERVER_OK)
 8002ca4:	f000 f902 	bl	8002eac <Wifi_SPI_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <webserver_wifi_init+0x18>
  {
    return WIFI_ERROR;
 8002cae:	f06f 0305 	mvn.w	r3, #5
 8002cb2:	e000      	b.n	8002cb6 <webserver_wifi_init+0x1a>
  }

  return WEBSERVER_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <wifi_get_credentials>:
  * @brief  Get WiFi credentials
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef wifi_get_credentials(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get user SSID */
  if (webserver_console_get_ssid(net_wifi_registred_hotspot, SSID) != WEBSERVER_OK)
 8002cc0:	490b      	ldr	r1, [pc, #44]	@ (8002cf0 <wifi_get_credentials+0x34>)
 8002cc2:	480c      	ldr	r0, [pc, #48]	@ (8002cf4 <wifi_get_credentials+0x38>)
 8002cc4:	f7fe fa1c 	bl	8001100 <webserver_console_get_ssid>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <wifi_get_credentials+0x18>
  {
    return CONSOLE_ERROR;
 8002cce:	f06f 0302 	mvn.w	r3, #2
 8002cd2:	e00a      	b.n	8002cea <wifi_get_credentials+0x2e>
  }

  /* Get user PWD */
  if (webserver_console_get_password(net_wifi_registred_hotspot, PassWord) != WEBSERVER_OK)
 8002cd4:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <wifi_get_credentials+0x3c>)
 8002cd6:	4807      	ldr	r0, [pc, #28]	@ (8002cf4 <wifi_get_credentials+0x38>)
 8002cd8:	f7fe fa76 	bl	80011c8 <webserver_console_get_password>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <wifi_get_credentials+0x2c>
  {
    return CONSOLE_ERROR;
 8002ce2:	f06f 0302 	mvn.w	r3, #2
 8002ce6:	e000      	b.n	8002cea <wifi_get_credentials+0x2e>
  }

  return WEBSERVER_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000c6c 	.word	0x20000c6c
 8002cf4:	20000ccc 	.word	0x20000ccc
 8002cf8:	20000c8c 	.word	0x20000c8c

08002cfc <webserver_wifi_connect>:
  * @brief  Connect WiFi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_connect(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  .psk = "none",
  .security_mode = 0
  };

  /* start network interface */
  Netif = NetInterfaceOn(mx_wifi_driver, hnet_notify);
 8002d00:	4911      	ldr	r1, [pc, #68]	@ (8002d48 <webserver_wifi_connect+0x4c>)
 8002d02:	4812      	ldr	r0, [pc, #72]	@ (8002d4c <webserver_wifi_connect+0x50>)
 8002d04:	f000 fbfc 	bl	8003500 <NetInterfaceOn>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <webserver_wifi_connect+0x54>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Check if a valid WIFI interface is initialized */
  if (NET_INTERFACE_IS_WIFI(Netif))
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <webserver_wifi_connect+0x54>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f00e fe3b 	bl	801198e <net_wifi_get_class>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d110      	bne.n	8002d40 <webserver_wifi_connect+0x44>
  {
    /* Scan available WIFIs */
    scan_cmd(0, NULL);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2000      	movs	r0, #0
 8002d22:	f000 fb31 	bl	8003388 <scan_cmd>

    /* Get user credentials */
    wifi_get_credentials();
 8002d26:	f7ff ffc9 	bl	8002cbc <wifi_get_credentials>

    /* Scan available WIFIs */
    NetWifiGetDefaultStation(&WifiCredentials, net_wifi_registred_hotspot);
 8002d2a:	490a      	ldr	r1, [pc, #40]	@ (8002d54 <webserver_wifi_connect+0x58>)
 8002d2c:	480a      	ldr	r0, [pc, #40]	@ (8002d58 <webserver_wifi_connect+0x5c>)
 8002d2e:	f000 fa45 	bl	80031bc <NetWifiGetDefaultStation>

    /* Connect to selected WIFI */
    NetInterfaceConnect(Netif, true, &WifiCredentials, NET_WIFI_MODE_STA);
 8002d32:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <webserver_wifi_connect+0x54>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	4a07      	ldr	r2, [pc, #28]	@ (8002d58 <webserver_wifi_connect+0x5c>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	f000 fc28 	bl	8003590 <NetInterfaceConnect>
  }

  return WEBSERVER_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	08002d5d 	.word	0x08002d5d
 8002d4c:	08013221 	.word	0x08013221
 8002d50:	20000bd8 	.word	0x20000bd8
 8002d54:	20000ccc 	.word	0x20000ccc
 8002d58:	2000004c 	.word	0x2000004c

08002d5c <hnet_notify>:
  * @brief  Handles net notifications
  * @param  None
  * @retval None
  */
static void hnet_notify(void *context, uint32_t event_class, uint32_t event_id, void  *event_data)
{
 8002d5c:	b5b0      	push	{r4, r5, r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af04      	add	r7, sp, #16
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  net_if_handle_t *netif = context;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	617b      	str	r3, [r7, #20]
  ((void)event_data);

  if (NET_EVENT_STATE_CHANGE == event_class)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d17a      	bne.n	8002e6a <hnet_notify+0x10e>
  {
    net_state_t new_state = (net_state_t) event_id;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	74fb      	strb	r3, [r7, #19]
    switch (new_state)
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d874      	bhi.n	8002e68 <hnet_notify+0x10c>
 8002d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <hnet_notify+0x28>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002e59 	.word	0x08002e59
 8002d88:	08002da9 	.word	0x08002da9
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002db9 	.word	0x08002db9
 8002d94:	08002e25 	.word	0x08002e25
 8002d98:	08002e2d 	.word	0x08002e2d
 8002d9c:	08002e51 	.word	0x08002e51
 8002da0:	08002e49 	.word	0x08002e49
 8002da4:	08002e61 	.word	0x08002e61
    {
      /* Initialized state */
    case NET_STATE_INITIALIZED:
      {
        printf("- Network Interface initialized:\r\n");
 8002da8:	4832      	ldr	r0, [pc, #200]	@ (8002e74 <hnet_notify+0x118>)
 8002daa:	f012 f99f 	bl	80150ec <puts>
        break;
 8002dae:	e05c      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* Started state */
    case NET_STATE_STARTING:
      {
        printf("- Network Interface starting:\r\n");
 8002db0:	4831      	ldr	r0, [pc, #196]	@ (8002e78 <hnet_notify+0x11c>)
 8002db2:	f012 f99b 	bl	80150ec <puts>
        break;
 8002db6:	e058      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* Ready state */
    case NET_STATE_READY:
      {
        printf("- Network Interface ready:\r\n");
 8002db8:	4830      	ldr	r0, [pc, #192]	@ (8002e7c <hnet_notify+0x120>)
 8002dba:	f012 f997 	bl	80150ec <puts>
        printf("   - Device Name : %s.\r\n", netif->DeviceName);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3325      	adds	r3, #37	@ 0x25
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	482e      	ldr	r0, [pc, #184]	@ (8002e80 <hnet_notify+0x124>)
 8002dc6:	f012 f921 	bl	801500c <iprintf>
        printf("   - Device ID   : %s.\r\n", netif->DeviceID);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3365      	adds	r3, #101	@ 0x65
 8002dce:	4619      	mov	r1, r3
 8002dd0:	482c      	ldr	r0, [pc, #176]	@ (8002e84 <hnet_notify+0x128>)
 8002dd2:	f012 f91b 	bl	801500c <iprintf>
        printf("   - Device Version : %s.\r\n", netif->DeviceVer);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	33a5      	adds	r3, #165	@ 0xa5
 8002dda:	4619      	mov	r1, r3
 8002ddc:	482a      	ldr	r0, [pc, #168]	@ (8002e88 <hnet_notify+0x12c>)
 8002dde:	f012 f915 	bl	801500c <iprintf>
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002de8:	4618      	mov	r0, r3
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002df0:	461c      	mov	r4, r3
               netif->macaddr.mac[0], netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002df8:	461d      	mov	r5, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002e00:	461a      	mov	r2, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002e08:	4619      	mov	r1, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n",
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	9101      	str	r1, [sp, #4]
 8002e14:	9200      	str	r2, [sp, #0]
 8002e16:	462b      	mov	r3, r5
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	481b      	ldr	r0, [pc, #108]	@ (8002e8c <hnet_notify+0x130>)
 8002e1e:	f012 f8f5 	bl	801500c <iprintf>
        break;
 8002e22:	e022      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* Connecting state */
    case NET_STATE_CONNECTING:
      {
        printf("- Network Interface connecting:\r\n");
 8002e24:	481a      	ldr	r0, [pc, #104]	@ (8002e90 <hnet_notify+0x134>)
 8002e26:	f012 f961 	bl	80150ec <puts>
        break;
 8002e2a:	e01e      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* Connected state */
    case NET_STATE_CONNECTED:
      {
        printf("- Network Interface connected:\r\n");
 8002e2c:	4819      	ldr	r0, [pc, #100]	@ (8002e94 <hnet_notify+0x138>)
 8002e2e:	f012 f95d 	bl	80150ec <puts>
        printf("   - IP address :  %s. \r\n", NET_NTOA(&netif->ipaddr));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4618      	mov	r0, r3
 8002e38:	f00e fd70 	bl	801191c <net_ntoa>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4815      	ldr	r0, [pc, #84]	@ (8002e98 <hnet_notify+0x13c>)
 8002e42:	f012 f8e3 	bl	801500c <iprintf>
        break;
 8002e46:	e010      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* Disconnecting state */
    case NET_STATE_DISCONNECTING:
      printf("- Network Interface disconnecting\r\n");
 8002e48:	4814      	ldr	r0, [pc, #80]	@ (8002e9c <hnet_notify+0x140>)
 8002e4a:	f012 f94f 	bl	80150ec <puts>
      break;
 8002e4e:	e00c      	b.n	8002e6a <hnet_notify+0x10e>

      /* Stopping state */
    case NET_STATE_STOPPING:
      {
        printf("- Network Interface stopping\r\n");
 8002e50:	4813      	ldr	r0, [pc, #76]	@ (8002ea0 <hnet_notify+0x144>)
 8002e52:	f012 f94b 	bl	80150ec <puts>
        break;
 8002e56:	e008      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* De-Initialized state */
    case NET_STATE_DEINITIALIZED:
      {
        printf("- Network Interface de-initialized\r\n");
 8002e58:	4812      	ldr	r0, [pc, #72]	@ (8002ea4 <hnet_notify+0x148>)
 8002e5a:	f012 f947 	bl	80150ec <puts>
        break;
 8002e5e:	e004      	b.n	8002e6a <hnet_notify+0x10e>
      }

      /* Lost state */
    case NET_STATE_CONNECTION_LOST:
      {
        printf("- Network Interface connection lost\r\n");
 8002e60:	4811      	ldr	r0, [pc, #68]	@ (8002ea8 <hnet_notify+0x14c>)
 8002e62:	f012 f943 	bl	80150ec <puts>
        break;
 8002e66:	e000      	b.n	8002e6a <hnet_notify+0x10e>
      }

    default:
      {
        break;
 8002e68:	bf00      	nop
      }
    }
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bdb0      	pop	{r4, r5, r7, pc}
 8002e72:	bf00      	nop
 8002e74:	08019880 	.word	0x08019880
 8002e78:	080198a4 	.word	0x080198a4
 8002e7c:	080198c4 	.word	0x080198c4
 8002e80:	080198e0 	.word	0x080198e0
 8002e84:	080198fc 	.word	0x080198fc
 8002e88:	08019918 	.word	0x08019918
 8002e8c:	08019934 	.word	0x08019934
 8002e90:	0801995c 	.word	0x0801995c
 8002e94:	08019980 	.word	0x08019980
 8002e98:	080199a0 	.word	0x080199a0
 8002e9c:	080199bc 	.word	0x080199bc
 8002ea0:	080199e0 	.word	0x080199e0
 8002ea4:	08019a00 	.word	0x08019a00
 8002ea8:	08019a24 	.word	0x08019a24

08002eac <Wifi_SPI_Config>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static WebServer_StatusTypeDef Wifi_SPI_Config(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Set SPI instance */
  Wifi_SPIHandle.Instance                        = SPI2;
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002eb2:	4a29      	ldr	r2, [pc, #164]	@ (8002f58 <Wifi_SPI_Config+0xac>)
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Set parameter to be configured */
  Wifi_SPIHandle.Init.Mode                       = SPI_MODE_MASTER;
 8002eb6:	4b27      	ldr	r3, [pc, #156]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002eb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ebc:	605a      	str	r2, [r3, #4]
  Wifi_SPIHandle.Init.Direction                  = SPI_DIRECTION_2LINES;
 8002ebe:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  Wifi_SPIHandle.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8002ec4:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	60da      	str	r2, [r3, #12]
  Wifi_SPIHandle.Init.CLKPolarity                = SPI_POLARITY_LOW;
 8002eca:	4b22      	ldr	r3, [pc, #136]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  Wifi_SPIHandle.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
  Wifi_SPIHandle.Init.NSS                        = SPI_NSS_SOFT;
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ed8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002edc:	619a      	str	r2, [r3, #24]
  Wifi_SPIHandle.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_8;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ee0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ee4:	61da      	str	r2, [r3, #28]
  Wifi_SPIHandle.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
  Wifi_SPIHandle.Init.TIMode                     = SPI_TIMODE_DISABLE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  Wifi_SPIHandle.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  Wifi_SPIHandle.Init.CRCPolynomial              = 0x7;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002efa:	2207      	movs	r2, #7
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
  Wifi_SPIHandle.Init.NSSPMode                   = SPI_NSS_PULSE_DISABLE;
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	635a      	str	r2, [r3, #52]	@ 0x34
  Wifi_SPIHandle.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8002f04:	4b13      	ldr	r3, [pc, #76]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	639a      	str	r2, [r3, #56]	@ 0x38
  Wifi_SPIHandle.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  Wifi_SPIHandle.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	649a      	str	r2, [r3, #72]	@ 0x48
  Wifi_SPIHandle.Init.MasterInterDataIdleness    = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  Wifi_SPIHandle.Init.MasterReceiverAutoSusp     = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	651a      	str	r2, [r3, #80]	@ 0x50
  Wifi_SPIHandle.Init.MasterKeepIOState          = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54
  Wifi_SPIHandle.Init.IOSwap                     = SPI_IO_SWAP_DISABLE;
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	659a      	str	r2, [r3, #88]	@ 0x58
  Wifi_SPIHandle.Init.ReadyMasterManagement      = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	65da      	str	r2, [r3, #92]	@ 0x5c
  Wifi_SPIHandle.Init.ReadyPolarity              = SPI_RDY_POLARITY_HIGH;
 8002f34:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* SPI initialization */
  if (HAL_SPI_Init(&Wifi_SPIHandle) != HAL_OK)
 8002f3a:	4806      	ldr	r0, [pc, #24]	@ (8002f54 <Wifi_SPI_Config+0xa8>)
 8002f3c:	f00c fc16 	bl	800f76c <HAL_SPI_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <Wifi_SPI_Config+0xa0>
  {
    return PERIPH_ERROR;
 8002f46:	f06f 0304 	mvn.w	r3, #4
 8002f4a:	e000      	b.n	8002f4e <Wifi_SPI_Config+0xa2>
  }

  return WEBSERVER_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000bdc 	.word	0x20000bdc
 8002f58:	40003800 	.word	0x40003800

08002f5c <Wifi_IO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void Wifi_IO_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	@ 0x30
 8002f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f62:	f107 031c 	add.w	r3, r7, #28
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	60da      	str	r2, [r3, #12]
 8002f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f72:	4b63      	ldr	r3, [pc, #396]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f78:	4a61      	ldr	r2, [pc, #388]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f82:	4b5f      	ldr	r3, [pc, #380]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f90:	4b5b      	ldr	r3, [pc, #364]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f96:	4a5a      	ldr	r2, [pc, #360]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fa0:	4b57      	ldr	r3, [pc, #348]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fae:	4b54      	ldr	r3, [pc, #336]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb4:	4a52      	ldr	r2, [pc, #328]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fb6:	f043 0308 	orr.w	r3, r3, #8
 8002fba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fbe:	4b50      	ldr	r3, [pc, #320]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd2:	4a4b      	ldr	r2, [pc, #300]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fdc:	4b48      	ldr	r3, [pc, #288]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	4b45      	ldr	r3, [pc, #276]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff0:	4a43      	ldr	r2, [pc, #268]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ffa:	4b41      	ldr	r3, [pc, #260]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003008:	4b3d      	ldr	r3, [pc, #244]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 800300a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800300e:	4a3c      	ldr	r2, [pc, #240]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003018:	4b39      	ldr	r3, [pc, #228]	@ (8003100 <Wifi_IO_Init+0x1a4>)
 800301a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_RESET_GPIO_Port, MXCHIP_RESET_Pin, GPIO_PIN_RESET);
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800302c:	4835      	ldr	r0, [pc, #212]	@ (8003104 <Wifi_IO_Init+0x1a8>)
 800302e:	f006 fe81 	bl	8009d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003032:	2200      	movs	r2, #0
 8003034:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003038:	4833      	ldr	r0, [pc, #204]	@ (8003108 <Wifi_IO_Init+0x1ac>)
 800303a:	f006 fe7b 	bl	8009d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_NSS_GPIO_Port, MXCHIP_NSS_Pin, GPIO_PIN_SET);
 800303e:	2201      	movs	r2, #1
 8003040:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003044:	4831      	ldr	r0, [pc, #196]	@ (800310c <Wifi_IO_Init+0x1b0>)
 8003046:	f006 fe75 	bl	8009d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MXCHIP_FLOW_Pin */
  GPIO_InitStruct.Pin = MXCHIP_FLOW_Pin;
 800304a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800304e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003050:	4b2f      	ldr	r3, [pc, #188]	@ (8003110 <Wifi_IO_Init+0x1b4>)
 8003052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MXCHIP_FLOW_GPIO_Port, &GPIO_InitStruct);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	4619      	mov	r1, r3
 800305e:	482d      	ldr	r0, [pc, #180]	@ (8003114 <Wifi_IO_Init+0x1b8>)
 8003060:	f006 fb9a 	bl	8009798 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_RESET_Pin */
  GPIO_InitStruct.Pin = MXCHIP_RESET_Pin;
 8003064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306a:	2301      	movs	r3, #1
 800306c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	2300      	movs	r3, #0
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MXCHIP_RESET_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	4821      	ldr	r0, [pc, #132]	@ (8003104 <Wifi_IO_Init+0x1a8>)
 800307e:	f006 fb8b 	bl	8009798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003082:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003088:	2301      	movs	r3, #1
 800308a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	481b      	ldr	r0, [pc, #108]	@ (8003108 <Wifi_IO_Init+0x1ac>)
 800309c:	f006 fb7c 	bl	8009798 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NSS_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NSS_Pin;
 80030a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a6:	2301      	movs	r3, #1
 80030a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ae:	2300      	movs	r3, #0
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MXCHIP_NSS_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	4814      	ldr	r0, [pc, #80]	@ (800310c <Wifi_IO_Init+0x1b0>)
 80030ba:	f006 fb6d 	bl	8009798 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NOTIFY_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NOTIFY_Pin;
 80030be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <Wifi_IO_Init+0x1b4>)
 80030c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MXCHIP_NOTIFY_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4619      	mov	r1, r3
 80030d2:	480d      	ldr	r0, [pc, #52]	@ (8003108 <Wifi_IO_Init+0x1ac>)
 80030d4:	f006 fb60 	bl	8009798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI14_IRQn, 5, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2105      	movs	r1, #5
 80030dc:	2019      	movs	r0, #25
 80030de:	f006 f9cd 	bl	800947c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 80030e2:	2019      	movs	r0, #25
 80030e4:	f006 f9e4 	bl	80094b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 5, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2105      	movs	r1, #5
 80030ec:	201a      	movs	r0, #26
 80030ee:	f006 f9c5 	bl	800947c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 80030f2:	201a      	movs	r0, #26
 80030f4:	f006 f9dc 	bl	80094b0 <HAL_NVIC_EnableIRQ>
}
 80030f8:	bf00      	nop
 80030fa:	3730      	adds	r7, #48	@ 0x30
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	46020c00 	.word	0x46020c00
 8003104:	42021400 	.word	0x42021400
 8003108:	42020c00 	.word	0x42020c00
 800310c:	42020400 	.word	0x42020400
 8003110:	10110000 	.word	0x10110000
 8003114:	42021800 	.word	0x42021800

08003118 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief GPIO EXTI callback function
  * @param None
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003128:	d007      	beq.n	800313a <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800312a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312e:	d109      	bne.n	8003144 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
  {
    /* MXCHIP flow pin notification */
    case MXCHIP_FLOW_Pin:
    {
      mxchip_WIFI_ISR(MXCHIP_FLOW_Pin);
 8003130:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003134:	f005 fd1c 	bl	8008b70 <mxchip_WIFI_ISR>
      break;
 8003138:	e005      	b.n	8003146 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

    /* MXCHIP notify pin notification */
    case (MXCHIP_NOTIFY_Pin):
    {
      mxchip_WIFI_ISR(MXCHIP_NOTIFY_Pin);
 800313a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800313e:	f005 fd17 	bl	8008b70 <mxchip_WIFI_ISR>
      break;
 8003142:	e000      	b.n	8003146 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

  default:
    {
      break;
 8003144:	bf00      	nop
    }
  }
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_SPI_RxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <HAL_SPI_RxCpltCallback+0x20>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d102      	bne.n	8003166 <HAL_SPI_RxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f005 fce5 	bl	8008b30 <HAL_SPI_TransferCallback>
  }
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000bdc 	.word	0x20000bdc

08003174 <HAL_SPI_TxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a05      	ldr	r2, [pc, #20]	@ (8003194 <HAL_SPI_TxCpltCallback+0x20>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d102      	bne.n	800318a <HAL_SPI_TxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f005 fcd3 	bl	8008b30 <HAL_SPI_TransferCallback>
  }
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000bdc 	.word	0x20000bdc

08003198 <HAL_SPI_TxRxCpltCallback>:
  * @param hspi : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <HAL_SPI_TxRxCpltCallback+0x20>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d102      	bne.n	80031ae <HAL_SPI_TxRxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f005 fcc1 	bl	8008b30 <HAL_SPI_TransferCallback>
  }
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000bdc 	.word	0x20000bdc

080031bc <NetWifiGetDefaultStation>:
{
  return NET_TICK();
}

void NetWifiGetDefaultStation(net_wifi_credentials_t *WifiCreds, const ap_t net_wifi_registred_hotspot[])
{
 80031bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031c0:	b093      	sub	sp, #76	@ 0x4c
 80031c2:	af08      	add	r7, sp, #32
 80031c4:	6178      	str	r0, [r7, #20]
 80031c6:	6139      	str	r1, [r7, #16]
  int32_t ret;

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2100      	movs	r1, #0
 80031cc:	2000      	movs	r0, #0
 80031ce:	f00e fcc5 	bl	8011b5c <net_wifi_scan>
 80031d2:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == NET_OK)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <NetWifiGetDefaultStation+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 80031da:	2264      	movs	r2, #100	@ 0x64
 80031dc:	4967      	ldr	r1, [pc, #412]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 80031de:	2000      	movs	r0, #0
 80031e0:	f00e fd1e 	bl	8011c20 <net_wifi_get_scan_results>
 80031e4:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (ret > 0)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f340 80c1 	ble.w	8003370 <NetWifiGetDefaultStation+0x1b4>
  {
    for (uint32_t i = 0; i < (uint32_t)ret; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	e0b8      	b.n	8003366 <NetWifiGetDefaultStation+0x1aa>
    {
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e0aa      	b.n	8003350 <NetWifiGetDefaultStation+0x194>
      {
        if (strcmp((const char *)APs[i].ssid.value, net_wifi_registred_hotspot[j].ssid) == 0)
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	2234      	movs	r2, #52	@ 0x34
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	4a5e      	ldr	r2, [pc, #376]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 8003204:	4413      	add	r3, r2
 8003206:	1c58      	adds	r0, r3, #1
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd f830 	bl	8000278 <strcmp>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8095 	bne.w	800334a <NetWifiGetDefaultStation+0x18e>
        {
          WifiCreds->ssid = net_wifi_registred_hotspot[j].ssid;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	601a      	str	r2, [r3, #0]
          WifiCreds->psk = net_wifi_registred_hotspot[j].pwd;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4413      	add	r3, r2
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	605a      	str	r2, [r3, #4]
          WifiCreds->security_mode = APs[i].security;
 800323c:	4a4f      	ldr	r2, [pc, #316]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	2134      	movs	r1, #52	@ 0x34
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3328      	adds	r3, #40	@ 0x28
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	609a      	str	r2, [r3, #8]
          printf("\r\n");
 8003252:	484b      	ldr	r0, [pc, #300]	@ (8003380 <NetWifiGetDefaultStation+0x1c4>)
 8003254:	f011 ff4a 	bl	80150ec <puts>
          printf("\r\n");
 8003258:	4849      	ldr	r0, [pc, #292]	@ (8003380 <NetWifiGetDefaultStation+0x1c4>)
 800325a:	f011 ff47 	bl	80150ec <puts>
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2234      	movs	r2, #52	@ 0x34
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	4a45      	ldr	r2, [pc, #276]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 8003268:	4413      	add	r3, r2
 800326a:	1c5c      	adds	r4, r3, #1
 800326c:	4a43      	ldr	r2, [pc, #268]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2134      	movs	r1, #52	@ 0x34
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	332c      	adds	r3, #44	@ 0x2c
 800327a:	781b      	ldrb	r3, [r3, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 800327c:	4698      	mov	r8, r3
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 800327e:	4a3f      	ldr	r2, [pc, #252]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	2134      	movs	r1, #52	@ 0x34
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3331      	adds	r3, #49	@ 0x31
 800328c:	f993 3000 	ldrsb.w	r3, [r3]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003290:	4699      	mov	r9, r3
 8003292:	4a3a      	ldr	r2, [pc, #232]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2134      	movs	r1, #52	@ 0x34
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3328      	adds	r3, #40	@ 0x28
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00e fb82 	bl	80119ac <net_wifi_security_to_string>
 80032a8:	4601      	mov	r1, r0
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2234      	movs	r2, #52	@ 0x34
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	3328      	adds	r3, #40	@ 0x28
 80032b4:	4a31      	ldr	r2, [pc, #196]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 80032b6:	4413      	add	r3, r2
 80032b8:	3305      	adds	r3, #5
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80032ba:	4830      	ldr	r0, [pc, #192]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	2534      	movs	r5, #52	@ 0x34
 80032c0:	fb05 f202 	mul.w	r2, r5, r2
 80032c4:	4402      	add	r2, r0
 80032c6:	3221      	adds	r2, #33	@ 0x21
 80032c8:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80032ca:	4616      	mov	r6, r2
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80032cc:	482b      	ldr	r0, [pc, #172]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	2534      	movs	r5, #52	@ 0x34
 80032d2:	fb05 f202 	mul.w	r2, r5, r2
 80032d6:	4402      	add	r2, r0
 80032d8:	3222      	adds	r2, #34	@ 0x22
 80032da:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80032dc:	60fa      	str	r2, [r7, #12]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80032de:	4827      	ldr	r0, [pc, #156]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	2534      	movs	r5, #52	@ 0x34
 80032e4:	fb05 f202 	mul.w	r2, r5, r2
 80032e8:	4402      	add	r2, r0
 80032ea:	3223      	adds	r2, #35	@ 0x23
 80032ec:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80032ee:	60ba      	str	r2, [r7, #8]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80032f0:	4822      	ldr	r0, [pc, #136]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	2534      	movs	r5, #52	@ 0x34
 80032f6:	fb05 f202 	mul.w	r2, r5, r2
 80032fa:	4402      	add	r2, r0
 80032fc:	3224      	adds	r2, #36	@ 0x24
 80032fe:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003300:	607a      	str	r2, [r7, #4]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003302:	481e      	ldr	r0, [pc, #120]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	2534      	movs	r5, #52	@ 0x34
 8003308:	fb05 f202 	mul.w	r2, r5, r2
 800330c:	4402      	add	r2, r0
 800330e:	3225      	adds	r2, #37	@ 0x25
 8003310:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003312:	603a      	str	r2, [r7, #0]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003314:	4819      	ldr	r0, [pc, #100]	@ (800337c <NetWifiGetDefaultStation+0x1c0>)
 8003316:	6a3a      	ldr	r2, [r7, #32]
 8003318:	2534      	movs	r5, #52	@ 0x34
 800331a:	fb05 f202 	mul.w	r2, r5, r2
 800331e:	4402      	add	r2, r0
 8003320:	3226      	adds	r2, #38	@ 0x26
 8003322:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003324:	9207      	str	r2, [sp, #28]
 8003326:	6838      	ldr	r0, [r7, #0]
 8003328:	9006      	str	r0, [sp, #24]
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	9005      	str	r0, [sp, #20]
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	9004      	str	r0, [sp, #16]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	9203      	str	r2, [sp, #12]
 8003336:	9602      	str	r6, [sp, #8]
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	9100      	str	r1, [sp, #0]
 800333c:	464b      	mov	r3, r9
 800333e:	4642      	mov	r2, r8
 8003340:	4621      	mov	r1, r4
 8003342:	4810      	ldr	r0, [pc, #64]	@ (8003384 <NetWifiGetDefaultStation+0x1c8>)
 8003344:	f011 fe62 	bl	801500c <iprintf>
          return;
 8003348:	e013      	b.n	8003372 <NetWifiGetDefaultStation+0x1b6>
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f47f af4d 	bne.w	80031fa <NetWifiGetDefaultStation+0x3e>
    for (uint32_t i = 0; i < (uint32_t)ret; i++)
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	3301      	adds	r3, #1
 8003364:	623b      	str	r3, [r7, #32]
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	429a      	cmp	r2, r3
 800336c:	f4ff af42 	bcc.w	80031f4 <NetWifiGetDefaultStation+0x38>
        }
      }
    }
  }
  return;
 8003370:	bf00      	nop
}
 8003372:	372c      	adds	r7, #44	@ 0x2c
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800337a:	bf00      	nop
 800337c:	20000cdc 	.word	0x20000cdc
 8003380:	08019a64 	.word	0x08019a64
 8003384:	08019a68 	.word	0x08019a68

08003388 <scan_cmd>:

int32_t scan_cmd(int32_t argc, char **argv)
{
 8003388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338c:	b094      	sub	sp, #80	@ 0x50
 800338e:	af0a      	add	r7, sp, #40	@ 0x28
 8003390:	61f8      	str	r0, [r7, #28]
 8003392:	61b9      	str	r1, [r7, #24]
  int32_t ret;
  ((void)argc);
  ((void)argv);

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	2000      	movs	r0, #0
 800339a:	f00e fbdf 	bl	8011b5c <net_wifi_scan>
 800339e:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == NET_OK)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d105      	bne.n	80033b2 <scan_cmd+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 80033a6:	2264      	movs	r2, #100	@ 0x64
 80033a8:	4950      	ldr	r1, [pc, #320]	@ (80034ec <scan_cmd+0x164>)
 80033aa:	2000      	movs	r0, #0
 80033ac:	f00e fc38 	bl	8011c20 <net_wifi_get_scan_results>
 80033b0:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (ret > 0)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f340 8093 	ble.w	80034e0 <scan_cmd+0x158>
  {
    printf("\r\n");
 80033ba:	484d      	ldr	r0, [pc, #308]	@ (80034f0 <scan_cmd+0x168>)
 80033bc:	f011 fe96 	bl	80150ec <puts>
    printf("*** Start wifi scan \r\n");
 80033c0:	484c      	ldr	r0, [pc, #304]	@ (80034f4 <scan_cmd+0x16c>)
 80033c2:	f011 fe93 	bl	80150ec <puts>
    printf("\r\n");
 80033c6:	484a      	ldr	r0, [pc, #296]	@ (80034f0 <scan_cmd+0x168>)
 80033c8:	f011 fe90 	bl	80150ec <puts>
    for (int i = 0; i < ret; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	e079      	b.n	80034c6 <scan_cmd+0x13e>
    {
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2234      	movs	r2, #52	@ 0x34
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	4a44      	ldr	r2, [pc, #272]	@ (80034ec <scan_cmd+0x164>)
 80033dc:	4413      	add	r3, r2
 80033de:	1c5c      	adds	r4, r3, #1
 80033e0:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <scan_cmd+0x164>)
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2134      	movs	r1, #52	@ 0x34
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	332c      	adds	r3, #44	@ 0x2c
 80033ee:	781b      	ldrb	r3, [r3, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80033f0:	4698      	mov	r8, r3
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80033f2:	4a3e      	ldr	r2, [pc, #248]	@ (80034ec <scan_cmd+0x164>)
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2134      	movs	r1, #52	@ 0x34
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3331      	adds	r3, #49	@ 0x31
 8003400:	f993 3000 	ldrsb.w	r3, [r3]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003404:	461e      	mov	r6, r3
 8003406:	4a39      	ldr	r2, [pc, #228]	@ (80034ec <scan_cmd+0x164>)
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	2134      	movs	r1, #52	@ 0x34
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3328      	adds	r3, #40	@ 0x28
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f00e fac8 	bl	80119ac <net_wifi_security_to_string>
 800341c:	4601      	mov	r1, r0
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2234      	movs	r2, #52	@ 0x34
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	3328      	adds	r3, #40	@ 0x28
 8003428:	4a30      	ldr	r2, [pc, #192]	@ (80034ec <scan_cmd+0x164>)
 800342a:	4413      	add	r3, r2
 800342c:	3305      	adds	r3, #5
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 800342e:	482f      	ldr	r0, [pc, #188]	@ (80034ec <scan_cmd+0x164>)
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	2534      	movs	r5, #52	@ 0x34
 8003434:	fb05 f202 	mul.w	r2, r5, r2
 8003438:	4402      	add	r2, r0
 800343a:	3221      	adds	r2, #33	@ 0x21
 800343c:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 800343e:	617a      	str	r2, [r7, #20]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003440:	482a      	ldr	r0, [pc, #168]	@ (80034ec <scan_cmd+0x164>)
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	2534      	movs	r5, #52	@ 0x34
 8003446:	fb05 f202 	mul.w	r2, r5, r2
 800344a:	4402      	add	r2, r0
 800344c:	3222      	adds	r2, #34	@ 0x22
 800344e:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003450:	613a      	str	r2, [r7, #16]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003452:	4826      	ldr	r0, [pc, #152]	@ (80034ec <scan_cmd+0x164>)
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	2534      	movs	r5, #52	@ 0x34
 8003458:	fb05 f202 	mul.w	r2, r5, r2
 800345c:	4402      	add	r2, r0
 800345e:	3223      	adds	r2, #35	@ 0x23
 8003460:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003462:	60fa      	str	r2, [r7, #12]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003464:	4821      	ldr	r0, [pc, #132]	@ (80034ec <scan_cmd+0x164>)
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	2534      	movs	r5, #52	@ 0x34
 800346a:	fb05 f202 	mul.w	r2, r5, r2
 800346e:	4402      	add	r2, r0
 8003470:	3224      	adds	r2, #36	@ 0x24
 8003472:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003474:	60ba      	str	r2, [r7, #8]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003476:	481d      	ldr	r0, [pc, #116]	@ (80034ec <scan_cmd+0x164>)
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	2534      	movs	r5, #52	@ 0x34
 800347c:	fb05 f202 	mul.w	r2, r5, r2
 8003480:	4402      	add	r2, r0
 8003482:	3225      	adds	r2, #37	@ 0x25
 8003484:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003486:	607a      	str	r2, [r7, #4]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003488:	4818      	ldr	r0, [pc, #96]	@ (80034ec <scan_cmd+0x164>)
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	2534      	movs	r5, #52	@ 0x34
 800348e:	fb05 f202 	mul.w	r2, r5, r2
 8003492:	4402      	add	r2, r0
 8003494:	3226      	adds	r2, #38	@ 0x26
 8003496:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003498:	9208      	str	r2, [sp, #32]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	9007      	str	r0, [sp, #28]
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	9006      	str	r0, [sp, #24]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	9005      	str	r0, [sp, #20]
 80034a6:	6938      	ldr	r0, [r7, #16]
 80034a8:	9004      	str	r0, [sp, #16]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	9203      	str	r2, [sp, #12]
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	9101      	str	r1, [sp, #4]
 80034b2:	9600      	str	r6, [sp, #0]
 80034b4:	4643      	mov	r3, r8
 80034b6:	4622      	mov	r2, r4
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	480f      	ldr	r0, [pc, #60]	@ (80034f8 <scan_cmd+0x170>)
 80034bc:	f011 fda6 	bl	801500c <iprintf>
    for (int i = 0; i < ret; i++)
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	3301      	adds	r3, #1
 80034c4:	623b      	str	r3, [r7, #32]
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	429a      	cmp	r2, r3
 80034cc:	db81      	blt.n	80033d2 <scan_cmd+0x4a>
    }
    printf("\r\n");
 80034ce:	4808      	ldr	r0, [pc, #32]	@ (80034f0 <scan_cmd+0x168>)
 80034d0:	f011 fe0c 	bl	80150ec <puts>
    printf("*** End of wifi scan \r\n");
 80034d4:	4809      	ldr	r0, [pc, #36]	@ (80034fc <scan_cmd+0x174>)
 80034d6:	f011 fe09 	bl	80150ec <puts>
    printf("\r\n");
 80034da:	4805      	ldr	r0, [pc, #20]	@ (80034f0 <scan_cmd+0x168>)
 80034dc:	f011 fe06 	bl	80150ec <puts>
  }

  return 0;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ec:	20000cdc 	.word	0x20000cdc
 80034f0:	08019a64 	.word	0x08019a64
 80034f4:	08019ad4 	.word	0x08019ad4
 80034f8:	08019aec 	.word	0x08019aec
 80034fc:	08019b44 	.word	0x08019b44

08003500 <NetInterfaceOn>:

net_if_handle_t *NetInterfaceOn(net_if_driver_init_func registred_driver, net_if_notify_func hnet_notify)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  net_if_handle_t *netif;
  net_event_handler_t *net_handler;
  int32_t ret = NET_ERROR_PARAMETER;
 800350a:	f06f 0303 	mvn.w	r3, #3
 800350e:	617b      	str	r3, [r7, #20]

  netif = NET_MALLOC(sizeof(net_if_handle_t));
 8003510:	20f8      	movs	r0, #248	@ 0xf8
 8003512:	f010 fd8f 	bl	8014034 <malloc>
 8003516:	4603      	mov	r3, r0
 8003518:	613b      	str	r3, [r7, #16]

  if (netif == NULL)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <NetInterfaceOn+0x26>
  {
    printf("Unable to allocate network interface\r\n");
 8003520:	4818      	ldr	r0, [pc, #96]	@ (8003584 <NetInterfaceOn+0x84>)
 8003522:	f011 fde3 	bl	80150ec <puts>
  }
  memset(netif, 0, sizeof(*netif));
 8003526:	22f8      	movs	r2, #248	@ 0xf8
 8003528:	2100      	movs	r1, #0
 800352a:	6938      	ldr	r0, [r7, #16]
 800352c:	f012 f824 	bl	8015578 <memset>

  net_handler = NET_MALLOC(sizeof(*net_handler));
 8003530:	2008      	movs	r0, #8
 8003532:	f010 fd7f 	bl	8014034 <malloc>
 8003536:	4603      	mov	r3, r0
 8003538:	60fb      	str	r3, [r7, #12]
  if (net_handler == NULL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <NetInterfaceOn+0x46>
  {
    printf("Unable to allocate net_handler\r\n");
 8003540:	4811      	ldr	r0, [pc, #68]	@ (8003588 <NetInterfaceOn+0x88>)
 8003542:	f011 fdd3 	bl	80150ec <puts>
  }

  net_handler->callback = hnet_notify;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]
  net_handler->context = netif;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]

  /* Initialize the network stack. */
  ret = net_if_init(netif, registred_driver, net_handler);
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	6938      	ldr	r0, [r7, #16]
 8003558:	f00e fd04 	bl	8011f64 <net_if_init>
 800355c:	6178      	str	r0, [r7, #20]

  if (NET_OK == ret)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <NetInterfaceOn+0x74>
  {
    ret = net_if_wait_state(netif, NET_STATE_INITIALIZED, NET_STATE_TRANSITION_TIMEOUT);
 8003564:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003568:	2101      	movs	r1, #1
 800356a:	6938      	ldr	r0, [r7, #16]
 800356c:	f00e fca2 	bl	8011eb4 <net_if_wait_state>
 8003570:	6178      	str	r0, [r7, #20]
 8003572:	e002      	b.n	800357a <NetInterfaceOn+0x7a>
  }
  else

  {
    printf("Network interface initialization failed\r\n");
 8003574:	4805      	ldr	r0, [pc, #20]	@ (800358c <NetInterfaceOn+0x8c>)
 8003576:	f011 fdb9 	bl	80150ec <puts>
  }
  return netif;
 800357a:	693b      	ldr	r3, [r7, #16]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	08019b5c 	.word	0x08019b5c
 8003588:	08019b84 	.word	0x08019b84
 800358c:	08019ba4 	.word	0x08019ba4

08003590 <NetInterfaceConnect>:
  }
  return;
}

void NetInterfaceConnect(net_if_handle_t *netif, bool dhcp_mode, void *credential, net_wifi_mode_t mode)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	460b      	mov	r3, r1
 800359e:	72fb      	strb	r3, [r7, #11]
 80035a0:	4613      	mov	r3, r2
 80035a2:	72bb      	strb	r3, [r7, #10]
  int32_t ret = NET_ERROR_GENERIC;
 80035a4:	f06f 031c 	mvn.w	r3, #28
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set credentials for WiFi modules. */
  if (NET_INTERFACE_IS_WIFI(netif))
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f00e f9ef 	bl	801198e <net_wifi_get_class>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d137      	bne.n	8003626 <NetInterfaceConnect+0x96>
  {
    net_wifi_credentials_t *wifi_credential = (net_wifi_credentials_t *) credential;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	623b      	str	r3, [r7, #32]
    if (wifi_credential->psk == NULL)
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <NetInterfaceConnect+0x38>
    {
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
    }
    if (NET_WIFI_MODE_AP == mode)
 80035c8:	7abb      	ldrb	r3, [r7, #10]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10a      	bne.n	80035e4 <NetInterfaceConnect+0x54>
    {
      dhcp_mode = false;
 80035ce:	2300      	movs	r3, #0
 80035d0:	72fb      	strb	r3, [r7, #11]
      wifi_credential->ssid = "MyHotSpot";
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	@ (80036c8 <NetInterfaceConnect+0x138>)
 80035d6:	601a      	str	r2, [r3, #0]
      wifi_credential->psk = " ";
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	4a3c      	ldr	r2, [pc, #240]	@ (80036cc <NetInterfaceConnect+0x13c>)
 80035dc:	605a      	str	r2, [r3, #4]
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
    }

    net_wifi_set_credentials(netif, wifi_credential);
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f00e fb6a 	bl	8011cc0 <net_wifi_set_credentials>
    net_wifi_set_access_mode(netif, mode);
 80035ec:	7abb      	ldrb	r3, [r7, #10]
 80035ee:	4619      	mov	r1, r3
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f00e fb77 	bl	8011ce4 <net_wifi_set_access_mode>
    net_wifi_set_access_channel(netif, 8u);
 80035f6:	2108      	movs	r1, #8
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f00e fb86 	bl	8011d0a <net_wifi_set_access_channel>
    net_wifi_set_ap_max_connections(netif, 4u);
 80035fe:	2104      	movs	r1, #4
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f00e fb95 	bl	8011d30 <net_wifi_set_ap_max_connections>
    NET_DBG_PRINT("main ... %p %p \"%s\"\r\n", wifi_credential, wifi_credential->ssid, wifi_credential->ssid);
 8003606:	22bf      	movs	r2, #191	@ 0xbf
 8003608:	4931      	ldr	r1, [pc, #196]	@ (80036d0 <NetInterfaceConnect+0x140>)
 800360a:	4832      	ldr	r0, [pc, #200]	@ (80036d4 <NetInterfaceConnect+0x144>)
 800360c:	f011 fcfe 	bl	801500c <iprintf>
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a39      	ldr	r1, [r7, #32]
 800361a:	482f      	ldr	r0, [pc, #188]	@ (80036d8 <NetInterfaceConnect+0x148>)
 800361c:	f011 fcf6 	bl	801500c <iprintf>
 8003620:	200a      	movs	r0, #10
 8003622:	f011 fd05 	bl	8015030 <putchar>
  }


  ret = net_if_start(netif);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f00e fcea 	bl	8012000 <net_if_start>
 800362c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (NET_OK == ret)
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d13c      	bne.n	80036ae <NetInterfaceConnect+0x11e>
  {
    ret = net_if_wait_state(netif, NET_STATE_READY, NET_STATE_TRANSITION_TIMEOUT);
 8003634:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003638:	2103      	movs	r1, #3
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f00e fc3a 	bl	8011eb4 <net_if_wait_state>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24
    if (NET_OK == ret)
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d129      	bne.n	800369c <NetInterfaceConnect+0x10c>
    {
      if (dhcp_mode)
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <NetInterfaceConnect+0xc8>
      {
        net_if_set_dhcp_mode(netif, true);
 800364e:	2101      	movs	r1, #1
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f00e fd69 	bl	8012128 <net_if_set_dhcp_mode>
 8003656:	e013      	b.n	8003680 <NetInterfaceConnect+0xf0>
      }
      else
      {
        net_ip_addr_t ip = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 8003658:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <NetInterfaceConnect+0x14c>)
 800365a:	61fb      	str	r3, [r7, #28]
        net_ip_addr_t gw = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 800365c:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <NetInterfaceConnect+0x14c>)
 800365e:	61bb      	str	r3, [r7, #24]
        net_ip_addr_t msk = NET_IPADDR4_INIT_BYTES(255, 255, 254, 0);
 8003660:	4b1f      	ldr	r3, [pc, #124]	@ (80036e0 <NetInterfaceConnect+0x150>)
 8003662:	617b      	str	r3, [r7, #20]
        net_if_set_dhcp_mode(netif, false);
 8003664:	2100      	movs	r1, #0
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f00e fd5e 	bl	8012128 <net_if_set_dhcp_mode>
        net_if_set_dhcp_server_mode(netif, true);
 800366c:	2101      	movs	r1, #1
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f00e fd75 	bl	801215e <net_if_set_dhcp_server_mode>
        net_if_set_ipaddr(netif, ip, gw, msk);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	69f9      	ldr	r1, [r7, #28]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f00e fd8a 	bl	8012194 <net_if_set_ipaddr>
      }

      ret = net_if_connect(netif);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f00e fcca 	bl	801201a <net_if_connect>
 8003686:	6278      	str	r0, [r7, #36]	@ 0x24
      if (NET_OK == ret)
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <NetInterfaceConnect+0x10c>
      {
        ret = net_if_wait_state(netif, NET_STATE_CONNECTED, NET_STATE_TRANSITION_TIMEOUT);
 800368e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003692:	2105      	movs	r1, #5
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f00e fc0d 	bl	8011eb4 <net_if_wait_state>
 800369a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }
    if (NET_OK != ret)
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <NetInterfaceConnect+0x11e>
    {
      printf("ERROR: Cannot connect WiFi interface!\r\n");
 80036a2:	4810      	ldr	r0, [pc, #64]	@ (80036e4 <NetInterfaceConnect+0x154>)
 80036a4:	f011 fd22 	bl	80150ec <puts>
      printf("  If not done, Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot)!\r\n");
 80036a8:	480f      	ldr	r0, [pc, #60]	@ (80036e8 <NetInterfaceConnect+0x158>)
 80036aa:	f011 fd1f 	bl	80150ec <puts>
    }
  }
  if (NET_OK != ret)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <NetInterfaceConnect+0x130>
  {
    printf("ERROR: Cannot connect interface !\r\n");
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <NetInterfaceConnect+0x15c>)
 80036b6:	f011 fd19 	bl	80150ec <puts>
    printf("  If not done, Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot)!\r\n");
 80036ba:	480b      	ldr	r0, [pc, #44]	@ (80036e8 <NetInterfaceConnect+0x158>)
 80036bc:	f011 fd16 	bl	80150ec <puts>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3728      	adds	r7, #40	@ 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08019c04 	.word	0x08019c04
 80036cc:	08019c10 	.word	0x08019c10
 80036d0:	08019c14 	.word	0x08019c14
 80036d4:	08019c98 	.word	0x08019c98
 80036d8:	08019ca0 	.word	0x08019ca0
 80036dc:	0101a8c0 	.word	0x0101a8c0
 80036e0:	00feffff 	.word	0x00feffff
 80036e4:	08019cb8 	.word	0x08019cb8
 80036e8:	08019ce0 	.word	0x08019ce0
 80036ec:	08019d4c 	.word	0x08019d4c

080036f0 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 80036fe:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <BSP_LED_Init+0x98>)
 8003700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003704:	4a20      	ldr	r2, [pc, #128]	@ (8003788 <BSP_LED_Init+0x98>)
 8003706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800370e:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <BSP_LED_Init+0x98>)
 8003710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 800371c:	4b1a      	ldr	r3, [pc, #104]	@ (8003788 <BSP_LED_Init+0x98>)
 800371e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003722:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <BSP_LED_Init+0x98>)
 8003724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003728:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800372c:	4b16      	ldr	r3, [pc, #88]	@ (8003788 <BSP_LED_Init+0x98>)
 800372e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003742:	2302      	movs	r3, #2
 8003744:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	4a10      	ldr	r2, [pc, #64]	@ (800378c <BSP_LED_Init+0x9c>)
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	4a0f      	ldr	r2, [pc, #60]	@ (8003790 <BSP_LED_Init+0xa0>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f006 f81a 	bl	8009798 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <BSP_LED_Init+0xa0>)
 8003768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	4a07      	ldr	r2, [pc, #28]	@ (800378c <BSP_LED_Init+0x9c>)
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	b29b      	uxth	r3, r3
 8003776:	2201      	movs	r2, #1
 8003778:	4619      	mov	r1, r3
 800377a:	f006 fadb 	bl	8009d34 <HAL_GPIO_WritePin>

  return ret;
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003780:	4618      	mov	r0, r3
 8003782:	3728      	adds	r7, #40	@ 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	46020c00 	.word	0x46020c00
 800378c:	0818c8b0 	.word	0x0818c8b0
 8003790:	20000058 	.word	0x20000058

08003794 <BSP_LED_DeInit>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_DeInit(Led_TypeDef Led)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	4a0f      	ldr	r2, [pc, #60]	@ (80037e4 <BSP_LED_DeInit+0x50>)
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(LED_PORT[Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	4a0e      	ldr	r2, [pc, #56]	@ (80037e8 <BSP_LED_DeInit+0x54>)
 80037b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4a0b      	ldr	r2, [pc, #44]	@ (80037e4 <BSP_LED_DeInit+0x50>)
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	4619      	mov	r1, r3
 80037c2:	f006 fab7 	bl	8009d34 <HAL_GPIO_WritePin>
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4a07      	ldr	r2, [pc, #28]	@ (80037e8 <BSP_LED_DeInit+0x54>)
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f006 f9b8 	bl	8009b48 <HAL_GPIO_DeInit>

  return ret;
 80037d8:	69fb      	ldr	r3, [r7, #28]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	0818c8b0 	.word	0x0818c8b0
 80037e8:	20000058 	.word	0x20000058

080037ec <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	4a09      	ldr	r2, [pc, #36]	@ (8003820 <BSP_LED_On+0x34>)
 80037fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4a08      	ldr	r2, [pc, #32]	@ (8003824 <BSP_LED_On+0x38>)
 8003802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003806:	b29b      	uxth	r3, r3
 8003808:	2200      	movs	r2, #0
 800380a:	4619      	mov	r1, r3
 800380c:	f006 fa92 	bl	8009d34 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]

  return ret;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000058 	.word	0x20000058
 8003824:	0818c8b0 	.word	0x0818c8b0

08003828 <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4a09      	ldr	r2, [pc, #36]	@ (800385c <BSP_LED_Toggle+0x34>)
 8003836:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	4908      	ldr	r1, [pc, #32]	@ (8003860 <BSP_LED_Toggle+0x38>)
 800383e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003842:	b29b      	uxth	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f006 fa8c 	bl	8009d64 <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  return ret;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000058 	.word	0x20000058
 8003860:	0818c8b0 	.word	0x0818c8b0

08003864 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 800386e:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <BSP_I2C2_Init+0x64>)
 8003870:	4a16      	ldr	r2, [pc, #88]	@ (80038cc <BSP_I2C2_Init+0x68>)
 8003872:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <BSP_I2C2_Init+0x6c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11f      	bne.n	80038bc <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 800387c:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <BSP_I2C2_Init+0x6c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	4a13      	ldr	r2, [pc, #76]	@ (80038d0 <BSP_I2C2_Init+0x6c>)
 8003884:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8003886:	4810      	ldr	r0, [pc, #64]	@ (80038c8 <BSP_I2C2_Init+0x64>)
 8003888:	f006 fdc4 	bl	800a414 <HAL_I2C_GetState>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <BSP_I2C2_Init+0x64>)
 8003894:	f000 fb60 	bl	8003f58 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8003898:	f009 f9c6 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800389c:	4603      	mov	r3, r0
 800389e:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <BSP_I2C2_Init+0x70>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8e3 	bl	8003a6c <I2C_GetTiming>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4619      	mov	r1, r3
 80038aa:	4807      	ldr	r0, [pc, #28]	@ (80038c8 <BSP_I2C2_Init+0x64>)
 80038ac:	f000 f838 	bl	8003920 <MX_I2C2_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80038b6:	f06f 0307 	mvn.w	r3, #7
 80038ba:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20002b34 	.word	0x20002b34
 80038cc:	40005800 	.word	0x40005800
 80038d0:	2000212c 	.word	0x2000212c
 80038d4:	000186a0 	.word	0x000186a0

080038d8 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 80038e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <BSP_I2C2_DeInit+0x40>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003918 <BSP_I2C2_DeInit+0x40>)
 80038ea:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <BSP_I2C2_DeInit+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 80038f4:	4809      	ldr	r0, [pc, #36]	@ (800391c <BSP_I2C2_DeInit+0x44>)
 80038f6:	f000 fb95 	bl	8004024 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 80038fa:	4808      	ldr	r0, [pc, #32]	@ (800391c <BSP_I2C2_DeInit+0x44>)
 80038fc:	f006 fb18 	bl	8009f30 <HAL_I2C_DeInit>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003906:	f06f 0307 	mvn.w	r3, #7
 800390a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000212c 	.word	0x2000212c
 800391c:	20002b34 	.word	0x20002b34

08003920 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f006 fa4b 	bl	8009dfa <HAL_I2C_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e014      	b.n	800399a <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f007 f828 	bl	800a9cc <HAL_I2CEx_ConfigAnalogFilter>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e008      	b.n	800399a <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003988:	2100      	movs	r1, #0
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f007 f869 	bl	800aa62 <HAL_I2CEx_ConfigDigitalFilter>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60ba      	str	r2, [r7, #8]
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	81fb      	strh	r3, [r7, #14]
 80039b2:	460b      	mov	r3, r1
 80039b4:	81bb      	strh	r3, [r7, #12]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80039ba:	89b9      	ldrh	r1, [r7, #12]
 80039bc:	89f8      	ldrh	r0, [r7, #14]
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f000 fb4f 	bl	8004068 <I2C2_WriteReg>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e00c      	b.n	80039f0 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80039d6:	4809      	ldr	r0, [pc, #36]	@ (80039fc <BSP_I2C2_WriteReg+0x58>)
 80039d8:	f006 fd2a 	bl	800a430 <HAL_I2C_GetError>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d103      	bne.n	80039ea <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80039e2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e002      	b.n	80039f0 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80039ea:	f06f 0303 	mvn.w	r3, #3
 80039ee:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80039f0:	697b      	ldr	r3, [r7, #20]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20002b34 	.word	0x20002b34

08003a00 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60ba      	str	r2, [r7, #8]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	81fb      	strh	r3, [r7, #14]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	81bb      	strh	r3, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003a16:	89b9      	ldrh	r1, [r7, #12]
 8003a18:	89f8      	ldrh	r0, [r7, #14]
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f000 fb47 	bl	80040b4 <I2C2_ReadReg>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e00c      	b.n	8003a4c <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003a32:	4809      	ldr	r0, [pc, #36]	@ (8003a58 <BSP_I2C2_ReadReg+0x58>)
 8003a34:	f006 fcfc 	bl	800a430 <HAL_I2C_GetError>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d103      	bne.n	8003a46 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003a3e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e002      	b.n	8003a4c <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003a46:	f06f 0303 	mvn.w	r3, #3
 8003a4a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8003a4c:	697b      	ldr	r3, [r7, #20]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20002b34 	.word	0x20002b34

08003a5c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003a60:	f005 fc24 	bl	80092ac <HAL_GetTick>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d06b      	beq.n	8003b58 <I2C_GetTiming+0xec>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d068      	beq.n	8003b58 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e060      	b.n	8003b4e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003a8c:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <I2C_GetTiming+0xf8>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	212c      	movs	r1, #44	@ 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d352      	bcc.n	8003b48 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003aa2:	4a30      	ldr	r2, [pc, #192]	@ (8003b64 <I2C_GetTiming+0xf8>)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	212c      	movs	r1, #44	@ 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3308      	adds	r3, #8
 8003ab0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d847      	bhi.n	8003b48 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003ab8:	6939      	ldr	r1, [r7, #16]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f856 	bl	8003b6c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003ac0:	6939      	ldr	r1, [r7, #16]
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f940 	bl	8003d48 <I2C_Compute_SCLL_SCLH>
 8003ac8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ace:	d842      	bhi.n	8003b56 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003ad0:	4925      	ldr	r1, [pc, #148]	@ (8003b68 <I2C_GetTiming+0xfc>)
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003ae2:	4821      	ldr	r0, [pc, #132]	@ (8003b68 <I2C_GetTiming+0xfc>)
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4403      	add	r3, r0
 8003af0:	3304      	adds	r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	051b      	lsls	r3, r3, #20
 8003af6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003afa:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8003afc:	481a      	ldr	r0, [pc, #104]	@ (8003b68 <I2C_GetTiming+0xfc>)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4403      	add	r3, r0
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003b14:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8003b16:	4814      	ldr	r0, [pc, #80]	@ (8003b68 <I2C_GetTiming+0xfc>)
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4403      	add	r3, r0
 8003b24:	330c      	adds	r3, #12
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8003b2c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003b2e:	480e      	ldr	r0, [pc, #56]	@ (8003b68 <I2C_GetTiming+0xfc>)
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4403      	add	r3, r0
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003b42:	430b      	orrs	r3, r1
 8003b44:	617b      	str	r3, [r7, #20]
        }
        break;
 8003b46:	e006      	b.n	8003b56 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d99b      	bls.n	8003a8c <I2C_GetTiming+0x20>
 8003b54:	e000      	b.n	8003b58 <I2C_GetTiming+0xec>
        break;
 8003b56:	bf00      	nop
      }
    }
  }

  return ret;
 8003b58:	697b      	ldr	r3, [r7, #20]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	0818c8b8 	.word	0x0818c8b8
 8003b68:	20002130 	.word	0x20002130

08003b6c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b08f      	sub	sp, #60	@ 0x3c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003b76:	2310      	movs	r3, #16
 8003b78:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	085a      	lsrs	r2, r3, #1
 8003b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003d38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003b80:	4413      	add	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b88:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003b8a:	2332      	movs	r3, #50	@ 0x32
 8003b8c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003b8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003b92:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003b94:	4a69      	ldr	r2, [pc, #420]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	212c      	movs	r1, #44	@ 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3324      	adds	r3, #36	@ 0x24
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	4a65      	ldr	r2, [pc, #404]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	212c      	movs	r1, #44	@ 0x2c
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003bba:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003bbc:	495f      	ldr	r1, [pc, #380]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	202c      	movs	r0, #44	@ 0x2c
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3328      	adds	r3, #40	@ 0x28
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3303      	adds	r3, #3
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003bd8:	4a58      	ldr	r2, [pc, #352]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	212c      	movs	r1, #44	@ 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3310      	adds	r3, #16
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	4a54      	ldr	r2, [pc, #336]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	212c      	movs	r1, #44	@ 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003bfc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003bfe:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003c00:	494e      	ldr	r1, [pc, #312]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	202c      	movs	r0, #44	@ 0x2c
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3328      	adds	r3, #40	@ 0x28
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003c1c:	4a47      	ldr	r2, [pc, #284]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	212c      	movs	r1, #44	@ 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3320      	adds	r3, #32
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	4a43      	ldr	r2, [pc, #268]	@ (8003d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	212c      	movs	r1, #44	@ 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4403      	add	r3, r0
 8003c40:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	dc01      	bgt.n	8003c4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8003c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dc01      	bgt.n	8003c56 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c5a:	e062      	b.n	8003d22 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c60:	e059      	b.n	8003d16 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c68:	3201      	adds	r2, #1
 8003c6a:	fb03 f202 	mul.w	r2, r3, r2
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d348      	bcc.n	8003d10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	e042      	b.n	8003d0a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	3301      	adds	r3, #1
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	fb03 f202 	mul.w	r2, r3, r2
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d332      	bcc.n	8003d04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d82e      	bhi.n	8003d04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8003ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d02a      	beq.n	8003d04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4924      	ldr	r1, [pc, #144]	@ (8003d44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	491f      	ldr	r1, [pc, #124]	@ (8003d44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003cd8:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4919      	ldr	r1, [pc, #100]	@ (8003d44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3308      	adds	r3, #8
 8003cea:	6a3a      	ldr	r2, [r7, #32]
 8003cec:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8003cf2:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a11      	ldr	r2, [pc, #68]	@ (8003d40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003cfa:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003cfc:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d02:	d812      	bhi.n	8003d2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	3301      	adds	r3, #1
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d9b9      	bls.n	8003c84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	3301      	adds	r3, #1
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d9a2      	bls.n	8003c62 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	3301      	adds	r3, #1
 8003d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d999      	bls.n	8003c5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003d28:	e000      	b.n	8003d2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003d2a:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003d2c:	373c      	adds	r7, #60	@ 0x3c
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	3b9aca00 	.word	0x3b9aca00
 8003d3c:	0818c8b8 	.word	0x0818c8b8
 8003d40:	20002b30 	.word	0x20002b30
 8003d44:	20002130 	.word	0x20002130

08003d48 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b093      	sub	sp, #76	@ 0x4c
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	085a      	lsrs	r2, r3, #1
 8003d5c:	4b7a      	ldr	r3, [pc, #488]	@ (8003f48 <I2C_Compute_SCLL_SCLH+0x200>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8003d68:	4a78      	ldr	r2, [pc, #480]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	212c      	movs	r1, #44	@ 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	085a      	lsrs	r2, r3, #1
 8003d78:	4b73      	ldr	r3, [pc, #460]	@ (8003f48 <I2C_Compute_SCLL_SCLH+0x200>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4973      	ldr	r1, [pc, #460]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	202c      	movs	r0, #44	@ 0x2c
 8003d82:	fb00 f202 	mul.w	r2, r0, r2
 8003d86:	440a      	add	r2, r1
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003d90:	2332      	movs	r3, #50	@ 0x32
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003d94:	4a6d      	ldr	r2, [pc, #436]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	212c      	movs	r1, #44	@ 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3328      	adds	r3, #40	@ 0x28
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003dac:	4a67      	ldr	r2, [pc, #412]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	212c      	movs	r1, #44	@ 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3304      	adds	r3, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a62      	ldr	r2, [pc, #392]	@ (8003f48 <I2C_Compute_SCLL_SCLH+0x200>)
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003dc4:	4a61      	ldr	r2, [pc, #388]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	212c      	movs	r1, #44	@ 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f48 <I2C_Compute_SCLL_SCLH+0x200>)
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de4:	e0a3      	b.n	8003f2e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003de6:	495a      	ldr	r1, [pc, #360]	@ (8003f50 <I2C_Compute_SCLL_SCLH+0x208>)
 8003de8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e04:	e08c      	b.n	8003f20 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0e:	3301      	adds	r3, #1
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	fb03 f101 	mul.w	r1, r3, r1
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	440b      	add	r3, r1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003e20:	4a4a      	ldr	r2, [pc, #296]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	212c      	movs	r1, #44	@ 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d971      	bls.n	8003f1a <I2C_Compute_SCLL_SCLH+0x1d2>
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	1ad2      	subs	r2, r2, r3
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d268      	bcs.n	8003f1a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e4c:	e062      	b.n	8003f14 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	441a      	add	r2, r3
 8003e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e56:	3301      	adds	r3, #1
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	fb03 f101 	mul.w	r1, r3, r1
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	440b      	add	r3, r1
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	4937      	ldr	r1, [pc, #220]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	202c      	movs	r0, #44	@ 0x2c
 8003e74:	fb00 f303 	mul.w	r3, r0, r3
 8003e78:	440b      	add	r3, r1
 8003e7a:	3320      	adds	r3, #32
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	441a      	add	r2, r3
 8003e80:	4932      	ldr	r1, [pc, #200]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	202c      	movs	r0, #44	@ 0x2c
 8003e86:	fb00 f303 	mul.w	r3, r0, r3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3324      	adds	r3, #36	@ 0x24
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d338      	bcc.n	8003f0e <I2C_Compute_SCLL_SCLH+0x1c6>
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d834      	bhi.n	8003f0e <I2C_Compute_SCLL_SCLH+0x1c6>
 8003ea4:	4a29      	ldr	r2, [pc, #164]	@ (8003f4c <I2C_Compute_SCLL_SCLH+0x204>)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	212c      	movs	r1, #44	@ 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	331c      	adds	r3, #28
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d329      	bcc.n	8003f0e <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 8003eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d225      	bcs.n	8003f0e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da02      	bge.n	8003ed6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d917      	bls.n	8003f0e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8003ee2:	491b      	ldr	r1, [pc, #108]	@ (8003f50 <I2C_Compute_SCLL_SCLH+0x208>)
 8003ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ef4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003ef6:	4916      	ldr	r1, [pc, #88]	@ (8003f50 <I2C_Compute_SCLL_SCLH+0x208>)
 8003ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	330c      	adds	r3, #12
 8003f06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f08:	601a      	str	r2, [r3, #0]
              ret = count;
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f10:	3301      	adds	r3, #1
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	2bff      	cmp	r3, #255	@ 0xff
 8003f18:	d999      	bls.n	8003e4e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f22:	2bff      	cmp	r3, #255	@ 0xff
 8003f24:	f67f af6f 	bls.w	8003e06 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2e:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f34:	429a      	cmp	r2, r3
 8003f36:	f4ff af56 	bcc.w	8003de6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	374c      	adds	r7, #76	@ 0x4c
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	3b9aca00 	.word	0x3b9aca00
 8003f4c:	0818c8b8 	.word	0x0818c8b8
 8003f50:	20002130 	.word	0x20002130
 8003f54:	20002b30 	.word	0x20002b30

08003f58 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	@ 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8003f60:	4b2e      	ldr	r3, [pc, #184]	@ (800401c <I2C2_MspInit+0xc4>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f66:	4a2d      	ldr	r2, [pc, #180]	@ (800401c <I2C2_MspInit+0xc4>)
 8003f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f70:	4b2a      	ldr	r3, [pc, #168]	@ (800401c <I2C2_MspInit+0xc4>)
 8003f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8003f7e:	4b27      	ldr	r3, [pc, #156]	@ (800401c <I2C2_MspInit+0xc4>)
 8003f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f84:	4a25      	ldr	r2, [pc, #148]	@ (800401c <I2C2_MspInit+0xc4>)
 8003f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f8e:	4b23      	ldr	r3, [pc, #140]	@ (800401c <I2C2_MspInit+0xc4>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8003fa0:	2312      	movs	r3, #18
 8003fa2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 8003fac:	2304      	movs	r3, #4
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	481a      	ldr	r0, [pc, #104]	@ (8004020 <I2C2_MspInit+0xc8>)
 8003fb8:	f005 fbee 	bl	8009798 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8003fc0:	2312      	movs	r3, #18
 8003fc2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8003fcc:	2304      	movs	r3, #4
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4812      	ldr	r0, [pc, #72]	@ (8004020 <I2C2_MspInit+0xc8>)
 8003fd8:	f005 fbde 	bl	8009798 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <I2C2_MspInit+0xc4>)
 8003fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800401c <I2C2_MspInit+0xc4>)
 8003fe4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fe8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003fec:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <I2C2_MspInit+0xc4>)
 8003fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8003ffa:	4b08      	ldr	r3, [pc, #32]	@ (800401c <I2C2_MspInit+0xc4>)
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffe:	4a07      	ldr	r2, [pc, #28]	@ (800401c <I2C2_MspInit+0xc4>)
 8004000:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004004:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <I2C2_MspInit+0xc4>)
 8004008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400a:	4a04      	ldr	r2, [pc, #16]	@ (800401c <I2C2_MspInit+0xc4>)
 800400c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004010:	6753      	str	r3, [r2, #116]	@ 0x74
}
 8004012:	bf00      	nop
 8004014:	3728      	adds	r7, #40	@ 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	46020c00 	.word	0x46020c00
 8004020:	42021c00 	.word	0x42021c00

08004024 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800402c:	2310      	movs	r3, #16
 800402e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4619      	mov	r1, r3
 8004034:	480a      	ldr	r0, [pc, #40]	@ (8004060 <I2C2_MspDeInit+0x3c>)
 8004036:	f005 fd87 	bl	8009b48 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800403a:	2320      	movs	r3, #32
 800403c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4619      	mov	r1, r3
 8004042:	4807      	ldr	r0, [pc, #28]	@ (8004060 <I2C2_MspDeInit+0x3c>)
 8004044:	f005 fd80 	bl	8009b48 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8004048:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <I2C2_MspDeInit+0x40>)
 800404a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800404e:	4a05      	ldr	r2, [pc, #20]	@ (8004064 <I2C2_MspDeInit+0x40>)
 8004050:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004054:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8004058:	bf00      	nop
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	42021c00 	.word	0x42021c00
 8004064:	46020c00 	.word	0x46020c00

08004068 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af04      	add	r7, sp, #16
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	4603      	mov	r3, r0
 8004072:	81fb      	strh	r3, [r7, #14]
 8004074:	460b      	mov	r3, r1
 8004076:	81bb      	strh	r3, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800407c:	8978      	ldrh	r0, [r7, #10]
 800407e:	89ba      	ldrh	r2, [r7, #12]
 8004080:	89f9      	ldrh	r1, [r7, #14]
 8004082:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004086:	9302      	str	r3, [sp, #8]
 8004088:	8b3b      	ldrh	r3, [r7, #24]
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	4603      	mov	r3, r0
 8004092:	4807      	ldr	r0, [pc, #28]	@ (80040b0 <I2C2_WriteReg+0x48>)
 8004094:	f005 ff90 	bl	8009fb8 <HAL_I2C_Mem_Write>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800409e:	2300      	movs	r3, #0
 80040a0:	e001      	b.n	80040a6 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80040a2:	f06f 0307 	mvn.w	r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20002b34 	.word	0x20002b34

080040b4 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	4603      	mov	r3, r0
 80040be:	81fb      	strh	r3, [r7, #14]
 80040c0:	460b      	mov	r3, r1
 80040c2:	81bb      	strh	r3, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80040c8:	8978      	ldrh	r0, [r7, #10]
 80040ca:	89ba      	ldrh	r2, [r7, #12]
 80040cc:	89f9      	ldrh	r1, [r7, #14]
 80040ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80040d2:	9302      	str	r3, [sp, #8]
 80040d4:	8b3b      	ldrh	r3, [r7, #24]
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4603      	mov	r3, r0
 80040de:	4807      	ldr	r0, [pc, #28]	@ (80040fc <I2C2_ReadReg+0x48>)
 80040e0:	f006 f87e 	bl	800a1e0 <HAL_I2C_Mem_Read>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e001      	b.n	80040f2 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80040ee:	f06f 0307 	mvn.w	r3, #7
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20002b34 	.word	0x20002b34

08004100 <BSP_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d903      	bls.n	800411c <BSP_ENV_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004114:	f06f 0301 	mvn.w	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e036      	b.n	800418a <BSP_ENV_SENSOR_Init+0x8a>
  }
  else if (((Instance == 0U) && ((Functions & ENV_PRESSURE) != 0U))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <BSP_ENV_SENSOR_Init+0x2c>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <BSP_ENV_SENSOR_Init+0x3c>
           || ((Instance == 1U) && ((Functions & ENV_HUMIDITY) != 0U)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d108      	bne.n	8004144 <BSP_ENV_SENSOR_Init+0x44>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <BSP_ENV_SENSOR_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800413c:	f06f 030a 	mvn.w	r3, #10
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e022      	b.n	800418a <BSP_ENV_SENSOR_Init+0x8a>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <BSP_ENV_SENSOR_Init+0x5e>
    {
      if (HTS221_Probe(Functions) != BSP_ERROR_NONE)
 800414a:	6838      	ldr	r0, [r7, #0]
 800414c:	f000 f9c6 	bl	80044dc <HTS221_Probe>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <BSP_ENV_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8004156:	f06f 0304 	mvn.w	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e008      	b.n	8004170 <BSP_ENV_SENSOR_Init+0x70>
      }
    }
    else /* Instance = 1 */
    {
      if (LPS22HH_Probe(Functions) != BSP_ERROR_NONE)
 800415e:	6838      	ldr	r0, [r7, #0]
 8004160:	f000 fa32 	bl	80045c8 <LPS22HH_Probe>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <BSP_ENV_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800416a:	f06f 0304 	mvn.w	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <BSP_ENV_SENSOR_Init+0x8a>
    {
      /* Store current initialized functions */
      Env_Sensor_Ctx[Instance].Functions |= Functions;
 8004176:	4a07      	ldr	r2, [pc, #28]	@ (8004194 <BSP_ENV_SENSOR_Init+0x94>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	431a      	orrs	r2, r3
 8004182:	4904      	ldr	r1, [pc, #16]	@ (8004194 <BSP_ENV_SENSOR_Init+0x94>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20002b88 	.word	0x20002b88

08004198 <BSP_ENV_SENSOR_DeInit>:
  * @brief  De-initialize environmental sensor.
  * @param  Instance Environmental sensor instance.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_DeInit(uint32_t Instance)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d903      	bls.n	80041b2 <BSP_ENV_SENSOR_DeInit+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80041aa:	f06f 0301 	mvn.w	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e01c      	b.n	80041ec <BSP_ENV_SENSOR_DeInit+0x54>
  }
  else if (Env_Sensor_Ctx[Instance].Functions != 0U)
 80041b2:	4a11      	ldr	r2, [pc, #68]	@ (80041f8 <BSP_ENV_SENSOR_DeInit+0x60>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <BSP_ENV_SENSOR_DeInit+0x54>
  {
    /* De-initialize the sensor */
    if (Env_Sensor_Drv[Instance]->DeInit(Env_Sensor_CompObj[Instance]) < 0)
 80041be:	4a0f      	ldr	r2, [pc, #60]	@ (80041fc <BSP_ENV_SENSOR_DeInit+0x64>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	490d      	ldr	r1, [pc, #52]	@ (8004200 <BSP_ENV_SENSOR_DeInit+0x68>)
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041d0:	4610      	mov	r0, r2
 80041d2:	4798      	blx	r3
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da03      	bge.n	80041e2 <BSP_ENV_SENSOR_DeInit+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80041da:	f06f 0304 	mvn.w	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e004      	b.n	80041ec <BSP_ENV_SENSOR_DeInit+0x54>
    }
    else
    {
      /* Reset current initialized functions */
      Env_Sensor_Ctx[Instance].Functions = 0U;
 80041e2:	4a05      	ldr	r2, [pc, #20]	@ (80041f8 <BSP_ENV_SENSOR_DeInit+0x60>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2100      	movs	r1, #0
 80041e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  else
  {
    /* Nothing to do (not initialized) */
  }
  return status;
 80041ec:	68fb      	ldr	r3, [r7, #12]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20002b88 	.word	0x20002b88
 80041fc:	20002b98 	.word	0x20002b98
 8004200:	20002b90 	.word	0x20002b90

08004204 <BSP_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d903      	bls.n	8004220 <BSP_ENV_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004218:	f06f 0301 	mvn.w	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e03d      	b.n	800429c <BSP_ENV_SENSOR_Enable+0x98>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <BSP_ENV_SENSOR_Enable+0x28>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d005      	beq.n	8004238 <BSP_ENV_SENSOR_Enable+0x34>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d106      	bne.n	8004240 <BSP_ENV_SENSOR_Enable+0x3c>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d103      	bne.n	8004240 <BSP_ENV_SENSOR_Enable+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004238:	f06f 030a 	mvn.w	r3, #10
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e02d      	b.n	800429c <BSP_ENV_SENSOR_Enable+0x98>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004240:	4a19      	ldr	r2, [pc, #100]	@ (80042a8 <BSP_ENV_SENSOR_Enable+0xa4>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <BSP_ENV_SENSOR_Enable+0x54>
  {
    status = BSP_ERROR_NO_INIT;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e021      	b.n	800429c <BSP_ENV_SENSOR_Enable+0x98>
  }
  else
  {
    /* Enable the environmental sensor function */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d006      	beq.n	800426c <BSP_ENV_SENSOR_Enable+0x68>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d101      	bne.n	8004268 <BSP_ENV_SENSOR_Enable+0x64>
 8004264:	2301      	movs	r3, #1
 8004266:	e002      	b.n	800426e <BSP_ENV_SENSOR_Enable+0x6a>
 8004268:	2302      	movs	r3, #2
 800426a:	e000      	b.n	800426e <BSP_ENV_SENSOR_Enable+0x6a>
 800426c:	2300      	movs	r3, #0
 800426e:	72fb      	strb	r3, [r7, #11]
    if (Env_Sensor_FuncDrv[Instance][index]->Enable(Env_Sensor_CompObj[Instance]) < 0)
 8004270:	7af9      	ldrb	r1, [r7, #11]
 8004272:	480e      	ldr	r0, [pc, #56]	@ (80042ac <BSP_ENV_SENSOR_Enable+0xa8>)
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	440b      	add	r3, r1
 800427e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	490a      	ldr	r1, [pc, #40]	@ (80042b0 <BSP_ENV_SENSOR_Enable+0xac>)
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	da02      	bge.n	800429c <BSP_ENV_SENSOR_Enable+0x98>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004296:	f06f 0304 	mvn.w	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20002b88 	.word	0x20002b88
 80042ac:	20002ba0 	.word	0x20002ba0
 80042b0:	20002b90 	.word	0x20002b90

080042b4 <BSP_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetOutputDataRate(const uint32_t Instance, uint32_t Function, float_t *Odr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d802      	bhi.n	80042d0 <BSP_ENV_SENSOR_GetOutputDataRate+0x1c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <BSP_ENV_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80042d0:	f06f 0301 	mvn.w	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e03e      	b.n	8004356 <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <BSP_ENV_SENSOR_GetOutputDataRate+0x30>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d005      	beq.n	80042f0 <BSP_ENV_SENSOR_GetOutputDataRate+0x3c>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d106      	bne.n	80042f8 <BSP_ENV_SENSOR_GetOutputDataRate+0x44>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d103      	bne.n	80042f8 <BSP_ENV_SENSOR_GetOutputDataRate+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80042f0:	f06f 030a 	mvn.w	r3, #10
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e02e      	b.n	8004356 <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80042f8:	4a19      	ldr	r2, [pc, #100]	@ (8004360 <BSP_ENV_SENSOR_GetOutputDataRate+0xac>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <BSP_ENV_SENSOR_GetOutputDataRate+0x5c>
  {
    status = BSP_ERROR_NO_INIT;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e022      	b.n	8004356 <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
  }
  else
  {
    /* Get the environmental sensor output data rate */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d006      	beq.n	8004324 <BSP_ENV_SENSOR_GetOutputDataRate+0x70>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d101      	bne.n	8004320 <BSP_ENV_SENSOR_GetOutputDataRate+0x6c>
 800431c:	2301      	movs	r3, #1
 800431e:	e002      	b.n	8004326 <BSP_ENV_SENSOR_GetOutputDataRate+0x72>
 8004320:	2302      	movs	r3, #2
 8004322:	e000      	b.n	8004326 <BSP_ENV_SENSOR_GetOutputDataRate+0x72>
 8004324:	2300      	movs	r3, #0
 8004326:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Env_Sensor_CompObj[Instance], Odr) < 0)
 8004328:	7cf9      	ldrb	r1, [r7, #19]
 800432a:	480e      	ldr	r0, [pc, #56]	@ (8004364 <BSP_ENV_SENSOR_GetOutputDataRate+0xb0>)
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	440b      	add	r3, r1
 8004336:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	490a      	ldr	r1, [pc, #40]	@ (8004368 <BSP_ENV_SENSOR_GetOutputDataRate+0xb4>)
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4610      	mov	r0, r2
 8004348:	4798      	blx	r3
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	da02      	bge.n	8004356 <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004350:	f06f 0304 	mvn.w	r3, #4
 8004354:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004356:	697b      	ldr	r3, [r7, #20]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20002b88 	.word	0x20002b88
 8004364:	20002ba0 	.word	0x20002ba0
 8004368:	20002b90 	.word	0x20002b90

0800436c <BSP_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d903      	bls.n	800438c <BSP_ENV_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004384:	f06f 0301 	mvn.w	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e03f      	b.n	800440c <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <BSP_ENV_SENSOR_SetOutputDataRate+0x2c>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d005      	beq.n	80043a4 <BSP_ENV_SENSOR_SetOutputDataRate+0x38>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d106      	bne.n	80043ac <BSP_ENV_SENSOR_SetOutputDataRate+0x40>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d103      	bne.n	80043ac <BSP_ENV_SENSOR_SetOutputDataRate+0x40>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80043a4:	f06f 030a 	mvn.w	r3, #10
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e02f      	b.n	800440c <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80043ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004418 <BSP_ENV_SENSOR_SetOutputDataRate+0xac>)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <BSP_ENV_SENSOR_SetOutputDataRate+0x58>
  {
    status = BSP_ERROR_NO_INIT;
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e023      	b.n	800440c <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
  }
  else
  {
    /* Set the environmental sensor output data rate */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d006      	beq.n	80043d8 <BSP_ENV_SENSOR_SetOutputDataRate+0x6c>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d101      	bne.n	80043d4 <BSP_ENV_SENSOR_SetOutputDataRate+0x68>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e002      	b.n	80043da <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e000      	b.n	80043da <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
 80043d8:	2300      	movs	r3, #0
 80043da:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Env_Sensor_CompObj[Instance], Odr) < 0)
 80043dc:	7cf9      	ldrb	r1, [r7, #19]
 80043de:	480f      	ldr	r0, [pc, #60]	@ (800441c <BSP_ENV_SENSOR_SetOutputDataRate+0xb0>)
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	490b      	ldr	r1, [pc, #44]	@ (8004420 <BSP_ENV_SENSOR_SetOutputDataRate+0xb4>)
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80043f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80043fc:	4610      	mov	r0, r2
 80043fe:	4798      	blx	r3
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	da02      	bge.n	800440c <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004406:	f06f 0304 	mvn.w	r3, #4
 800440a:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800440c:	697b      	ldr	r3, [r7, #20]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20002b88 	.word	0x20002b88
 800441c:	20002ba0 	.word	0x20002ba0
 8004420:	20002b90 	.word	0x20002b90

08004424 <BSP_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value Pointer to environmental sensor value.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetValue(const uint32_t Instance, uint32_t Function, float_t *Value)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Value == NULL))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d802      	bhi.n	8004440 <BSP_ENV_SENSOR_GetValue+0x1c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <BSP_ENV_SENSOR_GetValue+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004440:	f06f 0301 	mvn.w	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e03e      	b.n	80044c6 <BSP_ENV_SENSOR_GetValue+0xa2>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <BSP_ENV_SENSOR_GetValue+0x30>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d005      	beq.n	8004460 <BSP_ENV_SENSOR_GetValue+0x3c>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d106      	bne.n	8004468 <BSP_ENV_SENSOR_GetValue+0x44>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d103      	bne.n	8004468 <BSP_ENV_SENSOR_GetValue+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004460:	f06f 030a 	mvn.w	r3, #10
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e02e      	b.n	80044c6 <BSP_ENV_SENSOR_GetValue+0xa2>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004468:	4a19      	ldr	r2, [pc, #100]	@ (80044d0 <BSP_ENV_SENSOR_GetValue+0xac>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <BSP_ENV_SENSOR_GetValue+0x5c>
  {
    status = BSP_ERROR_NO_INIT;
 8004478:	f04f 33ff 	mov.w	r3, #4294967295
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e022      	b.n	80044c6 <BSP_ENV_SENSOR_GetValue+0xa2>
  }
  else
  {
    /* Get environmental sensor value */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d006      	beq.n	8004494 <BSP_ENV_SENSOR_GetValue+0x70>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d101      	bne.n	8004490 <BSP_ENV_SENSOR_GetValue+0x6c>
 800448c:	2301      	movs	r3, #1
 800448e:	e002      	b.n	8004496 <BSP_ENV_SENSOR_GetValue+0x72>
 8004490:	2302      	movs	r3, #2
 8004492:	e000      	b.n	8004496 <BSP_ENV_SENSOR_GetValue+0x72>
 8004494:	2300      	movs	r3, #0
 8004496:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->GetValue(Env_Sensor_CompObj[Instance], Value) < 0)
 8004498:	7cf9      	ldrb	r1, [r7, #19]
 800449a:	480e      	ldr	r0, [pc, #56]	@ (80044d4 <BSP_ENV_SENSOR_GetValue+0xb0>)
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	440b      	add	r3, r1
 80044a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	490a      	ldr	r1, [pc, #40]	@ (80044d8 <BSP_ENV_SENSOR_GetValue+0xb4>)
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4610      	mov	r0, r2
 80044b8:	4798      	blx	r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da02      	bge.n	80044c6 <BSP_ENV_SENSOR_GetValue+0xa2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80044c0:	f06f 0304 	mvn.w	r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80044c6:	697b      	ldr	r3, [r7, #20]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20002b88 	.word	0x20002b88
 80044d4:	20002ba0 	.word	0x20002ba0
 80044d8:	20002b90 	.word	0x20002b90

080044dc <HTS221_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status.
  */
static int32_t HTS221_Probe(uint32_t Functions)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	@ 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  int32_t                status = BSP_ERROR_NONE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HTS221_IO_t            IOCtx;
  uint8_t                hts221_id;
  static HTS221_Object_t HTS221_Obj;

  /* Configure the environmental sensor driver */
  IOCtx.BusType     = HTS221_I2C_BUS;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = HTS221_I2C_ADDRESS;
 80044ec:	23bf      	movs	r3, #191	@ 0xbf
 80044ee:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 80044f0:	4b29      	ldr	r3, [pc, #164]	@ (8004598 <HTS221_Probe+0xbc>)
 80044f2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80044f4:	4b29      	ldr	r3, [pc, #164]	@ (800459c <HTS221_Probe+0xc0>)
 80044f6:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80044f8:	4b29      	ldr	r3, [pc, #164]	@ (80045a0 <HTS221_Probe+0xc4>)
 80044fa:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80044fc:	4b29      	ldr	r3, [pc, #164]	@ (80045a4 <HTS221_Probe+0xc8>)
 80044fe:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004500:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HTS221_Probe+0xcc>)
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Register Component Bus IO operations */
  if (HTS221_RegisterBusIO(&HTS221_Obj, &IOCtx) != HTS221_OK)
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	4619      	mov	r1, r3
 800450a:	4828      	ldr	r0, [pc, #160]	@ (80045ac <HTS221_Probe+0xd0>)
 800450c:	f000 f8d2 	bl	80046b4 <HTS221_RegisterBusIO>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HTS221_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004516:	f06f 0307 	mvn.w	r3, #7
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451c:	e037      	b.n	800458e <HTS221_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (HTS221_ReadID(&HTS221_Obj, &hts221_id) != HTS221_OK)
 800451e:	f107 030b 	add.w	r3, r7, #11
 8004522:	4619      	mov	r1, r3
 8004524:	4821      	ldr	r0, [pc, #132]	@ (80045ac <HTS221_Probe+0xd0>)
 8004526:	f000 f94e 	bl	80047c6 <HTS221_ReadID>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HTS221_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004530:	f06f 0304 	mvn.w	r3, #4
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004536:	e02a      	b.n	800458e <HTS221_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (hts221_id != HTS221_ID)
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	2bbc      	cmp	r3, #188	@ 0xbc
 800453c:	d003      	beq.n	8004546 <HTS221_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800453e:	f06f 0306 	mvn.w	r3, #6
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004544:	e023      	b.n	800458e <HTS221_Probe+0xb2>
  }
  else
  {
    Env_Sensor_CompObj[0] = &HTS221_Obj;
 8004546:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <HTS221_Probe+0xd4>)
 8004548:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HTS221_Probe+0xd0>)
 800454a:	601a      	str	r2, [r3, #0]
    Env_Sensor_Drv[0]     = (ENV_SENSOR_CommonDrv_t *) &HTS221_COMMON_Driver;
 800454c:	4b19      	ldr	r3, [pc, #100]	@ (80045b4 <HTS221_Probe+0xd8>)
 800454e:	4a1a      	ldr	r2, [pc, #104]	@ (80045b8 <HTS221_Probe+0xdc>)
 8004550:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Env_Sensor_Drv[0]->Init(Env_Sensor_CompObj[0]) < 0)
 8004552:	4b18      	ldr	r3, [pc, #96]	@ (80045b4 <HTS221_Probe+0xd8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HTS221_Probe+0xd4>)
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4610      	mov	r0, r2
 800455e:	4798      	blx	r3
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	da03      	bge.n	800456e <HTS221_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004566:	f06f 0304 	mvn.w	r3, #4
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456c:	e00f      	b.n	800458e <HTS221_Probe+0xb2>
    }
    else
    {
      if ((Functions & ENV_TEMPERATURE) != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HTS221_Probe+0xa2>
      {
        Env_Sensor_FuncDrv[0][TEMPERATURE_ID] = (ENV_SENSOR_FuncDrv_t *) &HTS221_TEMP_Driver;
 8004578:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <HTS221_Probe+0xe0>)
 800457a:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <HTS221_Probe+0xe4>)
 800457c:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & ENV_HUMIDITY) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HTS221_Probe+0xb2>
      {
        Env_Sensor_FuncDrv[0][HUMIDITY_ID] = (ENV_SENSOR_FuncDrv_t *) &HTS221_HUM_Driver;
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <HTS221_Probe+0xe0>)
 800458a:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <HTS221_Probe+0xe8>)
 800458c:	609a      	str	r2, [r3, #8]
      }
    }
  }

  return status;
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	@ 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	08003865 	.word	0x08003865
 800459c:	080038d9 	.word	0x080038d9
 80045a0:	08003a01 	.word	0x08003a01
 80045a4:	080039a5 	.word	0x080039a5
 80045a8:	08003a5d 	.word	0x08003a5d
 80045ac:	20002bb8 	.word	0x20002bb8
 80045b0:	20002b90 	.word	0x20002b90
 80045b4:	20002b98 	.word	0x20002b98
 80045b8:	20000060 	.word	0x20000060
 80045bc:	20002ba0 	.word	0x20002ba0
 80045c0:	20000084 	.word	0x20000084
 80045c4:	20000070 	.word	0x20000070

080045c8 <LPS22HH_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status.
  */
static int32_t LPS22HH_Probe(uint32_t Functions)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	@ 0x30
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPS22HH_IO_t            IOCtx;
  uint8_t                 lps22hh_id;
  static LPS22HH_Object_t LPS22HH_Obj;

  /* Configure the environmental sensor driver */
  IOCtx.BusType     = LPS22HH_I2C_BUS;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = LPS22HH_I2C_ADD_H;
 80045d8:	23bb      	movs	r3, #187	@ 0xbb
 80045da:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 80045dc:	4b29      	ldr	r3, [pc, #164]	@ (8004684 <LPS22HH_Probe+0xbc>)
 80045de:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80045e0:	4b29      	ldr	r3, [pc, #164]	@ (8004688 <LPS22HH_Probe+0xc0>)
 80045e2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80045e4:	4b29      	ldr	r3, [pc, #164]	@ (800468c <LPS22HH_Probe+0xc4>)
 80045e6:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80045e8:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <LPS22HH_Probe+0xc8>)
 80045ea:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 80045ec:	4b29      	ldr	r3, [pc, #164]	@ (8004694 <LPS22HH_Probe+0xcc>)
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Register Component Bus IO operations */
  if (LPS22HH_RegisterBusIO(&LPS22HH_Obj, &IOCtx) != LPS22HH_OK)
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4619      	mov	r1, r3
 80045f6:	4828      	ldr	r0, [pc, #160]	@ (8004698 <LPS22HH_Probe+0xd0>)
 80045f8:	f000 fe74 	bl	80052e4 <LPS22HH_RegisterBusIO>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <LPS22HH_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004602:	f06f 0307 	mvn.w	r3, #7
 8004606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004608:	e037      	b.n	800467a <LPS22HH_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (LPS22HH_ReadID(&LPS22HH_Obj, &lps22hh_id) != LPS22HH_OK)
 800460a:	f107 030b 	add.w	r3, r7, #11
 800460e:	4619      	mov	r1, r3
 8004610:	4821      	ldr	r0, [pc, #132]	@ (8004698 <LPS22HH_Probe+0xd0>)
 8004612:	f000 ff10 	bl	8005436 <LPS22HH_ReadID>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <LPS22HH_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 800461c:	f06f 0304 	mvn.w	r3, #4
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004622:	e02a      	b.n	800467a <LPS22HH_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (lps22hh_id != LPS22HH_ID)
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	2bb3      	cmp	r3, #179	@ 0xb3
 8004628:	d003      	beq.n	8004632 <LPS22HH_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800462a:	f06f 0306 	mvn.w	r3, #6
 800462e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004630:	e023      	b.n	800467a <LPS22HH_Probe+0xb2>
  }
  else
  {
    Env_Sensor_CompObj[1] = &LPS22HH_Obj;
 8004632:	4b1a      	ldr	r3, [pc, #104]	@ (800469c <LPS22HH_Probe+0xd4>)
 8004634:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <LPS22HH_Probe+0xd0>)
 8004636:	605a      	str	r2, [r3, #4]
    Env_Sensor_Drv[1]     = (ENV_SENSOR_CommonDrv_t *) &LPS22HH_COMMON_Driver;
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <LPS22HH_Probe+0xd8>)
 800463a:	4a1a      	ldr	r2, [pc, #104]	@ (80046a4 <LPS22HH_Probe+0xdc>)
 800463c:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Env_Sensor_Drv[1]->Init(Env_Sensor_CompObj[1]) < 0)
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <LPS22HH_Probe+0xd8>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a15      	ldr	r2, [pc, #84]	@ (800469c <LPS22HH_Probe+0xd4>)
 8004646:	6852      	ldr	r2, [r2, #4]
 8004648:	4610      	mov	r0, r2
 800464a:	4798      	blx	r3
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	da03      	bge.n	800465a <LPS22HH_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004652:	f06f 0304 	mvn.w	r3, #4
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004658:	e00f      	b.n	800467a <LPS22HH_Probe+0xb2>
    }
    else
    {
      if ((Functions & ENV_TEMPERATURE) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <LPS22HH_Probe+0xa2>
      {
        Env_Sensor_FuncDrv[1][TEMPERATURE_ID] = (ENV_SENSOR_FuncDrv_t *) &LPS22HH_TEMP_Driver;
 8004664:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <LPS22HH_Probe+0xe0>)
 8004666:	4a11      	ldr	r2, [pc, #68]	@ (80046ac <LPS22HH_Probe+0xe4>)
 8004668:	60da      	str	r2, [r3, #12]
      }
      if ((Functions & ENV_PRESSURE) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <LPS22HH_Probe+0xb2>
      {
        Env_Sensor_FuncDrv[1][PRESSURE_ID] = (ENV_SENSOR_FuncDrv_t *) &LPS22HH_PRESS_Driver;
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <LPS22HH_Probe+0xe0>)
 8004676:	4a0e      	ldr	r2, [pc, #56]	@ (80046b0 <LPS22HH_Probe+0xe8>)
 8004678:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return status;
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800467c:	4618      	mov	r0, r3
 800467e:	3730      	adds	r7, #48	@ 0x30
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	08003865 	.word	0x08003865
 8004688:	080038d9 	.word	0x080038d9
 800468c:	08003a01 	.word	0x08003a01
 8004690:	080039a5 	.word	0x080039a5
 8004694:	08003a5d 	.word	0x08003a5d
 8004698:	20002bec 	.word	0x20002bec
 800469c:	20002b90 	.word	0x20002b90
 80046a0:	20002b98 	.word	0x20002b98
 80046a4:	20000098 	.word	0x20000098
 80046a8:	20002ba0 	.word	0x20002ba0
 80046ac:	200000bc 	.word	0x200000bc
 80046b0:	200000a8 	.word	0x200000a8

080046b4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e034      	b.n	8004736 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	7b1a      	ldrb	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a0e      	ldr	r2, [pc, #56]	@ (8004740 <HTS221_RegisterBusIO+0x8c>)
 8004708:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a0d      	ldr	r2, [pc, #52]	@ (8004744 <HTS221_RegisterBusIO+0x90>)
 800470e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4798      	blx	r3
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	e002      	b.n	8004736 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	08004d73 	.word	0x08004d73
 8004744:	08004dd5 	.word	0x08004dd5

08004748 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004756:	2b00      	cmp	r3, #0
 8004758:	d108      	bne.n	800476c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 faa4 	bl	8004ca8 <HTS221_Initialize>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	e004      	b.n	8004776 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800478c:	2b01      	cmp	r3, #1
 800478e:	d111      	bne.n	80047b4 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f878 	bl	8004886 <HTS221_HUM_Disable>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	e00d      	b.n	80047be <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f95f 	bl	8004a66 <HTS221_TEMP_Disable>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	e004      	b.n	80047be <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3320      	adds	r3, #32
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fc26 	bl	8005028 <hts221_device_id_get>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	e000      	b.n	80047ea <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4a07      	ldr	r2, [pc, #28]	@ (8004838 <HTS221_GetCapabilities+0x44>)
 800481a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4a06      	ldr	r2, [pc, #24]	@ (8004838 <HTS221_GetCapabilities+0x44>)
 8004820:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	41480000 	.word	0x41480000

0800483c <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e015      	b.n	800487e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3320      	adds	r3, #32
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fbf1 	bl	800504a <hts221_power_on_set>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	e004      	b.n	800487e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e015      	b.n	80048c8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3320      	adds	r3, #32
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fbcc 	bl	800504a <hts221_power_on_set>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e004      	b.n	80048c8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f96f 	bl	8004bc0 <HTS221_GetOutputDataRate>
 80048e2:	4603      	mov	r3, r0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80048f8:	ed97 0a00 	vldr	s0, [r7]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9a3 	bl	8004c48 <HTS221_SetOutputDataRate>
 8004902:	4603      	mov	r3, r0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3320      	adds	r3, #32
 800491a:	f107 020c 	add.w	r2, r7, #12
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fc56 	bl	80051d2 <hts221_hum_adc_point_0_get>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
 8004930:	e06b      	b.n	8004a0a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f103 0220 	add.w	r2, r3, #32
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f000 fba8 	bl	8005096 <hts221_hum_rh_point_0_get>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	e05b      	b.n	8004a0a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f103 0220 	add.w	r2, r3, #32
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	3308      	adds	r3, #8
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fc58 	bl	8005216 <hts221_hum_adc_point_1_get>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 800496c:	f04f 33ff 	mov.w	r3, #4294967295
 8004970:	e04b      	b.n	8004a0a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f103 0220 	add.w	r2, r3, #32
 8004978:	f107 030c 	add.w	r3, r7, #12
 800497c:	330c      	adds	r3, #12
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f000 fba6 	bl	80050d2 <hts221_hum_rh_point_1_get>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	e03b      	b.n	8004a0a <HTS221_HUM_GetHumidity+0xfe>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8004992:	2300      	movs	r3, #0
 8004994:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3320      	adds	r3, #32
 800499a:	f107 021c 	add.w	r2, r7, #28
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fafd 	bl	8004fa0 <hts221_humidity_raw_get>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	e02b      	b.n	8004a0a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80049b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	eeb0 0a67 	vmov.f32	s0, s15
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f99a 	bl	8004d00 <Linear_Interpolation>
 80049cc:	eef0 7a40 	vmov.f32	s15, s0
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	edd3 7a00 	vldr	s15, [r3]
 80049dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	d503      	bpl.n	80049ee <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	edd3 7a00 	vldr	s15, [r3]
 80049f4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004a14 <HTS221_HUM_GetHumidity+0x108>
 80049f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	dd02      	ble.n	8004a08 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <HTS221_HUM_GetHumidity+0x10c>)
 8004a06:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	42c80000 	.word	0x42c80000
 8004a18:	42c80000 	.word	0x42c80000

08004a1c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e015      	b.n	8004a5e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3320      	adds	r3, #32
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb01 	bl	800504a <hts221_power_on_set>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a52:	e004      	b.n	8004a5e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e015      	b.n	8004aa8 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3320      	adds	r3, #32
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fadc 	bl	800504a <hts221_power_on_set>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8004a98:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9c:	e004      	b.n	8004aa8 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f87f 	bl	8004bc0 <HTS221_GetOutputDataRate>
 8004ac2:	4603      	mov	r3, r0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8004ad8:	ed97 0a00 	vldr	s0, [r7]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8b3 	bl	8004c48 <HTS221_SetOutputDataRate>
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3320      	adds	r3, #32
 8004afa:	f107 020c 	add.w	r2, r7, #12
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fbaa 	bl	800525a <hts221_temp_adc_point_0_get>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	e052      	b.n	8004bb8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f103 0220 	add.w	r2, r3, #32
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 faf4 	bl	800510e <hts221_temp_deg_point_0_get>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b30:	e042      	b.n	8004bb8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f103 0220 	add.w	r2, r3, #32
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 fbac 	bl	800529e <hts221_temp_adc_point_1_get>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b50:	e032      	b.n	8004bb8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f103 0220 	add.w	r2, r3, #32
 8004b58:	f107 030c 	add.w	r3, r7, #12
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 fb05 	bl	8005170 <hts221_temp_deg_point_1_get>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b70:	e022      	b.n	8004bb8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8004b72:	2300      	movs	r3, #0
 8004b74:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3320      	adds	r3, #32
 8004b7a:	f107 021c 	add.w	r2, r7, #28
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fa2f 	bl	8004fe4 <hts221_temperature_raw_get>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	e012      	b.n	8004bb8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004b92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f8aa 	bl	8004d00 <Linear_Interpolation>
 8004bac:	eef0 7a40 	vmov.f32	s15, s0
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3320      	adds	r3, #32
 8004bd2:	f107 020b 	add.w	r2, r7, #11
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f983 	bl	8004ee4 <hts221_data_rate_get>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	e025      	b.n	8004c36 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d81d      	bhi.n	8004c2c <HTS221_GetOutputDataRate+0x6c>
 8004bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <HTS221_GetOutputDataRate+0x38>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c13 	.word	0x08004c13
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	08004c25 	.word	0x08004c25
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
      break;
 8004c10:	e010      	b.n	8004c34 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004c18:	601a      	str	r2, [r3, #0]
      break;
 8004c1a:	e00b      	b.n	8004c34 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HTS221_GetOutputDataRate+0x80>)
 8004c20:	601a      	str	r2, [r3, #0]
      break;
 8004c22:	e007      	b.n	8004c34 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4a07      	ldr	r2, [pc, #28]	@ (8004c44 <HTS221_GetOutputDataRate+0x84>)
 8004c28:	601a      	str	r2, [r3, #0]
      break;
 8004c2a:	e003      	b.n	8004c34 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8004c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c30:	60fb      	str	r3, [r7, #12]
      break;
 8004c32:	bf00      	nop
  }

  return ret;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40e00000 	.word	0x40e00000
 8004c44:	41480000 	.word	0x41480000

08004c48 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004c54:	edd7 7a00 	vldr	s15, [r7]
 8004c58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	d801      	bhi.n	8004c6a <HTS221_SetOutputDataRate+0x22>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00b      	b.n	8004c82 <HTS221_SetOutputDataRate+0x3a>
 8004c6a:	edd7 7a00 	vldr	s15, [r7]
 8004c6e:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8004c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d801      	bhi.n	8004c80 <HTS221_SetOutputDataRate+0x38>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e000      	b.n	8004c82 <HTS221_SetOutputDataRate+0x3a>
 8004c80:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8004c82:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3320      	adds	r3, #32
 8004c88:	7bfa      	ldrb	r2, [r7, #15]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f902 	bl	8004e96 <hts221_data_rate_set>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8004c98:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9c:	e000      	b.n	8004ca0 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3320      	adds	r3, #32
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f9c7 	bl	800504a <hts221_power_on_set>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e017      	b.n	8004cf8 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3320      	adds	r3, #32
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f940 	bl	8004f54 <hts221_block_data_update_set>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	e00b      	b.n	8004cf8 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8004ce0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ffaf 	bl	8004c48 <HTS221_SetOutputDataRate>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	e000      	b.n	8004cf8 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d1c:	edd7 7a00 	vldr	s15, [r7]
 8004d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	ed93 6a00 	vldr	s12, [r3]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d60:	eef0 7a66 	vmov.f32	s15, s13
}
 8004d64:	eeb0 0a67 	vmov.f32	s0, s15
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d72:	b590      	push	{r4, r7, lr}
 8004d74:	b087      	sub	sp, #28
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	460b      	mov	r3, r1
 8004d80:	72fb      	strb	r3, [r7, #11]
 8004d82:	4613      	mov	r3, r2
 8004d84:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10e      	bne.n	8004db0 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	695c      	ldr	r4, [r3, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	7b1b      	ldrb	r3, [r3, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	7afb      	ldrb	r3, [r7, #11]
 8004d9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	893b      	ldrh	r3, [r7, #8]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	47a0      	blx	r4
 8004dac:	4603      	mov	r3, r0
 8004dae:	e00d      	b.n	8004dcc <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	695c      	ldr	r4, [r3, #20]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	7b1b      	ldrb	r3, [r3, #12]
 8004db8:	4618      	mov	r0, r3
 8004dba:	7afb      	ldrb	r3, [r7, #11]
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	893b      	ldrh	r3, [r7, #8]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	47a0      	blx	r4
 8004dca:	4603      	mov	r3, r0
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}

08004dd4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	460b      	mov	r3, r1
 8004de2:	72fb      	strb	r3, [r7, #11]
 8004de4:	4613      	mov	r3, r2
 8004de6:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10e      	bne.n	8004e12 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	691c      	ldr	r4, [r3, #16]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	7b1b      	ldrb	r3, [r3, #12]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	7afb      	ldrb	r3, [r7, #11]
 8004e00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	4619      	mov	r1, r3
 8004e08:	893b      	ldrh	r3, [r7, #8]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	47a0      	blx	r4
 8004e0e:	4603      	mov	r3, r0
 8004e10:	e00d      	b.n	8004e2e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	691c      	ldr	r4, [r3, #16]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	7b1b      	ldrb	r3, [r3, #12]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	7afb      	ldrb	r3, [r7, #11]
 8004e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	893b      	ldrh	r3, [r7, #8]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	47a0      	blx	r4
 8004e2c:	4603      	mov	r3, r0
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}

08004e36 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8004e36:	b590      	push	{r4, r7, lr}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	461a      	mov	r2, r3
 8004e42:	460b      	mov	r3, r1
 8004e44:	72fb      	strb	r3, [r7, #11]
 8004e46:	4613      	mov	r3, r2
 8004e48:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685c      	ldr	r4, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68d8      	ldr	r0, [r3, #12]
 8004e52:	893b      	ldrh	r3, [r7, #8]
 8004e54:	7af9      	ldrb	r1, [r7, #11]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	47a0      	blx	r4
 8004e5a:	6178      	str	r0, [r7, #20]

  return ret;
 8004e5c:	697b      	ldr	r3, [r7, #20]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd90      	pop	{r4, r7, pc}

08004e66 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004e66:	b590      	push	{r4, r7, lr}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	461a      	mov	r2, r3
 8004e72:	460b      	mov	r3, r1
 8004e74:	72fb      	strb	r3, [r7, #11]
 8004e76:	4613      	mov	r3, r2
 8004e78:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681c      	ldr	r4, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68d8      	ldr	r0, [r3, #12]
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	7af9      	ldrb	r1, [r7, #11]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	47a0      	blx	r4
 8004e8a:	6178      	str	r0, [r7, #20]

  return ret;
 8004e8c:	697b      	ldr	r3, [r7, #20]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}

08004e96 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ea2:	f107 0208 	add.w	r2, r7, #8
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ffc3 	bl	8004e36 <hts221_read_reg>
 8004eb0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10f      	bne.n	8004ed8 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	7a3b      	ldrb	r3, [r7, #8]
 8004ec2:	f362 0301 	bfi	r3, r2, #0, #2
 8004ec6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ec8:	f107 0208 	add.w	r2, r7, #8
 8004ecc:	2301      	movs	r3, #1
 8004ece:	2120      	movs	r1, #32
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ffc8 	bl	8004e66 <hts221_write_reg>
 8004ed6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004eee:	f107 0208 	add.w	r2, r7, #8
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	2120      	movs	r1, #32
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ff9d 	bl	8004e36 <hts221_read_reg>
 8004efc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004efe:	7a3b      	ldrb	r3, [r7, #8]
 8004f00:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d81a      	bhi.n	8004f40 <hts221_data_rate_get+0x5c>
 8004f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <hts221_data_rate_get+0x2c>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f29 	.word	0x08004f29
 8004f18:	08004f31 	.word	0x08004f31
 8004f1c:	08004f39 	.word	0x08004f39
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
      break;
 8004f26:	e00f      	b.n	8004f48 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
      break;
 8004f2e:	e00b      	b.n	8004f48 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2202      	movs	r2, #2
 8004f34:	701a      	strb	r2, [r3, #0]
      break;
 8004f36:	e007      	b.n	8004f48 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	701a      	strb	r2, [r3, #0]
      break;
 8004f3e:	e003      	b.n	8004f48 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	701a      	strb	r2, [r3, #0]
      break;
 8004f46:	bf00      	nop
  }

  return ret;
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop

08004f54 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004f60:	f107 0208 	add.w	r2, r7, #8
 8004f64:	2301      	movs	r3, #1
 8004f66:	2120      	movs	r1, #32
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff64 	bl	8004e36 <hts221_read_reg>
 8004f6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	7a3b      	ldrb	r3, [r7, #8]
 8004f80:	f362 0382 	bfi	r3, r2, #2, #1
 8004f84:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004f86:	f107 0208 	add.w	r2, r7, #8
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ff69 	bl	8004e66 <hts221_write_reg>
 8004f94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004faa:	f107 0208 	add.w	r2, r7, #8
 8004fae:	2302      	movs	r3, #2
 8004fb0:	2128      	movs	r1, #40	@ 0x28
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff3f 	bl	8004e36 <hts221_read_reg>
 8004fb8:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004fba:	7a7b      	ldrb	r3, [r7, #9]
 8004fbc:	b21a      	sxth	r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	7a3a      	ldrb	r2, [r7, #8]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	b21a      	sxth	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	801a      	strh	r2, [r3, #0]

  return ret;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004fee:	f107 0208 	add.w	r2, r7, #8
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	212a      	movs	r1, #42	@ 0x2a
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff ff1d 	bl	8004e36 <hts221_read_reg>
 8004ffc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004ffe:	7a7b      	ldrb	r3, [r7, #9]
 8005000:	b21a      	sxth	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800500c:	b29b      	uxth	r3, r3
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	b29b      	uxth	r3, r3
 8005012:	7a3a      	ldrb	r2, [r7, #8]
 8005014:	4413      	add	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	b21a      	sxth	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	801a      	strh	r2, [r3, #0]

  return ret;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8005032:	2301      	movs	r3, #1
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	210f      	movs	r1, #15
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fefc 	bl	8004e36 <hts221_read_reg>
 800503e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005056:	f107 0208 	add.w	r2, r7, #8
 800505a:	2301      	movs	r3, #1
 800505c:	2120      	movs	r1, #32
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fee9 	bl	8004e36 <hts221_read_reg>
 8005064:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10f      	bne.n	800508c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	7a3b      	ldrb	r3, [r7, #8]
 8005076:	f362 13c7 	bfi	r3, r2, #7, #1
 800507a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800507c:	f107 0208 	add.w	r2, r7, #8
 8005080:	2301      	movs	r3, #1
 8005082:	2120      	movs	r1, #32
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff feee 	bl	8004e66 <hts221_write_reg>
 800508a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80050a0:	f107 020b 	add.w	r2, r7, #11
 80050a4:	2301      	movs	r3, #1
 80050a6:	2130      	movs	r1, #48	@ 0x30
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff fec4 	bl	8004e36 <hts221_read_reg>
 80050ae:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80050b0:	7afb      	ldrb	r3, [r7, #11]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80050be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80050c8:	68fb      	ldr	r3, [r7, #12]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80050dc:	f107 020b 	add.w	r2, r7, #11
 80050e0:	2301      	movs	r3, #1
 80050e2:	2131      	movs	r1, #49	@ 0x31
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fea6 	bl	8004e36 <hts221_read_reg>
 80050ea:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80050ec:	7afb      	ldrb	r3, [r7, #11]
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050f6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80050fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005104:	68fb      	ldr	r3, [r7, #12]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8005118:	f107 020f 	add.w	r2, r7, #15
 800511c:	2301      	movs	r3, #1
 800511e:	2132      	movs	r1, #50	@ 0x32
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fe88 	bl	8004e36 <hts221_read_reg>
 8005126:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11b      	bne.n	8005166 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800512e:	f107 0210 	add.w	r2, r7, #16
 8005132:	2301      	movs	r3, #1
 8005134:	2135      	movs	r1, #53	@ 0x35
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fe7d 	bl	8004e36 <hts221_read_reg>
 800513c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800513e:	7c3b      	ldrb	r3, [r7, #16]
 8005140:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005144:	b2db      	uxtb	r3, r3
 8005146:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	4413      	add	r3, r2
 8005150:	ee07 3a90 	vmov	s15, r3
 8005154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005158:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800515c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8005166:	697b      	ldr	r3, [r7, #20]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800517a:	f107 020f 	add.w	r2, r7, #15
 800517e:	2301      	movs	r3, #1
 8005180:	2133      	movs	r1, #51	@ 0x33
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fe57 	bl	8004e36 <hts221_read_reg>
 8005188:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11b      	bne.n	80051c8 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8005190:	f107 0210 	add.w	r2, r7, #16
 8005194:	2301      	movs	r3, #1
 8005196:	2135      	movs	r1, #53	@ 0x35
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fe4c 	bl	8004e36 <hts221_read_reg>
 800519e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80051a0:	7c3b      	ldrb	r3, [r7, #16]
 80051a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	4413      	add	r3, r2
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ba:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80051be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80051dc:	f107 0208 	add.w	r2, r7, #8
 80051e0:	2302      	movs	r3, #2
 80051e2:	2136      	movs	r1, #54	@ 0x36
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fe26 	bl	8004e36 <hts221_read_reg>
 80051ea:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80051ec:	7a7b      	ldrb	r3, [r7, #9]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	7a3a      	ldrb	r2, [r7, #8]
 80051f4:	4413      	add	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80051fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8005220:	f107 0208 	add.w	r2, r7, #8
 8005224:	2302      	movs	r3, #2
 8005226:	213a      	movs	r1, #58	@ 0x3a
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fe04 	bl	8004e36 <hts221_read_reg>
 800522e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005230:	7a7b      	ldrb	r3, [r7, #9]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b29b      	uxth	r3, r3
 8005236:	7a3a      	ldrb	r2, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	b29b      	uxth	r3, r3
 800523c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800523e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8005264:	f107 0208 	add.w	r2, r7, #8
 8005268:	2302      	movs	r3, #2
 800526a:	213c      	movs	r1, #60	@ 0x3c
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fde2 	bl	8004e36 <hts221_read_reg>
 8005272:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005274:	7a7b      	ldrb	r3, [r7, #9]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	b29b      	uxth	r3, r3
 800527a:	7a3a      	ldrb	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8005282:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005294:	68fb      	ldr	r3, [r7, #12]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80052a8:	f107 0208 	add.w	r2, r7, #8
 80052ac:	2302      	movs	r3, #2
 80052ae:	213e      	movs	r1, #62	@ 0x3e
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fdc0 	bl	8004e36 <hts221_read_reg>
 80052b6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80052b8:	7a7b      	ldrb	r3, [r7, #9]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b29b      	uxth	r3, r3
 80052be:	7a3a      	ldrb	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80052c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80052d8:	68fb      	ldr	r3, [r7, #12]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e051      	b.n	80053a4 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	7b1a      	ldrb	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695a      	ldr	r2, [r3, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <LPS22HH_RegisterBusIO+0xcc>)
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <LPS22HH_RegisterBusIO+0xd0>)
 8005342:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e020      	b.n	80053a4 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4798      	blx	r3
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e016      	b.n	80053a4 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d112      	bne.n	80053a4 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10d      	bne.n	80053a4 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005388:	2301      	movs	r3, #1
 800538a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	461a      	mov	r2, r3
 8005390:	2110      	movs	r1, #16
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9df 	bl	8005756 <LPS22HH_Write_Reg>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80053a4:	68fb      	ldr	r3, [r7, #12]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	08005a7f 	.word	0x08005a7f
 80053b4:	08005ab5 	.word	0x08005ab5

080053b8 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fb0e 	bl	80059ec <LPS22HH_Initialize>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	e004      	b.n	80053e6 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d111      	bne.n	8005424 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f877 	bl	80054f4 <LPS22HH_PRESS_Disable>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800540c:	f04f 33ff 	mov.w	r3, #4294967295
 8005410:	e00d      	b.n	800542e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f918 	bl	8005648 <LPS22HH_TEMP_Disable>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e004      	b.n	800542e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3320      	adds	r3, #32
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fd19 	bl	8005e7e <lps22hh_device_id_get>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	e000      	b.n	800545a <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2201      	movs	r2, #1
 8005478:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	4a05      	ldr	r2, [pc, #20]	@ (80054a8 <LPS22HH_GetCapabilities+0x44>)
 8005492:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4a04      	ldr	r2, [pc, #16]	@ (80054a8 <LPS22HH_GetCapabilities+0x44>)
 8005498:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	43480000 	.word	0x43480000

080054ac <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e014      	b.n	80054ec <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f103 0220 	add.w	r2, r3, #32
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f000 fb93 	bl	8005bfc <lps22hh_data_rate_set>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80054dc:	f04f 33ff 	mov.w	r3, #4294967295
 80054e0:	e004      	b.n	80054ec <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e024      	b.n	8005554 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11a      	bne.n	800554a <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f103 0220 	add.w	r2, r3, #32
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3333      	adds	r3, #51	@ 0x33
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 fbb9 	bl	8005c98 <lps22hh_data_rate_get>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	e010      	b.n	8005554 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3320      	adds	r3, #32
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fb5f 	bl	8005bfc <lps22hh_data_rate_set>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	e004      	b.n	8005554 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f90f 	bl	800578c <LPS22HH_GetOutputDataRate>
 800556e:	4603      	mov	r3, r0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800558a:	2b01      	cmp	r3, #1
 800558c:	d106      	bne.n	800559c <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800558e:	ed97 0a00 	vldr	s0, [r7]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f95e 	bl	8005854 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005598:	4603      	mov	r3, r0
 800559a:	e005      	b.n	80055a8 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800559c:	ed97 0a00 	vldr	s0, [r7]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f9c9 	bl	8005938 <LPS22HH_SetOutputDataRate_When_Disabled>
 80055a6:	4603      	mov	r3, r0
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	2204      	movs	r2, #4
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f00f ffd8 	bl	8015578 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3320      	adds	r3, #32
 80055cc:	f107 020c 	add.w	r2, r7, #12
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fc08 	bl	8005de8 <lps22hh_pressure_raw_get>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 80055de:	f04f 33ff 	mov.w	r3, #4294967295
 80055e2:	e009      	b.n	80055f8 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fab0 	bl	8005b4c <lps22hh_from_lsb_to_hpa>
 80055ec:	eef0 7a40 	vmov.f32	s15, s0
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e014      	b.n	8005640 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f103 0220 	add.w	r2, r3, #32
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f000 fae9 	bl	8005bfc <lps22hh_data_rate_set>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
 8005634:	e004      	b.n	8005640 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e024      	b.n	80056a8 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11a      	bne.n	800569e <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f103 0220 	add.w	r2, r3, #32
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3333      	adds	r3, #51	@ 0x33
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f000 fb0f 	bl	8005c98 <lps22hh_data_rate_get>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	e010      	b.n	80056a8 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3320      	adds	r3, #32
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fab5 	bl	8005bfc <lps22hh_data_rate_set>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005698:	f04f 33ff 	mov.w	r3, #4294967295
 800569c:	e004      	b.n	80056a8 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f865 	bl	800578c <LPS22HH_GetOutputDataRate>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d106      	bne.n	80056f0 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80056e2:	ed97 0a00 	vldr	s0, [r7]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8b4 	bl	8005854 <LPS22HH_SetOutputDataRate_When_Enabled>
 80056ec:	4603      	mov	r3, r0
 80056ee:	e005      	b.n	80056fc <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80056f0:	ed97 0a00 	vldr	s0, [r7]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f91f 	bl	8005938 <LPS22HH_SetOutputDataRate_When_Disabled>
 80056fa:	4603      	mov	r3, r0
  }
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800570e:	f107 030c 	add.w	r3, r7, #12
 8005712:	2202      	movs	r2, #2
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f00f ff2e 	bl	8015578 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3320      	adds	r3, #32
 8005720:	f107 020c 	add.w	r2, r7, #12
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fb87 	bl	8005e3a <lps22hh_temperature_raw_get>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	e00a      	b.n	800574e <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fa1d 	bl	8005b7c <lps22hh_from_lsb_to_celsius>
 8005742:	eef0 7a40 	vmov.f32	s15, s0
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
 8005762:	4613      	mov	r3, r2
 8005764:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f103 0020 	add.w	r0, r3, #32
 800576c:	1cba      	adds	r2, r7, #2
 800576e:	78f9      	ldrb	r1, [r7, #3]
 8005770:	2301      	movs	r3, #1
 8005772:	f000 f9d2 	bl	8005b1a <lps22hh_write_reg>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	e000      	b.n	8005784 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3320      	adds	r3, #32
 800579e:	f107 020b 	add.w	r2, r7, #11
 80057a2:	4611      	mov	r1, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fa77 	bl	8005c98 <lps22hh_data_rate_get>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
 80057b4:	e03d      	b.n	8005832 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	2b07      	cmp	r3, #7
 80057ba:	d835      	bhi.n	8005828 <LPS22HH_GetOutputDataRate+0x9c>
 80057bc:	a201      	add	r2, pc, #4	@ (adr r2, 80057c4 <LPS22HH_GetOutputDataRate+0x38>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057e5 	.word	0x080057e5
 80057c8:	080057ef 	.word	0x080057ef
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	08005801 	.word	0x08005801
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005811 	.word	0x08005811
 80057dc:	08005819 	.word	0x08005819
 80057e0:	08005821 	.word	0x08005821
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
      break;
 80057ec:	e020      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80057f4:	601a      	str	r2, [r3, #0]
      break;
 80057f6:	e01b      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4a10      	ldr	r2, [pc, #64]	@ (800583c <LPS22HH_GetOutputDataRate+0xb0>)
 80057fc:	601a      	str	r2, [r3, #0]
      break;
 80057fe:	e017      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	4a0f      	ldr	r2, [pc, #60]	@ (8005840 <LPS22HH_GetOutputDataRate+0xb4>)
 8005804:	601a      	str	r2, [r3, #0]
      break;
 8005806:	e013      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	4a0e      	ldr	r2, [pc, #56]	@ (8005844 <LPS22HH_GetOutputDataRate+0xb8>)
 800580c:	601a      	str	r2, [r3, #0]
      break;
 800580e:	e00f      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	4a0d      	ldr	r2, [pc, #52]	@ (8005848 <LPS22HH_GetOutputDataRate+0xbc>)
 8005814:	601a      	str	r2, [r3, #0]
      break;
 8005816:	e00b      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	4a0c      	ldr	r2, [pc, #48]	@ (800584c <LPS22HH_GetOutputDataRate+0xc0>)
 800581c:	601a      	str	r2, [r3, #0]
      break;
 800581e:	e007      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	4a0b      	ldr	r2, [pc, #44]	@ (8005850 <LPS22HH_GetOutputDataRate+0xc4>)
 8005824:	601a      	str	r2, [r3, #0]
      break;
 8005826:	e003      	b.n	8005830 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005828:	f04f 33ff 	mov.w	r3, #4294967295
 800582c:	60fb      	str	r3, [r7, #12]
      break;
 800582e:	bf00      	nop
  }

  return ret;
 8005830:	68fb      	ldr	r3, [r7, #12]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	41200000 	.word	0x41200000
 8005840:	41c80000 	.word	0x41c80000
 8005844:	42480000 	.word	0x42480000
 8005848:	42960000 	.word	0x42960000
 800584c:	42c80000 	.word	0x42c80000
 8005850:	43480000 	.word	0x43480000

08005854 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005860:	edd7 7a00 	vldr	s15, [r7]
 8005864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005870:	d801      	bhi.n	8005876 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005872:	2301      	movs	r3, #1
 8005874:	e037      	b.n	80058e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005876:	edd7 7a00 	vldr	s15, [r7]
 800587a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800587e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	d801      	bhi.n	800588c <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005888:	2302      	movs	r3, #2
 800588a:	e02c      	b.n	80058e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800588c:	edd7 7a00 	vldr	s15, [r7]
 8005890:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589c:	d801      	bhi.n	80058a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800589e:	2303      	movs	r3, #3
 80058a0:	e021      	b.n	80058e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80058a2:	edd7 7a00 	vldr	s15, [r7]
 80058a6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800592c <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 80058aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b2:	d801      	bhi.n	80058b8 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 80058b4:	2304      	movs	r3, #4
 80058b6:	e016      	b.n	80058e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80058b8:	edd7 7a00 	vldr	s15, [r7]
 80058bc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005930 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 80058c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	d801      	bhi.n	80058ce <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80058ca:	2305      	movs	r3, #5
 80058cc:	e00b      	b.n	80058e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80058ce:	edd7 7a00 	vldr	s15, [r7]
 80058d2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005934 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 80058d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058de:	d801      	bhi.n	80058e4 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 80058e0:	2306      	movs	r3, #6
 80058e2:	e000      	b.n	80058e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80058e4:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80058e6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3320      	adds	r3, #32
 80058ec:	7bfa      	ldrb	r2, [r7, #15]
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f983 	bl	8005bfc <lps22hh_data_rate_set>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	e00f      	b.n	8005922 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f103 0220 	add.w	r2, r3, #32
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3333      	adds	r3, #51	@ 0x33
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f000 f9c2 	bl	8005c98 <lps22hh_data_rate_get>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
 800591e:	e000      	b.n	8005922 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	42480000 	.word	0x42480000
 8005930:	42960000 	.word	0x42960000
 8005934:	42c80000 	.word	0x42c80000

08005938 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005944:	edd7 7a00 	vldr	s15, [r7]
 8005948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800594c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	d801      	bhi.n	800595a <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8005956:	2301      	movs	r3, #1
 8005958:	e037      	b.n	80059ca <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800595a:	edd7 7a00 	vldr	s15, [r7]
 800595e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596a:	d801      	bhi.n	8005970 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 800596c:	2302      	movs	r3, #2
 800596e:	e02c      	b.n	80059ca <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005970:	edd7 7a00 	vldr	s15, [r7]
 8005974:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800597c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005980:	d801      	bhi.n	8005986 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8005982:	2303      	movs	r3, #3
 8005984:	e021      	b.n	80059ca <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005986:	edd7 7a00 	vldr	s15, [r7]
 800598a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80059e0 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800598e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	d801      	bhi.n	800599c <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8005998:	2304      	movs	r3, #4
 800599a:	e016      	b.n	80059ca <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800599c:	edd7 7a00 	vldr	s15, [r7]
 80059a0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80059e4 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 80059a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ac:	d801      	bhi.n	80059b2 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80059ae:	2305      	movs	r3, #5
 80059b0:	e00b      	b.n	80059ca <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80059b2:	edd7 7a00 	vldr	s15, [r7]
 80059b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80059e8 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 80059ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d801      	bhi.n	80059c8 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 80059c4:	2306      	movs	r3, #6
 80059c6:	e000      	b.n	80059ca <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80059c8:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	42480000 	.word	0x42480000
 80059e4:	42960000 	.word	0x42960000
 80059e8:	42c80000 	.word	0x42c80000

080059ec <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3320      	adds	r3, #32
 80059f8:	2111      	movs	r1, #17
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fa9c 	bl	8005f38 <lps22hh_i3c_interface_set>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	e034      	b.n	8005a76 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3320      	adds	r3, #32
 8005a10:	2110      	movs	r1, #16
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f8f2 	bl	8005bfc <lps22hh_data_rate_set>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	e028      	b.n	8005a76 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3320      	adds	r3, #32
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fa5e 	bl	8005eec <lps22hh_lp_bandwidth_set>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3a:	e01c      	b.n	8005a76 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3320      	adds	r3, #32
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f8b4 	bl	8005bb0 <lps22hh_block_data_update_set>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	e010      	b.n	8005a76 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3320      	adds	r3, #32
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fa20 	bl	8005ea0 <lps22hh_auto_increment_set>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8005a66:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6a:	e004      	b.n	8005a76 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2203      	movs	r2, #3
 8005a70:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005a7e:	b590      	push	{r4, r7, lr}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	72fb      	strb	r3, [r7, #11]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	695c      	ldr	r4, [r3, #20]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	7b1b      	ldrb	r3, [r3, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	b299      	uxth	r1, r3
 8005aa4:	893b      	ldrh	r3, [r7, #8]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	47a0      	blx	r4
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd90      	pop	{r4, r7, pc}

08005ab4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	72fb      	strb	r3, [r7, #11]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	691c      	ldr	r4, [r3, #16]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	7b1b      	ldrb	r3, [r3, #12]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	893b      	ldrh	r3, [r7, #8]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	47a0      	blx	r4
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}

08005aea <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005aea:	b590      	push	{r4, r7, lr}
 8005aec:	b087      	sub	sp, #28
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	460b      	mov	r3, r1
 8005af8:	72fb      	strb	r3, [r7, #11]
 8005afa:	4613      	mov	r3, r2
 8005afc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685c      	ldr	r4, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68d8      	ldr	r0, [r3, #12]
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	7af9      	ldrb	r1, [r7, #11]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	47a0      	blx	r4
 8005b0e:	6178      	str	r0, [r7, #20]

  return ret;
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}

08005b1a <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005b1a:	b590      	push	{r4, r7, lr}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	461a      	mov	r2, r3
 8005b26:	460b      	mov	r3, r1
 8005b28:	72fb      	strb	r3, [r7, #11]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681c      	ldr	r4, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68d8      	ldr	r0, [r3, #12]
 8005b36:	893b      	ldrh	r3, [r7, #8]
 8005b38:	7af9      	ldrb	r1, [r7, #11]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	47a0      	blx	r4
 8005b3e:	6178      	str	r0, [r7, #20]

  return ret;
 8005b40:	697b      	ldr	r3, [r7, #20]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}
	...

08005b4c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005b78 <lps22hh_from_lsb_to_hpa+0x2c>
 8005b62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b66:	eef0 7a66 	vmov.f32	s15, s13
}
 8005b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	49800000 	.word	0x49800000

08005b7c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b92:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005bac <lps22hh_from_lsb_to_celsius+0x30>
 8005b96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b9a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	42c80000 	.word	0x42c80000

08005bb0 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005bbc:	f107 0208 	add.w	r2, r7, #8
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	2110      	movs	r1, #16
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff90 	bl	8005aea <lps22hh_read_reg>
 8005bca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	7a3b      	ldrb	r3, [r7, #8]
 8005bdc:	f362 0341 	bfi	r3, r2, #1, #1
 8005be0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005be2:	f107 0208 	add.w	r2, r7, #8
 8005be6:	2301      	movs	r3, #1
 8005be8:	2110      	movs	r1, #16
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ff95 	bl	8005b1a <lps22hh_write_reg>
 8005bf0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c08:	f107 0210 	add.w	r2, r7, #16
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	2110      	movs	r1, #16
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff6a 	bl	8005aea <lps22hh_read_reg>
 8005c16:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d107      	bne.n	8005c2e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c1e:	f107 020c 	add.w	r2, r7, #12
 8005c22:	2301      	movs	r3, #1
 8005c24:	2111      	movs	r1, #17
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff ff5f 	bl	8005aea <lps22hh_read_reg>
 8005c2c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	7c3b      	ldrb	r3, [r7, #16]
 8005c3e:	f362 1306 	bfi	r3, r2, #4, #3
 8005c42:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c44:	f107 0210 	add.w	r2, r7, #16
 8005c48:	2301      	movs	r3, #1
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff64 	bl	8005b1a <lps22hh_write_reg>
 8005c52:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d119      	bne.n	8005c8e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	7b3b      	ldrb	r3, [r7, #12]
 8005c66:	f362 0341 	bfi	r3, r2, #1, #1
 8005c6a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	7b3b      	ldrb	r3, [r7, #12]
 8005c78:	f362 0300 	bfi	r3, r2, #0, #1
 8005c7c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c7e:	f107 020c 	add.w	r2, r7, #12
 8005c82:	2301      	movs	r3, #1
 8005c84:	2111      	movs	r1, #17
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff47 	bl	8005b1a <lps22hh_write_reg>
 8005c8c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005c8e:	697b      	ldr	r3, [r7, #20]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005ca2:	f107 0210 	add.w	r2, r7, #16
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	2110      	movs	r1, #16
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff ff1d 	bl	8005aea <lps22hh_read_reg>
 8005cb0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005cb8:	f107 020c 	add.w	r2, r7, #12
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	2111      	movs	r1, #17
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ff12 	bl	8005aea <lps22hh_read_reg>
 8005cc6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 8086 	bne.w	8005ddc <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005cd0:	f107 020c 	add.w	r2, r7, #12
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	2111      	movs	r1, #17
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff06 	bl	8005aea <lps22hh_read_reg>
 8005cde:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005ce0:	7b3b      	ldrb	r3, [r7, #12]
 8005ce2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	011a      	lsls	r2, r3, #4
 8005cea:	7b3b      	ldrb	r3, [r7, #12]
 8005cec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8005cf6:	7c3a      	ldrb	r2, [r7, #16]
 8005cf8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005cfc:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005cfe:	4413      	add	r3, r2
 8005d00:	2b15      	cmp	r3, #21
 8005d02:	d867      	bhi.n	8005dd4 <lps22hh_data_rate_get+0x13c>
 8005d04:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <lps22hh_data_rate_get+0x74>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d65 	.word	0x08005d65
 8005d10:	08005d75 	.word	0x08005d75
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d85 	.word	0x08005d85
 8005d1c:	08005d8d 	.word	0x08005d8d
 8005d20:	08005d95 	.word	0x08005d95
 8005d24:	08005dc5 	.word	0x08005dc5
 8005d28:	08005dcd 	.word	0x08005dcd
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005dd5 	.word	0x08005dd5
 8005d34:	08005dd5 	.word	0x08005dd5
 8005d38:	08005dd5 	.word	0x08005dd5
 8005d3c:	08005dd5 	.word	0x08005dd5
 8005d40:	08005dd5 	.word	0x08005dd5
 8005d44:	08005dd5 	.word	0x08005dd5
 8005d48:	08005dd5 	.word	0x08005dd5
 8005d4c:	08005dd5 	.word	0x08005dd5
 8005d50:	08005d9d 	.word	0x08005d9d
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005db5 	.word	0x08005db5
 8005d60:	08005dbd 	.word	0x08005dbd
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
        break;
 8005d6a:	e037      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	701a      	strb	r2, [r3, #0]
        break;
 8005d72:	e033      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
        break;
 8005d7a:	e02f      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
        break;
 8005d82:	e02b      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2203      	movs	r2, #3
 8005d88:	701a      	strb	r2, [r3, #0]
        break;
 8005d8a:	e027      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	701a      	strb	r2, [r3, #0]
        break;
 8005d92:	e023      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2205      	movs	r2, #5
 8005d98:	701a      	strb	r2, [r3, #0]
        break;
 8005d9a:	e01f      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2211      	movs	r2, #17
 8005da0:	701a      	strb	r2, [r3, #0]
        break;
 8005da2:	e01b      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2212      	movs	r2, #18
 8005da8:	701a      	strb	r2, [r3, #0]
        break;
 8005daa:	e017      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2213      	movs	r2, #19
 8005db0:	701a      	strb	r2, [r3, #0]
        break;
 8005db2:	e013      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2214      	movs	r2, #20
 8005db8:	701a      	strb	r2, [r3, #0]
        break;
 8005dba:	e00f      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2215      	movs	r2, #21
 8005dc0:	701a      	strb	r2, [r3, #0]
        break;
 8005dc2:	e00b      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2206      	movs	r2, #6
 8005dc8:	701a      	strb	r2, [r3, #0]
        break;
 8005dca:	e007      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2207      	movs	r2, #7
 8005dd0:	701a      	strb	r2, [r3, #0]
        break;
 8005dd2:	e003      	b.n	8005ddc <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
        break;
 8005dda:	bf00      	nop
    }
  }

  return ret;
 8005ddc:	697b      	ldr	r3, [r7, #20]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005df2:	f107 0208 	add.w	r2, r7, #8
 8005df6:	2303      	movs	r3, #3
 8005df8:	2128      	movs	r1, #40	@ 0x28
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff fe75 	bl	8005aea <lps22hh_read_reg>
 8005e00:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005e02:	7abb      	ldrb	r3, [r7, #10]
 8005e04:	461a      	mov	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	7a7a      	ldrb	r2, [r7, #9]
 8005e12:	441a      	add	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	7a3a      	ldrb	r2, [r7, #8]
 8005e20:	441a      	add	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	601a      	str	r2, [r3, #0]

  return ret;
 8005e30:	68fb      	ldr	r3, [r7, #12]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005e44:	f107 0208 	add.w	r2, r7, #8
 8005e48:	2302      	movs	r3, #2
 8005e4a:	212b      	movs	r1, #43	@ 0x2b
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fe4c 	bl	8005aea <lps22hh_read_reg>
 8005e52:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005e54:	7a7b      	ldrb	r3, [r7, #9]
 8005e56:	b21a      	sxth	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	7a3a      	ldrb	r2, [r7, #8]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	801a      	strh	r2, [r3, #0]

  return ret;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005e88:	2301      	movs	r3, #1
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	210f      	movs	r1, #15
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff fe2b 	bl	8005aea <lps22hh_read_reg>
 8005e94:	60f8      	str	r0, [r7, #12]

  return ret;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005eac:	f107 0208 	add.w	r2, r7, #8
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	2111      	movs	r1, #17
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff fe18 	bl	8005aea <lps22hh_read_reg>
 8005eba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10f      	bne.n	8005ee2 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	7a3b      	ldrb	r3, [r7, #8]
 8005ecc:	f362 1304 	bfi	r3, r2, #4, #1
 8005ed0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005ed2:	f107 0208 	add.w	r2, r7, #8
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	2111      	movs	r1, #17
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff fe1d 	bl	8005b1a <lps22hh_write_reg>
 8005ee0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005ef8:	f107 0208 	add.w	r2, r7, #8
 8005efc:	2301      	movs	r3, #1
 8005efe:	2110      	movs	r1, #16
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fdf2 	bl	8005aea <lps22hh_read_reg>
 8005f06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10f      	bne.n	8005f2e <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	7a3b      	ldrb	r3, [r7, #8]
 8005f18:	f362 0383 	bfi	r3, r2, #2, #2
 8005f1c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005f1e:	f107 0208 	add.w	r2, r7, #8
 8005f22:	2301      	movs	r3, #1
 8005f24:	2110      	movs	r1, #16
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fdf7 	bl	8005b1a <lps22hh_write_reg>
 8005f2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005f44:	f107 0208 	add.w	r2, r7, #8
 8005f48:	2301      	movs	r3, #1
 8005f4a:	210e      	movs	r1, #14
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fdcc 	bl	8005aea <lps22hh_read_reg>
 8005f52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d118      	bne.n	8005f8c <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	7a3b      	ldrb	r3, [r7, #8]
 8005f64:	f362 0341 	bfi	r3, r2, #1, #1
 8005f68:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	7a3b      	ldrb	r3, [r7, #8]
 8005f76:	f362 13c7 	bfi	r3, r2, #7, #1
 8005f7a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005f7c:	f107 0208 	add.w	r2, r7, #8
 8005f80:	2301      	movs	r3, #1
 8005f82:	210e      	movs	r1, #14
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fdc8 	bl	8005b1a <lps22hh_write_reg>
 8005f8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <mx_aton>:
  * @param  ptr: IP string buffer
  * @param  addr: IP address structure
  * @retval status 1 success, otherwise failed
  */
static int32_t mx_aton(const mx_char_t *ptr, mx_ip_addr_t *addr)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b08f      	sub	sp, #60	@ 0x3c
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t val = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t base;
  mx_char_t c0;
  const mx_char_t *cp = ptr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t parts[4];
  uint32_t *pp = parts;
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t ret = 1;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	623b      	str	r3, [r7, #32]
  int32_t done = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]

  c0 = *cp;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (done == 1)
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	f000 809f 	beq.w	8006106 <mx_aton+0x16e>
    {
      break;
    }

    if (!BYTE_ISDIGIT(c0))
 8005fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fce:	d903      	bls.n	8005fd8 <mx_aton+0x40>
 8005fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fd4:	2b39      	cmp	r3, #57	@ 0x39
 8005fd6:	d904      	bls.n	8005fe2 <mx_aton+0x4a>
    {
      ret = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	623b      	str	r3, [r7, #32]
      done = 1;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e090      	b.n	8006104 <mx_aton+0x16c>
    }
    else
    {
      val = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
      base = 10;
 8005fe6:	230a      	movs	r3, #10
 8005fe8:	633b      	str	r3, [r7, #48]	@ 0x30
      if (c0 == '0')
 8005fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fee:	2b30      	cmp	r3, #48	@ 0x30
 8005ff0:	d11a      	bne.n	8006028 <mx_aton+0x90>
      {
        ++cp;
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
        c0 = (mx_char_t) * cp;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if ((c0 == (mx_char_t)'x') || (c0 == (mx_char_t)'X'))
 8006000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006004:	2b78      	cmp	r3, #120	@ 0x78
 8006006:	d003      	beq.n	8006010 <mx_aton+0x78>
 8006008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800600c:	2b58      	cmp	r3, #88	@ 0x58
 800600e:	d109      	bne.n	8006024 <mx_aton+0x8c>
        {
          base = 16;
 8006010:	2310      	movs	r3, #16
 8006012:	633b      	str	r3, [r7, #48]	@ 0x30
          ++cp;
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	3301      	adds	r3, #1
 8006018:	62bb      	str	r3, [r7, #40]	@ 0x28
          c0 = (mx_char_t) * cp;
 800601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006022:	e001      	b.n	8006028 <mx_aton+0x90>
        }
        else
        {
          base = 8;
 8006024:	2308      	movs	r3, #8
 8006026:	633b      	str	r3, [r7, #48]	@ 0x30
        }
      }

      for (;;)
      {
        if (BYTE_ISDIGIT(c0))
 8006028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800602c:	2b2f      	cmp	r3, #47	@ 0x2f
 800602e:	d914      	bls.n	800605a <mx_aton+0xc2>
 8006030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006034:	2b39      	cmp	r3, #57	@ 0x39
 8006036:	d810      	bhi.n	800605a <mx_aton+0xc2>
        {
          val = (val * base) + (uint32_t)c0 - (uint32_t)'0';
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603c:	fb03 f202 	mul.w	r2, r3, r2
 8006040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006044:	4413      	add	r3, r2
 8006046:	3b30      	subs	r3, #48	@ 0x30
 8006048:	637b      	str	r3, [r7, #52]	@ 0x34
          ++cp;
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	3301      	adds	r3, #1
 800604e:	62bb      	str	r3, [r7, #40]	@ 0x28
          c0 = (mx_char_t) * cp;
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006058:	e034      	b.n	80060c4 <mx_aton+0x12c>
        }
        else if ((base == 16U) && BYTE_ISXDIGIT(c0))
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	2b10      	cmp	r3, #16
 800605e:	d132      	bne.n	80060c6 <mx_aton+0x12e>
 8006060:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006064:	2b2f      	cmp	r3, #47	@ 0x2f
 8006066:	d903      	bls.n	8006070 <mx_aton+0xd8>
 8006068:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800606c:	2b39      	cmp	r3, #57	@ 0x39
 800606e:	d90f      	bls.n	8006090 <mx_aton+0xf8>
 8006070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006074:	2b60      	cmp	r3, #96	@ 0x60
 8006076:	d903      	bls.n	8006080 <mx_aton+0xe8>
 8006078:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800607c:	2b66      	cmp	r3, #102	@ 0x66
 800607e:	d907      	bls.n	8006090 <mx_aton+0xf8>
 8006080:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006084:	2b40      	cmp	r3, #64	@ 0x40
 8006086:	d91e      	bls.n	80060c6 <mx_aton+0x12e>
 8006088:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800608c:	2b46      	cmp	r3, #70	@ 0x46
 800608e:	d81a      	bhi.n	80060c6 <mx_aton+0x12e>
        {
          val = (val << 4) | ((uint32_t)c0 + 10U - (BYTE_ISLOWER(c0) ? (uint32_t)'a' : (uint32_t)'A'));
 8006090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006092:	011a      	lsls	r2, r3, #4
 8006094:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8006098:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800609c:	2b60      	cmp	r3, #96	@ 0x60
 800609e:	d905      	bls.n	80060ac <mx_aton+0x114>
 80060a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060a4:	2b7a      	cmp	r3, #122	@ 0x7a
 80060a6:	d801      	bhi.n	80060ac <mx_aton+0x114>
 80060a8:	2361      	movs	r3, #97	@ 0x61
 80060aa:	e000      	b.n	80060ae <mx_aton+0x116>
 80060ac:	2341      	movs	r3, #65	@ 0x41
 80060ae:	1acb      	subs	r3, r1, r3
 80060b0:	330a      	adds	r3, #10
 80060b2:	4313      	orrs	r3, r2
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
          ++cp;
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	3301      	adds	r3, #1
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
          c0 = (mx_char_t) * cp;
 80060bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (BYTE_ISDIGIT(c0))
 80060c4:	e7b0      	b.n	8006028 <mx_aton+0x90>
        {
          break;
        }
      }

      if (c0 == '.')
 80060c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80060cc:	d118      	bne.n	8006100 <mx_aton+0x168>
         * Internet format:
         *  a.b.c.d
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
 80060ce:	f107 030c 	add.w	r3, r7, #12
 80060d2:	330c      	adds	r3, #12
 80060d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d304      	bcc.n	80060e4 <mx_aton+0x14c>
        {
          ret = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	623b      	str	r3, [r7, #32]
          done = 1;
 80060de:	2301      	movs	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e76d      	b.n	8005fc0 <mx_aton+0x28>
        }
        else
        {
          *pp = val;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060e8:	601a      	str	r2, [r3, #0]
          pp++;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	3304      	adds	r3, #4
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
          ++cp;
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	3301      	adds	r3, #1
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
          c0 = (mx_char_t) * cp;
 80060f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80060fe:	e75f      	b.n	8005fc0 <mx_aton+0x28>
        }
      }
      else
      {
        done = 1;
 8006100:	2301      	movs	r3, #1
 8006102:	61fb      	str	r3, [r7, #28]
    if (done == 1)
 8006104:	e75c      	b.n	8005fc0 <mx_aton+0x28>
      break;
 8006106:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (mx_char_t)'\0') && (BYTE_ISSPACE((c0)) == false))
 8006108:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01f      	beq.n	8006150 <mx_aton+0x1b8>
 8006110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006114:	2b20      	cmp	r3, #32
 8006116:	d013      	beq.n	8006140 <mx_aton+0x1a8>
 8006118:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d00f      	beq.n	8006140 <mx_aton+0x1a8>
 8006120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006124:	2b0a      	cmp	r3, #10
 8006126:	d00b      	beq.n	8006140 <mx_aton+0x1a8>
 8006128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800612c:	2b0d      	cmp	r3, #13
 800612e:	d007      	beq.n	8006140 <mx_aton+0x1a8>
 8006130:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006134:	2b09      	cmp	r3, #9
 8006136:	d003      	beq.n	8006140 <mx_aton+0x1a8>
 8006138:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800613c:	2b0b      	cmp	r3, #11
 800613e:	d101      	bne.n	8006144 <mx_aton+0x1ac>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <mx_aton+0x1ae>
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d102      	bne.n	8006150 <mx_aton+0x1b8>
  {
    ret = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	e04a      	b.n	80061e6 <mx_aton+0x24e>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	109b      	asrs	r3, r3, #2
 800615a:	3301      	adds	r3, #1
 800615c:	2b04      	cmp	r3, #4
 800615e:	d83e      	bhi.n	80061de <mx_aton+0x246>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <mx_aton+0x1d0>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800617d 	.word	0x0800617d
 800616c:	080061e5 	.word	0x080061e5
 8006170:	08006183 	.word	0x08006183
 8006174:	0800619b 	.word	0x0800619b
 8006178:	080061bb 	.word	0x080061bb
    {

      case 0:
        ret = 0;          /* initial non digit */
 800617c:	2300      	movs	r3, #0
 800617e:	623b      	str	r3, [r7, #32]
        break;
 8006180:	e031      	b.n	80061e6 <mx_aton+0x24e>

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8006182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006188:	d301      	bcc.n	800618e <mx_aton+0x1f6>
        {
          ret = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	623b      	str	r3, [r7, #32]
        }
        val |= parts[0] << 24;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006194:	4313      	orrs	r3, r2
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006198:	e025      	b.n	80061e6 <mx_aton+0x24e>

      case 3:             /* a.b.c -- 8.8.16 bits */
        if (val > 0xffffU)
 800619a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a0:	d302      	bcc.n	80061a8 <mx_aton+0x210>
        {
          ret = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	623b      	str	r3, [r7, #32]
          break;
 80061a6:	e01e      	b.n	80061e6 <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	061a      	lsls	r2, r3, #24
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	4313      	orrs	r3, r2
 80061b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b4:	4313      	orrs	r3, r2
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061b8:	e015      	b.n	80061e6 <mx_aton+0x24e>

      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xffU)
 80061ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061bc:	2bff      	cmp	r3, #255	@ 0xff
 80061be:	d902      	bls.n	80061c6 <mx_aton+0x22e>
        {
          ret = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	623b      	str	r3, [r7, #32]
          break;
 80061c4:	e00f      	b.n	80061e6 <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	061a      	lsls	r2, r3, #24
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	431a      	orrs	r2, r3
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	4313      	orrs	r3, r2
 80061d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061d8:	4313      	orrs	r3, r2
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061dc:	e003      	b.n	80061e6 <mx_aton+0x24e>
      default:
        ret = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	623b      	str	r3, [r7, #32]
        break;
 80061e2:	e000      	b.n	80061e6 <mx_aton+0x24e>
        break;
 80061e4:	bf00      	nop
    }
  }

  if (ret == 1)
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d113      	bne.n	8006214 <mx_aton+0x27c>
  {
    if (addr != NULL)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d010      	beq.n	8006214 <mx_aton+0x27c>
    {
      addr->addr = MX_NET_HTONL(val);
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	0e1a      	lsrs	r2, r3, #24
 80061f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80061fe:	431a      	orrs	r2, r3
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006208:	431a      	orrs	r2, r3
 800620a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	431a      	orrs	r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8006214:	6a3b      	ldr	r3, [r7, #32]
}
 8006216:	4618      	mov	r0, r3
 8006218:	373c      	adds	r7, #60	@ 0x3c
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop

08006224 <mx_aton_r>:


int32_t mx_aton_r(const mx_char_t *cp)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  mx_ip_addr_t val = {0};
 800622c:	2300      	movs	r3, #0
 800622e:	60bb      	str	r3, [r7, #8]
  int32_t ret = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

  if (mx_aton(cp, &val) != 0)
 8006234:	f107 0308 	add.w	r3, r7, #8
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff feac 	bl	8005f98 <mx_aton>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <mx_aton_r+0x26>
  {
    ret = (int32_t) val.addr;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <mx_ntoa>:


mx_char_t *mx_ntoa(const mx_ip_addr_t *addr)
{
 8006254:	b480      	push	{r7}
 8006256:	b08b      	sub	sp, #44	@ 0x2c
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  int32_t len = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	627b      	str	r3, [r7, #36]	@ 0x24
  static mx_char_t buf[MX_MAX_IP_LEN];
  const int32_t buf_size = (int32_t)sizeof(buf);
 8006260:	2310      	movs	r3, #16
 8006262:	61fb      	str	r3, [r7, #28]

  const uint32_t ip_addr = addr->addr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	613b      	str	r3, [r7, #16]
  const uint8_t *const ap = (const uint8_t *)&ip_addr;
 800626a:	f107 0310 	add.w	r3, r7, #16
 800626e:	61bb      	str	r3, [r7, #24]

  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006276:	e060      	b.n	800633a <mx_ntoa+0xe6>
  {
    mx_char_t inv[3];
    uint8_t i = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    uint8_t val = ap[n];
 800627e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4413      	add	r3, r2
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    do
    {
      const uint8_t rem = val % 10U;
 800628c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006290:	4b34      	ldr	r3, [pc, #208]	@ (8006364 <mx_ntoa+0x110>)
 8006292:	fba3 1302 	umull	r1, r3, r3, r2
 8006296:	08d9      	lsrs	r1, r3, #3
 8006298:	460b      	mov	r3, r1
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	75fb      	strb	r3, [r7, #23]
      val /=  10U;
 80062a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006364 <mx_ntoa+0x110>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	08db      	lsrs	r3, r3, #3
 80062b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      inv[i] = (mx_char_t)'0' + rem;
 80062b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80062b8:	7dfa      	ldrb	r2, [r7, #23]
 80062ba:	3230      	adds	r2, #48	@ 0x30
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	3328      	adds	r3, #40	@ 0x28
 80062c0:	443b      	add	r3, r7
 80062c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
      i++;
 80062c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80062ca:	3301      	adds	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    } while (val != 0U);
 80062d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1d9      	bne.n	800628c <mx_ntoa+0x38>

    while (i != 0U)
 80062d8:	e016      	b.n	8006308 <mx_ntoa+0xb4>
    {
      i--;
 80062da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80062de:	3b01      	subs	r3, #1
 80062e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (len < buf_size)
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	da0d      	bge.n	8006308 <mx_ntoa+0xb4>
      {
        buf[len] = inv[i];
 80062ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80062f0:	3328      	adds	r3, #40	@ 0x28
 80062f2:	443b      	add	r3, r7
 80062f4:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80062f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <mx_ntoa+0x114>)
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	4413      	add	r3, r2
 80062fe:	460a      	mov	r2, r1
 8006300:	701a      	strb	r2, [r3, #0]
        len++;
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	3301      	adds	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0U)
 8006308:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e4      	bne.n	80062da <mx_ntoa+0x86>
      }
    }

    if ((n < 3U) && (len < buf_size))
 8006310:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006314:	2b02      	cmp	r3, #2
 8006316:	d80b      	bhi.n	8006330 <mx_ntoa+0xdc>
 8006318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	429a      	cmp	r2, r3
 800631e:	da07      	bge.n	8006330 <mx_ntoa+0xdc>
    {
      buf[len] = (mx_char_t) '.';
 8006320:	4a11      	ldr	r2, [pc, #68]	@ (8006368 <mx_ntoa+0x114>)
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	4413      	add	r3, r2
 8006326:	222e      	movs	r2, #46	@ 0x2e
 8006328:	701a      	strb	r2, [r3, #0]
      len++;
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	3301      	adds	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8006330:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006334:	3301      	adds	r3, #1
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800633e:	2b03      	cmp	r3, #3
 8006340:	d99a      	bls.n	8006278 <mx_ntoa+0x24>
    }
  }

  MX_ASSERT(len < buf_size);
 8006342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	429a      	cmp	r2, r3
 8006348:	dafb      	bge.n	8006342 <mx_ntoa+0xee>

  buf[len] = (mx_char_t) '\0';
 800634a:	4a07      	ldr	r2, [pc, #28]	@ (8006368 <mx_ntoa+0x114>)
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	4413      	add	r3, r2
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]

  return buf;
 8006354:	4b04      	ldr	r3, [pc, #16]	@ (8006368 <mx_ntoa+0x114>)
}
 8006356:	4618      	mov	r0, r3
 8006358:	372c      	adds	r7, #44	@ 0x2c
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	cccccccd 	.word	0xcccccccd
 8006368:	20002c20 	.word	0x20002c20

0800636c <noos_sem_signal>:

#else  /* MX_WIFI_USE_CMSIS_OS */
/* No OS implementation. */

int32_t noos_sem_signal(volatile uint32_t *sem)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  int32_t rc = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]

  if (sem != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <noos_sem_signal+0x1e>
  {
    *sem = *sem + 1U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e002      	b.n	8006390 <noos_sem_signal+0x24>
  }
  else
  {
    rc = -1;
 800638a:	f04f 33ff 	mov.w	r3, #4294967295
 800638e:	60fb      	str	r3, [r7, #12]
  }

  return rc;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <noos_sem_wait>:


int32_t noos_sem_wait(__IO uint32_t *sem, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]
  const uint32_t tickstart = HAL_GetTick();
 80063ae:	f002 ff7d 	bl	80092ac <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

  while ((*sem < 1U))
 80063b4:	e018      	b.n	80063e8 <noos_sem_wait+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 80063b6:	f002 ff79 	bl	80092ac <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d203      	bcs.n	80063ce <noos_sem_wait+0x30>
    {
      rc = -1;
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	617b      	str	r3, [r7, #20]
      break;
 80063cc:	e010      	b.n	80063f0 <noos_sem_wait+0x52>
    }
    if (idle_func != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <noos_sem_wait+0x4a>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 80063d4:	f002 ff6a 	bl	80092ac <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1a9a      	subs	r2, r3, r2
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	441a      	add	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
  while ((*sem < 1U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0e2      	beq.n	80063b6 <noos_sem_wait+0x18>
    }
  }
  /* no timeout */
  if (rc == 0)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <noos_sem_wait+0x62>
  {
    *sem = *sem - 1U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	1e5a      	subs	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]
  }
  return rc;
 8006400:	697b      	ldr	r3, [r7, #20]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <noos_fifo_init>:


int32_t noos_fifo_init(noos_queue_t **qret, uint16_t len)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	807b      	strh	r3, [r7, #2]
  int32_t rc = -1;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	60fb      	str	r3, [r7, #12]
  noos_queue_t *q;

  if (len > 0U)
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d030      	beq.n	8006484 <noos_fifo_init+0x7a>
  {
    q = (noos_queue_t *)MX_WIFI_MALLOC(sizeof(noos_queue_t));
 8006422:	2014      	movs	r0, #20
 8006424:	f00d fe06 	bl	8014034 <malloc>
 8006428:	4603      	mov	r3, r0
 800642a:	60bb      	str	r3, [r7, #8]
    if (q != NULL)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d028      	beq.n	8006484 <noos_fifo_init+0x7a>
    {
      q->in = 0U;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2200      	movs	r2, #0
 8006436:	805a      	strh	r2, [r3, #2]
      q->len = len;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	887a      	ldrh	r2, [r7, #2]
 800643c:	801a      	strh	r2, [r3, #0]
      q->idx = 0;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	609a      	str	r2, [r3, #8]
      q->rd = 0;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	60da      	str	r2, [r3, #12]
      q->wr = 0;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	611a      	str	r2, [r3, #16]
      q->fifo = (void **) MX_WIFI_MALLOC(sizeof(void *) * (len + 1U));
 8006450:	887b      	ldrh	r3, [r7, #2]
 8006452:	3301      	adds	r3, #1
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4618      	mov	r0, r3
 8006458:	f00d fdec 	bl	8014034 <malloc>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	605a      	str	r2, [r3, #4]
      if (q->fifo != NULL)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <noos_fifo_init+0x6e>
      {
        rc = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
        *qret = q;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e005      	b.n	8006484 <noos_fifo_init+0x7a>
      }
      else
      {
        MX_WIFI_FREE(q);
 8006478:	68b8      	ldr	r0, [r7, #8]
 800647a:	f00d fde3 	bl	8014044 <free>
        *qret = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return rc;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <noos_fifo_deinit>:


void noos_fifo_deinit(noos_queue_t *q)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  if (q != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <noos_fifo_deinit+0x1e>
  {
    MX_WIFI_FREE(q->fifo);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f00d fdcf 	bl	8014044 <free>
    MX_WIFI_FREE(q);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f00d fdcc 	bl	8014044 <free>
  }
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <noos_fifo_push>:

int32_t noos_fifo_push(noos_queue_t *queue, void *p, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  int32_t rc = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
  const uint32_t tickstart = HAL_GetTick();
 80064c6:	f002 fef1 	bl	80092ac <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

  while (queue->in == queue->len)
 80064cc:	e018      	b.n	8006500 <noos_fifo_push+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 80064ce:	f002 feed 	bl	80092ac <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d203      	bcs.n	80064e6 <noos_fifo_push+0x32>
    {
      rc = -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	617b      	str	r3, [r7, #20]
      break;
 80064e4:	e012      	b.n	800650c <noos_fifo_push+0x58>
    }
    if (NULL != idle_func)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <noos_fifo_push+0x4c>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 80064ec:	f002 fede 	bl	80092ac <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1a9a      	subs	r2, r3, r2
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	441a      	add	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
  while (queue->in == queue->len)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	885a      	ldrh	r2, [r3, #2]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d0e0      	beq.n	80064ce <noos_fifo_push+0x1a>
    }
  }
  if (0 == rc)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d119      	bne.n	8006546 <noos_fifo_push+0x92>
  {
    queue->in++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	885b      	ldrh	r3, [r3, #2]
 8006516:	3301      	adds	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	805a      	strh	r2, [r3, #2]
    queue->fifo[queue->wr] = p;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	601a      	str	r2, [r3, #0]
    queue->wr = (queue->wr + 1U) % queue->len;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	8812      	ldrh	r2, [r2, #0]
 8006538:	fbb3 f1f2 	udiv	r1, r3, r2
 800653c:	fb01 f202 	mul.w	r2, r1, r2
 8006540:	1a9a      	subs	r2, r3, r2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	611a      	str	r2, [r3, #16]
  }
  return rc;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <noos_fifo_pop>:


void *noos_fifo_pop(noos_queue_t *queue, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
  const uint32_t tickstart = HAL_GetTick();
 8006560:	f002 fea4 	bl	80092ac <HAL_GetTick>
 8006564:	6178      	str	r0, [r7, #20]
  void *p = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	61bb      	str	r3, [r7, #24]

  while (0U == queue->in)
 800656a:	e018      	b.n	800659e <noos_fifo_pop+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 800656c:	f002 fe9e 	bl	80092ac <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	d203      	bcs.n	8006584 <noos_fifo_pop+0x34>
    {
      rc = -1;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	61fb      	str	r3, [r7, #28]
      break;
 8006582:	e010      	b.n	80065a6 <noos_fifo_pop+0x56>
    }
    if (NULL != idle_func)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <noos_fifo_pop+0x4e>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 800658a:	f002 fe8f 	bl	80092ac <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1a9a      	subs	r2, r3, r2
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	441a      	add	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4610      	mov	r0, r2
 800659c:	4798      	blx	r3
  while (0U == queue->in)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	885b      	ldrh	r3, [r3, #2]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0e2      	beq.n	800656c <noos_fifo_pop+0x1c>
    }
  }

  if (0 == rc)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d119      	bne.n	80065e0 <noos_fifo_pop+0x90>
  {
    p = queue->fifo[queue->rd];
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	61bb      	str	r3, [r7, #24]
    queue->rd = (queue->rd + 1U) % queue->len;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	8812      	ldrh	r2, [r2, #0]
 80065c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ca:	fb01 f202 	mul.w	r2, r1, r2
 80065ce:	1a9a      	subs	r2, r3, r2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	60da      	str	r2, [r3, #12]
    queue->in--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	885b      	ldrh	r3, [r3, #2]
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	805a      	strh	r2, [r3, #2]
  }

  return p;
 80065e0:	69bb      	ldr	r3, [r7, #24]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <mx_wifi_hci_pkt_verify>:
static bool mx_wifi_hci_pkt_verify(const uint8_t *data, uint32_t len);


/* Private functions ---------------------------------------------------------*/
static bool mx_wifi_hci_pkt_verify(const uint8_t *data, uint32_t len)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  (void)data;
  (void)len;
  /* Here each UART slip frame or SPI frame as a HCI packet. */
  return true;
 80065f4:	2301      	movs	r3, #1
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <mx_wifi_hci_init>:


/* Global functions ----------------------------------------------------------*/
int32_t mx_wifi_hci_init(hci_send_func_t low_level_send)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  TclOutputFunc = low_level_send;
 800660c:	4a05      	ldr	r2, [pc, #20]	@ (8006624 <mx_wifi_hci_init+0x20>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
  FIFO_INIT(HciPacketFifo, MX_WIFI_MAX_RX_BUFFER_COUNT);
 8006612:	2102      	movs	r1, #2
 8006614:	4804      	ldr	r0, [pc, #16]	@ (8006628 <mx_wifi_hci_init+0x24>)
 8006616:	f7ff fef8 	bl	800640a <noos_fifo_init>

  return 0;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20002c30 	.word	0x20002c30
 8006628:	20002c34 	.word	0x20002c34

0800662c <mx_wifi_hci_deinit>:


int32_t mx_wifi_hci_deinit(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  FIFO_DEINIT(HciPacketFifo);
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <mx_wifi_hci_deinit+0x14>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff ff2a 	bl	800648e <noos_fifo_deinit>
  return 0;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20002c34 	.word	0x20002c34

08006644 <mx_wifi_hci_send>:


int32_t mx_wifi_hci_send(uint8_t *payload, uint16_t len)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
  int32_t ret = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
  uint16_t sent = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	817b      	strh	r3, [r7, #10]

#if (MX_WIFI_USE_SPI == 1)
  sent = TclOutputFunc(payload, len);
 8006658:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <mx_wifi_hci_send+0x48>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	887a      	ldrh	r2, [r7, #2]
 800665e:	4611      	mov	r1, r2
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
 8006664:	4603      	mov	r3, r0
 8006666:	817b      	strh	r3, [r7, #10]
  if (len != sent)
 8006668:	887a      	ldrh	r2, [r7, #2]
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	429a      	cmp	r2, r3
 800666e:	d007      	beq.n	8006680 <mx_wifi_hci_send+0x3c>
  {
    DEBUG_ERROR("tcl_output(spi) error sent=%d !\n", sent);
 8006670:	897b      	ldrh	r3, [r7, #10]
 8006672:	4619      	mov	r1, r3
 8006674:	4806      	ldr	r0, [pc, #24]	@ (8006690 <mx_wifi_hci_send+0x4c>)
 8006676:	f00e fcc9 	bl	801500c <iprintf>
    ret = -1;
 800667a:	f04f 33ff 	mov.w	r3, #4294967295
 800667e:	60fb      	str	r3, [r7, #12]
    DEBUG_ERROR("Create slip frame error!\n");
    ret = -2;
  }
#endif /* (MX_WIFI_USE_SPI == 1) */

  return ret;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20002c30 	.word	0x20002c30
 8006690:	08019d98 	.word	0x08019d98

08006694 <mx_wifi_hci_recv>:


mx_buf_t *mx_wifi_hci_recv(uint32_t timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  mx_buf_t *const nbuf = (mx_buf_t *)FIFO_POP(HciPacketFifo, timeout, process_txrx_poll);
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <mx_wifi_hci_recv+0x24>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a06      	ldr	r2, [pc, #24]	@ (80066bc <mx_wifi_hci_recv+0x28>)
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ff53 	bl	8006550 <noos_fifo_pop>
 80066aa:	60f8      	str	r0, [r7, #12]
#endif /* 0 */

    MX_STAT(out_fifo);
  }

  return nbuf;
 80066ac:	68fb      	ldr	r3, [r7, #12]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20002c34 	.word	0x20002c34
 80066bc:	08008d2d 	.word	0x08008d2d

080066c0 <mx_wifi_hci_free>:


void mx_wifi_hci_free(mx_buf_t *nbuf)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <mx_wifi_hci_free+0x14>
  {
    (void) MX_NET_BUFFER_FREE(nbuf);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f00d fcb8 	bl	8014044 <free>

    MX_STAT(free);
  }
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <mx_wifi_hci_input>:

/**
  * @brief LOW LEVEL INTERFACE
  */
void mx_wifi_hci_input(mx_buf_t *netbuf)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d02a      	beq.n	8006740 <mx_wifi_hci_input+0x64>
  {
    uint8_t *data = MX_NET_BUFFER_PAYLOAD(netbuf);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	3308      	adds	r3, #8
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
    uint32_t len  = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60bb      	str	r3, [r7, #8]
    {
      DEBUG_LOG("%02" PRIx32 " ", (uint32_t)data[i]);
    }
#endif /* 0 */

    if ((NULL != data) && (len > 0))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01e      	beq.n	8006740 <mx_wifi_hci_input+0x64>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <mx_wifi_hci_input+0x64>
    {
      if (mx_wifi_hci_pkt_verify(data, len))
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff6d 	bl	80065ea <mx_wifi_hci_pkt_verify>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d011      	beq.n	800673a <mx_wifi_hci_input+0x5e>
      {
        if (FIFO_OK != FIFO_PUSH(HciPacketFifo, netbuf, WAIT_FOREVER, NULL))
 8006716:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <mx_wifi_hci_input+0x6c>)
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	f7ff fec7 	bl	80064b4 <noos_fifo_push>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <mx_wifi_hci_input+0x64>
        {
          DEBUG_ERROR("push tcl input queue err!\n");
 800672c:	4807      	ldr	r0, [pc, #28]	@ (800674c <mx_wifi_hci_input+0x70>)
 800672e:	f00e fcdd 	bl	80150ec <puts>
          MX_NET_BUFFER_FREE(netbuf);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f00d fc86 	bl	8014044 <free>

        MX_STAT(free);
      }
    }
  }
}
 8006738:	e002      	b.n	8006740 <mx_wifi_hci_input+0x64>
        MX_NET_BUFFER_FREE(netbuf);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f00d fc82 	bl	8014044 <free>
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20002c34 	.word	0x20002c34
 800674c:	08019dbc 	.word	0x08019dbc

08006750 <byte_pointer_add_signed_offset>:
static uint16_t mpic_get_api_id(const uint8_t Buffer[]);
static void mipc_event(mx_buf_t *netbuf);


static uint8_t *byte_pointer_add_signed_offset(uint8_t *BytePointer, int32_t Offset)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  return BytePointer + Offset;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <get_new_req_id>:


/* unique sequence number */
static uint32_t get_new_req_id(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  static uint32_t id = 1;
  return id++;
 8006770:	4b04      	ldr	r3, [pc, #16]	@ (8006784 <get_new_req_id+0x18>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	4903      	ldr	r1, [pc, #12]	@ (8006784 <get_new_req_id+0x18>)
 8006778:	600a      	str	r2, [r1, #0]
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	200000d0 	.word	0x200000d0

08006788 <mpic_get_req_id>:


static uint32_t mpic_get_req_id(const uint8_t Buffer[])
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return *((const uint32_t *) &Buffer[MIPC_PKT_REQ_ID_OFFSET]);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <mpic_get_api_id>:


static uint16_t mpic_get_api_id(const uint8_t Buffer[])
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return *((const uint16_t *) &Buffer[MIPC_PKT_API_ID_OFFSET]);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	881b      	ldrh	r3, [r3, #0]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <mipc_event>:


static void mipc_event(mx_buf_t *netbuf)
{
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b08b      	sub	sp, #44	@ 0x2c
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
    /* WiFi */
    {MIPC_API_WIFI_STATUS_EVENT,        mapi_wifi_status_event_callback},
    {MIPC_API_WIFI_BYPASS_INPUT_EVENT,  mapi_wifi_netlink_input_callback}
  };

  if (NULL != netbuf)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8099 	beq.w	80068fe <mipc_event+0x142>
  {
    uint8_t *const buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	3308      	adds	r3, #8
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	4413      	add	r3, r2
 80067d6:	623b      	str	r3, [r7, #32]
    const uint32_t buffer_in_size = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	61fb      	str	r3, [r7, #28]

    if ((NULL != buffer_in) && (buffer_in_size >= MIPC_PKT_MIN_SIZE))
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8087 	beq.w	80068f4 <mipc_event+0x138>
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b05      	cmp	r3, #5
 80067ea:	f240 8083 	bls.w	80068f4 <mipc_event+0x138>
    {
      const uint32_t req_id = mpic_get_req_id(buffer_in);
 80067ee:	6a38      	ldr	r0, [r7, #32]
 80067f0:	f7ff ffca 	bl	8006788 <mpic_get_req_id>
 80067f4:	61b8      	str	r0, [r7, #24]
      const uint16_t api_id = mpic_get_api_id(buffer_in);
 80067f6:	6a38      	ldr	r0, [r7, #32]
 80067f8:	f7ff ffd2 	bl	80067a0 <mpic_get_api_id>
 80067fc:	4603      	mov	r3, r0
 80067fe:	82fb      	strh	r3, [r7, #22]

      DEBUG_LOG("%-15s(): req_id: 0x%08" PRIx32 ", api_id: 0x%04" PRIx32 "\n",
                __FUNCTION__, req_id, (uint32_t)api_id);

      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 8006800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006804:	2b00      	cmp	r3, #0
 8006806:	db48      	blt.n	800689a <mipc_event+0xde>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d045      	beq.n	800689a <mipc_event+0xde>
      {
        /* The command response must match pending req id. */
        if (PendingRequest.req_id == req_id)
 800680e:	4b3e      	ldr	r3, [pc, #248]	@ (8006908 <mipc_event+0x14c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	d13c      	bne.n	8006892 <mipc_event+0xd6>
        {
          /* return params */
          if ((PendingRequest.rbuffer_size != NULL) && (*PendingRequest.rbuffer_size > 0) &&
 8006818:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <mipc_event+0x14c>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d029      	beq.n	8006874 <mipc_event+0xb8>
 8006820:	4b39      	ldr	r3, [pc, #228]	@ (8006908 <mipc_event+0x14c>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d024      	beq.n	8006874 <mipc_event+0xb8>
              (NULL != PendingRequest.rbuffer))
 800682a:	4b37      	ldr	r3, [pc, #220]	@ (8006908 <mipc_event+0x14c>)
 800682c:	68db      	ldr	r3, [r3, #12]
          if ((PendingRequest.rbuffer_size != NULL) && (*PendingRequest.rbuffer_size > 0) &&
 800682e:	2b00      	cmp	r3, #0
 8006830:	d020      	beq.n	8006874 <mipc_event+0xb8>
          {
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 8006832:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <mipc_event+0x14c>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	3b06      	subs	r3, #6
 800683e:	429a      	cmp	r2, r3
 8006840:	d203      	bcs.n	800684a <mipc_event+0x8e>
                                             *PendingRequest.rbuffer_size : (uint16_t)(buffer_in_size - MIPC_PKT_MIN_SIZE);
 8006842:	4b31      	ldr	r3, [pc, #196]	@ (8006908 <mipc_event+0x14c>)
 8006844:	689b      	ldr	r3, [r3, #8]
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	e003      	b.n	8006852 <mipc_event+0x96>
                                             *PendingRequest.rbuffer_size : (uint16_t)(buffer_in_size - MIPC_PKT_MIN_SIZE);
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	b29b      	uxth	r3, r3
            *(PendingRequest.rbuffer_size) = *PendingRequest.rbuffer_size < (buffer_in_size - MIPC_PKT_MIN_SIZE) ? \
 800684e:	3b06      	subs	r3, #6
 8006850:	b29b      	uxth	r3, r3
 8006852:	4a2d      	ldr	r2, [pc, #180]	@ (8006908 <mipc_event+0x14c>)
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	8013      	strh	r3, [r2, #0]
            (void)memcpy(PendingRequest.rbuffer, byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET),
 8006858:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <mipc_event+0x14c>)
 800685a:	68dc      	ldr	r4, [r3, #12]
 800685c:	2106      	movs	r1, #6
 800685e:	6a38      	ldr	r0, [r7, #32]
 8006860:	f7ff ff76 	bl	8006750 <byte_pointer_add_signed_offset>
 8006864:	4601      	mov	r1, r0
                         *PendingRequest.rbuffer_size);
 8006866:	4b28      	ldr	r3, [pc, #160]	@ (8006908 <mipc_event+0x14c>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	881b      	ldrh	r3, [r3, #0]
            (void)memcpy(PendingRequest.rbuffer, byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET),
 800686c:	461a      	mov	r2, r3
 800686e:	4620      	mov	r0, r4
 8006870:	f00e ff5b 	bl	801572a <memcpy>
          }
          /* printf("Signal for %d\n",pending_request.req_id); */
          PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8006874:	4b24      	ldr	r3, [pc, #144]	@ (8006908 <mipc_event+0x14c>)
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	601a      	str	r2, [r3, #0]
          if (SEM_OK != SEM_SIGNAL(PendingRequest.resp_flag))
 800687c:	4823      	ldr	r0, [pc, #140]	@ (800690c <mipc_event+0x150>)
 800687e:	f7ff fd75 	bl	800636c <noos_sem_signal>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <mipc_event+0xd6>
          {
            DEBUG_ERROR("Failed to signal command response\n");
 8006888:	4821      	ldr	r0, [pc, #132]	@ (8006910 <mipc_event+0x154>)
 800688a:	f00e fc2f 	bl	80150ec <puts>
            MX_ASSERT(false);
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <mipc_event+0xd2>
        else
        {
          DEBUG_LOG("response req_id: 0x%08"PRIx32" not match pending req_id: 0x%08" PRIx32 "!\n",
                    req_id, PendingRequest.req_id);
        }
        mx_wifi_hci_free(netbuf);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff ff14 	bl	80066c0 <mx_wifi_hci_free>
    {
 8006898:	e030      	b.n	80068fc <mipc_event+0x140>
      }
      else /* event callback */
      {
        const uint32_t event_table_count = sizeof(event_table) / sizeof(event_table[0]);
 800689a:	2304      	movs	r3, #4
 800689c:	613b      	str	r3, [r7, #16]
        uint32_t i;

        for (i = 0; i < event_table_count; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a2:	e016      	b.n	80068d2 <mipc_event+0x116>
        {
          if (event_table[i].api_id == api_id)
 80068a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <mipc_event+0x158>)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80068ac:	8afa      	ldrh	r2, [r7, #22]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d10c      	bne.n	80068cc <mipc_event+0x110>
          {
            const event_callback_t callback = event_table[i].callback;
 80068b2:	4a18      	ldr	r2, [pc, #96]	@ (8006914 <mipc_event+0x158>)
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
            if (NULL != callback)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <mipc_event+0x110>
            {
              /* DEBUG_LOG("callback with %p\n", buffer_in); */
              callback(netbuf);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
              break;
 80068ca:	e006      	b.n	80068da <mipc_event+0x11e>
        for (i = 0; i < event_table_count; i++)
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d3e4      	bcc.n	80068a4 <mipc_event+0xe8>
            }
          }
        }
        if (i == event_table_count)
 80068da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d10c      	bne.n	80068fc <mipc_event+0x140>
        {
          DEBUG_ERROR("Unknown event: 0x%04" PRIx32 "!\n", (uint32_t)api_id);
 80068e2:	8afb      	ldrh	r3, [r7, #22]
 80068e4:	4619      	mov	r1, r3
 80068e6:	480c      	ldr	r0, [pc, #48]	@ (8006918 <mipc_event+0x15c>)
 80068e8:	f00e fb90 	bl	801500c <iprintf>
          mx_wifi_hci_free(netbuf);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fee7 	bl	80066c0 <mx_wifi_hci_free>
    {
 80068f2:	e003      	b.n	80068fc <mipc_event+0x140>
      }
    }
    else
    {
      DEBUG_LOG("Unknown buffer content\n");
      mx_wifi_hci_free(netbuf);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff fee3 	bl	80066c0 <mx_wifi_hci_free>
    }
  }
}
 80068fa:	e000      	b.n	80068fe <mipc_event+0x142>
    {
 80068fc:	bf00      	nop
}
 80068fe:	bf00      	nop
 8006900:	372c      	adds	r7, #44	@ 0x2c
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}
 8006906:	bf00      	nop
 8006908:	20002c38 	.word	0x20002c38
 800690c:	20002c3c 	.word	0x20002c3c
 8006910:	08019dd8 	.word	0x08019dd8
 8006914:	0818c93c 	.word	0x0818c93c
 8006918:	08019dfc 	.word	0x08019dfc

0800691c <mipc_init>:
/*******************************************************************************
  * IPC API implementations for mx_wifi over HCI
  ******************************************************************************/

int32_t mipc_init(mipc_send_func_t ipc_send)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  int32_t ret;

  PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8006924:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <mipc_init+0x28>)
 8006926:	f04f 32ff 	mov.w	r2, #4294967295
 800692a:	601a      	str	r2, [r3, #0]
  SEM_INIT(PendingRequest.resp_flag, 1);
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <mipc_init+0x28>)
 800692e:	2200      	movs	r2, #0
 8006930:	605a      	str	r2, [r3, #4]

  ret = mx_wifi_hci_init(ipc_send);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fe66 	bl	8006604 <mx_wifi_hci_init>
 8006938:	60f8      	str	r0, [r7, #12]

  return ret;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20002c38 	.word	0x20002c38

08006948 <mipc_deinit>:


int32_t mipc_deinit(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  int32_t ret;

  SEM_DEINIT(PendingRequest.resp_flag);

  ret = mx_wifi_hci_deinit();
 800694e:	f7ff fe6d 	bl	800662c <mx_wifi_hci_deinit>
 8006952:	6078      	str	r0, [r7, #4]

  return ret;
 8006954:	687b      	ldr	r3, [r7, #4]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <mipc_request>:

int32_t mipc_request(uint16_t api_id,
                     uint8_t *cparams, uint16_t cparams_size,
                     uint8_t *rbuffer, uint16_t *rbuffer_size,
                     uint32_t timeout_ms)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607b      	str	r3, [r7, #4]
 800696a:	4603      	mov	r3, r0
 800696c:	81fb      	strh	r3, [r7, #14]
 800696e:	4613      	mov	r3, r2
 8006970:	81bb      	strh	r3, [r7, #12]
  int32_t ret = MIPC_CODE_ERROR;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	61fb      	str	r3, [r7, #28]
  uint8_t *cbuf;
  bool copy_buffer = true;
 8006978:	2301      	movs	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]

  LOCK(wifi_obj_get()->lockcmd);
 800697c:	f002 fba2 	bl	80090c4 <wifi_obj_get>
 8006980:	4603      	mov	r3, r0
 8006982:	f893 3610 	ldrb.w	r3, [r3, #1552]	@ 0x610
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f7      	bne.n	800697c <mipc_request+0x1c>
 800698c:	f002 fb9a 	bl	80090c4 <wifi_obj_get>
 8006990:	4603      	mov	r3, r0
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2610 	strb.w	r2, [r3, #1552]	@ 0x610

  /* DEBUG_LOG("\n%s()>  %" PRIu32 "\n", __FUNCTION__, (uint32_t)cparams_size); */

  if (cparams_size <= MX_WIFI_IPC_PAYLOAD_SIZE)
 8006998:	89bb      	ldrh	r3, [r7, #12]
 800699a:	f640 12be 	movw	r2, #2494	@ 0x9be
 800699e:	4293      	cmp	r3, r2
 80069a0:	d875      	bhi.n	8006a8e <mipc_request+0x12e>
  {
    /* Create the command data. */
    const uint16_t cbuf_size = MIPC_PKT_REQ_ID_SIZE + MIPC_PKT_API_ID_SIZE + cparams_size;
 80069a2:	89bb      	ldrh	r3, [r7, #12]
 80069a4:	3306      	adds	r3, #6
 80069a6:	82bb      	strh	r3, [r7, #20]

#if MX_WIFI_TX_BUFFER_NO_COPY
    if (api_id == MIPC_API_WIFI_BYPASS_OUT_CMD)
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80069ae:	d108      	bne.n	80069c2 <mipc_request+0x62>
    {
      cbuf = byte_pointer_add_signed_offset(cparams, - (MIPC_PKT_REQ_ID_SIZE + MIPC_PKT_API_ID_SIZE));
 80069b0:	f06f 0105 	mvn.w	r1, #5
 80069b4:	68b8      	ldr	r0, [r7, #8]
 80069b6:	f7ff fecb 	bl	8006750 <byte_pointer_add_signed_offset>
 80069ba:	61b8      	str	r0, [r7, #24]
      copy_buffer = false;
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]
 80069c0:	e005      	b.n	80069ce <mipc_request+0x6e>
    else
#endif /* MX_WIFI_TX_BUFFER_NO_COPY */
    {
      DEBUG_LOG("\n%-15s(): Allocate %" PRIu32 " bytes\n", __FUNCTION__, (uint32_t)cbuf_size);

      cbuf = (uint8_t *)MX_WIFI_MALLOC(cbuf_size);
 80069c2:	8abb      	ldrh	r3, [r7, #20]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f00d fb35 	bl	8014034 <malloc>
 80069ca:	4603      	mov	r3, r0
 80069cc:	61bb      	str	r3, [r7, #24]

      MX_STAT(alloc);
    }

    if (NULL != cbuf)
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d05c      	beq.n	8006a8e <mipc_request+0x12e>
    {
      /* Get an unique identifier. */
      const uint32_t req_id = get_new_req_id();
 80069d4:	f7ff feca 	bl	800676c <get_new_req_id>
 80069d8:	4603      	mov	r3, r0
 80069da:	613b      	str	r3, [r7, #16]

      /* Copy the protocol parameter to the head part of the buffer. */
      (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_REQ_ID_OFFSET), &req_id, sizeof(req_id));
 80069dc:	2100      	movs	r1, #0
 80069de:	69b8      	ldr	r0, [r7, #24]
 80069e0:	f7ff feb6 	bl	8006750 <byte_pointer_add_signed_offset>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	6013      	str	r3, [r2, #0]
      (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_API_ID_OFFSET), &api_id, sizeof(api_id));
 80069ea:	2104      	movs	r1, #4
 80069ec:	69b8      	ldr	r0, [r7, #24]
 80069ee:	f7ff feaf 	bl	8006750 <byte_pointer_add_signed_offset>
 80069f2:	4602      	mov	r2, r0
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	8013      	strh	r3, [r2, #0]

      if ((true == copy_buffer) && (cparams_size > 0))
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <mipc_request+0xb6>
 80069fe:	89bb      	ldrh	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <mipc_request+0xb6>
      {
        (void)memcpy(byte_pointer_add_signed_offset(cbuf, MIPC_PKT_PARAMS_OFFSET), cparams, cparams_size);
 8006a04:	2106      	movs	r1, #6
 8006a06:	69b8      	ldr	r0, [r7, #24]
 8006a08:	f7ff fea2 	bl	8006750 <byte_pointer_add_signed_offset>
 8006a0c:	89bb      	ldrh	r3, [r7, #12]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	f00e fe8a 	bl	801572a <memcpy>
      }

      /* A single pending request due to LOCK usage on command. */
      if (PendingRequest.req_id != MIPC_REQ_ID_RESET_VAL)
 8006a16:	4b23      	ldr	r3, [pc, #140]	@ (8006aa4 <mipc_request+0x144>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d001      	beq.n	8006a24 <mipc_request+0xc4>
      {
        DEBUG_LOG("Error req_id must be 0xffffffff here %" PRIu32 "\n", PendingRequest.req_id);
        MX_ASSERT(false);
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <mipc_request+0xc0>
      }

      PendingRequest.req_id = req_id;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa4 <mipc_request+0x144>)
 8006a28:	6013      	str	r3, [r2, #0]
      PendingRequest.rbuffer = rbuffer;
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <mipc_request+0x144>)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60d3      	str	r3, [r2, #12]
      PendingRequest.rbuffer_size = rbuffer_size;
 8006a30:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa4 <mipc_request+0x144>)
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a34:	6093      	str	r3, [r2, #8]
      /* printf("%d push %d\n",iter++,cbuf_size); */

      /* Send the command. */
      DEBUG_LOG("%-15s(): req_id: 0x%08" PRIx32 " : %" PRIu32 "\n", __FUNCTION__, req_id, (uint32_t)cbuf_size);

      ret = mx_wifi_hci_send(cbuf, cbuf_size);
 8006a36:	8abb      	ldrh	r3, [r7, #20]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	69b8      	ldr	r0, [r7, #24]
 8006a3c:	f7ff fe02 	bl	8006644 <mx_wifi_hci_send>
 8006a40:	61f8      	str	r0, [r7, #28]
      if (ret == 0)
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d117      	bne.n	8006a78 <mipc_request+0x118>
      {
        /* Wait for the command answer. */
        if (SEM_WAIT(PendingRequest.resp_flag, timeout_ms, mipc_poll) != SEM_OK)
 8006a48:	4a17      	ldr	r2, [pc, #92]	@ (8006aa8 <mipc_request+0x148>)
 8006a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a4c:	4817      	ldr	r0, [pc, #92]	@ (8006aac <mipc_request+0x14c>)
 8006a4e:	f7ff fca6 	bl	800639e <noos_sem_wait>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d014      	beq.n	8006a82 <mipc_request+0x122>
        {
          DEBUG_ERROR("Error: command 0x%04" PRIx32 " timeout(%" PRIu32 " ms) waiting answer %" PRIu32 "\n",
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4b11      	ldr	r3, [pc, #68]	@ (8006aa4 <mipc_request+0x144>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a62:	4813      	ldr	r0, [pc, #76]	@ (8006ab0 <mipc_request+0x150>)
 8006a64:	f00e fad2 	bl	801500c <iprintf>
                      (uint32_t)api_id, timeout_ms, PendingRequest.req_id);
          PendingRequest.req_id = MIPC_REQ_ID_RESET_VAL;
 8006a68:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa4 <mipc_request+0x144>)
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	601a      	str	r2, [r3, #0]
          ret = MIPC_CODE_ERROR;
 8006a70:	f04f 33ff 	mov.w	r3, #4294967295
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	e004      	b.n	8006a82 <mipc_request+0x122>
        }
      }
      else
      {
        DEBUG_ERROR("Failed to send command to HCI\n");
 8006a78:	480e      	ldr	r0, [pc, #56]	@ (8006ab4 <mipc_request+0x154>)
 8006a7a:	f00e fb37 	bl	80150ec <puts>
        MX_ASSERT(false);
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <mipc_request+0x11e>
      }

      DEBUG_LOG("%-15s()< req_id: 0x%08" PRIx32 " done (%" PRId32 ")\n\n", __FUNCTION__, req_id, ret);

      if (true == copy_buffer)
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <mipc_request+0x12e>
      {
        MX_WIFI_FREE(cbuf);
 8006a88:	69b8      	ldr	r0, [r7, #24]
 8006a8a:	f00d fadb 	bl	8014044 <free>
        MX_STAT(free);
      }
    }
  }

  UNLOCK(wifi_obj_get()->lockcmd);
 8006a8e:	f002 fb19 	bl	80090c4 <wifi_obj_get>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2610 	strb.w	r2, [r3, #1552]	@ 0x610

  return ret;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20002c38 	.word	0x20002c38
 8006aa8:	08006ab9 	.word	0x08006ab9
 8006aac:	20002c3c 	.word	0x20002c3c
 8006ab0:	08019e18 	.word	0x08019e18
 8006ab4:	08019e54 	.word	0x08019e54

08006ab8 <mipc_poll>:


void mipc_poll(uint32_t timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  mx_buf_t *nbuf;

  /* Process the received data inside the RX buffer. */
  nbuf = mx_wifi_hci_recv(timeout);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff fde7 	bl	8006694 <mx_wifi_hci_recv>
 8006ac6:	60f8      	str	r0, [r7, #12]

  if (NULL != nbuf)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <mipc_poll+0x30>
  {
    const uint32_t len = MX_NET_BUFFER_GET_PAYLOAD_SIZE(nbuf);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60bb      	str	r3, [r7, #8]

    DEBUG_LOG("%-15s(): %p HCI recv len %" PRIu32 "\n", __FUNCTION__, nbuf, len);

    if (len > 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <mipc_poll+0x2a>
    {
      mipc_event(nbuf);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fe6e 	bl	80067bc <mipc_event>
      MX_NET_BUFFER_FREE(nbuf);

      MX_STAT(free);
    }
  }
}
 8006ae0:	e002      	b.n	8006ae8 <mipc_poll+0x30>
      MX_NET_BUFFER_FREE(nbuf);
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f00d faae 	bl	8014044 <free>
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <mapi_reboot_event_callback>:
  ******************************************************************************/

/* System */

void mapi_reboot_event_callback(mx_buf_t *mxbuff)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  if (mxbuff != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <mapi_reboot_event_callback+0x14>
  {
    mx_wifi_hci_free(mxbuff);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fdde 	bl	80066c0 <mx_wifi_hci_free>
  }
  DEBUG_LOG("\nEVENT: reboot done.\n");
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <mapi_fota_status_event_callback>:


void mapi_fota_status_event_callback(mx_buf_t *nbuf)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d026      	beq.n	8006b68 <mapi_fota_status_event_callback+0x5c>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(nbuf);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
    if (NULL != payload)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01d      	beq.n	8006b68 <mapi_fota_status_event_callback+0x5c>
    {
      mx_wifi_fota_status_e status = *((mx_wifi_fota_status_e *)(byte_pointer_add_signed_offset(payload, MIPC_PKT_PARAMS_OFFSET)));
 8006b2c:	2106      	movs	r1, #6
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7ff fe0e 	bl	8006750 <byte_pointer_add_signed_offset>
 8006b34:	4603      	mov	r3, r0
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	74fb      	strb	r3, [r7, #19]

      DEBUG_LOG("\nEVENT: FOTA status: %02x\n", status);

      mx_wifi_hci_free(nbuf);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fdc0 	bl	80066c0 <mx_wifi_hci_free>

      {
        mx_wifi_fota_status_cb_t const status_cb = wifi_obj_get()->Runtime.fota_status_cb;
 8006b40:	f002 fac0 	bl	80090c4 <wifi_obj_get>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b4a:	60fb      	str	r3, [r7, #12]
        const uint32_t cb_args = wifi_obj_get()->Runtime.fota_user_args;
 8006b4c:	f002 faba 	bl	80090c4 <wifi_obj_get>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006b56:	60bb      	str	r3, [r7, #8]
        if (NULL != status_cb)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d004      	beq.n	8006b68 <mapi_fota_status_event_callback+0x5c>
        {
          status_cb(status, cb_args);
 8006b5e:	7cfa      	ldrb	r2, [r7, #19]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
        }
      }
    }
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <mapi_wifi_status_event_callback>:


/* WiFi */

void mapi_wifi_status_event_callback(mx_buf_t *netbuf)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint8_t cate;
  mx_wifi_status_callback_t status_cb = NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
  void *cb_args = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]

  if (NULL != netbuf)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d043      	beq.n	8006c0e <mapi_wifi_status_event_callback+0x9e>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(netbuf);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4413      	add	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
    mwifi_status_t status = *((mwifi_status_t *)(byte_pointer_add_signed_offset(payload, MIPC_PKT_PARAMS_OFFSET)));
 8006b92:	2106      	movs	r1, #6
 8006b94:	6938      	ldr	r0, [r7, #16]
 8006b96:	f7ff fddb 	bl	8006750 <byte_pointer_add_signed_offset>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	73fb      	strb	r3, [r7, #15]

    DEBUG_LOG("\nEVENT: wifi status: %02x\n", status);

    mx_wifi_hci_free(netbuf);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fd8d 	bl	80066c0 <mx_wifi_hci_free>

    switch (status)
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	dc02      	bgt.n	8006bb2 <mapi_wifi_status_event_callback+0x42>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dc04      	bgt.n	8006bba <mapi_wifi_status_event_callback+0x4a>
 8006bb0:	e021      	b.n	8006bf6 <mapi_wifi_status_event_callback+0x86>
 8006bb2:	3b04      	subs	r3, #4
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d81e      	bhi.n	8006bf6 <mapi_wifi_status_event_callback+0x86>
 8006bb8:	e00e      	b.n	8006bd8 <mapi_wifi_status_event_callback+0x68>
    {
      case MWIFI_EVENT_STA_UP:
      case MWIFI_EVENT_STA_DOWN:
      case MWIFI_EVENT_STA_GOT_IP:
        cate = MC_STATION;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[0];
 8006bbe:	f002 fa81 	bl	80090c4 <wifi_obj_get>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006bc8:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[0];
 8006bca:	f002 fa7b 	bl	80090c4 <wifi_obj_get>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006bd4:	617b      	str	r3, [r7, #20]
        break;
 8006bd6:	e012      	b.n	8006bfe <mapi_wifi_status_event_callback+0x8e>

      case MWIFI_EVENT_AP_UP:
      case MWIFI_EVENT_AP_DOWN:
        cate = MC_SOFTAP;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[1];
 8006bdc:	f002 fa72 	bl	80090c4 <wifi_obj_get>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006be6:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[1];
 8006be8:	f002 fa6c 	bl	80090c4 <wifi_obj_get>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006bf2:	617b      	str	r3, [r7, #20]
        break;
 8006bf4:	e003      	b.n	8006bfe <mapi_wifi_status_event_callback+0x8e>

      default:
        cate = MC_SOFTAP;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	77fb      	strb	r3, [r7, #31]
        MX_ASSERT(false);
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <mapi_wifi_status_event_callback+0x8a>
        /* break; */
    }

    if (NULL != status_cb)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <mapi_wifi_status_event_callback+0x9e>
    {
      status_cb(cate, status, cb_args);
 8006c04:	7bf9      	ldrb	r1, [r7, #15]
 8006c06:	7ff8      	ldrb	r0, [r7, #31]
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4798      	blx	r3
    }
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3720      	adds	r7, #32
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <mapi_wifi_netlink_input_callback>:


void mapi_wifi_netlink_input_callback(mx_buf_t *netbuf)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d02e      	beq.n	8006c82 <mapi_wifi_netlink_input_callback+0x6c>
  {
    uint8_t *const buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
    wifi_bypass_in_rparams_t *const in_rprarams = (wifi_bypass_in_rparams_t *)(byte_pointer_add_signed_offset(buffer_in, MIPC_PKT_PARAMS_OFFSET));
 8006c30:	2106      	movs	r1, #6
 8006c32:	6978      	ldr	r0, [r7, #20]
 8006c34:	f7ff fd8c 	bl	8006750 <byte_pointer_add_signed_offset>
 8006c38:	6138      	str	r0, [r7, #16]

    MX_STAT(callback);

    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 8006c3a:	f002 fa43 	bl	80090c4 <wifi_obj_get>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d019      	beq.n	8006c7c <mapi_wifi_netlink_input_callback+0x66>
        (in_rprarams->tot_len > 0))
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	8a9b      	ldrh	r3, [r3, #20]
 8006c4c:	b29b      	uxth	r3, r3
    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <mapi_wifi_netlink_input_callback+0x66>
    {
      uint32_t low_level_netif_idx = (uint32_t)in_rprarams->idx;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]

      MX_NET_BUFFER_HIDE_HEADER(netbuf, MIPC_PKT_PARAMS_OFFSET + sizeof(wifi_bypass_in_rparams_t));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f103 021c 	add.w	r2, r3, #28
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]
      wifi_obj_get()->Runtime.netlink_input_cb(netbuf, (void *)&low_level_netif_idx);
 8006c64:	f002 fa2e 	bl	80090c4 <wifi_obj_get>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006c6e:	f107 020c 	add.w	r2, r7, #12
 8006c72:	4611      	mov	r1, r2
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
    {
 8006c78:	bf00      	nop
      MX_NET_BUFFER_FREE(netbuf);

      MX_STAT(free);
    }
  }
}
 8006c7a:	e002      	b.n	8006c82 <mapi_wifi_netlink_input_callback+0x6c>
      MX_NET_BUFFER_FREE(netbuf);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f00d f9e1 	bl	8014044 <free>
}
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <MX_WIFI_RegisterBusIO>:
                                       IO_Init_Func IO_Init,
                                       IO_DeInit_Func IO_DeInit,
                                       IO_Delay_Func IO_Delay,
                                       IO_Send_Func IO_Send,
                                       IO_Receive_Func IO_Receive)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T rc;

  if ((NULL == Obj) || (NULL == IO_Init) || (NULL == IO_DeInit) || (NULL == IO_Send) || \
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00e      	beq.n	8006cbc <MX_WIFI_RegisterBusIO+0x32>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <MX_WIFI_RegisterBusIO+0x32>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <MX_WIFI_RegisterBusIO+0x32>
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <MX_WIFI_RegisterBusIO+0x32>
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <MX_WIFI_RegisterBusIO+0x32>
      (NULL == IO_Receive) || (NULL == IO_Delay))
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <MX_WIFI_RegisterBusIO+0x38>
  {
    rc = MX_WIFI_STATUS_ERROR;
 8006cbc:	23ff      	movs	r3, #255	@ 0xff
 8006cbe:	75fb      	strb	r3, [r7, #23]
 8006cc0:	e010      	b.n	8006ce4 <MX_WIFI_RegisterBusIO+0x5a>
  }
  else
  {
    Obj->fops.IO_Init = IO_Init;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	601a      	str	r2, [r3, #0]
    Obj->fops.IO_DeInit = IO_DeInit;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	605a      	str	r2, [r3, #4]
    Obj->fops.IO_Send = IO_Send;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	60da      	str	r2, [r3, #12]
    Obj->fops.IO_Receive = IO_Receive;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd8:	611a      	str	r2, [r3, #16]
    Obj->fops.IO_Delay = IO_Delay;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	609a      	str	r2, [r3, #8]
    rc = MX_WIFI_STATUS_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	75fb      	strb	r3, [r7, #23]
  }
  return rc;
 8006ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <MX_WIFI_HardResetModule>:


MX_WIFI_STATUS_T MX_WIFI_HardResetModule(MX_WIFIObject_t *Obj)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T rc = MX_WIFI_STATUS_ERROR;
 8006cfc:	23ff      	movs	r3, #255	@ 0xff
 8006cfe:	73fb      	strb	r3, [r7, #15]

  MX_STAT_INIT();

  if (NULL != Obj)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <MX_WIFI_HardResetModule+0x30>
  {
    /* reset Wi-Fi by reset pin */
    const int8_t ret = Obj->fops.IO_Init(MX_WIFI_RESET);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73bb      	strb	r3, [r7, #14]
    if ((int8_t)0 == ret)
 8006d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d102      	bne.n	8006d20 <MX_WIFI_HardResetModule+0x2c>
    {
      rc = MX_WIFI_STATUS_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	e001      	b.n	8006d24 <MX_WIFI_HardResetModule+0x30>
    }
    else
    {
      rc = MX_WIFI_STATUS_ERROR;
 8006d20:	23ff      	movs	r3, #255	@ 0xff
 8006d22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rc;
 8006d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <MX_WIFI_Init>:
}
#endif /* MX_WIFI_BARE_OS_H */


MX_WIFI_STATUS_T MX_WIFI_Init(MX_WIFIObject_t *Obj)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	@ 0x38
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8006d38:	23ff      	movs	r3, #255	@ 0xff
 8006d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  if (NULL == Obj)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <MX_WIFI_Init+0x1c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8006d44:	23fc      	movs	r3, #252	@ 0xfc
 8006d46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006d4a:	e0d1      	b.n	8006ef0 <MX_WIFI_Init+0x1c0>
  }
  else
  {
    if (Obj->Runtime.interfaces == 0u)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 80c1 	bne.w	8006eda <MX_WIFI_Init+0x1aa>
    {
      LOCK_INIT(Obj->lockcmd);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2610 	strb.w	r2, [r3, #1552]	@ 0x610

      /* 0. Set command timeout. */
      Obj->Runtime.Timeout = MX_WIFI_CMD_TIMEOUT;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295
 8006d66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

      /* 1. Initialize the WiFi low level IO (UART/SPI). */
      (void)(Obj->fops.IO_Init(MX_WIFI_INIT));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	4798      	blx	r3
      {
        /* 2. Initialize the WiFi IPC. */
        if (MIPC_CODE_SUCCESS == mipc_init(Obj->fops.IO_Send))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fdd0 	bl	800691c <mipc_init>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 80b6 	bne.w	8006ef0 <MX_WIFI_Init+0x1c0>
                                       MX_WIFI_RECEIVED_THREAD_PRIORITY))
          {
            uint16_t rparams_size;

            /* 3. Get the version of the WiFi module firmware. */
            (void)MX_WIFI_MEMSET(Obj->SysInfo.FW_Rev, 0);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3354      	adds	r3, #84	@ 0x54
 8006d88:	2218      	movs	r2, #24
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f00e fbf3 	bl	8015578 <memset>
            rparams_size = (uint16_t)sizeof(Obj->SysInfo.FW_Rev);
 8006d92:	2318      	movs	r3, #24
 8006d94:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
                                                  NULL, 0,
                                                  Obj->SysInfo.FW_Rev, &rparams_size,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f103 0254 	add.w	r2, r3, #84	@ 0x54
            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	2003      	movs	r0, #3
 8006db0:	f7ff fdd6 	bl	8006960 <mipc_request>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f040 809a 	bne.w	8006ef0 <MX_WIFI_Init+0x1c0>
                                                  MX_WIFI_CMD_TIMEOUT))
            {
              /* Check if WiFi module firmware is correctly managed by the current version of the host driver. */
              {
                uint32_t firmware_rev[3] = {0};
 8006dbc:	f107 0318 	add.w	r3, r7, #24
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	605a      	str	r2, [r3, #4]
 8006dc6:	609a      	str	r2, [r3, #8]
                const uint32_t firmware_rev_required[3] = {2, 3, 4};
 8006dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8006efc <MX_WIFI_Init+0x1cc>)
 8006dca:	f107 030c 	add.w	r3, r7, #12
 8006dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

                int status = sscanf((const char *)Obj->SysInfo.FW_Rev,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8006dda:	f107 0318 	add.w	r3, r7, #24
 8006dde:	1d19      	adds	r1, r3, #4
 8006de0:	f107 0218 	add.w	r2, r7, #24
 8006de4:	f107 0318 	add.w	r3, r7, #24
 8006de8:	3308      	adds	r3, #8
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	460b      	mov	r3, r1
 8006dee:	4944      	ldr	r1, [pc, #272]	@ (8006f00 <MX_WIFI_Init+0x1d0>)
 8006df0:	f00e fa94 	bl	801531c <siscanf>
 8006df4:	62b8      	str	r0, [r7, #40]	@ 0x28
                                    "V%" PRIu32 ".%" PRIu32 ".%" PRIu32 "", &firmware_rev[0], &firmware_rev[1], &firmware_rev[2]);
                if (status <= 0)
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dc04      	bgt.n	8006e06 <MX_WIFI_Init+0xd6>
                {
                  DEBUG_ERROR("ERROR: Unable to decode WiFi firmware version\n");
 8006dfc:	4841      	ldr	r0, [pc, #260]	@ (8006f04 <MX_WIFI_Init+0x1d4>)
 8006dfe:	f00e f975 	bl	80150ec <puts>
                  MX_ASSERT(false);
 8006e02:	bf00      	nop
 8006e04:	e7fd      	b.n	8006e02 <MX_WIFI_Init+0xd2>
                }

                for (uint8_t i = 0; i < sizeof(firmware_rev) / sizeof(firmware_rev[0]); ++i)
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006e0c:	e029      	b.n	8006e62 <MX_WIFI_Init+0x132>
                {
                  if (firmware_rev[i] > firmware_rev_required[i])
 8006e0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	3330      	adds	r3, #48	@ 0x30
 8006e16:	443b      	add	r3, r7
 8006e18:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8006e1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	3330      	adds	r3, #48	@ 0x30
 8006e24:	443b      	add	r3, r7
 8006e26:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d81e      	bhi.n	8006e6c <MX_WIFI_Init+0x13c>
                  {
                    break;
                  }
                  else if (firmware_rev[i] < firmware_rev_required[i])
 8006e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	3330      	adds	r3, #48	@ 0x30
 8006e36:	443b      	add	r3, r7
 8006e38:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8006e3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	3330      	adds	r3, #48	@ 0x30
 8006e44:	443b      	add	r3, r7
 8006e46:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d204      	bcs.n	8006e58 <MX_WIFI_Init+0x128>
                  {
                    DEBUG_ERROR("ERROR: The WiFi firmware is out of date\n");
 8006e4e:	482e      	ldr	r0, [pc, #184]	@ (8006f08 <MX_WIFI_Init+0x1d8>)
 8006e50:	f00e f94c 	bl	80150ec <puts>
                    MX_ASSERT(false);
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <MX_WIFI_Init+0x124>
                for (uint8_t i = 0; i < sizeof(firmware_rev) / sizeof(firmware_rev[0]); ++i)
 8006e58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006e62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d9d1      	bls.n	8006e0e <MX_WIFI_Init+0xde>
 8006e6a:	e000      	b.n	8006e6e <MX_WIFI_Init+0x13e>
                    break;
 8006e6c:	bf00      	nop
                    /* Going on with the next revision digit. */
                  }
                }
              }

              MX_WIFI_STRNCPY(Obj->SysInfo.Product_Name, MX_WIFI_PRODUCT_NAME);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3314      	adds	r3, #20
 8006e72:	221f      	movs	r2, #31
 8006e74:	4925      	ldr	r1, [pc, #148]	@ (8006f0c <MX_WIFI_Init+0x1dc>)
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 fdf5 	bl	8008a66 <void_strncpy>
              MX_WIFI_STRNCPY(Obj->SysInfo.Product_ID, MX_WIFI_PRODUCT_ID);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3334      	adds	r3, #52	@ 0x34
 8006e80:	221f      	movs	r2, #31
 8006e82:	4923      	ldr	r1, [pc, #140]	@ (8006f10 <MX_WIFI_Init+0x1e0>)
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 fdee 	bl	8008a66 <void_strncpy>

              /* 4. Get MAC address. */
              (void)MX_WIFI_MEMSET(Obj->SysInfo.MAC, 0);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	336c      	adds	r3, #108	@ 0x6c
 8006e8e:	2206      	movs	r2, #6
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f00e fb70 	bl	8015578 <memset>
              rparams_size = (uint16_t)sizeof(Obj->SysInfo.MAC);
 8006e98:	2306      	movs	r3, #6
 8006e9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
                                                    NULL, 0,
                                                    Obj->SysInfo.MAC, &rparams_size,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f240 1001 	movw	r0, #257	@ 0x101
 8006eb8:	f7ff fd52 	bl	8006960 <mipc_request>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d116      	bne.n	8006ef0 <MX_WIFI_Init+0x1c0>
                                                    MX_WIFI_CMD_TIMEOUT))
              {
                ret = MX_WIFI_STATUS_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                Obj->Runtime.interfaces++;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006ece:	3301      	adds	r3, #1
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
 8006ed8:	e00a      	b.n	8006ef0 <MX_WIFI_Init+0x1c0>
        }
      }
    }
    else
    {
      Obj->Runtime.interfaces++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
      ret = MX_WIFI_STATUS_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  return ret;
 8006ef0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3730      	adds	r7, #48	@ 0x30
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	08019ef4 	.word	0x08019ef4
 8006f00:	08019e74 	.word	0x08019e74
 8006f04:	08019e84 	.word	0x08019e84
 8006f08:	08019eb4 	.word	0x08019eb4
 8006f0c:	08019edc 	.word	0x08019edc
 8006f10:	08019ee8 	.word	0x08019ee8

08006f14 <MX_WIFI_DeInit>:


MX_WIFI_STATUS_T MX_WIFI_DeInit(MX_WIFIObject_t *Obj)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8006f1c:	23fc      	movs	r3, #252	@ 0xfc
 8006f1e:	73fb      	strb	r3, [r7, #15]

  if (NULL != Obj)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d023      	beq.n	8006f6e <MX_WIFI_DeInit+0x5a>
  {
    if (Obj->Runtime.interfaces == 1u)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d10f      	bne.n	8006f50 <MX_WIFI_DeInit+0x3c>
#endif /* MX_WIFI_BARE_OS_H */

      /* Delete the thread (depends on implementation). */
      THREAD_DEINIT(MX_WIFI_RecvThreadId);

      (void)mipc_deinit();
 8006f30:	f7ff fd0a 	bl	8006948 <mipc_deinit>
      Obj->fops.IO_DeInit();
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4798      	blx	r3
      ret = MX_WIFI_STATUS_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
      Obj->Runtime.interfaces--;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
 8006f4e:	e00e      	b.n	8006f6e <MX_WIFI_DeInit+0x5a>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
      if (Obj->Runtime.interfaces > 0u)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <MX_WIFI_DeInit+0x5a>
      {
        Obj->Runtime.interfaces--;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
    }
  }

  MX_STAT_LOG();

  return ret;
 8006f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <MX_WIFI_IO_YIELD>:


MX_WIFI_STATUS_T MX_WIFI_IO_YIELD(MX_WIFIObject_t *Obj, uint32_t timeout)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  if (NULL != Obj)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <MX_WIFI_IO_YIELD+0x1a>
  {
    mipc_poll(timeout);
 8006f8e:	6838      	ldr	r0, [r7, #0]
 8006f90:	f7ff fd92 	bl	8006ab8 <mipc_poll>
  }
  return ret;
 8006f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <MX_WIFI_GetMACAddress>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_GetMACAddress(MX_WIFIObject_t *Obj, uint8_t *Mac)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8006faa:	23ff      	movs	r3, #255	@ 0xff
 8006fac:	73fb      	strb	r3, [r7, #15]

  if ((NULL != Obj) && (NULL != Mac))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <MX_WIFI_GetMACAddress+0x2c>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <MX_WIFI_GetMACAddress+0x2c>
  {
    (void)memcpy(Mac, Obj->SysInfo.MAC, MX_WIFI_MAC_SIZE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	336c      	adds	r3, #108	@ 0x6c
 8006fbe:	2206      	movs	r2, #6
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f00e fbb1 	bl	801572a <memcpy>
    ret = MX_WIFI_STATUS_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <MX_WIFI_GetsoftapMACAddress>:


MX_WIFI_STATUS_T MX_WIFI_GetsoftapMACAddress(MX_WIFIObject_t *Obj, uint8_t *Mac)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8006fe2:	23ff      	movs	r3, #255	@ 0xff
 8006fe4:	73fb      	strb	r3, [r7, #15]

  if ((NULL != Obj) && (NULL != Mac))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d027      	beq.n	800703c <MX_WIFI_GetsoftapMACAddress+0x64>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d024      	beq.n	800703c <MX_WIFI_GetsoftapMACAddress+0x64>
  {
    uint16_t rparams_size = MX_WIFI_MAC_SIZE;
 8006ff2:	2306      	movs	r3, #6
 8006ff4:	81bb      	strh	r3, [r7, #12]

    (void)memset(&Obj->SysInfo.apMAC[0], 0, MX_WIFI_MAC_SIZE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3372      	adds	r3, #114	@ 0x72
 8006ffa:	2206      	movs	r2, #6
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f00e faba 	bl	8015578 <memset>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_SOFT_MAC_CMD,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f103 0272 	add.w	r2, r3, #114	@ 0x72
 800700a:	f04f 33ff 	mov.w	r3, #4294967295
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	f107 030c 	add.w	r3, r7, #12
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	f240 1015 	movw	r0, #277	@ 0x115
 8007020:	f7ff fc9e 	bl	8006960 <mipc_request>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d108      	bne.n	800703c <MX_WIFI_GetsoftapMACAddress+0x64>
                                          NULL, 0,
                                          &Obj->SysInfo.apMAC[0],
                                          &rparams_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      (void)memcpy(Mac, &Obj->SysInfo.apMAC[0], MX_WIFI_MAC_SIZE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3372      	adds	r3, #114	@ 0x72
 800702e:	2206      	movs	r2, #6
 8007030:	4619      	mov	r1, r3
 8007032:	6838      	ldr	r0, [r7, #0]
 8007034:	f00e fb79 	bl	801572a <memcpy>
      ret = MX_WIFI_STATUS_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800703c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <MX_WIFI_Scan>:


MX_WIFI_STATUS_T MX_WIFI_Scan(MX_WIFIObject_t *Obj, mc_wifi_scan_mode_t ScanMode,
                              char *SSID, int32_t Len)
{
 8007048:	b5b0      	push	{r4, r5, r7, lr}
 800704a:	b092      	sub	sp, #72	@ 0x48
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	460b      	mov	r3, r1
 8007056:	72fb      	strb	r3, [r7, #11]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007058:	23ff      	movs	r3, #255	@ 0xff
 800705a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if ((NULL == Obj) ||
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <MX_WIFI_Scan+0x34>
 8007064:	7afb      	ldrb	r3, [r7, #11]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d10c      	bne.n	8007084 <MX_WIFI_Scan+0x3c>
      (((mc_wifi_scan_mode_t)MC_SCAN_ACTIVE == ScanMode) && ((NULL == SSID) || (Len <= 0) || (Len > 32))))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <MX_WIFI_Scan+0x34>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	dd02      	ble.n	800707c <MX_WIFI_Scan+0x34>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b20      	cmp	r3, #32
 800707a:	dd03      	ble.n	8007084 <MX_WIFI_Scan+0x3c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 800707c:	23fc      	movs	r3, #252	@ 0xfc
 800707e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007082:	e049      	b.n	8007118 <MX_WIFI_Scan+0xd0>
  }
  else
  {
    wifi_scan_cparams_t cparams = {0};
 8007084:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <MX_WIFI_Scan+0xdc>)
 8007086:	f107 0410 	add.w	r4, r7, #16
 800708a:	461d      	mov	r5, r3
 800708c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800708e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	7023      	strb	r3, [r4, #0]
    const uint16_t cparams_size = (uint16_t)(sizeof(cparams));
 8007098:	2321      	movs	r3, #33	@ 0x21
 800709a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    wifi_scan_rparams_t *rparams_p = (wifi_scan_rparams_t *)&Obj->Runtime.scan_result[0];
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80070a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t rparams_p_size = (uint16_t)sizeof(Obj->Runtime.scan_result);
 80070a4:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80070a8:	86bb      	strh	r3, [r7, #52]	@ 0x34

    (void)memcpy(&cparams.ssid[0], SSID, (size_t)MIN(Len, (int32_t)(sizeof(cparams.ssid) - 1)));
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b1f      	cmp	r3, #31
 80070ae:	dc01      	bgt.n	80070b4 <MX_WIFI_Scan+0x6c>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	e000      	b.n	80070b6 <MX_WIFI_Scan+0x6e>
 80070b4:	2320      	movs	r3, #32
 80070b6:	f107 0010 	add.w	r0, r7, #16
 80070ba:	461a      	mov	r2, r3
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	f00e fb34 	bl	801572a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SCAN_CMD,
 80070c2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80070c4:	f107 0110 	add.w	r1, r7, #16
 80070c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d6:	f44f 7081 	mov.w	r0, #258	@ 0x102
 80070da:	f7ff fc41 	bl	8006960 <mipc_request>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d119      	bne.n	8007118 <MX_WIFI_Scan+0xd0>
                                          (uint8_t *)&cparams, cparams_size,
                                          (uint8_t *)rparams_p, &rparams_p_size,
                                          MX_WIFI_SCAN_TIMEOUT))
    {
      const uint8_t ap_count = rparams_p->num;
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      memmove(Obj->Runtime.scan_result, &rparams_p->ap[0],
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	461a      	mov	r2, r3
 8007104:	f00e fa1e 	bl	8015544 <memmove>
              ap_count * sizeof(mwifi_ap_info_t));

      Obj->Runtime.scan_number = ap_count;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800710e:	f883 260d 	strb.w	r2, [r3, #1549]	@ 0x60d

      ret = MX_WIFI_STATUS_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }

  return ret;
 8007118:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800711c:	4618      	mov	r0, r3
 800711e:	3740      	adds	r7, #64	@ 0x40
 8007120:	46bd      	mov	sp, r7
 8007122:	bdb0      	pop	{r4, r5, r7, pc}
 8007124:	08019f00 	.word	0x08019f00

08007128 <MX_WIFI_Get_scan_result>:


int8_t MX_WIFI_Get_scan_result(MX_WIFIObject_t *Obj, uint8_t *Results, uint8_t Number)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
  uint8_t copy_number = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]

  if ((NULL != Obj) && (NULL != Results) && (0U != Number))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d019      	beq.n	8007174 <MX_WIFI_Get_scan_result+0x4c>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <MX_WIFI_Get_scan_result+0x4c>
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d013      	beq.n	8007174 <MX_WIFI_Get_scan_result+0x4c>
  {
    copy_number = MIN(Obj->Runtime.scan_number, Number);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 360d 	ldrb.w	r3, [r3, #1549]	@ 0x60d
 8007152:	79fa      	ldrb	r2, [r7, #7]
 8007154:	4293      	cmp	r3, r2
 8007156:	bf28      	it	cs
 8007158:	4613      	movcs	r3, r2
 800715a:	75fb      	strb	r3, [r7, #23]
    (void)memcpy(Results, Obj->Runtime.scan_result, (size_t)copy_number * sizeof(mwifi_ap_info_t));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 7109 	add.w	r1, r3, #548	@ 0x224
 8007162:	7dfa      	ldrb	r2, [r7, #23]
 8007164:	4613      	mov	r3, r2
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	4413      	add	r3, r2
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	461a      	mov	r2, r3
 800716e:	68b8      	ldr	r0, [r7, #8]
 8007170:	f00e fadb 	bl	801572a <memcpy>
  }

  return (int8_t)copy_number;
 8007174:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <MX_WIFI_RegisterStatusCallback_if>:

MX_WIFI_STATUS_T MX_WIFI_RegisterStatusCallback_if(MX_WIFIObject_t *Obj,
                                                   mx_wifi_status_callback_t Cb,
                                                   void *Arg,
                                                   mwifi_if_t Interface)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	70fb      	strb	r3, [r7, #3]
  MX_WIFI_STATUS_T rc = MX_WIFI_STATUS_ERROR;
 800718e:	23ff      	movs	r3, #255	@ 0xff
 8007190:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d016      	beq.n	80071c6 <MX_WIFI_RegisterStatusCallback_if+0x46>
  {
    const uint8_t interface_num = ((mwifi_if_t)MC_SOFTAP == Interface) ? 1 : 0;
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	2b00      	cmp	r3, #0
 800719c:	bf0c      	ite	eq
 800719e:	2301      	moveq	r3, #1
 80071a0:	2300      	movne	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	75bb      	strb	r3, [r7, #22]

    Obj->Runtime.status_cb[interface_num] = Cb;
 80071a6:	7dbb      	ldrb	r3, [r7, #22]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	3380      	adds	r3, #128	@ 0x80
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	605a      	str	r2, [r3, #4]
    Obj->Runtime.callback_arg[interface_num] = Arg;
 80071b4:	7dbb      	ldrb	r3, [r7, #22]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	3382      	adds	r3, #130	@ 0x82
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]
    rc = MX_WIFI_STATUS_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
  }

  return rc;
 80071c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <MX_WIFI_Connect>:
}


MX_WIFI_STATUS_T MX_WIFI_Connect(MX_WIFIObject_t *Obj, const mx_char_t *SSID,
                                 const mx_char_t *Password, MX_WIFI_SecurityType_t SecType)
{
 80071d6:	b5b0      	push	{r4, r5, r7, lr}
 80071d8:	b0cc      	sub	sp, #304	@ 0x130
 80071da:	af02      	add	r7, sp, #8
 80071dc:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80071e0:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80071e4:	6020      	str	r0, [r4, #0]
 80071e6:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80071ea:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80071ee:	6001      	str	r1, [r0, #0]
 80071f0:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80071f4:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 80071f8:	600a      	str	r2, [r1, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007200:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8007204:	701a      	strb	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007206:	23ff      	movs	r3, #255	@ 0xff
 8007208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

  (void)SecType;

  if ((NULL != Obj) && (NULL != SSID) && (NULL != Password))
 800720c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007210:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80ff 	beq.w	800741a <MX_WIFI_Connect+0x244>
 800721c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007220:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80f7 	beq.w	800741a <MX_WIFI_Connect+0x244>
 800722c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007230:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80ef 	beq.w	800741a <MX_WIFI_Connect+0x244>
  {
    const size_t ssid_len = strlen(SSID);
 800723c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007240:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f7f9 f821 	bl	800028c <strlen>
 800724a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    const size_t password_len = strlen(Password);
 800724e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007252:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	f7f9 f818 	bl	800028c <strlen>
 800725c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c

    if ((ssid_len > (uint32_t)MX_MAX_SSID_LEN) || (password_len > (uint32_t)MX_MAX_KEY_LEN))
 8007260:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007264:	2b20      	cmp	r3, #32
 8007266:	d803      	bhi.n	8007270 <MX_WIFI_Connect+0x9a>
 8007268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800726c:	2b40      	cmp	r3, #64	@ 0x40
 800726e:	d903      	bls.n	8007278 <MX_WIFI_Connect+0xa2>
    {
      ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007270:	23fc      	movs	r3, #252	@ 0xfc
 8007272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8007276:	e0d0      	b.n	800741a <MX_WIFI_Connect+0x244>
    }
    else
    {
      wifi_connect_cparams_t cp = {0};
 8007278:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800727c:	22b0      	movs	r2, #176	@ 0xb0
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f00e f979 	bl	8015578 <memset>
      const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007286:	23b0      	movs	r3, #176	@ 0xb0
 8007288:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
      int32_t status = MIPC_CODE_ERROR;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
      uint16_t status_size = (uint16_t)sizeof(status);
 8007294:	2304      	movs	r3, #4
 8007296:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

      MX_WIFI_STRNCPY(cp.ssid, SSID);
 800729a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800729e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80072a2:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80072a6:	2220      	movs	r2, #32
 80072a8:	6819      	ldr	r1, [r3, #0]
 80072aa:	f001 fbdc 	bl	8008a66 <void_strncpy>
      MX_WIFI_STRNCPY(cp.key, Password);
 80072ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80072b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80072b6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80072ba:	f102 0021 	add.w	r0, r2, #33	@ 0x21
 80072be:	2240      	movs	r2, #64	@ 0x40
 80072c0:	6819      	ldr	r1, [r3, #0]
 80072c2:	f001 fbd0 	bl	8008a66 <void_strncpy>
      cp.key_len = (int32_t)password_len;
 80072c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072ca:	f8c7 30b2 	str.w	r3, [r7, #178]	@ 0xb2

      if ((uint8_t)0 == Obj->NetSettings.DHCP_IsEnabled)
 80072ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80072d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f040 8081 	bne.w	80073e4 <MX_WIFI_Connect+0x20e>
      {
        mwifi_ip_attr_t ip_attr = {0};
 80072e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80072e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80072ea:	4618      	mov	r0, r3
 80072ec:	2340      	movs	r3, #64	@ 0x40
 80072ee:	461a      	mov	r2, r3
 80072f0:	2100      	movs	r1, #0
 80072f2:	f00e f941 	bl	8015578 <memset>
        {
          mx_ip_addr_t ip_addr = {0};
 80072f6:	2300      	movs	r3, #0
 80072f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          (void)memcpy(&ip_addr, Obj->NetSettings.IP_Addr, sizeof(ip_addr));
 80072fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007300:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	33dd      	adds	r3, #221	@ 0xdd
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          MX_WIFI_STRNCPY(ip_attr.localip, mx_ntoa(&ip_addr));
 800730e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe ff9e 	bl	8006254 <mx_ntoa>
 8007318:	4601      	mov	r1, r0
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	220f      	movs	r2, #15
 8007320:	4618      	mov	r0, r3
 8007322:	f001 fba0 	bl	8008a66 <void_strncpy>
        }
        {
          mx_ip_addr_t ip_mask = {0};
 8007326:	2300      	movs	r3, #0
 8007328:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
          (void)memcpy(&ip_mask, Obj->NetSettings.IP_Mask, sizeof(ip_mask));
 800732c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007330:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	33e1      	adds	r3, #225	@ 0xe1
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
          MX_WIFI_STRNCPY(ip_attr.netmask, mx_ntoa(&ip_mask));
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe ff86 	bl	8006254 <mx_ntoa>
 8007348:	4601      	mov	r1, r0
 800734a:	f107 0310 	add.w	r3, r7, #16
 800734e:	3310      	adds	r3, #16
 8007350:	220f      	movs	r2, #15
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fb87 	bl	8008a66 <void_strncpy>
        }
        {
          mx_ip_addr_t gateway_ip_addr = {0};
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          (void)memcpy(&gateway_ip_addr, Obj->NetSettings.Gateway_Addr, sizeof(gateway_ip_addr));
 800735e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007362:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	33e5      	adds	r3, #229	@ 0xe5
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          MX_WIFI_STRNCPY(ip_attr.gateway, mx_ntoa(&gateway_ip_addr));
 8007370:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe ff6d 	bl	8006254 <mx_ntoa>
 800737a:	4601      	mov	r1, r0
 800737c:	f107 0310 	add.w	r3, r7, #16
 8007380:	3320      	adds	r3, #32
 8007382:	220f      	movs	r2, #15
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fb6e 	bl	8008a66 <void_strncpy>
        }
        {
          mx_ip_addr_t dns_ip_addr = {0};
 800738a:	2300      	movs	r3, #0
 800738c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
          (void)memcpy(&dns_ip_addr, Obj->NetSettings.DNS1, sizeof(dns_ip_addr));
 8007390:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007394:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	33e9      	adds	r3, #233	@ 0xe9
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
          MX_WIFI_STRNCPY(ip_attr.dnserver, mx_ntoa(&dns_ip_addr));
 80073a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe ff54 	bl	8006254 <mx_ntoa>
 80073ac:	4601      	mov	r1, r0
 80073ae:	f107 0310 	add.w	r3, r7, #16
 80073b2:	3330      	adds	r3, #48	@ 0x30
 80073b4:	220f      	movs	r2, #15
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 fb55 	bl	8008a66 <void_strncpy>
        }

        cp.use_ip = 1;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        cp.ip = ip_attr;
 80073c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80073c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80073ca:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 80073ce:	461d      	mov	r5, r3
 80073d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80073e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_CONNECT_CMD,
 80073e4:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80073e8:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 80073ec:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80073f0:	f04f 33ff 	mov.w	r3, #4294967295
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	f507 7389 	add.w	r3, r7, #274	@ 0x112
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4603      	mov	r3, r0
 80073fe:	f240 1003 	movw	r0, #259	@ 0x103
 8007402:	f7ff faad 	bl	8006960 <mipc_request>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <MX_WIFI_Connect+0x244>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&status, &status_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (MIPC_CODE_SUCCESS == status)
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <MX_WIFI_Connect+0x244>
        {
          ret = MX_WIFI_STATUS_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        }
      }
    }
  }

  return ret;
 800741a:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
}
 800741e:	4618      	mov	r0, r3
 8007420:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007424:	46bd      	mov	sp, r7
 8007426:	bdb0      	pop	{r4, r5, r7, pc}

08007428 <MX_WIFI_Disconnect>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_Disconnect(MX_WIFIObject_t *Obj)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af02      	add	r7, sp, #8
 800742e:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007430:	23ff      	movs	r3, #255	@ 0xff
 8007432:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <MX_WIFI_Disconnect+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8007440:	2304      	movs	r3, #4
 8007442:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_DISCONNECT_CMD, NULL, 0,
 8007444:	f107 0210 	add.w	r2, r7, #16
 8007448:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	f107 030e 	add.w	r3, r7, #14
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	2200      	movs	r2, #0
 8007458:	2100      	movs	r1, #0
 800745a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800745e:	f7ff fa7f 	bl	8006960 <mipc_request>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <MX_WIFI_Disconnect+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          15000))  /* disconnect max timeout 15s */
    {
      if (MIPC_CODE_SUCCESS == status)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <MX_WIFI_Disconnect+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret;
 8007472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <MX_WIFI_WPS_Connect>:


MX_WIFI_STATUS_T MX_WIFI_WPS_Connect(MX_WIFIObject_t *Obj)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b088      	sub	sp, #32
 8007482:	af02      	add	r7, sp, #8
 8007484:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007486:	23ff      	movs	r3, #255	@ 0xff
 8007488:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <MX_WIFI_WPS_Connect+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8007496:	2304      	movs	r3, #4
 8007498:	81fb      	strh	r3, [r7, #14]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_WPS_CONNECT_CMD, NULL, 0,
 800749a:	f107 0210 	add.w	r2, r7, #16
 800749e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	f107 030e 	add.w	r3, r7, #14
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4613      	mov	r3, r2
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	f240 1011 	movw	r0, #273	@ 0x111
 80074b4:	f7ff fa54 	bl	8006960 <mipc_request>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <MX_WIFI_WPS_Connect+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          15000))
    {
      if (MIPC_CODE_SUCCESS == status)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <MX_WIFI_WPS_Connect+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 80074c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <MX_WIFI_WPS_Stop>:


MX_WIFI_STATUS_T MX_WIFI_WPS_Stop(MX_WIFIObject_t *Obj)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af02      	add	r7, sp, #8
 80074da:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80074dc:	23ff      	movs	r3, #255	@ 0xff
 80074de:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01b      	beq.n	800751e <MX_WIFI_WPS_Stop+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 80074ec:	2304      	movs	r3, #4
 80074ee:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_WPS_STOP_CMD, NULL, 0,
 80074f0:	f107 0210 	add.w	r2, r7, #16
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	f107 030e 	add.w	r3, r7, #14
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4613      	mov	r3, r2
 8007502:	2200      	movs	r2, #0
 8007504:	2100      	movs	r1, #0
 8007506:	f44f 7089 	mov.w	r0, #274	@ 0x112
 800750a:	f7ff fa29 	bl	8006960 <mipc_request>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <MX_WIFI_WPS_Stop+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <MX_WIFI_WPS_Stop+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 800751e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <MX_WIFI_GetIPAddress>:
  return ret;
}


MX_WIFI_STATUS_T MX_WIFI_GetIPAddress(MX_WIFIObject_t *Obj, uint8_t *IpAddr, mwifi_if_t WifiMode)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b09e      	sub	sp, #120	@ 0x78
 800752e:	af02      	add	r7, sp, #8
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007538:	23ff      	movs	r3, #255	@ 0xff
 800753a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  if (NULL != Obj)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d067      	beq.n	8007614 <MX_WIFI_GetIPAddress+0xea>
  {
    wifi_get_ip_rparams_t rp = {0};
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	2244      	movs	r2, #68	@ 0x44
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f00e f813 	bl	8015578 <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007552:	2344      	movs	r3, #68	@ 0x44
 8007554:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint8_t interface_num = ((mwifi_if_t)MC_SOFTAP == WifiMode) ? 0 : 1;
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
    const uint16_t interface_num_size = (uint16_t)(sizeof(interface_num));
 8007568:	2301      	movs	r3, #1
 800756a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

    rp.status = MIPC_CODE_ERROR;
 800756e:	f04f 33ff 	mov.w	r3, #4294967295
 8007572:	617b      	str	r3, [r7, #20]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_IP_CMD,
 8007574:	f107 0014 	add.w	r0, r7, #20
 8007578:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800757c:	f107 0169 	add.w	r1, r7, #105	@ 0x69
 8007580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	4603      	mov	r3, r0
 800758e:	f240 1007 	movw	r0, #263	@ 0x107
 8007592:	f7ff f9e5 	bl	8006960 <mipc_request>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d13b      	bne.n	8007614 <MX_WIFI_GetIPAddress+0xea>
                                          &interface_num, interface_num_size,
                                          (uint8_t *)&rp, &rp_size,
                                          1000))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d138      	bne.n	8007614 <MX_WIFI_GetIPAddress+0xea>
      {
        {
          int32_t ip = mx_aton_r(&rp.ip.localip[0]);
 80075a2:	f107 0314 	add.w	r3, r7, #20
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fe3b 	bl	8006224 <mx_aton_r>
 80075ae:	4603      	mov	r3, r0
 80075b0:	667b      	str	r3, [r7, #100]	@ 0x64
          (void)memcpy(&Obj->NetSettings.IP_Addr[0], &ip, sizeof(Obj->NetSettings.IP_Addr));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	33dd      	adds	r3, #221	@ 0xdd
 80075b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075b8:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t netmask = mx_aton_r(&rp.ip.netmask[0]);
 80075ba:	f107 0314 	add.w	r3, r7, #20
 80075be:	3314      	adds	r3, #20
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fe2f 	bl	8006224 <mx_aton_r>
 80075c6:	4603      	mov	r3, r0
 80075c8:	663b      	str	r3, [r7, #96]	@ 0x60
          (void)memcpy(&Obj->NetSettings.IP_Mask[0], &netmask, sizeof(Obj->NetSettings.IP_Mask));
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	33e1      	adds	r3, #225	@ 0xe1
 80075ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075d0:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t gw = mx_aton_r(&rp.ip.gateway[0]);
 80075d2:	f107 0314 	add.w	r3, r7, #20
 80075d6:	3324      	adds	r3, #36	@ 0x24
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fe23 	bl	8006224 <mx_aton_r>
 80075de:	4603      	mov	r3, r0
 80075e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
          (void)memcpy(&Obj->NetSettings.Gateway_Addr[0], &gw, sizeof(Obj->NetSettings.Gateway_Addr));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	33e5      	adds	r3, #229	@ 0xe5
 80075e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075e8:	601a      	str	r2, [r3, #0]
        }
        {
          int32_t dns = mx_aton_r(&rp.ip.dnserver[0]);
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	3334      	adds	r3, #52	@ 0x34
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fe17 	bl	8006224 <mx_aton_r>
 80075f6:	4603      	mov	r3, r0
 80075f8:	65bb      	str	r3, [r7, #88]	@ 0x58
          (void)memcpy(&Obj->NetSettings.DNS1[0], &dns, sizeof(Obj->NetSettings.DNS1));
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	33e9      	adds	r3, #233	@ 0xe9
 80075fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007600:	601a      	str	r2, [r3, #0]
        }
        (void)memcpy(IpAddr, Obj->NetSettings.IP_Addr, sizeof(Obj->NetSettings.IP_Addr));
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	33dd      	adds	r3, #221	@ 0xdd
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      }
    }
  }

  return ret;
 8007614:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8007618:	4618      	mov	r0, r3
 800761a:	3770      	adds	r7, #112	@ 0x70
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <MX_WIFI_StartAP>:
  * SoftAP
  */


MX_WIFI_STATUS_T MX_WIFI_StartAP(MX_WIFIObject_t *Obj, MX_WIFI_APSettings_t *ApSettings)
{
 8007620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007622:	b0b1      	sub	sp, #196	@ 0xc4
 8007624:	af02      	add	r7, sp, #8
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800762a:	23ff      	movs	r3, #255	@ 0xff
 800762c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

  if ((NULL != Obj) && (NULL != ApSettings))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d064      	beq.n	8007700 <MX_WIFI_StartAP+0xe0>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d061      	beq.n	8007700 <MX_WIFI_StartAP+0xe0>
  {
    wifi_softap_start_cparams_t cp = {0};
 800763c:	f107 0308 	add.w	r3, r7, #8
 8007640:	22a4      	movs	r2, #164	@ 0xa4
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f00d ff97 	bl	8015578 <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800764a:	23a4      	movs	r3, #164	@ 0xa4
 800764c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    int32_t status = MIPC_CODE_ERROR;
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t status_size = (uint16_t)sizeof(status);
 8007658:	2304      	movs	r3, #4
 800765a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

    (void)memcpy((char *)cp.ssid, ApSettings->SSID, sizeof(cp.ssid));
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f107 0408 	add.w	r4, r7, #8
 8007664:	461d      	mov	r5, r3
 8007666:	6828      	ldr	r0, [r5, #0]
 8007668:	6869      	ldr	r1, [r5, #4]
 800766a:	68aa      	ldr	r2, [r5, #8]
 800766c:	68eb      	ldr	r3, [r5, #12]
 800766e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007670:	6928      	ldr	r0, [r5, #16]
 8007672:	6969      	ldr	r1, [r5, #20]
 8007674:	69aa      	ldr	r2, [r5, #24]
 8007676:	69eb      	ldr	r3, [r5, #28]
 8007678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    (void)memcpy((char *)cp.key, ApSettings->pswd, sizeof(cp.key));
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3321      	adds	r3, #33	@ 0x21
 800767e:	461c      	mov	r4, r3
 8007680:	f107 0628 	add.w	r6, r7, #40	@ 0x28
 8007684:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8007688:	4635      	mov	r5, r6
 800768a:	4623      	mov	r3, r4
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	6859      	ldr	r1, [r3, #4]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007696:	3410      	adds	r4, #16
 8007698:	3610      	adds	r6, #16
 800769a:	4564      	cmp	r4, ip
 800769c:	d1f4      	bne.n	8007688 <MX_WIFI_StartAP+0x68>
    cp.channel = (int32_t)ApSettings->channel;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80076a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    (void)memcpy(&cp.ip, &ApSettings->ip, sizeof(cp.ip));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3363      	adds	r3, #99	@ 0x63
 80076aa:	461c      	mov	r4, r3
 80076ac:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 80076b0:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80076b4:	4635      	mov	r5, r6
 80076b6:	4623      	mov	r3, r4
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076c2:	3410      	adds	r4, #16
 80076c4:	3610      	adds	r6, #16
 80076c6:	4564      	cmp	r4, ip
 80076c8:	d1f4      	bne.n	80076b4 <MX_WIFI_StartAP+0x94>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_START_CMD,
 80076ca:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80076ce:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 80076d2:	f107 0108 	add.w	r1, r7, #8
 80076d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	f107 03ae 	add.w	r3, r7, #174	@ 0xae
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	4603      	mov	r3, r0
 80076e4:	f240 1005 	movw	r0, #261	@ 0x105
 80076e8:	f7ff f93a 	bl	8006960 <mipc_request>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <MX_WIFI_StartAP+0xe0>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&status, &status_size,
                                          3000))
    {
      if (MIPC_CODE_SUCCESS == status)
 80076f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <MX_WIFI_StartAP+0xe0>
      {
        ret = MX_WIFI_STATUS_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
      }
    }
  }

  return ret;
 8007700:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
}
 8007704:	4618      	mov	r0, r3
 8007706:	37bc      	adds	r7, #188	@ 0xbc
 8007708:	46bd      	mov	sp, r7
 800770a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800770c <MX_WIFI_StopAP>:


MX_WIFI_STATUS_T MX_WIFI_StopAP(MX_WIFIObject_t *Obj)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af02      	add	r7, sp, #8
 8007712:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007714:	23ff      	movs	r3, #255	@ 0xff
 8007716:	75fb      	strb	r3, [r7, #23]

  if (NULL != Obj)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01b      	beq.n	8007756 <MX_WIFI_StopAP+0x4a>
  {
    int32_t status = MIPC_CODE_ERROR;
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	613b      	str	r3, [r7, #16]
    uint16_t status_size = (uint16_t)sizeof(status);
 8007724:	2304      	movs	r3, #4
 8007726:	81fb      	strh	r3, [r7, #14]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_STOP_CMD, NULL, 0,
 8007728:	f107 0210 	add.w	r2, r7, #16
 800772c:	f04f 33ff 	mov.w	r3, #4294967295
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	f107 030e 	add.w	r3, r7, #14
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	2200      	movs	r2, #0
 800773c:	2100      	movs	r1, #0
 800773e:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8007742:	f7ff f90d 	bl	8006960 <mipc_request>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <MX_WIFI_StopAP+0x4a>
                                          (uint8_t *)&status, &status_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <MX_WIFI_StopAP+0x4a>
      {
        ret = MX_WIFI_STATUS_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return ret;
 8007756:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <MX_WIFI_Socket_create>:


#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)

int32_t MX_WIFI_Socket_create(MX_WIFIObject_t *Obj, int32_t Domain, int32_t Type, int32_t Protocol)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b08e      	sub	sp, #56	@ 0x38
 8007766:	af02      	add	r7, sp, #8
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
  int32_t ret_fd = -1;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (NULL != Obj)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d026      	beq.n	80077ca <MX_WIFI_Socket_create+0x68>
  {
    socket_create_cparams_t cp = {0};
 800777c:	f107 031c 	add.w	r3, r7, #28
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007788:	230c      	movs	r3, #12
 800778a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    socket_create_rparams_t rp = {0};
 800778c:	2300      	movs	r3, #0
 800778e:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007790:	2304      	movs	r3, #4
 8007792:	82fb      	strh	r3, [r7, #22]

    cp.domain = Domain;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	61fb      	str	r3, [r7, #28]
    cp.type = Type;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	623b      	str	r3, [r7, #32]
    cp.protocol = Protocol;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CREATE_CMD,
 80077a0:	f107 0018 	add.w	r0, r7, #24
 80077a4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80077a6:	f107 011c 	add.w	r1, r7, #28
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	f107 0316 	add.w	r3, r7, #22
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4603      	mov	r3, r0
 80077b8:	f240 2001 	movw	r0, #513	@ 0x201
 80077bc:	f7ff f8d0 	bl	8006960 <mipc_request>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <MX_WIFI_Socket_create+0x68>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      ret_fd = rp.fd;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return ret_fd;
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3730      	adds	r7, #48	@ 0x30
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <MX_WIFI_Socket_setsockopt>:


int32_t MX_WIFI_Socket_setsockopt(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Level,
                                  int32_t OptName, const void *OptValue, int32_t OptLen)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b092      	sub	sp, #72	@ 0x48
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80077e2:	23ff      	movs	r3, #255	@ 0xff
 80077e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != OptValue) && (0 < OptLen))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d044      	beq.n	8007878 <MX_WIFI_Socket_setsockopt+0xa4>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	db41      	blt.n	8007878 <MX_WIFI_Socket_setsockopt+0xa4>
 80077f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d03e      	beq.n	8007878 <MX_WIFI_Socket_setsockopt+0xa4>
 80077fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dd3b      	ble.n	8007878 <MX_WIFI_Socket_setsockopt+0xa4>
  {
    socket_setsockopt_cparams_t cp = {0};
 8007800:	f107 0314 	add.w	r3, r7, #20
 8007804:	2220      	movs	r2, #32
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f00d feb5 	bl	8015578 <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800780e:	2320      	movs	r3, #32
 8007810:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    socket_setsockopt_rparams_t rp = {0};
 8007812:	2300      	movs	r3, #0
 8007814:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007816:	2304      	movs	r3, #4
 8007818:	86fb      	strh	r3, [r7, #54]	@ 0x36

    rp.status = MIPC_CODE_ERROR;
 800781a:	f04f 33ff 	mov.w	r3, #4294967295
 800781e:	63bb      	str	r3, [r7, #56]	@ 0x38

    cp.socket = SockFd;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	617b      	str	r3, [r7, #20]
    cp.level = Level;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	61bb      	str	r3, [r7, #24]
    cp.optname = OptName;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	61fb      	str	r3, [r7, #28]
    cp.optlen = OptLen > (int32_t)sizeof(cp.optval) ? (mx_socklen_t)sizeof(cp.optval) : (mx_socklen_t)OptLen;
 800782c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800782e:	2b10      	cmp	r3, #16
 8007830:	bfa8      	it	ge
 8007832:	2310      	movge	r3, #16
 8007834:	623b      	str	r3, [r7, #32]

    (void)memcpy(&cp.optval[0], OptValue, cp.optlen);
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	3310      	adds	r3, #16
 800783e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007840:	4618      	mov	r0, r3
 8007842:	f00d ff72 	bl	801572a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SETSOCKOPT_CMD,
 8007846:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800784a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800784c:	f107 0114 	add.w	r1, r7, #20
 8007850:	f04f 33ff 	mov.w	r3, #4294967295
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	4603      	mov	r3, r0
 800785e:	f240 200a 	movw	r0, #522	@ 0x20a
 8007862:	f7ff f87d 	bl	8006960 <mipc_request>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <MX_WIFI_Socket_setsockopt+0xa4>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <MX_WIFI_Socket_setsockopt+0xa4>
      {
        ret = MX_WIFI_STATUS_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }

  return (int32_t)ret;
 8007878:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800787c:	4618      	mov	r0, r3
 800787e:	3740      	adds	r7, #64	@ 0x40
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <MX_WIFI_Socket_getsockopt>:


int32_t MX_WIFI_Socket_getsockopt(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Level,
                                  int32_t OptName, void *OptValue, uint32_t *OptLen)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b092      	sub	sp, #72	@ 0x48
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007892:	23ff      	movs	r3, #255	@ 0xff
 8007894:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != OptValue) && (NULL != OptLen))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d04e      	beq.n	800793c <MX_WIFI_Socket_getsockopt+0xb8>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	db4b      	blt.n	800793c <MX_WIFI_Socket_getsockopt+0xb8>
 80078a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d048      	beq.n	800793c <MX_WIFI_Socket_getsockopt+0xb8>
 80078aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d045      	beq.n	800793c <MX_WIFI_Socket_getsockopt+0xb8>
  {
    socket_getsockopt_cparams_t cp = {0};
 80078b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80078bc:	230c      	movs	r3, #12
 80078be:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    socket_getsockopt_rparams_t rp = {0};
 80078c0:	f107 0318 	add.w	r3, r7, #24
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	611a      	str	r2, [r3, #16]
 80078d0:	615a      	str	r2, [r3, #20]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 80078d2:	2318      	movs	r3, #24
 80078d4:	82fb      	strh	r3, [r7, #22]

    rp.status = MIPC_CODE_ERROR;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	61bb      	str	r3, [r7, #24]

    cp.socket = SockFd;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	633b      	str	r3, [r7, #48]	@ 0x30
    cp.level = Level;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
    cp.optname = OptName;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKOPT_CMD,
 80078e8:	f107 0018 	add.w	r0, r7, #24
 80078ec:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80078ee:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f107 0316 	add.w	r3, r7, #22
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4603      	mov	r3, r0
 8007900:	f240 2009 	movw	r0, #521	@ 0x209
 8007904:	f7ff f82c 	bl	8006960 <mipc_request>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d116      	bne.n	800793c <MX_WIFI_Socket_getsockopt+0xb8>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d113      	bne.n	800793c <MX_WIFI_Socket_getsockopt+0xb8>
      {
        *OptLen = (rp.optlen > *OptLen) ? *OptLen : rp.optlen;
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	bf28      	it	cs
 800791e:	461a      	movcs	r2, r3
 8007920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007922:	601a      	str	r2, [r3, #0]
        (void)memcpy(OptValue, &rp.optval[0], *OptLen);
 8007924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	f107 0318 	add.w	r3, r7, #24
 800792c:	3308      	adds	r3, #8
 800792e:	4619      	mov	r1, r3
 8007930:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8007932:	f00d fefa 	bl	801572a <memcpy>
        ret = MX_WIFI_STATUS_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }

  return (int32_t)ret;
 800793c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007940:	4618      	mov	r0, r3
 8007942:	3740      	adds	r7, #64	@ 0x40
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <MX_WIFI_Socket_bind>:


int32_t MX_WIFI_Socket_bind(MX_WIFIObject_t *Obj, int32_t SockFd,
                            const struct mx_sockaddr *Addr, int32_t AddrLen)
{
 8007948:	b5b0      	push	{r4, r5, r7, lr}
 800794a:	b09a      	sub	sp, #104	@ 0x68
 800794c:	af02      	add	r7, sp, #8
 800794e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007950:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007952:	627a      	str	r2, [r7, #36]	@ 0x24
 8007954:	623b      	str	r3, [r7, #32]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007956:	23fc      	movs	r3, #252	@ 0xfc
 8007958:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (0 < AddrLen))
 800795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d077      	beq.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	2b00      	cmp	r3, #0
 8007966:	db74      	blt.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	2b00      	cmp	r3, #0
 800796c:	d071      	beq.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd6e      	ble.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
  {
    socket_bind_cparams_t cp = {0};
 8007974:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007978:	2224      	movs	r2, #36	@ 0x24
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f00d fdfb 	bl	8015578 <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007982:	2324      	movs	r3, #36	@ 0x24
 8007984:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    bool is_to_do_mipc_request = true;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

    ret = MX_WIFI_STATUS_ERROR;
 800798e:	23ff      	movs	r3, #255	@ 0xff
 8007990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

    if ((Addr->sa_family == MX_AF_INET) && (AddrLen == sizeof(struct mx_sockaddr_in)))
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d114      	bne.n	80079c6 <MX_WIFI_Socket_bind+0x7e>
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	2b10      	cmp	r3, #16
 80079a0:	d111      	bne.n	80079c6 <MX_WIFI_Socket_bind+0x7e>
    {
      cp.addr = mx_s_addr_in_to_packed(Addr);
 80079a2:	463b      	mov	r3, r7
 80079a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 ff73 	bl	8008892 <mx_s_addr_in_to_packed>
 80079ac:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80079b0:	463d      	mov	r5, r7
 80079b2:	6828      	ldr	r0, [r5, #0]
 80079b4:	6869      	ldr	r1, [r5, #4]
 80079b6:	68aa      	ldr	r2, [r5, #8]
 80079b8:	68eb      	ldr	r3, [r5, #12]
 80079ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079bc:	6928      	ldr	r0, [r5, #16]
 80079be:	6969      	ldr	r1, [r5, #20]
 80079c0:	69aa      	ldr	r2, [r5, #24]
 80079c2:	c407      	stmia	r4!, {r0, r1, r2}
 80079c4:	e01b      	b.n	80079fe <MX_WIFI_Socket_bind+0xb6>
    }
    else if ((Addr->sa_family == MX_AF_INET6) && (AddrLen == sizeof(struct mx_sockaddr_in6)))
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b0a      	cmp	r3, #10
 80079cc:	d114      	bne.n	80079f8 <MX_WIFI_Socket_bind+0xb0>
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	2b1c      	cmp	r3, #28
 80079d2:	d111      	bne.n	80079f8 <MX_WIFI_Socket_bind+0xb0>
    {
      cp.addr = mx_s_addr_in6_to_packed(Addr);
 80079d4:	463b      	mov	r3, r7
 80079d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 ffbd 	bl	8008958 <mx_s_addr_in6_to_packed>
 80079de:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80079e2:	463d      	mov	r5, r7
 80079e4:	6828      	ldr	r0, [r5, #0]
 80079e6:	6869      	ldr	r1, [r5, #4]
 80079e8:	68aa      	ldr	r2, [r5, #8]
 80079ea:	68eb      	ldr	r3, [r5, #12]
 80079ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ee:	6928      	ldr	r0, [r5, #16]
 80079f0:	6969      	ldr	r1, [r5, #20]
 80079f2:	69aa      	ldr	r2, [r5, #24]
 80079f4:	c407      	stmia	r4!, {r0, r1, r2}
 80079f6:	e002      	b.n	80079fe <MX_WIFI_Socket_bind+0xb6>
    }
    else
    {
      is_to_do_mipc_request = false;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    }

    if (is_to_do_mipc_request)
 80079fe:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d025      	beq.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
    {
      socket_bind_rparams_t rp = {0};
 8007a06:	2300      	movs	r3, #0
 8007a08:	65bb      	str	r3, [r7, #88]	@ 0x58
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

      rp.status =  MIPC_CODE_ERROR;
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	65bb      	str	r3, [r7, #88]	@ 0x58

      cp.socket = SockFd;
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30
      cp.length = (mx_socklen_t)AddrLen;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	653b      	str	r3, [r7, #80]	@ 0x50

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_BIND_CMD,
 8007a1e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8007a22:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8007a26:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4603      	mov	r3, r0
 8007a38:	f240 200b 	movw	r0, #523	@ 0x20b
 8007a3c:	f7fe ff90 	bl	8006960 <mipc_request>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d105      	bne.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp.status == MIPC_CODE_SUCCESS)
 8007a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <MX_WIFI_Socket_bind+0x10a>
        {
          ret = MX_WIFI_STATUS_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        }
      }
    }
  }

  return (int32_t)ret;
 8007a52:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3760      	adds	r7, #96	@ 0x60
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bdb0      	pop	{r4, r5, r7, pc}

08007a5e <MX_WIFI_Socket_listen>:


int32_t MX_WIFI_Socket_listen(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t backlog)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08c      	sub	sp, #48	@ 0x30
 8007a62:	af02      	add	r7, sp, #8
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007a6a:	23ff      	movs	r3, #255	@ 0xff
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((NULL == Obj) || (sockfd < 0))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <MX_WIFI_Socket_listen+0x1e>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da03      	bge.n	8007a84 <MX_WIFI_Socket_listen+0x26>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007a7c:	23fc      	movs	r3, #252	@ 0xfc
 8007a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a82:	e02a      	b.n	8007ada <MX_WIFI_Socket_listen+0x7c>
  }
  else
  {
    socket_listen_cparams_t cp = {0};
 8007a84:	f107 031c 	add.w	r3, r7, #28
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	605a      	str	r2, [r3, #4]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007a8e:	2308      	movs	r3, #8
 8007a90:	84bb      	strh	r3, [r7, #36]	@ 0x24
    socket_listen_rparams_t rp = {0};
 8007a92:	2300      	movs	r3, #0
 8007a94:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007a96:	2304      	movs	r3, #4
 8007a98:	82fb      	strh	r3, [r7, #22]

    rp.status =  MIPC_CODE_ERROR;
 8007a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9e:	61bb      	str	r3, [r7, #24]

    cp.socket = sockfd;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	61fb      	str	r3, [r7, #28]
    cp.backlog = backlog;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	623b      	str	r3, [r7, #32]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_LISTEN_CMD,
 8007aa8:	f107 0018 	add.w	r0, r7, #24
 8007aac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007aae:	f107 011c 	add.w	r1, r7, #28
 8007ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	f107 0316 	add.w	r3, r7, #22
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8007ac4:	f7fe ff4c 	bl	8006960 <mipc_request>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <MX_WIFI_Socket_listen+0x7c>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <MX_WIFI_Socket_listen+0x7c>
      {
        ret = MX_WIFI_STATUS_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    }
  }

  return (int32_t)ret;
 8007ada:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3728      	adds	r7, #40	@ 0x28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <MX_WIFI_Socket_accept>:


int32_t MX_WIFI_Socket_accept(MX_WIFIObject_t *Obj, int32_t SockFd,
                              struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 8007ae6:	b5b0      	push	{r4, r5, r7, lr}
 8007ae8:	b0a0      	sub	sp, #128	@ 0x80
 8007aea:	af02      	add	r7, sp, #8
 8007aec:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007af0:	637a      	str	r2, [r7, #52]	@ 0x34
 8007af2:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t ret_fd = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8007af4:	f06f 0303 	mvn.w	r3, #3
 8007af8:	677b      	str	r3, [r7, #116]	@ 0x74

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen))
 8007afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d075      	beq.n	8007bec <MX_WIFI_Socket_accept+0x106>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db72      	blt.n	8007bec <MX_WIFI_Socket_accept+0x106>
 8007b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d06f      	beq.n	8007bec <MX_WIFI_Socket_accept+0x106>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d06c      	beq.n	8007bec <MX_WIFI_Socket_accept+0x106>
  {
    socket_accept_cparams_t cp = {0};
 8007b12:	2300      	movs	r3, #0
 8007b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007b16:	2304      	movs	r3, #4
 8007b18:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    socket_accept_rparams_t rp = {0};
 8007b1c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007b20:	2224      	movs	r2, #36	@ 0x24
 8007b22:	2100      	movs	r1, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f00d fd27 	bl	8015578 <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007b2a:	2324      	movs	r3, #36	@ 0x24
 8007b2c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

    rp.socket = -1;
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295
 8007b34:	647b      	str	r3, [r7, #68]	@ 0x44
    ret_fd = -1;
 8007b36:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3a:	677b      	str	r3, [r7, #116]	@ 0x74
    cp.socket = SockFd;
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_ACCEPT_CMD,
 8007b40:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8007b44:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8007b48:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f240 200d 	movw	r0, #525	@ 0x20d
 8007b5e:	f7fe feff 	bl	8006960 <mipc_request>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d141      	bne.n	8007bec <MX_WIFI_Socket_accept+0x106>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.socket >= 0)
 8007b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	db3e      	blt.n	8007bec <MX_WIFI_Socket_accept+0x106>
      {
        ret_fd = rp.socket;
 8007b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b70:	677b      	str	r3, [r7, #116]	@ 0x74

        if ((rp.addr.ss_family == MX_AF_INET) && (rp.addr.s2_len == 16) && (*AddrLen == sizeof(struct mx_sockaddr_in)))
 8007b72:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d117      	bne.n	8007baa <MX_WIFI_Socket_accept+0xc4>
 8007b7a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d113      	bne.n	8007baa <MX_WIFI_Socket_accept+0xc4>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d10f      	bne.n	8007baa <MX_WIFI_Socket_accept+0xc4>
        {
          *((struct mx_sockaddr_in *)((void *)Addr)) = mx_s_addr_in_from_packed(&rp.addr);
 8007b8a:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8007b8c:	f107 0220 	add.w	r2, r7, #32
 8007b90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007b94:	3304      	adds	r3, #4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f000 feb0 	bl	80088fe <mx_s_addr_in_from_packed>
 8007b9e:	f107 0320 	add.w	r3, r7, #32
 8007ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ba8:	e020      	b.n	8007bec <MX_WIFI_Socket_accept+0x106>
        }
        else if ((rp.addr.ss_family == MX_AF_INET6) && (rp.addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 8007baa:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8007bae:	2b0a      	cmp	r3, #10
 8007bb0:	d119      	bne.n	8007be6 <MX_WIFI_Socket_accept+0x100>
 8007bb2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007bb6:	2b1c      	cmp	r3, #28
 8007bb8:	d115      	bne.n	8007be6 <MX_WIFI_Socket_accept+0x100>
                 (*AddrLen == sizeof(struct mx_sockaddr_in6)))
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	681b      	ldr	r3, [r3, #0]
        else if ((rp.addr.ss_family == MX_AF_INET6) && (rp.addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 8007bbe:	2b1c      	cmp	r3, #28
 8007bc0:	d111      	bne.n	8007be6 <MX_WIFI_Socket_accept+0x100>
        {
          *((struct mx_sockaddr_in6 *)((void *)Addr)) = mx_s_addr_in6_from_packed(&rp.addr);
 8007bc2:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8007bc4:	463a      	mov	r2, r7
 8007bc6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f000 ff07 	bl	80089e2 <mx_s_addr_in6_from_packed>
 8007bd4:	4625      	mov	r5, r4
 8007bd6:	463c      	mov	r4, r7
 8007bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bdc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007be0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007be4:	e002      	b.n	8007bec <MX_WIFI_Socket_accept+0x106>
        }
        else
        {
          ret_fd = -1;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }
  }

  return ret_fd;
 8007bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3778      	adds	r7, #120	@ 0x78
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bdb0      	pop	{r4, r5, r7, pc}

08007bf6 <MX_WIFI_Socket_connect>:


int32_t MX_WIFI_Socket_connect(MX_WIFIObject_t *Obj, int32_t SockFd,
                               const struct mx_sockaddr *Addr, int32_t AddrLen)
{
 8007bf6:	b5b0      	push	{r4, r5, r7, lr}
 8007bf8:	b09a      	sub	sp, #104	@ 0x68
 8007bfa:	af02      	add	r7, sp, #8
 8007bfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007bfe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c00:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c02:	623b      	str	r3, [r7, #32]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007c04:	23fc      	movs	r3, #252	@ 0xfc
 8007c06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (0 < AddrLen))
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d074      	beq.n	8007cfa <MX_WIFI_Socket_connect+0x104>
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	db71      	blt.n	8007cfa <MX_WIFI_Socket_connect+0x104>
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d06e      	beq.n	8007cfa <MX_WIFI_Socket_connect+0x104>
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dd6b      	ble.n	8007cfa <MX_WIFI_Socket_connect+0x104>
  {
    socket_connect_cparams_t cp = {0};
 8007c22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007c26:	2224      	movs	r2, #36	@ 0x24
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f00d fca4 	bl	8015578 <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007c30:	2324      	movs	r3, #36	@ 0x24
 8007c32:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    bool is_to_do_mipc_request = true;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

    if ((Addr->sa_family == MX_AF_INET) && (AddrLen == sizeof(struct mx_sockaddr_in)))
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d114      	bne.n	8007c6e <MX_WIFI_Socket_connect+0x78>
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	2b10      	cmp	r3, #16
 8007c48:	d111      	bne.n	8007c6e <MX_WIFI_Socket_connect+0x78>
    {
      cp.addr = mx_s_addr_in_to_packed(Addr);
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fe1f 	bl	8008892 <mx_s_addr_in_to_packed>
 8007c54:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8007c58:	463d      	mov	r5, r7
 8007c5a:	6828      	ldr	r0, [r5, #0]
 8007c5c:	6869      	ldr	r1, [r5, #4]
 8007c5e:	68aa      	ldr	r2, [r5, #8]
 8007c60:	68eb      	ldr	r3, [r5, #12]
 8007c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c64:	6928      	ldr	r0, [r5, #16]
 8007c66:	6969      	ldr	r1, [r5, #20]
 8007c68:	69aa      	ldr	r2, [r5, #24]
 8007c6a:	c407      	stmia	r4!, {r0, r1, r2}
 8007c6c:	e01b      	b.n	8007ca6 <MX_WIFI_Socket_connect+0xb0>
    }
    else if ((Addr->sa_family == MX_AF_INET6) && (AddrLen == sizeof(struct mx_sockaddr_in6)))
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b0a      	cmp	r3, #10
 8007c74:	d114      	bne.n	8007ca0 <MX_WIFI_Socket_connect+0xaa>
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	2b1c      	cmp	r3, #28
 8007c7a:	d111      	bne.n	8007ca0 <MX_WIFI_Socket_connect+0xaa>
    {
      cp.addr = mx_s_addr_in6_to_packed(Addr);
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fe69 	bl	8008958 <mx_s_addr_in6_to_packed>
 8007c86:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8007c8a:	463d      	mov	r5, r7
 8007c8c:	6828      	ldr	r0, [r5, #0]
 8007c8e:	6869      	ldr	r1, [r5, #4]
 8007c90:	68aa      	ldr	r2, [r5, #8]
 8007c92:	68eb      	ldr	r3, [r5, #12]
 8007c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c96:	6928      	ldr	r0, [r5, #16]
 8007c98:	6969      	ldr	r1, [r5, #20]
 8007c9a:	69aa      	ldr	r2, [r5, #24]
 8007c9c:	c407      	stmia	r4!, {r0, r1, r2}
 8007c9e:	e002      	b.n	8007ca6 <MX_WIFI_Socket_connect+0xb0>
    }
    else
    {
      is_to_do_mipc_request = false;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    }

    if (is_to_do_mipc_request)
 8007ca6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d025      	beq.n	8007cfa <MX_WIFI_Socket_connect+0x104>
    {
      socket_connect_rparams_t rp = {0};
 8007cae:	2300      	movs	r3, #0
 8007cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

      rp.status = MIPC_CODE_ERROR;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	65bb      	str	r3, [r7, #88]	@ 0x58

      cp.socket = SockFd;
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	633b      	str	r3, [r7, #48]	@ 0x30
      cp.length = (mx_socklen_t)AddrLen;
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	653b      	str	r3, [r7, #80]	@ 0x50

      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CONNECT_CMD,
 8007cc6:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8007cca:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8007cce:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8007cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f240 2002 	movw	r0, #514	@ 0x202
 8007ce4:	f7fe fe3c 	bl	8006960 <mipc_request>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d105      	bne.n	8007cfa <MX_WIFI_Socket_connect+0x104>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp.status == MIPC_CODE_SUCCESS)
 8007cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <MX_WIFI_Socket_connect+0x104>
        {
          ret = MX_WIFI_STATUS_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        }
      }
    }
  }

  return (int32_t)ret;
 8007cfa:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3760      	adds	r7, #96	@ 0x60
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bdb0      	pop	{r4, r5, r7, pc}

08007d06 <MX_WIFI_Socket_shutdown>:


int32_t MX_WIFI_Socket_shutdown(MX_WIFIObject_t *Obj, int32_t SockFd, int32_t Mode)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b08c      	sub	sp, #48	@ 0x30
 8007d0a:	af02      	add	r7, sp, #8
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007d12:	23fc      	movs	r3, #252	@ 0xfc
 8007d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((NULL != Obj) && (0 <= SockFd))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d02d      	beq.n	8007d7a <MX_WIFI_Socket_shutdown+0x74>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	db2a      	blt.n	8007d7a <MX_WIFI_Socket_shutdown+0x74>
  {
    socket_shutdown_cparams_t cp = {0};
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	605a      	str	r2, [r3, #4]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007d2e:	2308      	movs	r3, #8
 8007d30:	84bb      	strh	r3, [r7, #36]	@ 0x24
    socket_shutdown_rparams_t rp = {0};
 8007d32:	2300      	movs	r3, #0
 8007d34:	61bb      	str	r3, [r7, #24]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007d36:	2304      	movs	r3, #4
 8007d38:	82fb      	strh	r3, [r7, #22]

    rp.status = MIPC_CODE_ERROR;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	61bb      	str	r3, [r7, #24]
    cp.filedes = SockFd;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	61fb      	str	r3, [r7, #28]
    cp.how = Mode;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	623b      	str	r3, [r7, #32]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SHUTDOWN_CMD,
 8007d48:	f107 0018 	add.w	r0, r7, #24
 8007d4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d4e:	f107 011c 	add.w	r1, r7, #28
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f107 0316 	add.w	r3, r7, #22
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f240 2007 	movw	r0, #519	@ 0x207
 8007d64:	f7fe fdfc 	bl	8006960 <mipc_request>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d105      	bne.n	8007d7a <MX_WIFI_Socket_shutdown+0x74>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <MX_WIFI_Socket_shutdown+0x74>
      {
        ret = MX_WIFI_STATUS_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    }
  }

  return (int32_t)ret;
 8007d7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3728      	adds	r7, #40	@ 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <MX_WIFI_Socket_close>:


int32_t MX_WIFI_Socket_close(MX_WIFIObject_t *Obj, int32_t SockFd)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b088      	sub	sp, #32
 8007d8a:	af02      	add	r7, sp, #8
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007d90:	23fc      	movs	r3, #252	@ 0xfc
 8007d92:	75fb      	strb	r3, [r7, #23]

  if ((NULL != Obj) && (0 <= SockFd))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d027      	beq.n	8007dea <MX_WIFI_Socket_close+0x64>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	db24      	blt.n	8007dea <MX_WIFI_Socket_close+0x64>
  {
    socket_close_cparams_t cp = {0};
 8007da0:	2300      	movs	r3, #0
 8007da2:	613b      	str	r3, [r7, #16]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8007da4:	2304      	movs	r3, #4
 8007da6:	82bb      	strh	r3, [r7, #20]
    socket_close_rparams_t rp = {0};
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007dac:	2304      	movs	r3, #4
 8007dae:	817b      	strh	r3, [r7, #10]

    rp.status = MIPC_CODE_ERROR;
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	60fb      	str	r3, [r7, #12]
    cp.filedes = SockFd;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	613b      	str	r3, [r7, #16]

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CLOSE_CMD,
 8007dba:	f107 000c 	add.w	r0, r7, #12
 8007dbe:	8aba      	ldrh	r2, [r7, #20]
 8007dc0:	f107 0110 	add.w	r1, r7, #16
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	f107 030a 	add.w	r3, r7, #10
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8007dd6:	f7fe fdc3 	bl	8006960 <mipc_request>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <MX_WIFI_Socket_close+0x64>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <MX_WIFI_Socket_close+0x64>
      {
        ret = MX_WIFI_STATUS_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return (int32_t)ret;
 8007dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <MX_WIFI_Socket_send>:


int32_t MX_WIFI_Socket_send(MX_WIFIObject_t *Obj, int32_t SockFd, const uint8_t *Buf,
                            int32_t Len, int32_t flags)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b08c      	sub	sp, #48	@ 0x30
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	603b      	str	r3, [r7, #0]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8007e04:	f06f 0303 	mvn.w	r3, #3
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d050      	beq.n	8007eb2 <MX_WIFI_Socket_send+0xbc>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db4d      	blt.n	8007eb2 <MX_WIFI_Socket_send+0xbc>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d04a      	beq.n	8007eb2 <MX_WIFI_Socket_send+0xbc>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd47      	ble.n	8007eb2 <MX_WIFI_Socket_send+0xbc>
  {
    socket_send_cparams_t *cp = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
    socket_send_rparams_t rp = {0};
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8007e2a:	2304      	movs	r3, #4
 8007e2c:	827b      	strh	r3, [r7, #18]
    size_t data_len = (size_t)Len;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	623b      	str	r3, [r7, #32]

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24

    if ((data_len + sizeof(socket_send_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	f640 12be 	movw	r2, #2494	@ 0x9be
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d902      	bls.n	8007e4a <MX_WIFI_Socket_send+0x54>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_send_cparams_t) - 1);
 8007e44:	f640 13b2 	movw	r3, #2482	@ 0x9b2
 8007e48:	623b      	str	r3, [r7, #32]
    }

    /* useless: rp.sent = 0; */

    const uint16_t cp_size = (uint16_t)(sizeof(socket_send_cparams_t) - 1 + data_len);
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	330c      	adds	r3, #12
 8007e50:	837b      	strh	r3, [r7, #26]
    cp = (socket_send_cparams_t *)MX_WIFI_MALLOC(cp_size);
 8007e52:	8b7b      	ldrh	r3, [r7, #26]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f00c f8ed 	bl	8014034 <malloc>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	61fb      	str	r3, [r7, #28]
    if (NULL != cp)
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d026      	beq.n	8007eb2 <MX_WIFI_Socket_send+0xbc>
    {
      cp->socket = SockFd;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	601a      	str	r2, [r3, #0]
      (void)memcpy(&cp->buffer[0], Buf, data_len);
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	6a3a      	ldr	r2, [r7, #32]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f00d fc59 	bl	801572a <memcpy>
      cp->size = data_len;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	6a3a      	ldr	r2, [r7, #32]
 8007e7c:	605a      	str	r2, [r3, #4]
      cp->flags = flags;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e82:	609a      	str	r2, [r3, #8]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SEND_CMD,
 8007e84:	f107 0114 	add.w	r1, r7, #20
 8007e88:	8b7a      	ldrh	r2, [r7, #26]
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	f107 0312 	add.w	r3, r7, #18
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	460b      	mov	r3, r1
 8007e98:	69f9      	ldr	r1, [r7, #28]
 8007e9a:	f240 2003 	movw	r0, #515	@ 0x203
 8007e9e:	f7fe fd5f 	bl	8006960 <mipc_request>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <MX_WIFI_Socket_send+0xb6>
                                            (uint8_t *)cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        ret = rp.sent;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      MX_WIFI_FREE(cp);
 8007eac:	69f8      	ldr	r0, [r7, #28]
 8007eae:	f00c f8c9 	bl	8014044 <free>
    }
  }

  return ret;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3728      	adds	r7, #40	@ 0x28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <MX_WIFI_Socket_sendto>:


int32_t MX_WIFI_Socket_sendto(MX_WIFIObject_t *Obj, int32_t SockFd, const uint8_t *Buf,
                              int32_t Len, int32_t Flags,
                              struct mx_sockaddr *ToAddr, int32_t ToAddrLen)
{
 8007ebc:	b5b0      	push	{r4, r5, r7, lr}
 8007ebe:	b096      	sub	sp, #88	@ 0x58
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007ec4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ec6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ec8:	623b      	str	r3, [r7, #32]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8007eca:	f06f 0303 	mvn.w	r3, #3
 8007ece:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len) && (NULL != ToAddr) && (0 < ToAddrLen))
 8007ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80a7 	beq.w	8008026 <MX_WIFI_Socket_sendto+0x16a>
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f2c0 80a3 	blt.w	8008026 <MX_WIFI_Socket_sendto+0x16a>
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 809f 	beq.w	8008026 <MX_WIFI_Socket_sendto+0x16a>
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f340 809b 	ble.w	8008026 <MX_WIFI_Socket_sendto+0x16a>
 8007ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 8097 	beq.w	8008026 <MX_WIFI_Socket_sendto+0x16a>
 8007ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f340 8093 	ble.w	8008026 <MX_WIFI_Socket_sendto+0x16a>
  {
    socket_sendto_cparams_t *cp = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	643b      	str	r3, [r7, #64]	@ 0x40
    size_t data_len = (size_t)Len;
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	64bb      	str	r3, [r7, #72]	@ 0x48

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if ((data_len + sizeof(socket_sendto_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8007f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f10:	332c      	adds	r3, #44	@ 0x2c
 8007f12:	f640 12be 	movw	r2, #2494	@ 0x9be
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d902      	bls.n	8007f20 <MX_WIFI_Socket_sendto+0x64>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_sendto_cparams_t) - 1);
 8007f1a:	f640 1392 	movw	r3, #2450	@ 0x992
 8007f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    const uint16_t cp_size = (uint16_t)(sizeof(socket_sendto_cparams_t) - 1 + data_len);
 8007f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	332c      	adds	r3, #44	@ 0x2c
 8007f26:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    cp = (socket_sendto_cparams_t *)MX_WIFI_MALLOC(cp_size);
 8007f28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f00c f882 	bl	8014034 <malloc>
 8007f30:	4603      	mov	r3, r0
 8007f32:	643b      	str	r3, [r7, #64]	@ 0x40

    if (NULL != cp)
 8007f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d075      	beq.n	8008026 <MX_WIFI_Socket_sendto+0x16a>
    {
      bool is_to_do_mipc_request = true;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      socket_sendto_rparams_t rp = {0};
 8007f40:	2300      	movs	r3, #0
 8007f42:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint16_t rp_size = (uint16_t)sizeof(rp);
 8007f44:	2304      	movs	r3, #4
 8007f46:	86fb      	strh	r3, [r7, #54]	@ 0x36

      /* useless: rp.sent = 0; */
      cp->socket = SockFd;
 8007f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f4c:	601a      	str	r2, [r3, #0]
      (void)memcpy(&cp->buffer[0], Buf, data_len);
 8007f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f50:	332c      	adds	r3, #44	@ 0x2c
 8007f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f56:	4618      	mov	r0, r3
 8007f58:	f00d fbe7 	bl	801572a <memcpy>
      cp->size = data_len;
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f60:	605a      	str	r2, [r3, #4]
      cp->flags = Flags;
 8007f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f66:	609a      	str	r2, [r3, #8]

      if ((ToAddr->sa_family == MX_AF_INET) && (ToAddrLen == sizeof(struct mx_sockaddr_in)))
 8007f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d11a      	bne.n	8007fa6 <MX_WIFI_Socket_sendto+0xea>
 8007f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f72:	2b10      	cmp	r3, #16
 8007f74:	d117      	bne.n	8007fa6 <MX_WIFI_Socket_sendto+0xea>
      {
        cp->addr = mx_s_addr_in_to_packed(ToAddr);
 8007f76:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8007f78:	463b      	mov	r3, r7
 8007f7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fc88 	bl	8008892 <mx_s_addr_in_to_packed>
 8007f82:	f104 030c 	add.w	r3, r4, #12
 8007f86:	463a      	mov	r2, r7
 8007f88:	6814      	ldr	r4, [r2, #0]
 8007f8a:	6850      	ldr	r0, [r2, #4]
 8007f8c:	6891      	ldr	r1, [r2, #8]
 8007f8e:	68d5      	ldr	r5, [r2, #12]
 8007f90:	601c      	str	r4, [r3, #0]
 8007f92:	6058      	str	r0, [r3, #4]
 8007f94:	6099      	str	r1, [r3, #8]
 8007f96:	60dd      	str	r5, [r3, #12]
 8007f98:	6914      	ldr	r4, [r2, #16]
 8007f9a:	6950      	ldr	r0, [r2, #20]
 8007f9c:	6991      	ldr	r1, [r2, #24]
 8007f9e:	611c      	str	r4, [r3, #16]
 8007fa0:	6158      	str	r0, [r3, #20]
 8007fa2:	6199      	str	r1, [r3, #24]
 8007fa4:	e021      	b.n	8007fea <MX_WIFI_Socket_sendto+0x12e>
      }
      else if ((ToAddr->sa_family == MX_AF_INET6) && (ToAddrLen == sizeof(struct mx_sockaddr_in6)))
 8007fa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b0a      	cmp	r3, #10
 8007fac:	d11a      	bne.n	8007fe4 <MX_WIFI_Socket_sendto+0x128>
 8007fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fb0:	2b1c      	cmp	r3, #28
 8007fb2:	d117      	bne.n	8007fe4 <MX_WIFI_Socket_sendto+0x128>
      {
        cp->addr = mx_s_addr_in6_to_packed(ToAddr);
 8007fb4:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fccc 	bl	8008958 <mx_s_addr_in6_to_packed>
 8007fc0:	f104 030c 	add.w	r3, r4, #12
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	6814      	ldr	r4, [r2, #0]
 8007fc8:	6850      	ldr	r0, [r2, #4]
 8007fca:	6891      	ldr	r1, [r2, #8]
 8007fcc:	68d5      	ldr	r5, [r2, #12]
 8007fce:	601c      	str	r4, [r3, #0]
 8007fd0:	6058      	str	r0, [r3, #4]
 8007fd2:	6099      	str	r1, [r3, #8]
 8007fd4:	60dd      	str	r5, [r3, #12]
 8007fd6:	6914      	ldr	r4, [r2, #16]
 8007fd8:	6950      	ldr	r0, [r2, #20]
 8007fda:	6991      	ldr	r1, [r2, #24]
 8007fdc:	611c      	str	r4, [r3, #16]
 8007fde:	6158      	str	r0, [r3, #20]
 8007fe0:	6199      	str	r1, [r3, #24]
 8007fe2:	e002      	b.n	8007fea <MX_WIFI_Socket_sendto+0x12e>
      }
      else
      {
        is_to_do_mipc_request = false;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }

      if (is_to_do_mipc_request)
 8007fea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d016      	beq.n	8008020 <MX_WIFI_Socket_sendto+0x164>
      {
        cp->length = (mx_socklen_t)ToAddrLen;
 8007ff2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ff6:	629a      	str	r2, [r3, #40]	@ 0x28

        if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SENDTO_CMD,
 8007ff8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8007ffc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	460b      	mov	r3, r1
 800800c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800800e:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8008012:	f7fe fca5 	bl	8006960 <mipc_request>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <MX_WIFI_Socket_sendto+0x164>
                                              (uint8_t *)cp, cp_size,
                                              (uint8_t *)&rp, &rp_size,
                                              MX_WIFI_CMD_TIMEOUT))
        {
          ret = rp.sent;
 800801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
      }
      MX_WIFI_FREE(cp);
 8008020:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008022:	f00c f80f 	bl	8014044 <free>
    }
  }

  return ret;
 8008026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008028:	4618      	mov	r0, r3
 800802a:	3750      	adds	r7, #80	@ 0x50
 800802c:	46bd      	mov	sp, r7
 800802e:	bdb0      	pop	{r4, r5, r7, pc}

08008030 <MX_WIFI_Socket_recv>:


int32_t MX_WIFI_Socket_recv(MX_WIFIObject_t *Obj, int32_t SockFd, uint8_t *Buf,
                            int32_t Len, int32_t flags)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b090      	sub	sp, #64	@ 0x40
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 800803e:	f06f 0303 	mvn.w	r3, #3
 8008042:	637b      	str	r3, [r7, #52]	@ 0x34

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d066      	beq.n	8008118 <MX_WIFI_Socket_recv+0xe8>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	db63      	blt.n	8008118 <MX_WIFI_Socket_recv+0xe8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d060      	beq.n	8008118 <MX_WIFI_Socket_recv+0xe8>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	dd5d      	ble.n	8008118 <MX_WIFI_Socket_recv+0xe8>
  {
    socket_recv_cparams_t cp = {0};
 800805c:	f107 0318 	add.w	r3, r7, #24
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008068:	230c      	movs	r3, #12
 800806a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    socket_recv_rparams_t *rp = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t data_len = (size_t)Len;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	633b      	str	r3, [r7, #48]	@ 0x30
    uint16_t rp_size;

    ret = (int32_t)MX_WIFI_STATUS_ERROR;
 8008074:	f04f 33ff 	mov.w	r3, #4294967295
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34

    if ((data_len + sizeof(socket_recv_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	3304      	adds	r3, #4
 800807e:	f640 12be 	movw	r2, #2494	@ 0x9be
 8008082:	4293      	cmp	r3, r2
 8008084:	d902      	bls.n	800808c <MX_WIFI_Socket_recv+0x5c>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recv_rparams_t) - 1);
 8008086:	f640 13ba 	movw	r3, #2490	@ 0x9ba
 800808a:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    rp_size = (uint16_t)(sizeof(socket_recv_rparams_t) - 1 + data_len);
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	b29b      	uxth	r3, r3
 8008090:	3304      	adds	r3, #4
 8008092:	b29b      	uxth	r3, r3
 8008094:	82fb      	strh	r3, [r7, #22]
    rp = (socket_recv_rparams_t *)MX_WIFI_MALLOC(rp_size);
 8008096:	8afb      	ldrh	r3, [r7, #22]
 8008098:	4618      	mov	r0, r3
 800809a:	f00b ffcb 	bl	8014034 <malloc>
 800809e:	4603      	mov	r3, r0
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (NULL != rp)
 80080a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d037      	beq.n	8008118 <MX_WIFI_Socket_recv+0xe8>
    {
      rp->received = 0;
 80080a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	705a      	strb	r2, [r3, #1]
 80080b2:	2200      	movs	r2, #0
 80080b4:	709a      	strb	r2, [r3, #2]
 80080b6:	2200      	movs	r2, #0
 80080b8:	70da      	strb	r2, [r3, #3]
      cp.socket = SockFd;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	61bb      	str	r3, [r7, #24]
      cp.size = data_len;
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	61fb      	str	r3, [r7, #28]
      cp.flags = flags;
 80080c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c4:	623b      	str	r3, [r7, #32]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECV_CMD,
 80080c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80080c8:	f107 0118 	add.w	r1, r7, #24
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	f107 0316 	add.w	r3, r7, #22
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	f240 2005 	movw	r0, #517	@ 0x205
 80080de:	f7fe fc3f 	bl	8006960 <mipc_request>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d114      	bne.n	8008112 <MX_WIFI_Socket_recv+0xe2>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp->received > 0)
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd0d      	ble.n	800810c <MX_WIFI_Socket_recv+0xdc>
        {
          const size_t received_len = (size_t)rp->received;
 80080f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
          if (received_len <= data_len)
 80080f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d806      	bhi.n	800810c <MX_WIFI_Socket_recv+0xdc>
          {
            (void)memcpy(Buf, &rp->buffer[0], received_len);
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	3304      	adds	r3, #4
 8008102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f00d fb0f 	bl	801572a <memcpy>
          }
        }
        ret = rp->received;
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      MX_WIFI_FREE(rp);
 8008112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008114:	f00b ff96 	bl	8014044 <free>
    }
  }

  return ret;
 8008118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800811a:	4618      	mov	r0, r3
 800811c:	3738      	adds	r7, #56	@ 0x38
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <MX_WIFI_Socket_recvfrom>:


int32_t MX_WIFI_Socket_recvfrom(MX_WIFIObject_t *Obj, int32_t SockFd, uint8_t *Buf,
                                int32_t Len, int32_t Flags,
                                struct mx_sockaddr *FromAddr, uint32_t *FromAddrLen)
{
 8008122:	b5b0      	push	{r4, r5, r7, lr}
 8008124:	b09e      	sub	sp, #120	@ 0x78
 8008126:	af02      	add	r7, sp, #8
 8008128:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800812a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800812c:	637a      	str	r2, [r7, #52]	@ 0x34
 800812e:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t ret = (int32_t)MX_WIFI_STATUS_PARAM_ERROR;
 8008130:	f06f 0303 	mvn.w	r3, #3
 8008134:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Buf) && (0 < Len) && (NULL != FromAddr) && (NULL != FromAddrLen))
 8008136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80c5 	beq.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
 800813e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008140:	2b00      	cmp	r3, #0
 8008142:	f2c0 80c1 	blt.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 80bd 	beq.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	2b00      	cmp	r3, #0
 8008152:	f340 80b9 	ble.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80b4 	beq.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
 8008160:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 80af 	beq.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
  {
    socket_recvfrom_cparams_t cp = {0};
 800816a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	609a      	str	r2, [r3, #8]
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008176:	230c      	movs	r3, #12
 8008178:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    socket_recvfrom_rparams_t *rp = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	663b      	str	r3, [r7, #96]	@ 0x60
    size_t data_len = (size_t)Len;
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	66bb      	str	r3, [r7, #104]	@ 0x68

    ret = (int32_t)MX_WIFI_STATUS_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if ((data_len + sizeof(socket_recvfrom_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800818a:	3324      	adds	r3, #36	@ 0x24
 800818c:	f640 12be 	movw	r2, #2494	@ 0x9be
 8008190:	4293      	cmp	r3, r2
 8008192:	d902      	bls.n	800819a <MX_WIFI_Socket_recvfrom+0x78>
    {
      /* Restrict to the length which corresponds to the maximum size of the IPC transfer. */
      data_len = MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recvfrom_rparams_t) - 1);
 8008194:	f640 139a 	movw	r3, #2458	@ 0x99a
 8008198:	66bb      	str	r3, [r7, #104]	@ 0x68
    }

    uint16_t rp_size = (uint16_t)(sizeof(socket_recvfrom_rparams_t) - 1 + data_len);
 800819a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800819c:	b29b      	uxth	r3, r3
 800819e:	3324      	adds	r3, #36	@ 0x24
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    rp = (socket_recvfrom_rparams_t *)MX_WIFI_MALLOC(rp_size);
 80081a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80081aa:	4618      	mov	r0, r3
 80081ac:	f00b ff42 	bl	8014034 <malloc>
 80081b0:	4603      	mov	r3, r0
 80081b2:	663b      	str	r3, [r7, #96]	@ 0x60

    if (NULL != rp)
 80081b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8086 	beq.w	80082c8 <MX_WIFI_Socket_recvfrom+0x1a6>
    {
      rp->received = 0;
 80081bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	705a      	strb	r2, [r3, #1]
 80081c6:	2200      	movs	r2, #0
 80081c8:	709a      	strb	r2, [r3, #2]
 80081ca:	2200      	movs	r2, #0
 80081cc:	70da      	strb	r2, [r3, #3]
      cp.socket = SockFd;
 80081ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      cp.size = data_len;
 80081d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      cp.flags = Flags;
 80081d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80081da:	653b      	str	r3, [r7, #80]	@ 0x50
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECVFROM_CMD,
 80081dc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80081e0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80081e4:	f04f 33ff 	mov.w	r3, #4294967295
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081f2:	f240 2006 	movw	r0, #518	@ 0x206
 80081f6:	f7fe fbb3 	bl	8006960 <mipc_request>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d160      	bne.n	80082c2 <MX_WIFI_Socket_recvfrom+0x1a0>
                                            (uint8_t *)&cp, cp_size,
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if (rp->received > 0)
 8008200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	dd5c      	ble.n	80082c2 <MX_WIFI_Socket_recvfrom+0x1a0>
        {
          const size_t received_len = (size_t)rp->received;
 8008208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	65fb      	str	r3, [r7, #92]	@ 0x5c

          if (received_len <= data_len)
 800820e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008212:	429a      	cmp	r2, r3
 8008214:	d855      	bhi.n	80082c2 <MX_WIFI_Socket_recvfrom+0x1a0>
          {
            const int32_t buf_size = MIN(Len, rp->received);
 8008216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800821c:	4293      	cmp	r3, r2
 800821e:	bfa8      	it	ge
 8008220:	4613      	movge	r3, r2
 8008222:	65bb      	str	r3, [r7, #88]	@ 0x58
            const size_t rp_addr_size = MIN(sizeof(rp->addr), *FromAddrLen);
 8008224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b1c      	cmp	r3, #28
 800822c:	bf28      	it	cs
 800822e:	231c      	movcs	r3, #28
 8008230:	657b      	str	r3, [r7, #84]	@ 0x54

            (void)memcpy(Buf, rp->buffer, (size_t)buf_size);
 8008232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008234:	3324      	adds	r3, #36	@ 0x24
 8008236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008238:	4619      	mov	r1, r3
 800823a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800823c:	f00d fa75 	bl	801572a <memcpy>

            if ((rp->addr.ss_family == MX_AF_INET) && (rp->addr.s2_len == 16) && (*FromAddrLen == sizeof(struct mx_sockaddr_in)))
 8008240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008242:	795b      	ldrb	r3, [r3, #5]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d118      	bne.n	800827a <MX_WIFI_Socket_recvfrom+0x158>
 8008248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	2b10      	cmp	r3, #16
 800824e:	d114      	bne.n	800827a <MX_WIFI_Socket_recvfrom+0x158>
 8008250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b10      	cmp	r3, #16
 8008258:	d10f      	bne.n	800827a <MX_WIFI_Socket_recvfrom+0x158>
            {
              *((struct mx_sockaddr_in *)((void *)FromAddr)) = mx_s_addr_in_from_packed(&rp->addr);
 800825a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800825c:	1d1a      	adds	r2, r3, #4
 800825e:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8008262:	f107 0320 	add.w	r3, r7, #32
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fb48 	bl	80088fe <mx_s_addr_in_from_packed>
 800826e:	f107 0320 	add.w	r3, r7, #32
 8008272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008278:	e01d      	b.n	80082b6 <MX_WIFI_Socket_recvfrom+0x194>
            }
            else if ((rp->addr.ss_family == MX_AF_INET6) && (rp->addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 800827a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800827c:	795b      	ldrb	r3, [r3, #5]
 800827e:	2b0a      	cmp	r3, #10
 8008280:	d119      	bne.n	80082b6 <MX_WIFI_Socket_recvfrom+0x194>
 8008282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008284:	791b      	ldrb	r3, [r3, #4]
 8008286:	2b1c      	cmp	r3, #28
 8008288:	d115      	bne.n	80082b6 <MX_WIFI_Socket_recvfrom+0x194>
                     (*FromAddrLen == sizeof(struct mx_sockaddr_in6)))
 800828a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800828e:	681b      	ldr	r3, [r3, #0]
            else if ((rp->addr.ss_family == MX_AF_INET6) && (rp->addr.s2_len == sizeof(struct mx_sockaddr_storage)) && \
 8008290:	2b1c      	cmp	r3, #28
 8008292:	d110      	bne.n	80082b6 <MX_WIFI_Socket_recvfrom+0x194>
            {
              *((struct mx_sockaddr_in6 *)((void *)FromAddr)) = mx_s_addr_in6_from_packed(&rp->addr);
 8008294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008296:	1d1a      	adds	r2, r3, #4
 8008298:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800829c:	463b      	mov	r3, r7
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fb9e 	bl	80089e2 <mx_s_addr_in6_from_packed>
 80082a6:	4625      	mov	r5, r4
 80082a8:	463c      	mov	r4, r7
 80082aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80082b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            }

            *FromAddrLen = rp_addr_size;
 80082b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082bc:	601a      	str	r2, [r3, #0]
            ret = buf_size;
 80082be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
          }
        }
      }
      MX_WIFI_FREE(rp);
 80082c2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80082c4:	f00b febe 	bl	8014044 <free>
    }
  }

  return ret;
 80082c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3770      	adds	r7, #112	@ 0x70
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080082d4 <MX_WIFI_Socket_gethostbyname>:


int32_t MX_WIFI_Socket_gethostbyname(MX_WIFIObject_t *Obj, struct mx_sockaddr *Addr, const mx_char_t *Name)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b0ca      	sub	sp, #296	@ 0x128
 80082d8:	af02      	add	r7, sp, #8
 80082da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80082e2:	6018      	str	r0, [r3, #0]
 80082e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80082ec:	6019      	str	r1, [r3, #0]
 80082ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80082f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80082f6:	601a      	str	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80082f8:	23fc      	movs	r3, #252	@ 0xfc
 80082fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

  if ((NULL != Obj) && (NULL != Addr) && (NULL != Name) && (strlen(Name) < (size_t)MX_MAX_DNSNAME_LEN))
 80082fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008302:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 808a 	beq.w	8008422 <MX_WIFI_Socket_gethostbyname+0x14e>
 800830e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008312:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8082 	beq.w	8008422 <MX_WIFI_Socket_gethostbyname+0x14e>
 800831e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008322:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d07a      	beq.n	8008422 <MX_WIFI_Socket_gethostbyname+0x14e>
 800832c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008330:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	f7f7 ffa9 	bl	800028c <strlen>
 800833a:	4603      	mov	r3, r0
 800833c:	2bfc      	cmp	r3, #252	@ 0xfc
 800833e:	d870      	bhi.n	8008422 <MX_WIFI_Socket_gethostbyname+0x14e>
  {
    socket_gethostbyname_cparams_t cp = {0};
 8008340:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008344:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008348:	4a39      	ldr	r2, [pc, #228]	@ (8008430 <MX_WIFI_Socket_gethostbyname+0x15c>)
 800834a:	4618      	mov	r0, r3
 800834c:	4611      	mov	r1, r2
 800834e:	23fd      	movs	r3, #253	@ 0xfd
 8008350:	461a      	mov	r2, r3
 8008352:	f00d f9ea 	bl	801572a <memcpy>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008356:	23fd      	movs	r3, #253	@ 0xfd
 8008358:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    socket_gethostbyname_rparams_t rp = {0};
 800835c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	605a      	str	r2, [r3, #4]
    uint16_t rp_size = (uint16_t)sizeof(rp);
 8008366:	2308      	movs	r3, #8
 8008368:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    const size_t msize = MIN(sizeof(cp.name), strlen(Name) + 1);
 800836c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008370:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f7f7 ff89 	bl	800028c <strlen>
 800837a:	4603      	mov	r3, r0
 800837c:	3301      	adds	r3, #1
 800837e:	2bfd      	cmp	r3, #253	@ 0xfd
 8008380:	d809      	bhi.n	8008396 <MX_WIFI_Socket_gethostbyname+0xc2>
 8008382:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008386:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	f7f7 ff7e 	bl	800028c <strlen>
 8008390:	4603      	mov	r3, r0
 8008392:	3301      	adds	r3, #1
 8008394:	e000      	b.n	8008398 <MX_WIFI_Socket_gethostbyname+0xc4>
 8008396:	23fd      	movs	r3, #253	@ 0xfd
 8008398:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    ret = MX_WIFI_STATUS_ERROR;
 800839c:	23ff      	movs	r3, #255	@ 0xff
 800839e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    rp.status =  MIPC_CODE_ERROR;
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295
 80083a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    (void)memcpy(&cp.name[0], Name, msize);
 80083aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80083ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80083b2:	f107 0010 	add.w	r0, r7, #16
 80083b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80083ba:	6819      	ldr	r1, [r3, #0]
 80083bc:	f00d f9b5 	bl	801572a <memcpy>

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETHOSTBYNAME_CMD,
 80083c0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80083c4:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 80083c8:	f107 0110 	add.w	r1, r7, #16
 80083cc:	f04f 33ff 	mov.w	r3, #4294967295
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	f507 7387 	add.w	r3, r7, #270	@ 0x10e
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	f240 2011 	movw	r0, #529	@ 0x211
 80083de:	f7fe fabf 	bl	8006960 <mipc_request>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11c      	bne.n	8008422 <MX_WIFI_Socket_gethostbyname+0x14e>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 80083e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d118      	bne.n	8008422 <MX_WIFI_Socket_gethostbyname+0x14e>
      {
        /* Only for IPv4 address. */
        ((mx_sockaddr_in_t *)Addr)->sin_family = MX_AF_INET;
 80083f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80083f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2202      	movs	r2, #2
 80083fc:	705a      	strb	r2, [r3, #1]
        ((mx_sockaddr_in_t *)Addr)->sin_addr.s_addr = rp.s_addr;
 80083fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8008402:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008406:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	605a      	str	r2, [r3, #4]
        ((mx_sockaddr_in_t *)Addr)->sin_len = sizeof(mx_sockaddr_in_t);
 800840e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008412:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2210      	movs	r2, #16
 800841a:	701a      	strb	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
      }
    }
  }

  return (int32_t)ret;
 8008422:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8008426:	4618      	mov	r0, r3
 8008428:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	08019f24 	.word	0x08019f24

08008434 <MX_WIFI_Socket_ping>:


int32_t MX_WIFI_Socket_ping(MX_WIFIObject_t *Obj, const char *hostname,
                            int32_t count, int32_t delay, int32_t response[])
{
 8008434:	b590      	push	{r4, r7, lr}
 8008436:	b0d9      	sub	sp, #356	@ 0x164
 8008438:	af02      	add	r7, sp, #8
 800843a:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 800843e:	f5a4 74a6 	sub.w	r4, r4, #332	@ 0x14c
 8008442:	6020      	str	r0, [r4, #0]
 8008444:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8008448:	f5a0 70a8 	sub.w	r0, r0, #336	@ 0x150
 800844c:	6001      	str	r1, [r0, #0]
 800844e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8008452:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 8008456:	600a      	str	r2, [r1, #0]
 8008458:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800845c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8008460:	6013      	str	r3, [r2, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008462:	23fc      	movs	r3, #252	@ 0xfc
 8008464:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

  if ((NULL != Obj) && (NULL != hostname) && (0 < count))
 8008468:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800846c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 808e 	beq.w	8008594 <MX_WIFI_Socket_ping+0x160>
 8008478:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800847c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8086 	beq.w	8008594 <MX_WIFI_Socket_ping+0x160>
 8008488:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800848c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	dd7e      	ble.n	8008594 <MX_WIFI_Socket_ping+0x160>
  {
    wifi_ping_cparams_t cp = {0};
 8008496:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800849a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800849e:	4618      	mov	r0, r3
 80084a0:	f240 1307 	movw	r3, #263	@ 0x107
 80084a4:	461a      	mov	r2, r3
 80084a6:	2100      	movs	r1, #0
 80084a8:	f00d f866 	bl	8015578 <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 80084ac:	f240 1307 	movw	r3, #263	@ 0x107
 80084b0:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    int32_t ping_resp[1 + MX_WIFI_PING_MAX] = {0};
 80084b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80084b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80084bc:	4618      	mov	r0, r3
 80084be:	232c      	movs	r3, #44	@ 0x2c
 80084c0:	461a      	mov	r2, r3
 80084c2:	2100      	movs	r1, #0
 80084c4:	f00d f858 	bl	8015578 <memset>
    wifi_ping_rparams_t *rp = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    uint16_t rp_size = sizeof(ping_resp);
 80084ce:	232c      	movs	r3, #44	@ 0x2c
 80084d0:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

    ret = MX_WIFI_STATUS_ERROR;
 80084d4:	23ff      	movs	r3, #255	@ 0xff
 80084d6:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

    MX_WIFI_STRNCPY(cp.hostname, hostname);
 80084da:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80084de:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80084e2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80084e6:	22fe      	movs	r2, #254	@ 0xfe
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	f000 fabc 	bl	8008a66 <void_strncpy>
    cp.count = count;
 80084ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80084f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80084f6:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80084fa:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	f8c3 20ff 	str.w	r2, [r3, #255]	@ 0xff
    cp.delay_ms = delay;
 8008504:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008508:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800850c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8008510:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	f8c3 2103 	str.w	r2, [r3, #259]	@ 0x103

    rp = (wifi_ping_rparams_t *)&ping_resp;
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING_CMD,
 8008522:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8008526:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800852a:	f04f 33ff 	mov.w	r3, #4294967295
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	f507 73a3 	add.w	r3, r7, #326	@ 0x146
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800853a:	f240 100b 	movw	r0, #267	@ 0x10b
 800853e:	f7fe fa0f 	bl	8006960 <mipc_request>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d125      	bne.n	8008594 <MX_WIFI_Socket_ping+0x160>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 8008548:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd20      	ble.n	8008594 <MX_WIFI_Socket_ping+0x160>
      {
        for (int32_t i = 0; i < rp->num; i++)
 8008552:	2300      	movs	r3, #0
 8008554:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8008558:	e012      	b.n	8008580 <MX_WIFI_Socket_ping+0x14c>
        {
          response[i] = rp->delay_ms[i];
 800855a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8008564:	441a      	add	r2, r3
 8008566:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 800856a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	6013      	str	r3, [r2, #0]
        for (int32_t i = 0; i < rp->num; i++)
 8008576:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800857a:	3301      	adds	r3, #1
 800857c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8008580:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800858a:	429a      	cmp	r2, r3
 800858c:	dbe5      	blt.n	800855a <MX_WIFI_Socket_ping+0x126>
        }
        ret = MX_WIFI_STATUS_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      }
    }
  }

  return (int32_t)ret;
 8008594:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8008598:	4618      	mov	r0, r3
 800859a:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd90      	pop	{r4, r7, pc}

080085a2 <MX_WIFI_Socket_ping6>:


int32_t MX_WIFI_Socket_ping6(MX_WIFIObject_t *Obj, const mx_char_t *hostname,
                             int32_t count, int32_t delay, int32_t response[])
{
 80085a2:	b590      	push	{r4, r7, lr}
 80085a4:	b0d9      	sub	sp, #356	@ 0x164
 80085a6:	af02      	add	r7, sp, #8
 80085a8:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 80085ac:	f5a4 74a6 	sub.w	r4, r4, #332	@ 0x14c
 80085b0:	6020      	str	r0, [r4, #0]
 80085b2:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 80085b6:	f5a0 70a8 	sub.w	r0, r0, #336	@ 0x150
 80085ba:	6001      	str	r1, [r0, #0]
 80085bc:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80085c0:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 80085c4:	600a      	str	r2, [r1, #0]
 80085c6:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80085ca:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80085ce:	6013      	str	r3, [r2, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80085d0:	23fc      	movs	r3, #252	@ 0xfc
 80085d2:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

  if ((NULL != Obj) && (NULL != hostname) && (0 < count))
 80085d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80085da:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 808e 	beq.w	8008702 <MX_WIFI_Socket_ping6+0x160>
 80085e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80085ea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8086 	beq.w	8008702 <MX_WIFI_Socket_ping6+0x160>
 80085f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80085fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	dd7e      	ble.n	8008702 <MX_WIFI_Socket_ping6+0x160>
  {
    wifi_ping_cparams_t cp = {0};
 8008604:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008608:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800860c:	4618      	mov	r0, r3
 800860e:	f240 1307 	movw	r3, #263	@ 0x107
 8008612:	461a      	mov	r2, r3
 8008614:	2100      	movs	r1, #0
 8008616:	f00c ffaf 	bl	8015578 <memset>
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 800861a:	f240 1307 	movw	r3, #263	@ 0x107
 800861e:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    int32_t ping_resp[1 + MX_WIFI_PING_MAX] = {0};
 8008622:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008626:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800862a:	4618      	mov	r0, r3
 800862c:	232c      	movs	r3, #44	@ 0x2c
 800862e:	461a      	mov	r2, r3
 8008630:	2100      	movs	r1, #0
 8008632:	f00c ffa1 	bl	8015578 <memset>
    wifi_ping_rparams_t *rp = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    uint16_t rp_size = (uint16_t)sizeof(ping_resp);
 800863c:	232c      	movs	r3, #44	@ 0x2c
 800863e:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

    ret = MX_WIFI_STATUS_ERROR;
 8008642:	23ff      	movs	r3, #255	@ 0xff
 8008644:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

    MX_WIFI_STRNCPY(cp.hostname, hostname);
 8008648:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800864c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8008650:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8008654:	22fe      	movs	r2, #254	@ 0xfe
 8008656:	6819      	ldr	r1, [r3, #0]
 8008658:	f000 fa05 	bl	8008a66 <void_strncpy>
    cp.count = count;
 800865c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008660:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008664:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8008668:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	f8c3 20ff 	str.w	r2, [r3, #255]	@ 0xff
    cp.delay_ms = delay;
 8008672:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008676:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800867a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800867e:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	f8c3 2103 	str.w	r2, [r3, #259]	@ 0x103

    rp = (wifi_ping_rparams_t *)&ping_resp;
 8008688:	f107 0310 	add.w	r3, r7, #16
 800868c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING6_CMD,
 8008690:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8008694:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	f507 73a3 	add.w	r3, r7, #326	@ 0x146
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80086a8:	f44f 708b 	mov.w	r0, #278	@ 0x116
 80086ac:	f7fe f958 	bl	8006960 <mipc_request>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d125      	bne.n	8008702 <MX_WIFI_Socket_ping6+0x160>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 80086b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd20      	ble.n	8008702 <MX_WIFI_Socket_ping6+0x160>
      {
        for (int32_t i = 0; i < rp->num; i++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80086c6:	e012      	b.n	80086ee <MX_WIFI_Socket_ping6+0x14c>
        {
          response[i] = rp->delay_ms[i];
 80086c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80086d2:	441a      	add	r2, r3
 80086d4:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 80086d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	6013      	str	r3, [r2, #0]
        for (int32_t i = 0; i < rp->num; i++)
 80086e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80086e8:	3301      	adds	r3, #1
 80086ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80086ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80086f8:	429a      	cmp	r2, r3
 80086fa:	dbe5      	blt.n	80086c8 <MX_WIFI_Socket_ping6+0x126>
        }
        ret = MX_WIFI_STATUS_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      }
    }
  }

  return (int32_t)ret;
 8008702:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8008706:	4618      	mov	r0, r3
 8008708:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800870c:	46bd      	mov	sp, r7
 800870e:	bd90      	pop	{r4, r7, pc}

08008710 <MX_WIFI_Socket_getpeername>:
  return ret;
}


int32_t MX_WIFI_Socket_getpeername(MX_WIFIObject_t *Obj, int32_t SockFd, struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b094      	sub	sp, #80	@ 0x50
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 800871e:	23fc      	movs	r3, #252	@ 0xfc
 8008720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen) && (0 < *AddrLen))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d04b      	beq.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	db48      	blt.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d045      	beq.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d042      	beq.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d03e      	beq.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
  {
    socket_getpeername_cparams_t cp = {0};
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008748:	2304      	movs	r3, #4
 800874a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    socket_getpeername_rparams_t rp = {0};
 800874e:	f107 0314 	add.w	r3, r7, #20
 8008752:	2224      	movs	r2, #36	@ 0x24
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f00c ff0e 	bl	8015578 <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 800875c:	2324      	movs	r3, #36	@ 0x24
 800875e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    ret = MX_WIFI_STATUS_ERROR;
 8008760:	23ff      	movs	r3, #255	@ 0xff
 8008762:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    cp.sockfd = SockFd;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETPEERNAME_CMD,
 800876a:	f107 0014 	add.w	r0, r7, #20
 800876e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8008772:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008776:	f04f 33ff 	mov.w	r3, #4294967295
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4603      	mov	r3, r0
 8008784:	f44f 7004 	mov.w	r0, #528	@ 0x210
 8008788:	f7fe f8ea 	bl	8006960 <mipc_request>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d117      	bne.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d114      	bne.n	80087c2 <MX_WIFI_Socket_getpeername+0xb2>
      {
        const size_t msize = MIN(rp.namelen, *AddrLen);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879e:	4293      	cmp	r3, r2
 80087a0:	bf28      	it	cs
 80087a2:	4613      	movcs	r3, r2
 80087a4:	643b      	str	r3, [r7, #64]	@ 0x40

        (void)memcpy(Addr, &rp.name, msize);
 80087a6:	f107 0314 	add.w	r3, r7, #20
 80087aa:	3304      	adds	r3, #4
 80087ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f00c ffba 	bl	801572a <memcpy>
        *AddrLen = msize;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ba:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  return (int32_t)ret;
 80087c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3748      	adds	r7, #72	@ 0x48
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <MX_WIFI_Socket_getsockname>:


int32_t MX_WIFI_Socket_getsockname(MX_WIFIObject_t *Obj, int32_t SockFd, struct mx_sockaddr *Addr, uint32_t *AddrLen)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b094      	sub	sp, #80	@ 0x50
 80087d2:	af02      	add	r7, sp, #8
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_PARAM_ERROR;
 80087dc:	23fc      	movs	r3, #252	@ 0xfc
 80087de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  if ((NULL != Obj) && (0 <= SockFd) && (NULL != Addr) && (NULL != AddrLen) && (0 < *AddrLen))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d04e      	beq.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db4b      	blt.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d048      	beq.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d045      	beq.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d041      	beq.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
  {
    socket_getsockname_cparams_t cp = {0};
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint16_t cp_size = (uint16_t)(sizeof(cp));
 8008806:	2304      	movs	r3, #4
 8008808:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    socket_getsockname_rparams_t rp = {0};
 800880c:	f107 0314 	add.w	r3, r7, #20
 8008810:	2224      	movs	r2, #36	@ 0x24
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f00c feaf 	bl	8015578 <memset>
    uint16_t rp_size = (uint16_t)sizeof(rp);
 800881a:	2324      	movs	r3, #36	@ 0x24
 800881c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    ret = MX_WIFI_STATUS_ERROR;
 800881e:	23ff      	movs	r3, #255	@ 0xff
 8008820:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    rp.status = MIPC_CODE_ERROR;
 8008824:	f04f 33ff 	mov.w	r3, #4294967295
 8008828:	617b      	str	r3, [r7, #20]
    cp.sockfd = SockFd;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKNAME_CMD,
 800882e:	f107 0014 	add.w	r0, r7, #20
 8008832:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8008836:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4603      	mov	r3, r0
 8008848:	f240 200f 	movw	r0, #527	@ 0x20f
 800884c:	f7fe f888 	bl	8006960 <mipc_request>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d117      	bne.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
                                          (uint8_t *)&cp, cp_size,
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d114      	bne.n	8008886 <MX_WIFI_Socket_getsockname+0xb8>
      {
        const size_t msize = MIN(rp.namelen, *AddrLen);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	4293      	cmp	r3, r2
 8008864:	bf28      	it	cs
 8008866:	4613      	movcs	r3, r2
 8008868:	643b      	str	r3, [r7, #64]	@ 0x40

        (void)memcpy(Addr, &rp.name, msize);
 800886a:	f107 0314 	add.w	r3, r7, #20
 800886e:	3304      	adds	r3, #4
 8008870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f00c ff58 	bl	801572a <memcpy>
        *AddrLen = msize;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800887e:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }
  return (int32_t)ret;
 8008886:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800888a:	4618      	mov	r0, r3
 800888c:	3748      	adds	r7, #72	@ 0x48
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <mx_s_addr_in_to_packed>:
}


#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
static struct mx_sockaddr_storage mx_s_addr_in_to_packed(const struct mx_sockaddr *Addr)
{
 8008892:	b4b0      	push	{r4, r5, r7}
 8008894:	b08b      	sub	sp, #44	@ 0x2c
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_storage s_addr_storage = {0};
 800889c:	f107 0308 	add.w	r3, r7, #8
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	605a      	str	r2, [r3, #4]
 80088a6:	609a      	str	r2, [r3, #8]
 80088a8:	60da      	str	r2, [r3, #12]
 80088aa:	611a      	str	r2, [r3, #16]
 80088ac:	615a      	str	r2, [r3, #20]
 80088ae:	619a      	str	r2, [r3, #24]
  const struct mx_sockaddr_in *const p_s_addr_in = (const struct mx_sockaddr_in *) Addr;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	627b      	str	r3, [r7, #36]	@ 0x24

  s_addr_storage.s2_len = p_s_addr_in->sin_len;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	723b      	strb	r3, [r7, #8]
  s_addr_storage.ss_family = p_s_addr_in->sin_family;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	727b      	strb	r3, [r7, #9]
  s_addr_storage.s2_data1[0] = (uint8_t)(p_s_addr_in->sin_port);
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	885b      	ldrh	r3, [r3, #2]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	72bb      	strb	r3, [r7, #10]
  s_addr_storage.s2_data1[1] = (uint8_t)(p_s_addr_in->sin_port >> 8);
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	885b      	ldrh	r3, [r3, #2]
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	72fb      	strb	r3, [r7, #11]
  s_addr_storage.s2_data2[0] = p_s_addr_in->sin_addr.s_addr;
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	60fb      	str	r3, [r7, #12]
  /* useless: s_addr_storage.s2_data2[2] = 0; */
  /* useless: s_addr_storage.s2_data3[0] = 0; */
  /* useless: s_addr_storage.s2_data3[1] = 0; */
  /* useless: s_addr_storage.s2_data3[2] = 0; */

  return s_addr_storage;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	461d      	mov	r5, r3
 80088de:	f107 0408 	add.w	r4, r7, #8
 80088e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088e4:	6028      	str	r0, [r5, #0]
 80088e6:	6069      	str	r1, [r5, #4]
 80088e8:	60aa      	str	r2, [r5, #8]
 80088ea:	60eb      	str	r3, [r5, #12]
 80088ec:	cc07      	ldmia	r4!, {r0, r1, r2}
 80088ee:	6128      	str	r0, [r5, #16]
 80088f0:	6169      	str	r1, [r5, #20]
 80088f2:	61aa      	str	r2, [r5, #24]
}
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	372c      	adds	r7, #44	@ 0x2c
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bcb0      	pop	{r4, r5, r7}
 80088fc:	4770      	bx	lr

080088fe <mx_s_addr_in_from_packed>:

static struct mx_sockaddr_in mx_s_addr_in_from_packed(const struct mx_sockaddr_storage *Addr)
{
 80088fe:	b490      	push	{r4, r7}
 8008900:	b088      	sub	sp, #32
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_in s_addr_in = {0};
 8008908:	f107 030c 	add.w	r3, r7, #12
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]

  s_addr_in.sin_len = Addr->s2_len;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	733b      	strb	r3, [r7, #12]
  s_addr_in.sin_family = Addr->ss_family;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	737b      	strb	r3, [r7, #13]
  {
    uint16_t port_in = (uint16_t)Addr->s2_data1[0];
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	789b      	ldrb	r3, [r3, #2]
 8008926:	83fb      	strh	r3, [r7, #30]
    port_in |= (uint16_t)((uint16_t)Addr->s2_data1[1] << 8);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	78db      	ldrb	r3, [r3, #3]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	b29a      	uxth	r2, r3
 8008930:	8bfb      	ldrh	r3, [r7, #30]
 8008932:	4313      	orrs	r3, r2
 8008934:	83fb      	strh	r3, [r7, #30]
    s_addr_in.sin_port = port_in;
 8008936:	8bfb      	ldrh	r3, [r7, #30]
 8008938:	81fb      	strh	r3, [r7, #14]
  }
  s_addr_in.sin_addr.s_addr = Addr->s2_data2[0];
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	613b      	str	r3, [r7, #16]
  /* useless: s_addr_in.sin_zero[4] = 0; */
  /* useless: s_addr_in.sin_zero[5] = 0; */
  /* useless: s_addr_in.sin_zero[6] = 0; */
  /* useless: s_addr_in.sin_zero[7] = 0; */

  return s_addr_in;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	461c      	mov	r4, r3
 8008944:	f107 030c 	add.w	r3, r7, #12
 8008948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800894a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bc90      	pop	{r4, r7}
 8008956:	4770      	bx	lr

08008958 <mx_s_addr_in6_to_packed>:

static struct mx_sockaddr_storage mx_s_addr_in6_to_packed(const struct mx_sockaddr *Addr)
{
 8008958:	b4b0      	push	{r4, r5, r7}
 800895a:	b08b      	sub	sp, #44	@ 0x2c
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_storage s_addr_storage = {0};
 8008962:	f107 0308 	add.w	r3, r7, #8
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	605a      	str	r2, [r3, #4]
 800896c:	609a      	str	r2, [r3, #8]
 800896e:	60da      	str	r2, [r3, #12]
 8008970:	611a      	str	r2, [r3, #16]
 8008972:	615a      	str	r2, [r3, #20]
 8008974:	619a      	str	r2, [r3, #24]
  const struct mx_sockaddr_in6 *const p_s_addr_in6 = (const struct mx_sockaddr_in6 *) Addr;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24

  s_addr_storage.s2_len = p_s_addr_in6->sin6_len;
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	723b      	strb	r3, [r7, #8]
  s_addr_storage.ss_family = p_s_addr_in6->sin6_family;
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	727b      	strb	r3, [r7, #9]
  s_addr_storage.s2_data1[0] = (uint8_t)(p_s_addr_in6->sin6_port);
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	72bb      	strb	r3, [r7, #10]
  s_addr_storage.s2_data1[1] = (uint8_t)(p_s_addr_in6->sin6_port >> 8);
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	885b      	ldrh	r3, [r3, #2]
 8008992:	0a1b      	lsrs	r3, r3, #8
 8008994:	b29b      	uxth	r3, r3
 8008996:	b2db      	uxtb	r3, r3
 8008998:	72fb      	strb	r3, [r7, #11]
  s_addr_storage.s2_data2[0] = p_s_addr_in6->sin6_flowinfo;
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	60fb      	str	r3, [r7, #12]
  s_addr_storage.s2_data2[1] = p_s_addr_in6->sin6_addr.un.u32_addr[0];
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	613b      	str	r3, [r7, #16]
  s_addr_storage.s2_data2[2] = p_s_addr_in6->sin6_addr.un.u32_addr[1];
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	617b      	str	r3, [r7, #20]
  s_addr_storage.s2_data3[0] = p_s_addr_in6->sin6_addr.un.u32_addr[2];
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	61bb      	str	r3, [r7, #24]
  s_addr_storage.s2_data3[1] = p_s_addr_in6->sin6_addr.un.u32_addr[3];
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	61fb      	str	r3, [r7, #28]
  s_addr_storage.s2_data3[2] = p_s_addr_in6->sin6_scope_id;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	623b      	str	r3, [r7, #32]

  return s_addr_storage;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	461d      	mov	r5, r3
 80089c2:	f107 0408 	add.w	r4, r7, #8
 80089c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089c8:	6028      	str	r0, [r5, #0]
 80089ca:	6069      	str	r1, [r5, #4]
 80089cc:	60aa      	str	r2, [r5, #8]
 80089ce:	60eb      	str	r3, [r5, #12]
 80089d0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80089d2:	6128      	str	r0, [r5, #16]
 80089d4:	6169      	str	r1, [r5, #20]
 80089d6:	61aa      	str	r2, [r5, #24]
}
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	372c      	adds	r7, #44	@ 0x2c
 80089dc:	46bd      	mov	sp, r7
 80089de:	bcb0      	pop	{r4, r5, r7}
 80089e0:	4770      	bx	lr

080089e2 <mx_s_addr_in6_from_packed>:

static struct mx_sockaddr_in6 mx_s_addr_in6_from_packed(const struct mx_sockaddr_storage *Addr)
{
 80089e2:	b4b0      	push	{r4, r5, r7}
 80089e4:	b08b      	sub	sp, #44	@ 0x2c
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  struct mx_sockaddr_in6 s_addr_in6 = {0};
 80089ec:	f107 0308 	add.w	r3, r7, #8
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	611a      	str	r2, [r3, #16]
 80089fc:	615a      	str	r2, [r3, #20]
 80089fe:	619a      	str	r2, [r3, #24]

  s_addr_in6.sin6_len = Addr->s2_len;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	723b      	strb	r3, [r7, #8]
  s_addr_in6.sin6_family = Addr->ss_family;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	727b      	strb	r3, [r7, #9]
  {
    uint16_t port_in = (uint16_t)Addr->s2_data1[0];
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	789b      	ldrb	r3, [r3, #2]
 8008a10:	84fb      	strh	r3, [r7, #38]	@ 0x26
    port_in |= (uint16_t)((uint16_t)Addr->s2_data1[1] << 8);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	78db      	ldrb	r3, [r3, #3]
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    s_addr_in6.sin6_port = port_in;
 8008a20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a22:	817b      	strh	r3, [r7, #10]
  }
  s_addr_in6.sin6_flowinfo = Addr->s2_data2[0];
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
  s_addr_in6.sin6_addr.un.u32_addr[0] = Addr->s2_data2[1];
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	613b      	str	r3, [r7, #16]
  s_addr_in6.sin6_addr.un.u32_addr[1] = Addr->s2_data2[2];
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	617b      	str	r3, [r7, #20]
  s_addr_in6.sin6_addr.un.u32_addr[2] = Addr->s2_data3[0];
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	61bb      	str	r3, [r7, #24]
  s_addr_in6.sin6_addr.un.u32_addr[3] = Addr->s2_data3[1];
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	61fb      	str	r3, [r7, #28]
  s_addr_in6.sin6_scope_id = Addr->s2_data3[2];
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	623b      	str	r3, [r7, #32]

  return s_addr_in6;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	f107 0408 	add.w	r4, r7, #8
 8008a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008a58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	372c      	adds	r7, #44	@ 0x2c
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bcb0      	pop	{r4, r5, r7}
 8008a64:	4770      	bx	lr

08008a66 <void_strncpy>:
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 0) */

static void void_strncpy(char *Destination, const char *Source, size_t Num)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
  (void)strncpy(Destination, Source, Num);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f00c fda7 	bl	80155ca <strncpy>
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <mx_buf_alloc>:
  uint32_t header_len;
  uint8_t  data[1];
} mx_buf_t;

static inline mx_buf_t *mx_buf_alloc(uint32_t len)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  mx_buf_t *p = (mx_buf_t *) MX_WIFI_MALLOC(len + sizeof(mx_buf_t) -1U);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	330b      	adds	r3, #11
 8008a90:	4618      	mov	r0, r3
 8008a92:	f00b facf 	bl	8014034 <malloc>
 8008a96:	4603      	mov	r3, r0
 8008a98:	60fb      	str	r3, [r7, #12]
  if (NULL != p)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <mx_buf_alloc+0x28>
  {
    p->len = len;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
    p->header_len = 0;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	605a      	str	r2, [r3, #4]
  }
  return p;
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <MX_WIFI_IO_DELAY>:
static void mx_wifi_spi_txrx_task(THREAD_CONTEXT_TYPE argument);
#endif /* MX_WIFI_BARE_OS_H */


static void MX_WIFI_IO_DELAY(uint32_t ms)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  DELAY_MS(ms);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fc00 	bl	80092c4 <HAL_Delay>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <MX_WIFI_SPI_Init>:
  * @brief  Initialize the SPI
  * @param  mode
  * @retval status
  */
static int8_t MX_WIFI_SPI_Init(uint16_t mode)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	80fb      	strh	r3, [r7, #6]
  int8_t ret = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]

  if (MX_WIFI_RESET == mode)
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d113      	bne.n	8008b08 <MX_WIFI_SPI_Init+0x3c>
  {
    MX_WIFI_HW_RESET();
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008ae6:	480d      	ldr	r0, [pc, #52]	@ (8008b1c <MX_WIFI_SPI_Init+0x50>)
 8008ae8:	f001 f924 	bl	8009d34 <HAL_GPIO_WritePin>
 8008aec:	2064      	movs	r0, #100	@ 0x64
 8008aee:	f000 fbe9 	bl	80092c4 <HAL_Delay>
 8008af2:	2201      	movs	r2, #1
 8008af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008af8:	4808      	ldr	r0, [pc, #32]	@ (8008b1c <MX_WIFI_SPI_Init+0x50>)
 8008afa:	f001 f91b 	bl	8009d34 <HAL_GPIO_WritePin>
 8008afe:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8008b02:	f000 fbdf 	bl	80092c4 <HAL_Delay>
 8008b06:	e003      	b.n	8008b10 <MX_WIFI_SPI_Init+0x44>
  }
  else
  {
    ret = mx_wifi_spi_txrx_start();
 8008b08:	f000 fa7c 	bl	8009004 <mx_wifi_spi_txrx_start>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	42021400 	.word	0x42021400

08008b20 <MX_WIFI_SPI_DeInit>:
  * @brief  De-Initialize the SPI
  * @param  None
  * @retval status
  */
static int8_t MX_WIFI_SPI_DeInit(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  mx_wifi_spi_txrx_stop();
 8008b24:	f000 fa96 	bl	8009054 <mx_wifi_spi_txrx_stop>
  return 0;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <HAL_SPI_TransferCallback>:


void HAL_SPI_TransferCallback(void *hspi)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  (void)hspi;
  SEM_SIGNAL(SpiTransferDoneSem);
 8008b38:	4803      	ldr	r0, [pc, #12]	@ (8008b48 <HAL_SPI_TransferCallback+0x18>)
 8008b3a:	f7fd fc17 	bl	800636c <noos_sem_signal>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20003268 	.word	0x20003268

08008b4c <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  if (hspi == HSpiMX)
 8008b54:	4a05      	ldr	r2, [pc, #20]	@ (8008b6c <HAL_SPI_ErrorCallback+0x20>)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d101      	bne.n	8008b60 <HAL_SPI_ErrorCallback+0x14>
  {
    MX_ASSERT(false);
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <HAL_SPI_ErrorCallback+0x10>
  }
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000bdc 	.word	0x20000bdc

08008b70 <mxchip_WIFI_ISR>:
  * @brief  Interrupt handler for IRQ and FLOW pin
  * @param  isr_source
  * @retval None
  */
void mxchip_WIFI_ISR(uint16_t isr_source)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	80fb      	strh	r3, [r7, #6]
  /*DEBUG_LOG("\n[%"PRIu32"] %s()> %" PRIx32 "\n\n", HAL_GetTick(), __FUNCTION__, (uint32_t)isr_source);*/

  if (MX_WIFI_SPI_IRQ_PIN == isr_source)
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b80:	d102      	bne.n	8008b88 <mxchip_WIFI_ISR+0x18>
  {
    SEM_SIGNAL(SpiTxRxSem);
 8008b82:	4807      	ldr	r0, [pc, #28]	@ (8008ba0 <mxchip_WIFI_ISR+0x30>)
 8008b84:	f7fd fbf2 	bl	800636c <noos_sem_signal>
  }
  if (MX_WIFI_SPI_FLOW_PIN == isr_source)
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b8e:	d102      	bne.n	8008b96 <mxchip_WIFI_ISR+0x26>
  {
    SEM_SIGNAL(SpiFlowRiseSem);
 8008b90:	4804      	ldr	r0, [pc, #16]	@ (8008ba4 <mxchip_WIFI_ISR+0x34>)
 8008b92:	f7fd fbeb 	bl	800636c <noos_sem_signal>
  }
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20003260 	.word	0x20003260
 8008ba4:	20003264 	.word	0x20003264

08008ba8 <wait_flow_high>:


static int8_t wait_flow_high(uint32_t timeout)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  int8_t ret = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
  if (SEM_WAIT(SpiFlowRiseSem, timeout, NULL) != SEM_OK)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	480d      	ldr	r0, [pc, #52]	@ (8008bf0 <wait_flow_high+0x48>)
 8008bba:	f7fd fbf0 	bl	800639e <noos_sem_wait>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <wait_flow_high+0x20>
  {
    ret = -1;
 8008bc4:	23ff      	movs	r3, #255	@ 0xff
 8008bc6:	73fb      	strb	r3, [r7, #15]
  }
  if (MX_WIFI_SPI_FLOW_IS_LOW())
 8008bc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008bcc:	4809      	ldr	r0, [pc, #36]	@ (8008bf4 <wait_flow_high+0x4c>)
 8008bce:	f001 f899 	bl	8009d04 <HAL_GPIO_ReadPin>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <wait_flow_high+0x3a>
  {
    DEBUG_ERROR("FLOW is low\n");
 8008bd8:	4807      	ldr	r0, [pc, #28]	@ (8008bf8 <wait_flow_high+0x50>)
 8008bda:	f00c fa87 	bl	80150ec <puts>
    ret = -1;
 8008bde:	23ff      	movs	r3, #255	@ 0xff
 8008be0:	73fb      	strb	r3, [r7, #15]
  }

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8008be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20003264 	.word	0x20003264
 8008bf4:	42021800 	.word	0x42021800
 8008bf8:	0801a064 	.word	0x0801a064

08008bfc <MX_WIFI_SPI_Write>:


static uint16_t MX_WIFI_SPI_Write(uint8_t *data, uint16_t len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
  uint16_t sent;

  DEBUG_LOG("\n%s()> %" PRIu32 "\n\n", __FUNCTION__, (uint32_t)len);

  LOCK(SpiTxLock);
 8008c08:	4b1b      	ldr	r3, [pc, #108]	@ (8008c78 <MX_WIFI_SPI_Write+0x7c>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1fa      	bne.n	8008c08 <MX_WIFI_SPI_Write+0xc>
 8008c12:	4b19      	ldr	r3, [pc, #100]	@ (8008c78 <MX_WIFI_SPI_Write+0x7c>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]

  if ((NULL == data) || (0 == len) || (len > SPI_DATA_SIZE))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <MX_WIFI_SPI_Write+0x32>
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <MX_WIFI_SPI_Write+0x32>
 8008c24:	887b      	ldrh	r3, [r7, #2]
 8008c26:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d90a      	bls.n	8008c44 <MX_WIFI_SPI_Write+0x48>
  {
    DEBUG_ERROR("Warning, SPI send null or size overflow! len=%" PRIu32 "\n", (uint32_t)len);
 8008c2e:	887b      	ldrh	r3, [r7, #2]
 8008c30:	4619      	mov	r1, r3
 8008c32:	4812      	ldr	r0, [pc, #72]	@ (8008c7c <MX_WIFI_SPI_Write+0x80>)
 8008c34:	f00c f9ea 	bl	801500c <iprintf>
    SpiTxLen = 0;
 8008c38:	4b11      	ldr	r3, [pc, #68]	@ (8008c80 <MX_WIFI_SPI_Write+0x84>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	801a      	strh	r2, [r3, #0]
    sent = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	81fb      	strh	r3, [r7, #14]
 8008c42:	e010      	b.n	8008c66 <MX_WIFI_SPI_Write+0x6a>
  }
  else
  {
    SpiTxData = data;
 8008c44:	4a0f      	ldr	r2, [pc, #60]	@ (8008c84 <MX_WIFI_SPI_Write+0x88>)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6013      	str	r3, [r2, #0]
    SpiTxLen  = len;
 8008c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8008c80 <MX_WIFI_SPI_Write+0x84>)
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	8013      	strh	r3, [r2, #0]

    if (SEM_SIGNAL(SpiTxRxSem) != SEM_OK)
 8008c50:	480d      	ldr	r0, [pc, #52]	@ (8008c88 <MX_WIFI_SPI_Write+0x8c>)
 8008c52:	f7fd fb8b 	bl	800636c <noos_sem_signal>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <MX_WIFI_SPI_Write+0x66>
    {
      /* Happen if received thread did not have a chance to run on time, need to increase priority */
      DEBUG_ERROR("Warning, SPI semaphore has been already notified\n");
 8008c5c:	480b      	ldr	r0, [pc, #44]	@ (8008c8c <MX_WIFI_SPI_Write+0x90>)
 8008c5e:	f00c fa45 	bl	80150ec <puts>
    }
    sent = len;
 8008c62:	887b      	ldrh	r3, [r7, #2]
 8008c64:	81fb      	strh	r3, [r7, #14]
  }

  UNLOCK(SpiTxLock);
 8008c66:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <MX_WIFI_SPI_Write+0x7c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)sent);

  return sent;
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	2000325c 	.word	0x2000325c
 8008c7c:	0801a070 	.word	0x0801a070
 8008c80:	20003270 	.word	0x20003270
 8008c84:	2000326c 	.word	0x2000326c
 8008c88:	20003260 	.word	0x20003260
 8008c8c:	0801a0a4 	.word	0x0801a0a4

08008c90 <MX_WIFI_SPI_Read>:


static uint16_t MX_WIFI_SPI_Read(uint8_t *buffer, uint16_t buff_size)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	807b      	strh	r3, [r7, #2]
  (void)buffer;
  (void)buff_size;
  return 0;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <TransmitReceive>:


static HAL_StatusTypeDef TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint8_t *rxdata, uint16_t datalen,
                                         uint32_t timeout)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b088      	sub	sp, #32
 8008cae:	af02      	add	r7, sp, #8
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	807b      	strh	r3, [r7, #2]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_TransmitReceive_DMA(hspi, txdata, rxdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_TransmitReceive(hspi, txdata, rxdata, datalen, timeout);
 8008cb8:	887a      	ldrh	r2, [r7, #2]
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f007 fa19 	bl	80100fc <HAL_SPI_TransmitReceive>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
#endif /* (DMA_ON_USE == 1) */

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <Transmit>:


static HAL_StatusTypeDef Transmit(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint16_t datalen, uint32_t timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	80fb      	strh	r3, [r7, #6]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_Transmit_DMA(hspi, txdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_Transmit(hspi, txdata, datalen, timeout);
 8008ce8:	88fa      	ldrh	r2, [r7, #6]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f006 fe52 	bl	800f998 <HAL_SPI_Transmit>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	75fb      	strb	r3, [r7, #23]
#endif /* (DMA_ON_USE == 1) */

  DEBUG_LOG("\n%s() <%" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <Receive>:


static HAL_StatusTypeDef Receive(SPI_HandleTypeDef *hspi, uint8_t *rxdata, uint16_t datalen, uint32_t timeout)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	80fb      	strh	r3, [r7, #6]
#if (defined(DMA_ON_USE) && (DMA_ON_USE == 1))
  ret = HAL_SPI_Receive_DMA(hspi, rxdata, datalen);
  SEM_WAIT(SpiTransferDoneSem, timeout, NULL);

#else
  ret = HAL_SPI_Receive(hspi, rxdata, datalen, timeout);
 8008d12:	88fa      	ldrh	r2, [r7, #6]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f007 f84d 	bl	800fdb8 <HAL_SPI_Receive>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]
  }
#endif /* 0 */

  DEBUG_LOG("\n%s()< %" PRIi32 "\n\n", __FUNCTION__, (int32_t)ret);

  return ret;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <process_txrx_poll>:


void process_txrx_poll(uint32_t timeout)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08e      	sub	sp, #56	@ 0x38
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	6078      	str	r0, [r7, #4]
  static mx_buf_t *netb = NULL;
  bool first_miss = true;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  MX_WIFI_SPI_CS_HIGH();
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008d40:	48a1      	ldr	r0, [pc, #644]	@ (8008fc8 <process_txrx_poll+0x29c>)
 8008d42:	f000 fff7 	bl	8009d34 <HAL_GPIO_WritePin>

  while (netb == NULL)
 8008d46:	e014      	b.n	8008d72 <process_txrx_poll+0x46>
  {
    netb = MX_NET_BUFFER_ALLOC(MX_WIFI_BUFFER_SIZE);
 8008d48:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8008d4c:	f7ff fe9a 	bl	8008a84 <mx_buf_alloc>
 8008d50:	4603      	mov	r3, r0
 8008d52:	4a9e      	ldr	r2, [pc, #632]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008d54:	6013      	str	r3, [r2, #0]

    MX_STAT(alloc);

    if (netb == NULL)
 8008d56:	4b9d      	ldr	r3, [pc, #628]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <process_txrx_poll+0x46>
    {
      DELAY_MS(1);
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f000 fab0 	bl	80092c4 <HAL_Delay>
      if (true == first_miss)
 8008d64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <process_txrx_poll+0x46>
      {
        first_miss = false;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  while (netb == NULL)
 8008d72:	4b96      	ldr	r3, [pc, #600]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0e6      	beq.n	8008d48 <process_txrx_poll+0x1c>
      }
    }
  }

  /* Waiting for data to be sent or to be received. */
  if (SEM_WAIT(SpiTxRxSem, timeout, NULL) == SEM_OK)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4894      	ldr	r0, [pc, #592]	@ (8008fd0 <process_txrx_poll+0x2a4>)
 8008d80:	f7fd fb0d 	bl	800639e <noos_sem_wait>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f040 8119 	bne.w	8008fbe <process_txrx_poll+0x292>
  {
    NET_PERF_TASK_TAG(0);

    LOCK(SpiTxLock);
 8008d8c:	4b91      	ldr	r3, [pc, #580]	@ (8008fd4 <process_txrx_poll+0x2a8>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1fa      	bne.n	8008d8c <process_txrx_poll+0x60>
 8008d96:	4b8f      	ldr	r3, [pc, #572]	@ (8008fd4 <process_txrx_poll+0x2a8>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	701a      	strb	r2, [r3, #0]
    {
      spi_header_t mheader = {0};
 8008d9c:	f107 0314 	add.w	r3, r7, #20
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	605a      	str	r2, [r3, #4]
      spi_header_t sheader = {0};
 8008da6:	f107 030c 	add.w	r3, r7, #12
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	605a      	str	r2, [r3, #4]
      uint8_t *txdata = NULL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	62bb      	str	r3, [r7, #40]	@ 0x28
      bool is_continue = true;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      DEBUG_LOG("\n%s(): %p\n", __FUNCTION__, SpiTxData);

      if (SpiTxData == NULL)
 8008dba:	4b87      	ldr	r3, [pc, #540]	@ (8008fd8 <process_txrx_poll+0x2ac>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10b      	bne.n	8008dda <process_txrx_poll+0xae>
      {
        if (!MX_WIFI_SPI_IRQ_IS_HIGH())
 8008dc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008dc6:	4885      	ldr	r0, [pc, #532]	@ (8008fdc <process_txrx_poll+0x2b0>)
 8008dc8:	f000 ff9c 	bl	8009d04 <HAL_GPIO_ReadPin>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00a      	beq.n	8008de8 <process_txrx_poll+0xbc>
        {
          /* TX data null means no data to send, IRQ low means no data to be received. */
          is_continue = false;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008dd8:	e006      	b.n	8008de8 <process_txrx_poll+0xbc>
#endif /* MX_WIFI_BARE_OS_H */
        }
      }
      else
      {
        mheader.len = SpiTxLen;
 8008dda:	4b81      	ldr	r3, [pc, #516]	@ (8008fe0 <process_txrx_poll+0x2b4>)
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	f8a7 3015 	strh.w	r3, [r7, #21]
        txdata = SpiTxData;
 8008de2:	4b7d      	ldr	r3, [pc, #500]	@ (8008fd8 <process_txrx_poll+0x2ac>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if (is_continue)
 8008de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80e3 	beq.w	8008fb8 <process_txrx_poll+0x28c>
      {
        mheader.type = SPI_WRITE;
 8008df2:	230a      	movs	r3, #10
 8008df4:	753b      	strb	r3, [r7, #20]
        mheader.lenx = ~mheader.len;
 8008df6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	43db      	mvns	r3, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f8a7 3017 	strh.w	r3, [r7, #23]

        MX_WIFI_SPI_CS_LOW();
 8008e04:	2200      	movs	r2, #0
 8008e06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008e0a:	486f      	ldr	r0, [pc, #444]	@ (8008fc8 <process_txrx_poll+0x29c>)
 8008e0c:	f000 ff92 	bl	8009d34 <HAL_GPIO_WritePin>

        {
          /* Wait for the EMW to be ready. */
          if (wait_flow_high(timeout) != 0)
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff fec9 	bl	8008ba8 <wait_flow_high>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <process_txrx_poll+0xf8>
          {
            DEBUG_ERROR("Wait FLOW timeout 0\n");
 8008e1c:	4871      	ldr	r0, [pc, #452]	@ (8008fe4 <process_txrx_poll+0x2b8>)
 8008e1e:	f00c f965 	bl	80150ec <puts>
 8008e22:	e0c3      	b.n	8008fac <process_txrx_poll+0x280>
          }
          else
          {
            /* Transmit only the header part. */
            if (HAL_OK != TransmitReceive(HSpiMX, (uint8_t *)&mheader, (uint8_t *)&sheader, sizeof(mheader), timeout))
 8008e24:	4870      	ldr	r0, [pc, #448]	@ (8008fe8 <process_txrx_poll+0x2bc>)
 8008e26:	f107 020c 	add.w	r2, r7, #12
 8008e2a:	f107 0114 	add.w	r1, r7, #20
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2308      	movs	r3, #8
 8008e34:	f7ff ff39 	bl	8008caa <TransmitReceive>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <process_txrx_poll+0x11a>
            {
              DEBUG_ERROR("Send mheader error\n");
 8008e3e:	486b      	ldr	r0, [pc, #428]	@ (8008fec <process_txrx_poll+0x2c0>)
 8008e40:	f00c f954 	bl	80150ec <puts>
 8008e44:	e0b2      	b.n	8008fac <process_txrx_poll+0x280>
            }
            else
            {
              if (sheader.type != SPI_READ)
 8008e46:	7b3b      	ldrb	r3, [r7, #12]
 8008e48:	2b0b      	cmp	r3, #11
 8008e4a:	d005      	beq.n	8008e58 <process_txrx_poll+0x12c>
              {
                DEBUG_ERROR("Invalid SPI type %02x\n", sheader.type);
 8008e4c:	7b3b      	ldrb	r3, [r7, #12]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4867      	ldr	r0, [pc, #412]	@ (8008ff0 <process_txrx_poll+0x2c4>)
 8008e52:	f00c f8db 	bl	801500c <iprintf>
 8008e56:	e0a9      	b.n	8008fac <process_txrx_poll+0x280>
              }
              else
              {
                if ((sheader.len ^ sheader.lenx) != 0xFFFF)
 8008e58:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4053      	eors	r3, r2
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <process_txrx_poll+0x15c>
                {
                  DEBUG_ERROR("Invalid length %04x-%04x\n", sheader.len, sheader.lenx);
 8008e70:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	485c      	ldr	r0, [pc, #368]	@ (8008ff4 <process_txrx_poll+0x2c8>)
 8008e82:	f00c f8c3 	bl	801500c <iprintf>
 8008e86:	e091      	b.n	8008fac <process_txrx_poll+0x280>
                }
                else
                {
                  /* Send or received header must be not null */
                  if ((sheader.len == 0) && (mheader.len == 0))
 8008e88:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d105      	bne.n	8008e9e <process_txrx_poll+0x172>
 8008e92:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 8087 	beq.w	8008fac <process_txrx_poll+0x280>
                  {
                  }
                  else
                  {
                    if ((sheader.len > SPI_DATA_SIZE) || (mheader.len > SPI_DATA_SIZE))
 8008e9e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d806      	bhi.n	8008eba <process_txrx_poll+0x18e>
 8008eac:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d90b      	bls.n	8008ed2 <process_txrx_poll+0x1a6>
                    {
                      DEBUG_ERROR("SPI length invalid: %d-%d\n", sheader.len, mheader.len);
 8008eba:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	484b      	ldr	r0, [pc, #300]	@ (8008ff8 <process_txrx_poll+0x2cc>)
 8008ecc:	f00c f89e 	bl	801500c <iprintf>
 8008ed0:	e06c      	b.n	8008fac <process_txrx_poll+0x280>
                    }
                    else
                    {
                      uint16_t datalen;
                      uint8_t *rxdata = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	623b      	str	r3, [r7, #32]

                      /* Keep the max length between TX and RX. */
                      if (mheader.len > sheader.len)
 8008ed6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d904      	bls.n	8008ef0 <process_txrx_poll+0x1c4>
                      {
                        datalen = mheader.len;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8008eec:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008eee:	e003      	b.n	8008ef8 <process_txrx_poll+0x1cc>
                      }
                      else
                      {
                        datalen = sheader.len;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8008ef6:	84bb      	strh	r3, [r7, #36]	@ 0x24
                      }

                      /* Allocate a buffer for data to be received. */
                      if (sheader.len > 0)
 8008ef8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d007      	beq.n	8008f12 <process_txrx_poll+0x1e6>
                      {
                        /* Get start of the buffer payload. */
                        rxdata = MX_NET_BUFFER_PAYLOAD(netb);
 8008f02:	4b32      	ldr	r3, [pc, #200]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4b31      	ldr	r3, [pc, #196]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	4413      	add	r3, r2
 8008f10:	623b      	str	r3, [r7, #32]
                      }

                      /* FLOW must be high. */
                      if (wait_flow_high(timeout) != 0)
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff fe48 	bl	8008ba8 <wait_flow_high>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <process_txrx_poll+0x1fa>
                      {
                        DEBUG_ERROR("Wait FLOW timeout 1\n");
 8008f1e:	4837      	ldr	r0, [pc, #220]	@ (8008ffc <process_txrx_poll+0x2d0>)
 8008f20:	f00c f8e4 	bl	80150ec <puts>
 8008f24:	e042      	b.n	8008fac <process_txrx_poll+0x280>
                      else
                      {
                        HAL_StatusTypeDef ret;

                        /* TX with possible RX. */
                        if (NULL != txdata)
 8008f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01d      	beq.n	8008f68 <process_txrx_poll+0x23c>
                        {
                          SpiTxData = NULL;
 8008f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd8 <process_txrx_poll+0x2ac>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
                          SpiTxLen = 0;
 8008f32:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe0 <process_txrx_poll+0x2b4>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	801a      	strh	r2, [r3, #0]
                          if (NULL != rxdata)
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <process_txrx_poll+0x22a>
                          {
                            ret = TransmitReceive(HSpiMX, txdata, rxdata, datalen, timeout);
 8008f3e:	482a      	ldr	r0, [pc, #168]	@ (8008fe8 <process_txrx_poll+0x2bc>)
 8008f40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	4613      	mov	r3, r2
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f4c:	f7ff fead 	bl	8008caa <TransmitReceive>
 8008f50:	4603      	mov	r3, r0
 8008f52:	77fb      	strb	r3, [r7, #31]
 8008f54:	e010      	b.n	8008f78 <process_txrx_poll+0x24c>
                          }
                          else
                          {
                            ret = Transmit(HSpiMX, txdata, datalen, timeout);
 8008f56:	4824      	ldr	r0, [pc, #144]	@ (8008fe8 <process_txrx_poll+0x2bc>)
 8008f58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f5e:	f7ff febb 	bl	8008cd8 <Transmit>
 8008f62:	4603      	mov	r3, r0
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e007      	b.n	8008f78 <process_txrx_poll+0x24c>
                          }
                        }
                        else
                        {
                          ret = Receive(HSpiMX, rxdata, datalen, timeout);
 8008f68:	481f      	ldr	r0, [pc, #124]	@ (8008fe8 <process_txrx_poll+0x2bc>)
 8008f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a39      	ldr	r1, [r7, #32]
 8008f70:	f7ff fec7 	bl	8008d02 <Receive>
 8008f74:	4603      	mov	r3, r0
 8008f76:	77fb      	strb	r3, [r7, #31]
                        }

                        if (HAL_OK != ret)
 8008f78:	7ffb      	ldrb	r3, [r7, #31]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <process_txrx_poll+0x25a>
                        {
                          DEBUG_ERROR("Transmit/Receive data timeout\n");
 8008f7e:	4820      	ldr	r0, [pc, #128]	@ (8009000 <process_txrx_poll+0x2d4>)
 8008f80:	f00c f8b4 	bl	80150ec <puts>
 8008f84:	e012      	b.n	8008fac <process_txrx_poll+0x280>
                        }
                        else
                        {
                          /* Resize the input buffer and send it back to the processing thread. */
                          if (sheader.len > 0)
 8008f86:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00d      	beq.n	8008fac <process_txrx_poll+0x280>
                          {
                            NET_PERF_TASK_TAG(1);
                            MX_NET_BUFFER_SET_PAYLOAD_SIZE(netb, sheader.len);
 8008f90:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	4b0d      	ldr	r3, [pc, #52]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	601a      	str	r2, [r3, #0]
                            mx_wifi_hci_input(netb);
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fd fb9b 	bl	80066dc <mx_wifi_hci_input>
                            netb = NULL;
 8008fa6:	4b09      	ldr	r3, [pc, #36]	@ (8008fcc <process_txrx_poll+0x2a0>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
                }
              }
            }
          }
          /* Notify transfer done. */
          MX_WIFI_SPI_CS_HIGH();
 8008fac:	2201      	movs	r2, #1
 8008fae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008fb2:	4805      	ldr	r0, [pc, #20]	@ (8008fc8 <process_txrx_poll+0x29c>)
 8008fb4:	f000 febe 	bl	8009d34 <HAL_GPIO_WritePin>
        }
      }
    }
    UNLOCK(SpiTxLock);
 8008fb8:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <process_txrx_poll+0x2a8>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	701a      	strb	r2, [r3, #0]
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	3730      	adds	r7, #48	@ 0x30
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	42020400 	.word	0x42020400
 8008fcc:	20003274 	.word	0x20003274
 8008fd0:	20003260 	.word	0x20003260
 8008fd4:	2000325c 	.word	0x2000325c
 8008fd8:	2000326c 	.word	0x2000326c
 8008fdc:	42020c00 	.word	0x42020c00
 8008fe0:	20003270 	.word	0x20003270
 8008fe4:	0801a0d8 	.word	0x0801a0d8
 8008fe8:	20000bdc 	.word	0x20000bdc
 8008fec:	0801a0ec 	.word	0x0801a0ec
 8008ff0:	0801a100 	.word	0x0801a100
 8008ff4:	0801a118 	.word	0x0801a118
 8008ff8:	0801a134 	.word	0x0801a134
 8008ffc:	0801a150 	.word	0x0801a150
 8009000:	0801a164 	.word	0x0801a164

08009004 <mx_wifi_spi_txrx_start>:
}
#endif /* MX_WIFI_BARE_OS_H */


static int8_t mx_wifi_spi_txrx_start(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
  int8_t ret = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	71fb      	strb	r3, [r7, #7]

  LOCK_INIT(SpiTxLock);
 800900e:	4b0c      	ldr	r3, [pc, #48]	@ (8009040 <mx_wifi_spi_txrx_start+0x3c>)
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
  SEM_INIT(SpiTxRxSem, 2);
 8009014:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <mx_wifi_spi_txrx_start+0x40>)
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
  SEM_INIT(SpiFlowRiseSem, 1);
 800901a:	4b0b      	ldr	r3, [pc, #44]	@ (8009048 <mx_wifi_spi_txrx_start+0x44>)
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
  SEM_INIT(SpiTransferDoneSem, 1);
 8009020:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <mx_wifi_spi_txrx_start+0x48>)
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
  }
  else
  {
    /* Notify SPI ready. */
    /* De-select the SPI slave. */
    MX_WIFI_SPI_CS_HIGH();
 8009026:	2201      	movs	r2, #1
 8009028:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800902c:	4808      	ldr	r0, [pc, #32]	@ (8009050 <mx_wifi_spi_txrx_start+0x4c>)
 800902e:	f000 fe81 	bl	8009d34 <HAL_GPIO_WritePin>
  }
  return ret;
 8009032:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	2000325c 	.word	0x2000325c
 8009044:	20003260 	.word	0x20003260
 8009048:	20003264 	.word	0x20003264
 800904c:	20003268 	.word	0x20003268
 8009050:	42020400 	.word	0x42020400

08009054 <mx_wifi_spi_txrx_stop>:


static int8_t mx_wifi_spi_txrx_stop(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* Set thread quit flag to TRUE. */
  SPITxRxTaskQuitFlag = true;
#endif /* MX_WIFI_BARE_OS_H */

  /* Wake up the thread if it's sleeping. */
  SEM_SIGNAL(SpiTxRxSem);
 8009058:	4802      	ldr	r0, [pc, #8]	@ (8009064 <mx_wifi_spi_txrx_stop+0x10>)
 800905a:	f7fd f987 	bl	800636c <noos_sem_signal>
  THREAD_DEINIT(MX_WIFI_TxRxThreadId);
  SEM_DEINIT(SpiTxRxSem);
  SEM_DEINIT(SpiFlowRiseSem);
  LOCK_DEINIT(SpiTxLock);

  return 0;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20003260 	.word	0x20003260

08009068 <mxwifi_probe>:


int32_t mxwifi_probe(void **ll_drv_context)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	6078      	str	r0, [r7, #4]
  int32_t ret = -1;
 8009070:	f04f 33ff 	mov.w	r3, #4294967295
 8009074:	60fb      	str	r3, [r7, #12]

  if (MX_WIFI_RegisterBusIO(&MxWifiObj,
 8009076:	4b0d      	ldr	r3, [pc, #52]	@ (80090ac <mxwifi_probe+0x44>)
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <mxwifi_probe+0x48>)
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	4b0d      	ldr	r3, [pc, #52]	@ (80090b4 <mxwifi_probe+0x4c>)
 8009080:	4a0d      	ldr	r2, [pc, #52]	@ (80090b8 <mxwifi_probe+0x50>)
 8009082:	490e      	ldr	r1, [pc, #56]	@ (80090bc <mxwifi_probe+0x54>)
 8009084:	480e      	ldr	r0, [pc, #56]	@ (80090c0 <mxwifi_probe+0x58>)
 8009086:	f7fd fe00 	bl	8006c8a <MX_WIFI_RegisterBusIO>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d107      	bne.n	80090a0 <mxwifi_probe+0x38>
                            MX_WIFI_SPI_DeInit,
                            MX_WIFI_IO_DELAY,
                            MX_WIFI_SPI_Write,
                            MX_WIFI_SPI_Read) == MX_WIFI_STATUS_OK)
  {
    if (NULL != ll_drv_context)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <mxwifi_probe+0x34>
    {
      *ll_drv_context = &MxWifiObj;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a09      	ldr	r2, [pc, #36]	@ (80090c0 <mxwifi_probe+0x58>)
 800909a:	601a      	str	r2, [r3, #0]
    }
    ret = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80090a0:	68fb      	ldr	r3, [r7, #12]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	08008c91 	.word	0x08008c91
 80090b0:	08008bfd 	.word	0x08008bfd
 80090b4:	08008ab7 	.word	0x08008ab7
 80090b8:	08008b21 	.word	0x08008b21
 80090bc:	08008acd 	.word	0x08008acd
 80090c0:	20002c48 	.word	0x20002c48

080090c4 <wifi_obj_get>:


MX_WIFIObject_t *wifi_obj_get(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  return &MxWifiObj;
 80090c8:	4b02      	ldr	r3, [pc, #8]	@ (80090d4 <wifi_obj_get+0x10>)
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20002c48 	.word	0x20002c48

080090d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80090dc:	4b18      	ldr	r3, [pc, #96]	@ (8009140 <SystemInit+0x68>)
 80090de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090e2:	4a17      	ldr	r2, [pc, #92]	@ (8009140 <SystemInit+0x68>)
 80090e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80090ec:	4b15      	ldr	r3, [pc, #84]	@ (8009144 <SystemInit+0x6c>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80090f2:	4b14      	ldr	r3, [pc, #80]	@ (8009144 <SystemInit+0x6c>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80090f8:	4b12      	ldr	r3, [pc, #72]	@ (8009144 <SystemInit+0x6c>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80090fe:	4b11      	ldr	r3, [pc, #68]	@ (8009144 <SystemInit+0x6c>)
 8009100:	2200      	movs	r2, #0
 8009102:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8009104:	4b0f      	ldr	r3, [pc, #60]	@ (8009144 <SystemInit+0x6c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a0e      	ldr	r2, [pc, #56]	@ (8009144 <SystemInit+0x6c>)
 800910a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800910e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8009112:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8009114:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <SystemInit+0x6c>)
 8009116:	2200      	movs	r2, #0
 8009118:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800911a:	4b0a      	ldr	r3, [pc, #40]	@ (8009144 <SystemInit+0x6c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a09      	ldr	r2, [pc, #36]	@ (8009144 <SystemInit+0x6c>)
 8009120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009124:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8009126:	4b07      	ldr	r3, [pc, #28]	@ (8009144 <SystemInit+0x6c>)
 8009128:	2200      	movs	r2, #0
 800912a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800912c:	4b04      	ldr	r3, [pc, #16]	@ (8009140 <SystemInit+0x68>)
 800912e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009132:	609a      	str	r2, [r3, #8]
  #endif
}
 8009134:	bf00      	nop
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	e000ed00 	.word	0xe000ed00
 8009144:	46020c00 	.word	0x46020c00

08009148 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800914c:	2003      	movs	r0, #3
 800914e:	f000 f98a 	bl	8009466 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009152:	f003 fc4d 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 8009156:	4602      	mov	r2, r0
 8009158:	4b0c      	ldr	r3, [pc, #48]	@ (800918c <HAL_Init+0x44>)
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	490b      	ldr	r1, [pc, #44]	@ (8009190 <HAL_Init+0x48>)
 8009162:	5ccb      	ldrb	r3, [r1, r3]
 8009164:	fa22 f303 	lsr.w	r3, r2, r3
 8009168:	4a0a      	ldr	r2, [pc, #40]	@ (8009194 <HAL_Init+0x4c>)
 800916a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800916c:	2004      	movs	r0, #4
 800916e:	f000 f9cf 	bl	8009510 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009172:	2000      	movs	r0, #0
 8009174:	f000 f810 	bl	8009198 <HAL_InitTick>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e002      	b.n	8009188 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009182:	f7f8 f8c5 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	bd80      	pop	{r7, pc}
 800918c:	46020c00 	.word	0x46020c00
 8009190:	0818c95c 	.word	0x0818c95c
 8009194:	200000d4 	.word	0x200000d4

08009198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80091a4:	4b33      	ldr	r3, [pc, #204]	@ (8009274 <HAL_InitTick+0xdc>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e05c      	b.n	800926a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80091b0:	4b31      	ldr	r3, [pc, #196]	@ (8009278 <HAL_InitTick+0xe0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d10c      	bne.n	80091d6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80091bc:	4b2f      	ldr	r3, [pc, #188]	@ (800927c <HAL_InitTick+0xe4>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009274 <HAL_InitTick+0xdc>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	4619      	mov	r1, r3
 80091c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e037      	b.n	8009246 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80091d6:	f000 f9f3 	bl	80095c0 <HAL_SYSTICK_GetCLKSourceConfig>
 80091da:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d023      	beq.n	800922a <HAL_InitTick+0x92>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d82d      	bhi.n	8009244 <HAL_InitTick+0xac>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <HAL_InitTick+0x5e>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d00d      	beq.n	8009210 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80091f4:	e026      	b.n	8009244 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80091f6:	4b21      	ldr	r3, [pc, #132]	@ (800927c <HAL_InitTick+0xe4>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009274 <HAL_InitTick+0xdc>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	4619      	mov	r1, r3
 8009200:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8009204:	fbb3 f3f1 	udiv	r3, r3, r1
 8009208:	fbb2 f3f3 	udiv	r3, r2, r3
 800920c:	60fb      	str	r3, [r7, #12]
        break;
 800920e:	e01a      	b.n	8009246 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8009210:	4b18      	ldr	r3, [pc, #96]	@ (8009274 <HAL_InitTick+0xdc>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800921a:	fbb3 f3f2 	udiv	r3, r3, r2
 800921e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8009222:	fbb2 f3f3 	udiv	r3, r2, r3
 8009226:	60fb      	str	r3, [r7, #12]
        break;
 8009228:	e00d      	b.n	8009246 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800922a:	4b12      	ldr	r3, [pc, #72]	@ (8009274 <HAL_InitTick+0xdc>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009234:	fbb3 f3f2 	udiv	r3, r3, r2
 8009238:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800923c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009240:	60fb      	str	r3, [r7, #12]
        break;
 8009242:	e000      	b.n	8009246 <HAL_InitTick+0xae>
        break;
 8009244:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f940 	bl	80094cc <HAL_SYSTICK_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e009      	b.n	800926a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009256:	2200      	movs	r2, #0
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	f000 f90d 	bl	800947c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8009262:	4a07      	ldr	r2, [pc, #28]	@ (8009280 <HAL_InitTick+0xe8>)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200000dc 	.word	0x200000dc
 8009278:	e000e010 	.word	0xe000e010
 800927c:	200000d4 	.word	0x200000d4
 8009280:	200000d8 	.word	0x200000d8

08009284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009288:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <HAL_IncTick+0x20>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <HAL_IncTick+0x24>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4413      	add	r3, r2
 8009294:	4a04      	ldr	r2, [pc, #16]	@ (80092a8 <HAL_IncTick+0x24>)
 8009296:	6013      	str	r3, [r2, #0]
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	200000dc 	.word	0x200000dc
 80092a8:	20003278 	.word	0x20003278

080092ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
  return uwTick;
 80092b0:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <HAL_GetTick+0x14>)
 80092b2:	681b      	ldr	r3, [r3, #0]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20003278 	.word	0x20003278

080092c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092cc:	f7ff ffee 	bl	80092ac <HAL_GetTick>
 80092d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d005      	beq.n	80092ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092de:	4b0a      	ldr	r3, [pc, #40]	@ (8009308 <HAL_Delay+0x44>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092ea:	bf00      	nop
 80092ec:	f7ff ffde 	bl	80092ac <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d8f7      	bhi.n	80092ec <HAL_Delay+0x28>
  {
  }
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	200000dc 	.word	0x200000dc

0800930c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800931c:	4b0c      	ldr	r3, [pc, #48]	@ (8009350 <__NVIC_SetPriorityGrouping+0x44>)
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009328:	4013      	ands	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800933c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800933e:	4a04      	ldr	r2, [pc, #16]	@ (8009350 <__NVIC_SetPriorityGrouping+0x44>)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	60d3      	str	r3, [r2, #12]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	e000ed00 	.word	0xe000ed00

08009354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009358:	4b04      	ldr	r3, [pc, #16]	@ (800936c <__NVIC_GetPriorityGrouping+0x18>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	0a1b      	lsrs	r3, r3, #8
 800935e:	f003 0307 	and.w	r3, r3, #7
}
 8009362:	4618      	mov	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	e000ed00 	.word	0xe000ed00

08009370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800937a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937e:	2b00      	cmp	r3, #0
 8009380:	db0b      	blt.n	800939a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	f003 021f 	and.w	r2, r3, #31
 8009388:	4907      	ldr	r1, [pc, #28]	@ (80093a8 <__NVIC_EnableIRQ+0x38>)
 800938a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	2001      	movs	r0, #1
 8009392:	fa00 f202 	lsl.w	r2, r0, r2
 8009396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	e000e100 	.word	0xe000e100

080093ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	db0a      	blt.n	80093d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	490c      	ldr	r1, [pc, #48]	@ (80093f8 <__NVIC_SetPriority+0x4c>)
 80093c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ca:	0112      	lsls	r2, r2, #4
 80093cc:	b2d2      	uxtb	r2, r2
 80093ce:	440b      	add	r3, r1
 80093d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80093d4:	e00a      	b.n	80093ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	4908      	ldr	r1, [pc, #32]	@ (80093fc <__NVIC_SetPriority+0x50>)
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	f003 030f 	and.w	r3, r3, #15
 80093e2:	3b04      	subs	r3, #4
 80093e4:	0112      	lsls	r2, r2, #4
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	440b      	add	r3, r1
 80093ea:	761a      	strb	r2, [r3, #24]
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	e000e100 	.word	0xe000e100
 80093fc:	e000ed00 	.word	0xe000ed00

08009400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009400:	b480      	push	{r7}
 8009402:	b089      	sub	sp, #36	@ 0x24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	f1c3 0307 	rsb	r3, r3, #7
 800941a:	2b04      	cmp	r3, #4
 800941c:	bf28      	it	cs
 800941e:	2304      	movcs	r3, #4
 8009420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	3304      	adds	r3, #4
 8009426:	2b06      	cmp	r3, #6
 8009428:	d902      	bls.n	8009430 <NVIC_EncodePriority+0x30>
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	3b03      	subs	r3, #3
 800942e:	e000      	b.n	8009432 <NVIC_EncodePriority+0x32>
 8009430:	2300      	movs	r3, #0
 8009432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	fa02 f303 	lsl.w	r3, r2, r3
 800943e:	43da      	mvns	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	401a      	ands	r2, r3
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009448:	f04f 31ff 	mov.w	r1, #4294967295
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	fa01 f303 	lsl.w	r3, r1, r3
 8009452:	43d9      	mvns	r1, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009458:	4313      	orrs	r3, r2
         );
}
 800945a:	4618      	mov	r0, r3
 800945c:	3724      	adds	r7, #36	@ 0x24
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff ff4c 	bl	800930c <__NVIC_SetPriorityGrouping>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800948a:	f7ff ff63 	bl	8009354 <__NVIC_GetPriorityGrouping>
 800948e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	6978      	ldr	r0, [r7, #20]
 8009496:	f7ff ffb3 	bl	8009400 <NVIC_EncodePriority>
 800949a:	4602      	mov	r2, r0
 800949c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff ff82 	bl	80093ac <__NVIC_SetPriority>
}
 80094a8:	bf00      	nop
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff ff56 	bl	8009370 <__NVIC_EnableIRQ>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094dc:	d301      	bcc.n	80094e2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80094de:	2301      	movs	r3, #1
 80094e0:	e00d      	b.n	80094fe <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80094e2:	4a0a      	ldr	r2, [pc, #40]	@ (800950c <HAL_SYSTICK_Config+0x40>)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80094ea:	4b08      	ldr	r3, [pc, #32]	@ (800950c <HAL_SYSTICK_Config+0x40>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80094f0:	4b06      	ldr	r3, [pc, #24]	@ (800950c <HAL_SYSTICK_Config+0x40>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a05      	ldr	r2, [pc, #20]	@ (800950c <HAL_SYSTICK_Config+0x40>)
 80094f6:	f043 0303 	orr.w	r3, r3, #3
 80094fa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	e000e010 	.word	0xe000e010

08009510 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b04      	cmp	r3, #4
 800951c:	d844      	bhi.n	80095a8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	08009547 	.word	0x08009547
 8009528:	08009565 	.word	0x08009565
 800952c:	08009587 	.word	0x08009587
 8009530:	080095a9 	.word	0x080095a9
 8009534:	08009539 	.word	0x08009539
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009538:	4b1f      	ldr	r3, [pc, #124]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1e      	ldr	r2, [pc, #120]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800953e:	f043 0304 	orr.w	r3, r3, #4
 8009542:	6013      	str	r3, [r2, #0]
      break;
 8009544:	e031      	b.n	80095aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009546:	4b1c      	ldr	r3, [pc, #112]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a1b      	ldr	r2, [pc, #108]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800954c:	f023 0304 	bic.w	r3, r3, #4
 8009550:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8009552:	4b1a      	ldr	r3, [pc, #104]	@ (80095bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009558:	4a18      	ldr	r2, [pc, #96]	@ (80095bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800955a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800955e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8009562:	e022      	b.n	80095aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009564:	4b14      	ldr	r3, [pc, #80]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a13      	ldr	r2, [pc, #76]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800956a:	f023 0304 	bic.w	r3, r3, #4
 800956e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8009570:	4b12      	ldr	r3, [pc, #72]	@ (80095bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009576:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800957a:	4a10      	ldr	r2, [pc, #64]	@ (80095bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800957c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8009584:	e011      	b.n	80095aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009586:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a0b      	ldr	r2, [pc, #44]	@ (80095b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800958c:	f023 0304 	bic.w	r3, r3, #4
 8009590:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8009592:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009598:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800959c:	4a07      	ldr	r2, [pc, #28]	@ (80095bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800959e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80095a6:	e000      	b.n	80095aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80095a8:	bf00      	nop
  }
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	e000e010 	.word	0xe000e010
 80095bc:	46020c00 	.word	0x46020c00

080095c0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80095c6:	4b19      	ldr	r3, [pc, #100]	@ (800962c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0304 	and.w	r3, r3, #4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80095d2:	2304      	movs	r3, #4
 80095d4:	607b      	str	r3, [r7, #4]
 80095d6:	e021      	b.n	800961c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80095d8:	4b15      	ldr	r3, [pc, #84]	@ (8009630 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80095da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095de:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80095e2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095ea:	d011      	beq.n	8009610 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095f2:	d810      	bhi.n	8009616 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009600:	d003      	beq.n	800960a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8009602:	e008      	b.n	8009616 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8009604:	2300      	movs	r3, #0
 8009606:	607b      	str	r3, [r7, #4]
        break;
 8009608:	e008      	b.n	800961c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800960a:	2301      	movs	r3, #1
 800960c:	607b      	str	r3, [r7, #4]
        break;
 800960e:	e005      	b.n	800961c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8009610:	2302      	movs	r3, #2
 8009612:	607b      	str	r3, [r7, #4]
        break;
 8009614:	e002      	b.n	800961c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
        break;
 800961a:	bf00      	nop
    }
  }
  return systick_source;
 800961c:	687b      	ldr	r3, [r7, #4]
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	e000e010 	.word	0xe000e010
 8009630:	46020c00 	.word	0x46020c00

08009634 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800963c:	f7ff fe36 	bl	80092ac <HAL_GetTick>
 8009640:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e06b      	b.n	8009724 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b02      	cmp	r3, #2
 8009656:	d008      	beq.n	800966a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2220      	movs	r2, #32
 800965c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e05c      	b.n	8009724 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695a      	ldr	r2, [r3, #20]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0204 	orr.w	r2, r2, #4
 8009678:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2205      	movs	r2, #5
 800967e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8009682:	e020      	b.n	80096c6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8009684:	f7ff fe12 	bl	80092ac <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b05      	cmp	r3, #5
 8009690:	d919      	bls.n	80096c6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009696:	f043 0210 	orr.w	r2, r3, #16
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2203      	movs	r2, #3
 80096a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b6:	2201      	movs	r2, #1
 80096b8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e02e      	b.n	8009724 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0d7      	beq.n	8009684 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0202 	orr.w	r2, r2, #2
 80096e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2204      	movs	r2, #4
 80096e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80096f4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800970e:	2201      	movs	r2, #1
 8009710:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e019      	b.n	8009772 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b02      	cmp	r3, #2
 8009748:	d004      	beq.n	8009754 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2220      	movs	r2, #32
 800974e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e00e      	b.n	8009772 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2204      	movs	r2, #4
 8009758:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800976a:	f043 0304 	orr.w	r3, r3, #4
 800976e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009798:	b480      	push	{r7}
 800979a:	b089      	sub	sp, #36	@ 0x24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80097aa:	e1ba      	b.n	8009b22 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	2101      	movs	r1, #1
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	fa01 f303 	lsl.w	r3, r1, r3
 80097b8:	4013      	ands	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 81aa 	beq.w	8009b1c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a55      	ldr	r2, [pc, #340]	@ (8009920 <HAL_GPIO_Init+0x188>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d15d      	bne.n	800988c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80097d6:	2201      	movs	r2, #1
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	fa02 f303 	lsl.w	r3, r2, r3
 80097de:	43db      	mvns	r3, r3
 80097e0:	69fa      	ldr	r2, [r7, #28]
 80097e2:	4013      	ands	r3, r2
 80097e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f003 0201 	and.w	r2, r3, #1
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	fa02 f303 	lsl.w	r3, r2, r3
 80097f4:	69fa      	ldr	r2, [r7, #28]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009800:	4a48      	ldr	r2, [pc, #288]	@ (8009924 <HAL_GPIO_Init+0x18c>)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009808:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800980a:	4a46      	ldr	r2, [pc, #280]	@ (8009924 <HAL_GPIO_Init+0x18c>)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	4413      	add	r3, r2
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	08da      	lsrs	r2, r3, #3
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3208      	adds	r2, #8
 800981e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009822:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	220f      	movs	r2, #15
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	43db      	mvns	r3, r3
 8009834:	69fa      	ldr	r2, [r7, #28]
 8009836:	4013      	ands	r3, r2
 8009838:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	f003 0307 	and.w	r3, r3, #7
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	220b      	movs	r2, #11
 8009844:	fa02 f303 	lsl.w	r3, r2, r3
 8009848:	69fa      	ldr	r2, [r7, #28]
 800984a:	4313      	orrs	r3, r2
 800984c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	08da      	lsrs	r2, r3, #3
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	3208      	adds	r2, #8
 8009856:	69f9      	ldr	r1, [r7, #28]
 8009858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	2203      	movs	r2, #3
 8009868:	fa02 f303 	lsl.w	r3, r2, r3
 800986c:	43db      	mvns	r3, r3
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	4013      	ands	r3, r2
 8009872:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	2202      	movs	r2, #2
 800987a:	fa02 f303 	lsl.w	r3, r2, r3
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	4313      	orrs	r3, r2
 8009882:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e067      	b.n	800995c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d003      	beq.n	800989c <HAL_GPIO_Init+0x104>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b12      	cmp	r3, #18
 800989a:	d145      	bne.n	8009928 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	08da      	lsrs	r2, r3, #3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3208      	adds	r2, #8
 80098a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f003 0307 	and.w	r3, r3, #7
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	220f      	movs	r2, #15
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	43db      	mvns	r3, r3
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	4013      	ands	r3, r2
 80098be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f003 020f 	and.w	r2, r3, #15
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	08da      	lsrs	r2, r3, #3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3208      	adds	r2, #8
 80098e2:	69f9      	ldr	r1, [r7, #28]
 80098e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	2203      	movs	r2, #3
 80098f4:	fa02 f303 	lsl.w	r3, r2, r3
 80098f8:	43db      	mvns	r3, r3
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	4013      	ands	r3, r2
 80098fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f003 0203 	and.w	r2, r3, #3
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	4313      	orrs	r3, r2
 8009914:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e01e      	b.n	800995c <HAL_GPIO_Init+0x1c4>
 800991e:	bf00      	nop
 8009920:	46020000 	.word	0x46020000
 8009924:	0818c9b4 	.word	0x0818c9b4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	2203      	movs	r2, #3
 8009934:	fa02 f303 	lsl.w	r3, r2, r3
 8009938:	43db      	mvns	r3, r3
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	4013      	ands	r3, r2
 800993e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f003 0203 	and.w	r2, r3, #3
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	4313      	orrs	r3, r2
 8009954:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d00b      	beq.n	800997c <HAL_GPIO_Init+0x1e4>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d007      	beq.n	800997c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009970:	2b11      	cmp	r3, #17
 8009972:	d003      	beq.n	800997c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2b12      	cmp	r3, #18
 800997a:	d130      	bne.n	80099de <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	2203      	movs	r2, #3
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	4013      	ands	r3, r2
 8009992:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	fa02 f303 	lsl.w	r3, r2, r3
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80099b2:	2201      	movs	r2, #1
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	43db      	mvns	r3, r3
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	4013      	ands	r3, r2
 80099c0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	091b      	lsrs	r3, r3, #4
 80099c8:	f003 0201 	and.w	r2, r3, #1
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	fa02 f303 	lsl.w	r3, r2, r3
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d017      	beq.n	8009a16 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	2203      	movs	r2, #3
 80099f2:	fa02 f303 	lsl.w	r3, r2, r3
 80099f6:	43db      	mvns	r3, r3
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	4013      	ands	r3, r2
 80099fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	69fa      	ldr	r2, [r7, #28]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d07c      	beq.n	8009b1c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8009a22:	4a47      	ldr	r2, [pc, #284]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	089b      	lsrs	r3, r3, #2
 8009a28:	3318      	adds	r3, #24
 8009a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	220f      	movs	r2, #15
 8009a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3e:	43db      	mvns	r3, r3
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	4013      	ands	r3, r2
 8009a44:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0a9a      	lsrs	r2, r3, #10
 8009a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b44 <HAL_GPIO_Init+0x3ac>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	f002 0203 	and.w	r2, r2, #3
 8009a54:	00d2      	lsls	r2, r2, #3
 8009a56:	4093      	lsls	r3, r2
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009a5e:	4938      	ldr	r1, [pc, #224]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	3318      	adds	r3, #24
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009a6c:	4b34      	ldr	r3, [pc, #208]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	43db      	mvns	r3, r3
 8009a76:	69fa      	ldr	r2, [r7, #28]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009a88:	69fa      	ldr	r2, [r7, #28]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8009a90:	4a2b      	ldr	r2, [pc, #172]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009a96:	4b2a      	ldr	r3, [pc, #168]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009aba:	4a21      	ldr	r2, [pc, #132]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8009ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	43db      	mvns	r3, r3
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009ae6:	4a16      	ldr	r2, [pc, #88]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8009aee:	4b14      	ldr	r3, [pc, #80]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	43db      	mvns	r3, r3
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	4013      	ands	r3, r2
 8009afe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009b0c:	69fa      	ldr	r2, [r7, #28]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009b14:	4a0a      	ldr	r2, [pc, #40]	@ (8009b40 <HAL_GPIO_Init+0x3a8>)
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f47f ae3d 	bne.w	80097ac <HAL_GPIO_Init+0x14>
  }
}
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	3724      	adds	r7, #36	@ 0x24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	46022000 	.word	0x46022000
 8009b44:	002f7f7f 	.word	0x002f7f7f

08009b48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b089      	sub	sp, #36	@ 0x24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009b5a:	e0bc      	b.n	8009cd6 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	fa02 f303 	lsl.w	r3, r2, r3
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	4013      	ands	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80ad 	beq.w	8009cd0 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a5e      	ldr	r2, [pc, #376]	@ (8009cf4 <HAL_GPIO_DeInit+0x1ac>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d115      	bne.n	8009baa <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8009b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8009cf8 <HAL_GPIO_DeInit+0x1b0>)
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b86:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009b88:	4a5b      	ldr	r2, [pc, #364]	@ (8009cf8 <HAL_GPIO_DeInit+0x1b0>)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4413      	add	r3, r2
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8009b94:	4b57      	ldr	r3, [pc, #348]	@ (8009cf4 <HAL_GPIO_DeInit+0x1ac>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	2101      	movs	r1, #1
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba0:	43db      	mvns	r3, r3
 8009ba2:	4954      	ldr	r1, [pc, #336]	@ (8009cf4 <HAL_GPIO_DeInit+0x1ac>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	600b      	str	r3, [r1, #0]
 8009ba8:	e053      	b.n	8009c52 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8009baa:	4a54      	ldr	r2, [pc, #336]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	089b      	lsrs	r3, r3, #2
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bb6:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	220f      	movs	r2, #15
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4013      	ands	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	0a9a      	lsrs	r2, r3, #10
 8009bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8009d00 <HAL_GPIO_DeInit+0x1b8>)
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	f002 0203 	and.w	r2, r2, #3
 8009bda:	00d2      	lsls	r2, r2, #3
 8009bdc:	4093      	lsls	r3, r2
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d136      	bne.n	8009c52 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8009be4:	4b45      	ldr	r3, [pc, #276]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009be6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	43db      	mvns	r3, r3
 8009bee:	4943      	ldr	r1, [pc, #268]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8009bf6:	4b41      	ldr	r3, [pc, #260]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009bf8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	43db      	mvns	r3, r3
 8009c00:	493e      	ldr	r1, [pc, #248]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8009c08:	4b3c      	ldr	r3, [pc, #240]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	43db      	mvns	r3, r3
 8009c10:	493a      	ldr	r1, [pc, #232]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8009c16:	4b39      	ldr	r3, [pc, #228]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	43db      	mvns	r3, r3
 8009c1e:	4937      	ldr	r1, [pc, #220]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	220f      	movs	r2, #15
 8009c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c32:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8009c34:	4a31      	ldr	r2, [pc, #196]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	089b      	lsrs	r3, r3, #2
 8009c3a:	3318      	adds	r3, #24
 8009c3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	43da      	mvns	r2, r3
 8009c44:	482d      	ldr	r0, [pc, #180]	@ (8009cfc <HAL_GPIO_DeInit+0x1b4>)
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	089b      	lsrs	r3, r3, #2
 8009c4a:	400a      	ands	r2, r1
 8009c4c:	3318      	adds	r3, #24
 8009c4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	2103      	movs	r1, #3
 8009c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c60:	431a      	orrs	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	08da      	lsrs	r2, r3, #3
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	3208      	adds	r2, #8
 8009c6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	f003 0307 	and.w	r3, r3, #7
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	220f      	movs	r2, #15
 8009c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c80:	43db      	mvns	r3, r3
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	08d2      	lsrs	r2, r2, #3
 8009c86:	4019      	ands	r1, r3
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	3208      	adds	r2, #8
 8009c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	689a      	ldr	r2, [r3, #8]
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	2103      	movs	r1, #3
 8009c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9e:	43db      	mvns	r3, r3
 8009ca0:	401a      	ands	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	2101      	movs	r1, #1
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb2:	43db      	mvns	r3, r3
 8009cb4:	401a      	ands	r2, r3
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	2103      	movs	r1, #3
 8009cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	401a      	ands	r2, r3
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	fa22 f303 	lsr.w	r3, r2, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f47f af3c 	bne.w	8009b5c <HAL_GPIO_DeInit+0x14>
  }
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	3724      	adds	r7, #36	@ 0x24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	46020000 	.word	0x46020000
 8009cf8:	0818c9b4 	.word	0x0818c9b4
 8009cfc:	46022000 	.word	0x46022000
 8009d00:	002f7f7f 	.word	0x002f7f7f

08009d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691a      	ldr	r2, [r3, #16]
 8009d14:	887b      	ldrh	r3, [r7, #2]
 8009d16:	4013      	ands	r3, r2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	73fb      	strb	r3, [r7, #15]
 8009d20:	e001      	b.n	8009d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	807b      	strh	r3, [r7, #2]
 8009d40:	4613      	mov	r3, r2
 8009d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d44:	787b      	ldrb	r3, [r7, #1]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d4a:	887a      	ldrh	r2, [r7, #2]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009d50:	e002      	b.n	8009d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009d52:	887a      	ldrh	r2, [r7, #2]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d76:	887a      	ldrh	r2, [r7, #2]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	041a      	lsls	r2, r3, #16
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	43d9      	mvns	r1, r3
 8009d82:	887b      	ldrh	r3, [r7, #2]
 8009d84:	400b      	ands	r3, r1
 8009d86:	431a      	orrs	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	619a      	str	r2, [r3, #24]
}
 8009d8c:	bf00      	nop
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8009da2:	4b0f      	ldr	r3, [pc, #60]	@ (8009de0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	4013      	ands	r3, r2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009dae:	4a0c      	ldr	r2, [pc, #48]	@ (8009de0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7f9 f9ae 	bl	8003118 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8009dbc:	4b08      	ldr	r3, [pc, #32]	@ (8009de0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009dbe:	691a      	ldr	r2, [r3, #16]
 8009dc0:	88fb      	ldrh	r3, [r7, #6]
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009dc8:	4a05      	ldr	r2, [pc, #20]	@ (8009de0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009dce:	88fb      	ldrh	r3, [r7, #6]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f807 	bl	8009de4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	46022000 	.word	0x46022000

08009de4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8009dee:	bf00      	nop
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e08d      	b.n	8009f28 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d106      	bne.n	8009e26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f8b4 	bl	8009f8e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2224      	movs	r2, #36	@ 0x24
 8009e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0201 	bic.w	r2, r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009e4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d107      	bne.n	8009e74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e70:	609a      	str	r2, [r3, #8]
 8009e72:	e006      	b.n	8009e82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009e80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d108      	bne.n	8009e9c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	e007      	b.n	8009eac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009eaa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6812      	ldr	r2, [r2, #0]
 8009eb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ebe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ece:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69d9      	ldr	r1, [r3, #28]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f042 0201 	orr.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e021      	b.n	8009f86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2224      	movs	r2, #36	@ 0x24
 8009f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0201 	bic.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f821 	bl	8009fa2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	817b      	strh	r3, [r7, #10]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	813b      	strh	r3, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	f040 80f9 	bne.w	800a1d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <HAL_I2C_Mem_Write+0x34>
 8009fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d105      	bne.n	8009ff8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ff2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e0ed      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_I2C_Mem_Write+0x4e>
 800a002:	2302      	movs	r3, #2
 800a004:	e0e6      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a00e:	f7ff f94d 	bl	80092ac <HAL_GetTick>
 800a012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2319      	movs	r3, #25
 800a01a:	2201      	movs	r2, #1
 800a01c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 fadd 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e0d1      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2221      	movs	r2, #33	@ 0x21
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2240      	movs	r2, #64	@ 0x40
 800a03c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a3a      	ldr	r2, [r7, #32]
 800a04a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a058:	88f8      	ldrh	r0, [r7, #6]
 800a05a:	893a      	ldrh	r2, [r7, #8]
 800a05c:	8979      	ldrh	r1, [r7, #10]
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	4603      	mov	r3, r0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f9ed 	bl	800a448 <I2C_RequestMemoryWrite>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0a9      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a084:	b29b      	uxth	r3, r3
 800a086:	2bff      	cmp	r3, #255	@ 0xff
 800a088:	d90e      	bls.n	800a0a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	22ff      	movs	r2, #255	@ 0xff
 800a08e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a094:	b2da      	uxtb	r2, r3
 800a096:	8979      	ldrh	r1, [r7, #10]
 800a098:	2300      	movs	r3, #0
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fc61 	bl	800a968 <I2C_TransferConfig>
 800a0a6:	e00f      	b.n	800a0c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	8979      	ldrh	r1, [r7, #10]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 fc50 	bl	800a968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fae0 	bl	800a692 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e07b      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a104:	3b01      	subs	r3, #1
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a110:	b29b      	uxth	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d034      	beq.n	800a180 <HAL_I2C_Mem_Write+0x1c8>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d130      	bne.n	800a180 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a124:	2200      	movs	r2, #0
 800a126:	2180      	movs	r1, #128	@ 0x80
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fa59 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e04d      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	2bff      	cmp	r3, #255	@ 0xff
 800a140:	d90e      	bls.n	800a160 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	22ff      	movs	r2, #255	@ 0xff
 800a146:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	8979      	ldrh	r1, [r7, #10]
 800a150:	2300      	movs	r3, #0
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fc05 	bl	800a968 <I2C_TransferConfig>
 800a15e:	e00f      	b.n	800a180 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a164:	b29a      	uxth	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	8979      	ldrh	r1, [r7, #10]
 800a172:	2300      	movs	r3, #0
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fbf4 	bl	800a968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d19e      	bne.n	800a0c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 fac6 	bl	800a720 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e01a      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6859      	ldr	r1, [r3, #4]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1dc <HAL_I2C_Mem_Write+0x224>)
 800a1b2:	400b      	ands	r3, r1
 800a1b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e000      	b.n	800a1d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a1d2:	2302      	movs	r3, #2
  }
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	fe00e800 	.word	0xfe00e800

0800a1e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	817b      	strh	r3, [r7, #10]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	813b      	strh	r3, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b20      	cmp	r3, #32
 800a204:	f040 80fd 	bne.w	800a402 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <HAL_I2C_Mem_Read+0x34>
 800a20e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	d105      	bne.n	800a220 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a21a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e0f1      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_I2C_Mem_Read+0x4e>
 800a22a:	2302      	movs	r3, #2
 800a22c:	e0ea      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a236:	f7ff f839 	bl	80092ac <HAL_GetTick>
 800a23a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	2319      	movs	r3, #25
 800a242:	2201      	movs	r2, #1
 800a244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f9c9 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e0d5      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2222      	movs	r2, #34	@ 0x22
 800a25c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2240      	movs	r2, #64	@ 0x40
 800a264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a280:	88f8      	ldrh	r0, [r7, #6]
 800a282:	893a      	ldrh	r2, [r7, #8]
 800a284:	8979      	ldrh	r1, [r7, #10]
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4603      	mov	r3, r0
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 f92d 	bl	800a4f0 <I2C_RequestMemoryRead>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e0ad      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	2bff      	cmp	r3, #255	@ 0xff
 800a2b0:	d90e      	bls.n	800a2d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	22ff      	movs	r2, #255	@ 0xff
 800a2b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	8979      	ldrh	r1, [r7, #10]
 800a2c0:	4b52      	ldr	r3, [pc, #328]	@ (800a40c <HAL_I2C_Mem_Read+0x22c>)
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fb4d 	bl	800a968 <I2C_TransferConfig>
 800a2ce:	e00f      	b.n	800a2f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	8979      	ldrh	r1, [r7, #10]
 800a2e2:	4b4a      	ldr	r3, [pc, #296]	@ (800a40c <HAL_I2C_Mem_Read+0x22c>)
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fb3c 	bl	800a968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2104      	movs	r1, #4
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f970 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e07c      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a326:	3b01      	subs	r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a332:	b29b      	uxth	r3, r3
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d034      	beq.n	800a3b0 <HAL_I2C_Mem_Read+0x1d0>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d130      	bne.n	800a3b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	2200      	movs	r2, #0
 800a356:	2180      	movs	r1, #128	@ 0x80
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 f941 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e04d      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2bff      	cmp	r3, #255	@ 0xff
 800a370:	d90e      	bls.n	800a390 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	22ff      	movs	r2, #255	@ 0xff
 800a376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	8979      	ldrh	r1, [r7, #10]
 800a380:	2300      	movs	r3, #0
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 faed 	bl	800a968 <I2C_TransferConfig>
 800a38e:	e00f      	b.n	800a3b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a394:	b29a      	uxth	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	8979      	ldrh	r1, [r7, #10]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fadc 	bl	800a968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d19a      	bne.n	800a2f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f9ae 	bl	800a720 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e01a      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6859      	ldr	r1, [r3, #4]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a410 <HAL_I2C_Mem_Read+0x230>)
 800a3e2:	400b      	ands	r3, r1
 800a3e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e000      	b.n	800a404 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a402:	2302      	movs	r3, #2
  }
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	80002400 	.word	0x80002400
 800a410:	fe00e800 	.word	0xfe00e800

0800a414 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a422:	b2db      	uxtb	r3, r3
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	4608      	mov	r0, r1
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	4603      	mov	r3, r0
 800a458:	817b      	strh	r3, [r7, #10]
 800a45a:	460b      	mov	r3, r1
 800a45c:	813b      	strh	r3, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	b2da      	uxtb	r2, r3
 800a466:	8979      	ldrh	r1, [r7, #10]
 800a468:	4b20      	ldr	r3, [pc, #128]	@ (800a4ec <I2C_RequestMemoryWrite+0xa4>)
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 fa79 	bl	800a968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	69b9      	ldr	r1, [r7, #24]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 f909 	bl	800a692 <I2C_WaitOnTXISFlagUntilTimeout>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e02c      	b.n	800a4e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d105      	bne.n	800a49c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a490:	893b      	ldrh	r3, [r7, #8]
 800a492:	b2da      	uxtb	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	629a      	str	r2, [r3, #40]	@ 0x28
 800a49a:	e015      	b.n	800a4c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a49c:	893b      	ldrh	r3, [r7, #8]
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	69b9      	ldr	r1, [r7, #24]
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 f8ef 	bl	800a692 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e012      	b.n	800a4e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a4be:	893b      	ldrh	r3, [r7, #8]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2180      	movs	r1, #128	@ 0x80
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f884 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	80002000 	.word	0x80002000

0800a4f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	817b      	strh	r3, [r7, #10]
 800a502:	460b      	mov	r3, r1
 800a504:	813b      	strh	r3, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	b2da      	uxtb	r2, r3
 800a50e:	8979      	ldrh	r1, [r7, #10]
 800a510:	4b20      	ldr	r3, [pc, #128]	@ (800a594 <I2C_RequestMemoryRead+0xa4>)
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	2300      	movs	r3, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fa26 	bl	800a968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a51c:	69fa      	ldr	r2, [r7, #28]
 800a51e:	69b9      	ldr	r1, [r7, #24]
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 f8b6 	bl	800a692 <I2C_WaitOnTXISFlagUntilTimeout>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e02c      	b.n	800a58a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d105      	bne.n	800a542 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a536:	893b      	ldrh	r3, [r7, #8]
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a540:	e015      	b.n	800a56e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a542:	893b      	ldrh	r3, [r7, #8]
 800a544:	0a1b      	lsrs	r3, r3, #8
 800a546:	b29b      	uxth	r3, r3
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	69b9      	ldr	r1, [r7, #24]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f89c 	bl	800a692 <I2C_WaitOnTXISFlagUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e012      	b.n	800a58a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a564:	893b      	ldrh	r3, [r7, #8]
 800a566:	b2da      	uxtb	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2200      	movs	r2, #0
 800a576:	2140      	movs	r1, #64	@ 0x40
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f831 	bl	800a5e0 <I2C_WaitOnFlagUntilTimeout>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e000      	b.n	800a58a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	80002000 	.word	0x80002000

0800a598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	f003 0302 	and.w	r3, r3, #2
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d103      	bne.n	800a5b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d007      	beq.n	800a5d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	619a      	str	r2, [r3, #24]
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5f0:	e03b      	b.n	800a66a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 f8d6 	bl	800a7a8 <I2C_IsErrorOccurred>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e041      	b.n	800a68a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60c:	d02d      	beq.n	800a66a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a60e:	f7fe fe4d 	bl	80092ac <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d302      	bcc.n	800a624 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d122      	bne.n	800a66a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4013      	ands	r3, r2
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	429a      	cmp	r2, r3
 800a632:	bf0c      	ite	eq
 800a634:	2301      	moveq	r3, #1
 800a636:	2300      	movne	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	461a      	mov	r2, r3
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d113      	bne.n	800a66a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a646:	f043 0220 	orr.w	r2, r3, #32
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2220      	movs	r2, #32
 800a652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e00f      	b.n	800a68a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	699a      	ldr	r2, [r3, #24]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4013      	ands	r3, r2
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	bf0c      	ite	eq
 800a67a:	2301      	moveq	r3, #1
 800a67c:	2300      	movne	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	429a      	cmp	r2, r3
 800a686:	d0b4      	beq.n	800a5f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a69e:	e033      	b.n	800a708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f87f 	bl	800a7a8 <I2C_IsErrorOccurred>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e031      	b.n	800a718 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ba:	d025      	beq.n	800a708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6bc:	f7fe fdf6 	bl	80092ac <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d302      	bcc.n	800a6d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11a      	bne.n	800a708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d013      	beq.n	800a708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6e4:	f043 0220 	orr.w	r2, r3, #32
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e007      	b.n	800a718 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b02      	cmp	r3, #2
 800a714:	d1c4      	bne.n	800a6a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a72c:	e02f      	b.n	800a78e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f838 	bl	800a7a8 <I2C_IsErrorOccurred>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e02d      	b.n	800a79e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a742:	f7fe fdb3 	bl	80092ac <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d302      	bcc.n	800a758 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d11a      	bne.n	800a78e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b20      	cmp	r3, #32
 800a764:	d013      	beq.n	800a78e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a76a:	f043 0220 	orr.w	r2, r3, #32
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e007      	b.n	800a79e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	f003 0320 	and.w	r3, r3, #32
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d1c8      	bne.n	800a72e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	@ 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	f003 0310 	and.w	r3, r3, #16
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d068      	beq.n	800a8a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2210      	movs	r2, #16
 800a7da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a7dc:	e049      	b.n	800a872 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d045      	beq.n	800a872 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a7e6:	f7fe fd61 	bl	80092ac <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d302      	bcc.n	800a7fc <I2C_IsErrorOccurred+0x54>
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d13a      	bne.n	800a872 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a80e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a81a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a81e:	d121      	bne.n	800a864 <I2C_IsErrorOccurred+0xbc>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a826:	d01d      	beq.n	800a864 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a828:	7cfb      	ldrb	r3, [r7, #19]
 800a82a:	2b20      	cmp	r3, #32
 800a82c:	d01a      	beq.n	800a864 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a83c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a83e:	f7fe fd35 	bl	80092ac <HAL_GetTick>
 800a842:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a844:	e00e      	b.n	800a864 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a846:	f7fe fd31 	bl	80092ac <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	2b19      	cmp	r3, #25
 800a852:	d907      	bls.n	800a864 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	f043 0320 	orr.w	r3, r3, #32
 800a85a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a862:	e006      	b.n	800a872 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d1e9      	bne.n	800a846 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	f003 0320 	and.w	r3, r3, #32
 800a87c:	2b20      	cmp	r3, #32
 800a87e:	d003      	beq.n	800a888 <I2C_IsErrorOccurred+0xe0>
 800a880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0aa      	beq.n	800a7de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2220      	movs	r2, #32
 800a896:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	f043 0304 	orr.w	r3, r3, #4
 800a89e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	f043 0301 	orr.w	r3, r3, #1
 800a8be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	f043 0308 	orr.w	r3, r3, #8
 800a8e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a8ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00b      	beq.n	800a914 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	f043 0302 	orr.w	r3, r3, #2
 800a902:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a90c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01c      	beq.n	800a956 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7ff fe3b 	bl	800a598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6859      	ldr	r1, [r3, #4]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <I2C_IsErrorOccurred+0x1bc>)
 800a92e:	400b      	ands	r3, r1
 800a930:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	431a      	orrs	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3728      	adds	r7, #40	@ 0x28
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	fe00e800 	.word	0xfe00e800

0800a968 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	607b      	str	r3, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	817b      	strh	r3, [r7, #10]
 800a976:	4613      	mov	r3, r2
 800a978:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a97a:	897b      	ldrh	r3, [r7, #10]
 800a97c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a980:	7a7b      	ldrb	r3, [r7, #9]
 800a982:	041b      	lsls	r3, r3, #16
 800a984:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a988:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	4313      	orrs	r3, r2
 800a992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a996:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	0d5b      	lsrs	r3, r3, #21
 800a9a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a9a6:	4b08      	ldr	r3, [pc, #32]	@ (800a9c8 <I2C_TransferConfig+0x60>)
 800a9a8:	430b      	orrs	r3, r1
 800a9aa:	43db      	mvns	r3, r3
 800a9ac:	ea02 0103 	and.w	r1, r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a9ba:	bf00      	nop
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	03ff63ff 	.word	0x03ff63ff

0800a9cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b20      	cmp	r3, #32
 800a9e0:	d138      	bne.n	800aa54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d101      	bne.n	800a9f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	e032      	b.n	800aa56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2224      	movs	r2, #36	@ 0x24
 800a9fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0201 	bic.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aa1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6819      	ldr	r1, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0201 	orr.w	r2, r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	e000      	b.n	800aa56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa54:	2302      	movs	r3, #2
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	d139      	bne.n	800aaec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e033      	b.n	800aaee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2224      	movs	r2, #36	@ 0x24
 800aa92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f022 0201 	bic.w	r2, r2, #1
 800aaa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f042 0201 	orr.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2220      	movs	r2, #32
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e000      	b.n	800aaee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aaec:	2302      	movs	r3, #2
  }
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800ab08:	4b0b      	ldr	r3, [pc, #44]	@ (800ab38 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	e007      	b.n	800ab2a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800ab1a:	4b07      	ldr	r3, [pc, #28]	@ (800ab38 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f023 0204 	bic.w	r2, r3, #4
 800ab22:	4905      	ldr	r1, [pc, #20]	@ (800ab38 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	600b      	str	r3, [r1, #0]
  }

  return status;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	40030400 	.word	0x40030400

0800ab3c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800ab40:	4b05      	ldr	r3, [pc, #20]	@ (800ab58 <HAL_ICACHE_Enable+0x1c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a04      	ldr	r2, [pc, #16]	@ (800ab58 <HAL_ICACHE_Enable+0x1c>)
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40030400 	.word	0x40030400

0800ab5c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e0f2      	b.n	800ad54 <HAL_LPTIM_Init+0x1f8>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d111      	bne.n	800aba4 <HAL_LPTIM_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fc7f 	bl	800b48c <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <HAL_LPTIM_Init+0x40>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a70      	ldr	r2, [pc, #448]	@ (800ad5c <HAL_LPTIM_Init+0x200>)
 800ab9a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	691a      	ldr	r2, [r3, #16]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0201 	orr.w	r2, r2, #1
 800abba:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800abc4:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800abce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800abd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fcad 	bl	800b534 <LPTIM_WaitForFlag>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d101      	bne.n	800abe4 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e0b7      	b.n	800ad54 <HAL_LPTIM_Init+0x1f8>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2210      	movs	r2, #16
 800abea:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6a12      	ldr	r2, [r2, #32]
 800abf4:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800abf6:	2110      	movs	r1, #16
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fc9b 	bl	800b534 <LPTIM_WaitForFlag>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d101      	bne.n	800ac08 <HAL_LPTIM_Init+0xac>
  {
    return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e0a5      	b.n	800ad54 <HAL_LPTIM_Init+0x1f8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10e      	bne.n	800ac34 <HAL_LPTIM_Init+0xd8>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d107      	bne.n	800ac34 <HAL_LPTIM_Init+0xd8>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	691a      	ldr	r2, [r3, #16]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 0201 	bic.w	r2, r2, #1
 800ac32:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d004      	beq.n	800ac4e <HAL_LPTIM_Init+0xf2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac4c:	d103      	bne.n	800ac56 <HAL_LPTIM_Init+0xfa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f023 031e 	bic.w	r3, r3, #30
 800ac54:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d005      	beq.n	800ac6e <HAL_LPTIM_Init+0x112>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ac68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ac6c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4b3b      	ldr	r3, [pc, #236]	@ (800ad60 <HAL_LPTIM_Init+0x204>)
 800ac72:	4013      	ands	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac7e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 800ac84:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800ac8a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d107      	bne.n	800acaa <HAL_LPTIM_Init+0x14e>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800aca2:	4313      	orrs	r3, r2
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d004      	beq.n	800acbc <HAL_LPTIM_Init+0x160>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800acba:	d107      	bne.n	800accc <HAL_LPTIM_Init+0x170>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800acc4:	4313      	orrs	r3, r2
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00a      	beq.n	800acee <HAL_LPTIM_Init+0x192>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800ace0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800ace6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a1a      	ldr	r2, [pc, #104]	@ (800ad64 <HAL_LPTIM_Init+0x208>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d004      	beq.n	800ad0a <HAL_LPTIM_Init+0x1ae>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a18      	ldr	r2, [pc, #96]	@ (800ad68 <HAL_LPTIM_Init+0x20c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d108      	bne.n	800ad1c <HAL_LPTIM_Init+0x1c0>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad1a:	e00e      	b.n	800ad3a <HAL_LPTIM_Init+0x1de>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a12      	ldr	r2, [pc, #72]	@ (800ad6c <HAL_LPTIM_Init+0x210>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d004      	beq.n	800ad30 <HAL_LPTIM_Init+0x1d4>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a11      	ldr	r2, [pc, #68]	@ (800ad70 <HAL_LPTIM_Init+0x214>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d104      	bne.n	800ad3a <HAL_LPTIM_Init+0x1de>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ad38:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	0800154d 	.word	0x0800154d
 800ad60:	ff39f1fe 	.word	0xff39f1fe
 800ad64:	46004400 	.word	0x46004400
 800ad68:	40009400 	.word	0x40009400
 800ad6c:	46004800 	.word	0x46004800
 800ad70:	46004c00 	.word	0x46004c00

0800ad74 <HAL_LPTIM_PWM_Start_IT>:
  *            @arg LPTIM_CHANNEL_1: LPTIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: LPTIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d109      	bne.n	800ad98 <HAL_LPTIM_PWM_Start_IT+0x24>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	bf14      	ite	ne
 800ad90:	2301      	movne	r3, #1
 800ad92:	2300      	moveq	r3, #0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	e008      	b.n	800adaa <HAL_LPTIM_PWM_Start_IT+0x36>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	bf14      	ite	ne
 800ada4:	2301      	movne	r3, #1
 800ada6:	2300      	moveq	r3, #0
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <HAL_LPTIM_PWM_Start_IT+0x3e>
  {
    return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e08b      	b.n	800aeca <HAL_LPTIM_PWM_Start_IT+0x156>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2202      	movs	r2, #2
 800adb6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <HAL_LPTIM_PWM_Start_IT+0x56>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2202      	movs	r2, #2
 800adc4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800adc8:	e003      	b.n	800add2 <HAL_LPTIM_PWM_Start_IT+0x5e>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2202      	movs	r2, #2
 800adce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800ade0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	691a      	ldr	r2, [r3, #16]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f042 0201 	orr.w	r2, r2, #1
 800adf0:	611a      	str	r2, [r3, #16]
  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800adfa:	605a      	str	r2, [r3, #4]

  switch (Channel)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <HAL_LPTIM_PWM_Start_IT+0x96>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d00b      	beq.n	800ae20 <HAL_LPTIM_PWM_Start_IT+0xac>
      /* Enable interrupt */
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
                            LPTIM_IT_UPDATE);
      break;
    default:
      break;
 800ae08:	e013      	b.n	800ae32 <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP1OK | LPTIM_IT_CC1 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6812      	ldr	r2, [r2, #0]
 800ae14:	f443 73cd 	orr.w	r3, r3, #410	@ 0x19a
 800ae18:	f043 0301 	orr.w	r3, r3, #1
 800ae1c:	6093      	str	r3, [r2, #8]
      break;
 800ae1e:	e008      	b.n	800ae32 <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6899      	ldr	r1, [r3, #8]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	4b2a      	ldr	r3, [pc, #168]	@ (800aed4 <HAL_LPTIM_PWM_Start_IT+0x160>)
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	6093      	str	r3, [r2, #8]
      break;
 800ae30:	bf00      	nop
  }

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800ae32:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fb7c 	bl	800b534 <LPTIM_WaitForFlag>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d101      	bne.n	800ae46 <HAL_LPTIM_PWM_Start_IT+0xd2>
  {
    return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e041      	b.n	800aeca <HAL_LPTIM_PWM_Start_IT+0x156>
  }

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d016      	beq.n	800ae80 <HAL_LPTIM_PWM_Start_IT+0x10c>
  {
    /* Clear flag */
    __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae5a:	605a      	str	r2, [r3, #4]

    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f042 0204 	orr.w	r2, r2, #4
 800ae6a:	609a      	str	r2, [r3, #8]

    /* Wait for the completion of the write operation to the LPTIM_DIER register */
    if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800ae6c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fb5f 	bl	800b534 <LPTIM_WaitForFlag>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d101      	bne.n	800ae80 <HAL_LPTIM_PWM_Start_IT+0x10c>
    {
      return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e024      	b.n	800aeca <HAL_LPTIM_PWM_Start_IT+0x156>
    }
  }

  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_LPTIM_PWM_Start_IT+0x11a>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d009      	beq.n	800aea0 <HAL_LPTIM_PWM_Start_IT+0x12c>
 800ae8c:	e010      	b.n	800aeb0 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f042 0202 	orr.w	r2, r2, #2
 800ae9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae9e:	e007      	b.n	800aeb0 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aeae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f042 0204 	orr.w	r2, r2, #4
 800aebe:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	00080392 	.word	0x00080392

0800aed8 <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_LPTIM_OC_ConfigChannel+0x22>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d00b      	beq.n	800af10 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 800aef8:	e018      	b.n	800af2c <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 fb49 	bl	800b594 <LPTIM_OC1_SetConfig>
 800af02:	4603      	mov	r3, r0
 800af04:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00c      	beq.n	800af26 <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	e012      	b.n	800af36 <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 fba4 	bl	800b660 <LPTIM_OC2_SetConfig>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	e007      	b.n	800af36 <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 800af26:	bf00      	nop
 800af28:	e000      	b.n	800af2c <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 800af2a:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b01      	cmp	r3, #1
 800af52:	d123      	bne.n	800af9c <HAL_LPTIM_IRQHandler+0x5e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d11c      	bne.n	800af9c <HAL_LPTIM_IRQHandler+0x5e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2201      	movs	r2, #1
 800af68:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d005      	beq.n	800af8c <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
 800af8a:	e003      	b.n	800af94 <HAL_LPTIM_IRQHandler+0x56>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afaa:	d125      	bne.n	800aff8 <HAL_LPTIM_IRQHandler+0xba>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afba:	d11d      	bne.n	800aff8 <HAL_LPTIM_IRQHandler+0xba>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afc4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2202      	movs	r2, #2
 800afca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_LPTIM_IRQHandler+0xaa>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	4798      	blx	r3
 800afe6:	e003      	b.n	800aff0 <HAL_LPTIM_IRQHandler+0xb2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b006:	d119      	bne.n	800b03c <HAL_LPTIM_IRQHandler+0xfe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b016:	d111      	bne.n	800b03c <HAL_LPTIM_IRQHandler+0xfe>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b020:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b04a:	d119      	bne.n	800b080 <HAL_LPTIM_IRQHandler+0x142>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b05a:	d111      	bne.n	800b080 <HAL_LPTIM_IRQHandler+0x142>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b064:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2202      	movs	r2, #2
 800b06a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d10e      	bne.n	800b0ac <HAL_LPTIM_IRQHandler+0x16e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f003 0302 	and.w	r3, r3, #2
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d107      	bne.n	800b0ac <HAL_LPTIM_IRQHandler+0x16e>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d10e      	bne.n	800b0d8 <HAL_LPTIM_IRQHandler+0x19a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f003 0304 	and.w	r3, r3, #4
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d107      	bne.n	800b0d8 <HAL_LPTIM_IRQHandler+0x19a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	2b08      	cmp	r3, #8
 800b0e4:	d112      	bne.n	800b10c <HAL_LPTIM_IRQHandler+0x1ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	f003 0308 	and.w	r3, r3, #8
 800b0f0:	2b08      	cmp	r3, #8
 800b0f2:	d10b      	bne.n	800b10c <HAL_LPTIM_IRQHandler+0x1ce>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2208      	movs	r2, #8
 800b0fa:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b116:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b11a:	d114      	bne.n	800b146 <HAL_LPTIM_IRQHandler+0x208>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b126:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b12a:	d10c      	bne.n	800b146 <HAL_LPTIM_IRQHandler+0x208>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800b134:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2202      	movs	r2, #2
 800b13a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0310 	and.w	r3, r3, #16
 800b150:	2b10      	cmp	r3, #16
 800b152:	d10e      	bne.n	800b172 <HAL_LPTIM_IRQHandler+0x234>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f003 0310 	and.w	r3, r3, #16
 800b15e:	2b10      	cmp	r3, #16
 800b160:	d107      	bne.n	800b172 <HAL_LPTIM_IRQHandler+0x234>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2210      	movs	r2, #16
 800b168:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0320 	and.w	r3, r3, #32
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	d10e      	bne.n	800b19e <HAL_LPTIM_IRQHandler+0x260>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f003 0320 	and.w	r3, r3, #32
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d107      	bne.n	800b19e <HAL_LPTIM_IRQHandler+0x260>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2220      	movs	r2, #32
 800b194:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a8:	2b40      	cmp	r3, #64	@ 0x40
 800b1aa:	d10e      	bne.n	800b1ca <HAL_LPTIM_IRQHandler+0x28c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b6:	2b40      	cmp	r3, #64	@ 0x40
 800b1b8:	d107      	bne.n	800b1ca <HAL_LPTIM_IRQHandler+0x28c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2240      	movs	r2, #64	@ 0x40
 800b1c0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1d4:	2b80      	cmp	r3, #128	@ 0x80
 800b1d6:	d10e      	bne.n	800b1f6 <HAL_LPTIM_IRQHandler+0x2b8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e2:	2b80      	cmp	r3, #128	@ 0x80
 800b1e4:	d107      	bne.n	800b1f6 <HAL_LPTIM_IRQHandler+0x2b8>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2280      	movs	r2, #128	@ 0x80
 800b1ec:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b204:	d110      	bne.n	800b228 <HAL_LPTIM_IRQHandler+0x2ea>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b214:	d108      	bne.n	800b228 <HAL_LPTIM_IRQHandler+0x2ea>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b21e:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	460b      	mov	r3, r1
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <HAL_LPTIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e08c      	b.n	800b47e <HAL_LPTIM_RegisterCallback+0x136>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d16c      	bne.n	800b44a <HAL_LPTIM_RegisterCallback+0x102>
  {
    switch (CallbackID)
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	2b0f      	cmp	r3, #15
 800b374:	d866      	bhi.n	800b444 <HAL_LPTIM_RegisterCallback+0xfc>
 800b376:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <HAL_LPTIM_RegisterCallback+0x34>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b3bd 	.word	0x0800b3bd
 800b380:	0800b3c5 	.word	0x0800b3c5
 800b384:	0800b3cd 	.word	0x0800b3cd
 800b388:	0800b3d5 	.word	0x0800b3d5
 800b38c:	0800b3dd 	.word	0x0800b3dd
 800b390:	0800b3e5 	.word	0x0800b3e5
 800b394:	0800b3ed 	.word	0x0800b3ed
 800b398:	0800b3f5 	.word	0x0800b3f5
 800b39c:	0800b3fd 	.word	0x0800b3fd
 800b3a0:	0800b405 	.word	0x0800b405
 800b3a4:	0800b40d 	.word	0x0800b40d
 800b3a8:	0800b415 	.word	0x0800b415
 800b3ac:	0800b41d 	.word	0x0800b41d
 800b3b0:	0800b427 	.word	0x0800b427
 800b3b4:	0800b431 	.word	0x0800b431
 800b3b8:	0800b43b 	.word	0x0800b43b
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b3c2:	e05b      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b3ca:	e057      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b3d2:	e053      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b3da:	e04f      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b3e2:	e04b      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b3ea:	e047      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b3f2:	e043      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b3fa:	e03f      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b402:	e03b      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b40a:	e037      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b412:	e033      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b41a:	e02f      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b424:	e02a      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b42e:	e025      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b438:	e020      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b442:	e01b      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	75fb      	strb	r3, [r7, #23]
        break;
 800b448:	e018      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d110      	bne.n	800b478 <HAL_LPTIM_RegisterCallback+0x130>
  {
    switch (CallbackID)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <HAL_LPTIM_RegisterCallback+0x11a>
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d004      	beq.n	800b46a <HAL_LPTIM_RegisterCallback+0x122>
 800b460:	e007      	b.n	800b472 <HAL_LPTIM_RegisterCallback+0x12a>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b468:	e008      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b470:	e004      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	75fb      	strb	r3, [r7, #23]
        break;
 800b476:	e001      	b.n	800b47c <HAL_LPTIM_RegisterCallback+0x134>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop

0800b48c <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a19      	ldr	r2, [pc, #100]	@ (800b4fc <LPTIM_ResetCallback+0x70>)
 800b498:	659a      	str	r2, [r3, #88]	@ 0x58
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a18      	ldr	r2, [pc, #96]	@ (800b500 <LPTIM_ResetCallback+0x74>)
 800b49e:	65da      	str	r2, [r3, #92]	@ 0x5c
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a18      	ldr	r2, [pc, #96]	@ (800b504 <LPTIM_ResetCallback+0x78>)
 800b4a4:	661a      	str	r2, [r3, #96]	@ 0x60
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a17      	ldr	r2, [pc, #92]	@ (800b508 <LPTIM_ResetCallback+0x7c>)
 800b4aa:	665a      	str	r2, [r3, #100]	@ 0x64
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a17      	ldr	r2, [pc, #92]	@ (800b50c <LPTIM_ResetCallback+0x80>)
 800b4b0:	669a      	str	r2, [r3, #104]	@ 0x68
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a16      	ldr	r2, [pc, #88]	@ (800b510 <LPTIM_ResetCallback+0x84>)
 800b4b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a16      	ldr	r2, [pc, #88]	@ (800b514 <LPTIM_ResetCallback+0x88>)
 800b4bc:	671a      	str	r2, [r3, #112]	@ 0x70
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a15      	ldr	r2, [pc, #84]	@ (800b518 <LPTIM_ResetCallback+0x8c>)
 800b4c2:	675a      	str	r2, [r3, #116]	@ 0x74
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a15      	ldr	r2, [pc, #84]	@ (800b51c <LPTIM_ResetCallback+0x90>)
 800b4c8:	679a      	str	r2, [r3, #120]	@ 0x78
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a14      	ldr	r2, [pc, #80]	@ (800b520 <LPTIM_ResetCallback+0x94>)
 800b4ce:	67da      	str	r2, [r3, #124]	@ 0x7c
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a14      	ldr	r2, [pc, #80]	@ (800b524 <LPTIM_ResetCallback+0x98>)
 800b4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a13      	ldr	r2, [pc, #76]	@ (800b528 <LPTIM_ResetCallback+0x9c>)
 800b4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a12      	ldr	r2, [pc, #72]	@ (800b52c <LPTIM_ResetCallback+0xa0>)
 800b4e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a11      	ldr	r2, [pc, #68]	@ (800b530 <LPTIM_ResetCallback+0xa4>)
 800b4ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	0800b231 	.word	0x0800b231
 800b500:	0800b245 	.word	0x0800b245
 800b504:	0800b259 	.word	0x0800b259
 800b508:	0800b26d 	.word	0x0800b26d
 800b50c:	0800b281 	.word	0x0800b281
 800b510:	0800b295 	.word	0x0800b295
 800b514:	0800b2a9 	.word	0x0800b2a9
 800b518:	0800b2bd 	.word	0x0800b2bd
 800b51c:	0800b2d1 	.word	0x0800b2d1
 800b520:	0800b321 	.word	0x0800b321
 800b524:	0800b2e5 	.word	0x0800b2e5
 800b528:	0800b30d 	.word	0x0800b30d
 800b52c:	0800b2f9 	.word	0x0800b2f9
 800b530:	0800b335 	.word	0x0800b335

0800b534 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800b542:	4b12      	ldr	r3, [pc, #72]	@ (800b58c <LPTIM_WaitForFlag+0x58>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a12      	ldr	r2, [pc, #72]	@ (800b590 <LPTIM_WaitForFlag+0x5c>)
 800b548:	fba2 2303 	umull	r2, r3, r2, r3
 800b54c:	0b9b      	lsrs	r3, r3, #14
 800b54e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b552:	fb02 f303 	mul.w	r3, r2, r3
 800b556:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	4013      	ands	r3, r2
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	d002      	beq.n	800b57e <LPTIM_WaitForFlag+0x4a>
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1ec      	bne.n	800b558 <LPTIM_WaitForFlag+0x24>

  return result;
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	200000d4 	.word	0x200000d4
 800b590:	d1b71759 	.word	0xd1b71759

0800b594 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a4:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f023 030d 	bic.w	r3, r3, #13
 800b5ac:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b65c <LPTIM_OC1_SetConfig+0xc8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d112      	bne.n	800b5de <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5c6:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	055b      	lsls	r3, r3, #21
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	60da      	str	r2, [r3, #12]
 800b5dc:	e005      	b.n	800b5ea <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	691a      	ldr	r2, [r3, #16]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0201 	orr.w	r2, r2, #1
 800b5f8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2208      	movs	r2, #8
 800b600:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 800b60c:	2108      	movs	r1, #8
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ff90 	bl	800b534 <LPTIM_WaitForFlag>
 800b614:	4603      	mov	r3, r0
 800b616:	2b03      	cmp	r3, #3
 800b618:	d101      	bne.n	800b61e <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e01a      	b.n	800b654 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10e      	bne.n	800b64a <LPTIM_OC1_SetConfig+0xb6>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b636:	2b00      	cmp	r3, #0
 800b638:	d107      	bne.n	800b64a <LPTIM_OC1_SetConfig+0xb6>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	691a      	ldr	r2, [r3, #16]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0201 	bic.w	r2, r2, #1
 800b648:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	46004c00 	.word	0x46004c00

0800b660 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b670:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800b678:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	049b      	lsls	r3, r3, #18
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	691a      	ldr	r2, [r3, #16]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f042 0201 	orr.w	r2, r2, #1
 800b694:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800b69e:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 800b6aa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff ff40 	bl	800b534 <LPTIM_WaitForFlag>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e01a      	b.n	800b6f4 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10e      	bne.n	800b6ea <LPTIM_OC2_SetConfig+0x8a>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d107      	bne.n	800b6ea <LPTIM_OC2_SetConfig+0x8a>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	691a      	ldr	r2, [r3, #16]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f022 0201 	bic.w	r2, r2, #1
 800b6e8:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800b704:	4b39      	ldr	r3, [pc, #228]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b70c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	429a      	cmp	r2, r3
 800b714:	d10b      	bne.n	800b72e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b71c:	d905      	bls.n	800b72a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b71e:	4b33      	ldr	r3, [pc, #204]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	4a32      	ldr	r2, [pc, #200]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b728:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	e057      	b.n	800b7de <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b734:	d90a      	bls.n	800b74c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800b736:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4313      	orrs	r3, r2
 800b742:	4a2a      	ldr	r2, [pc, #168]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b748:	60d3      	str	r3, [r2, #12]
 800b74a:	e007      	b.n	800b75c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800b74c:	4b27      	ldr	r3, [pc, #156]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800b754:	4925      	ldr	r1, [pc, #148]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4313      	orrs	r3, r2
 800b75a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b75c:	4b24      	ldr	r3, [pc, #144]	@ (800b7f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a24      	ldr	r2, [pc, #144]	@ (800b7f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b762:	fba2 2303 	umull	r2, r3, r2, r3
 800b766:	099b      	lsrs	r3, r3, #6
 800b768:	2232      	movs	r2, #50	@ 0x32
 800b76a:	fb02 f303 	mul.w	r3, r2, r3
 800b76e:	4a21      	ldr	r2, [pc, #132]	@ (800b7f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b770:	fba2 2303 	umull	r2, r3, r2, r3
 800b774:	099b      	lsrs	r3, r3, #6
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b77a:	e002      	b.n	800b782 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3b01      	subs	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b782:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d102      	bne.n	800b794 <HAL_PWREx_ControlVoltageScaling+0x98>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1f3      	bne.n	800b77c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d01b      	beq.n	800b7d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b79a:	4b15      	ldr	r3, [pc, #84]	@ (800b7f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a15      	ldr	r2, [pc, #84]	@ (800b7f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a4:	099b      	lsrs	r3, r3, #6
 800b7a6:	2232      	movs	r2, #50	@ 0x32
 800b7a8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ac:	4a11      	ldr	r2, [pc, #68]	@ (800b7f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b2:	099b      	lsrs	r3, r3, #6
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b7b8:	e002      	b.n	800b7c0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f3      	bne.n	800b7ba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e000      	b.n	800b7de <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	46020800 	.word	0x46020800
 800b7f0:	200000d4 	.word	0x200000d4
 800b7f4:	10624dd3 	.word	0x10624dd3

0800b7f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b7fc:	4b04      	ldr	r3, [pc, #16]	@ (800b810 <HAL_PWREx_GetVoltageRange+0x18>)
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b804:	4618      	mov	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	46020800 	.word	0x46020800

0800b814 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800b814:	b480      	push	{r7}
 800b816:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800b818:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	4a04      	ldr	r2, [pc, #16]	@ (800b830 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b81e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b822:	6113      	str	r3, [r2, #16]
}
 800b824:	bf00      	nop
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	46020800 	.word	0x46020800

0800b834 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800b838:	4b05      	ldr	r3, [pc, #20]	@ (800b850 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83c:	4a04      	ldr	r2, [pc, #16]	@ (800b850 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800b844:	bf00      	nop
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	46020800 	.word	0x46020800

0800b854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08e      	sub	sp, #56	@ 0x38
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d102      	bne.n	800b86e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	f000 bec8 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b86e:	4b99      	ldr	r3, [pc, #612]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f003 030c 	and.w	r3, r3, #12
 800b876:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b878:	4b96      	ldr	r3, [pc, #600]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 0310 	and.w	r3, r3, #16
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 816c 	beq.w	800bb68 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b892:	2b00      	cmp	r3, #0
 800b894:	d007      	beq.n	800b8a6 <HAL_RCC_OscConfig+0x52>
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	2b0c      	cmp	r3, #12
 800b89a:	f040 80de 	bne.w	800ba5a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	f040 80da 	bne.w	800ba5a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d102      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f000 bea5 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8b8:	4b86      	ldr	r3, [pc, #536]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d004      	beq.n	800b8ce <HAL_RCC_OscConfig+0x7a>
 800b8c4:	4b83      	ldr	r3, [pc, #524]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b8cc:	e005      	b.n	800b8da <HAL_RCC_OscConfig+0x86>
 800b8ce:	4b81      	ldr	r3, [pc, #516]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b8d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b8d4:	041b      	lsls	r3, r3, #16
 800b8d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d255      	bcs.n	800b98a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 f9d9 	bl	800cca0 <RCC_SetFlashLatencyFromMSIRange>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f000 be82 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b8fa:	4b76      	ldr	r3, [pc, #472]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	4a75      	ldr	r2, [pc, #468]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b900:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b904:	6093      	str	r3, [r2, #8]
 800b906:	4b73      	ldr	r3, [pc, #460]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b912:	4970      	ldr	r1, [pc, #448]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b914:	4313      	orrs	r3, r2
 800b916:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b920:	d309      	bcc.n	800b936 <HAL_RCC_OscConfig+0xe2>
 800b922:	4b6c      	ldr	r3, [pc, #432]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	f023 021f 	bic.w	r2, r3, #31
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	4969      	ldr	r1, [pc, #420]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b930:	4313      	orrs	r3, r2
 800b932:	60cb      	str	r3, [r1, #12]
 800b934:	e07e      	b.n	800ba34 <HAL_RCC_OscConfig+0x1e0>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da0a      	bge.n	800b954 <HAL_RCC_OscConfig+0x100>
 800b93e:	4b65      	ldr	r3, [pc, #404]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	015b      	lsls	r3, r3, #5
 800b94c:	4961      	ldr	r1, [pc, #388]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	60cb      	str	r3, [r1, #12]
 800b952:	e06f      	b.n	800ba34 <HAL_RCC_OscConfig+0x1e0>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b95c:	d30a      	bcc.n	800b974 <HAL_RCC_OscConfig+0x120>
 800b95e:	4b5d      	ldr	r3, [pc, #372]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	029b      	lsls	r3, r3, #10
 800b96c:	4959      	ldr	r1, [pc, #356]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	60cb      	str	r3, [r1, #12]
 800b972:	e05f      	b.n	800ba34 <HAL_RCC_OscConfig+0x1e0>
 800b974:	4b57      	ldr	r3, [pc, #348]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	03db      	lsls	r3, r3, #15
 800b982:	4954      	ldr	r1, [pc, #336]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b984:	4313      	orrs	r3, r2
 800b986:	60cb      	str	r3, [r1, #12]
 800b988:	e054      	b.n	800ba34 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b98a:	4b52      	ldr	r3, [pc, #328]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	4a51      	ldr	r2, [pc, #324]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b990:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b994:	6093      	str	r3, [r2, #8]
 800b996:	4b4f      	ldr	r3, [pc, #316]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a2:	494c      	ldr	r1, [pc, #304]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b9b0:	d309      	bcc.n	800b9c6 <HAL_RCC_OscConfig+0x172>
 800b9b2:	4b48      	ldr	r3, [pc, #288]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	f023 021f 	bic.w	r2, r3, #31
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	4945      	ldr	r1, [pc, #276]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	60cb      	str	r3, [r1, #12]
 800b9c4:	e028      	b.n	800ba18 <HAL_RCC_OscConfig+0x1c4>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	da0a      	bge.n	800b9e4 <HAL_RCC_OscConfig+0x190>
 800b9ce:	4b41      	ldr	r3, [pc, #260]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	015b      	lsls	r3, r3, #5
 800b9dc:	493d      	ldr	r1, [pc, #244]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	60cb      	str	r3, [r1, #12]
 800b9e2:	e019      	b.n	800ba18 <HAL_RCC_OscConfig+0x1c4>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ec:	d30a      	bcc.n	800ba04 <HAL_RCC_OscConfig+0x1b0>
 800b9ee:	4b39      	ldr	r3, [pc, #228]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	029b      	lsls	r3, r3, #10
 800b9fc:	4935      	ldr	r1, [pc, #212]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	60cb      	str	r3, [r1, #12]
 800ba02:	e009      	b.n	800ba18 <HAL_RCC_OscConfig+0x1c4>
 800ba04:	4b33      	ldr	r3, [pc, #204]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a1b      	ldr	r3, [r3, #32]
 800ba10:	03db      	lsls	r3, r3, #15
 800ba12:	4930      	ldr	r1, [pc, #192]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba14:	4313      	orrs	r3, r2
 800ba16:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 f93c 	bl	800cca0 <RCC_SetFlashLatencyFromMSIRange>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f000 bde5 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800ba34:	f001 f8de 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ba38:	4b27      	ldr	r3, [pc, #156]	@ (800bad8 <HAL_RCC_OscConfig+0x284>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fd fbab 	bl	8009198 <HAL_InitTick>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800ba48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 808a 	beq.w	800bb66 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800ba52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba56:	f000 bdd2 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d066      	beq.n	800bb30 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ba62:	4b1c      	ldr	r3, [pc, #112]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a1b      	ldr	r2, [pc, #108]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba68:	f043 0301 	orr.w	r3, r3, #1
 800ba6c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ba6e:	f7fd fc1d 	bl	80092ac <HAL_GetTick>
 800ba72:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ba74:	e009      	b.n	800ba8a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba76:	f7fd fc19 	bl	80092ac <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d902      	bls.n	800ba8a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	f000 bdba 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ba8a:	4b12      	ldr	r3, [pc, #72]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0304 	and.w	r3, r3, #4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0ef      	beq.n	800ba76 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ba96:	4b0f      	ldr	r3, [pc, #60]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800ba9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800baa0:	6093      	str	r3, [r2, #8]
 800baa2:	4b0c      	ldr	r3, [pc, #48]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baae:	4909      	ldr	r1, [pc, #36]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800babc:	d30e      	bcc.n	800badc <HAL_RCC_OscConfig+0x288>
 800babe:	4b05      	ldr	r3, [pc, #20]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	f023 021f 	bic.w	r2, r3, #31
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	4902      	ldr	r1, [pc, #8]	@ (800bad4 <HAL_RCC_OscConfig+0x280>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	60cb      	str	r3, [r1, #12]
 800bad0:	e04a      	b.n	800bb68 <HAL_RCC_OscConfig+0x314>
 800bad2:	bf00      	nop
 800bad4:	46020c00 	.word	0x46020c00
 800bad8:	200000d8 	.word	0x200000d8
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da0a      	bge.n	800bafa <HAL_RCC_OscConfig+0x2a6>
 800bae4:	4b98      	ldr	r3, [pc, #608]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a1b      	ldr	r3, [r3, #32]
 800baf0:	015b      	lsls	r3, r3, #5
 800baf2:	4995      	ldr	r1, [pc, #596]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60cb      	str	r3, [r1, #12]
 800baf8:	e036      	b.n	800bb68 <HAL_RCC_OscConfig+0x314>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb02:	d30a      	bcc.n	800bb1a <HAL_RCC_OscConfig+0x2c6>
 800bb04:	4b90      	ldr	r3, [pc, #576]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	029b      	lsls	r3, r3, #10
 800bb12:	498d      	ldr	r1, [pc, #564]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60cb      	str	r3, [r1, #12]
 800bb18:	e026      	b.n	800bb68 <HAL_RCC_OscConfig+0x314>
 800bb1a:	4b8b      	ldr	r3, [pc, #556]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	03db      	lsls	r3, r3, #15
 800bb28:	4987      	ldr	r1, [pc, #540]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60cb      	str	r3, [r1, #12]
 800bb2e:	e01b      	b.n	800bb68 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800bb30:	4b85      	ldr	r3, [pc, #532]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a84      	ldr	r2, [pc, #528]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb36:	f023 0301 	bic.w	r3, r3, #1
 800bb3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bb3c:	f7fd fbb6 	bl	80092ac <HAL_GetTick>
 800bb40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bb42:	e009      	b.n	800bb58 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb44:	f7fd fbb2 	bl	80092ac <HAL_GetTick>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d902      	bls.n	800bb58 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	f000 bd53 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bb58:	4b7b      	ldr	r3, [pc, #492]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1ef      	bne.n	800bb44 <HAL_RCC_OscConfig+0x2f0>
 800bb64:	e000      	b.n	800bb68 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bb66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 808b 	beq.w	800bc8c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb78:	2b08      	cmp	r3, #8
 800bb7a:	d005      	beq.n	800bb88 <HAL_RCC_OscConfig+0x334>
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	2b0c      	cmp	r3, #12
 800bb80:	d109      	bne.n	800bb96 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb84:	2b03      	cmp	r3, #3
 800bb86:	d106      	bne.n	800bb96 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d17d      	bne.n	800bc8c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	f000 bd34 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb9e:	d106      	bne.n	800bbae <HAL_RCC_OscConfig+0x35a>
 800bba0:	4b69      	ldr	r3, [pc, #420]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a68      	ldr	r2, [pc, #416]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	e041      	b.n	800bc32 <HAL_RCC_OscConfig+0x3de>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bbb6:	d112      	bne.n	800bbde <HAL_RCC_OscConfig+0x38a>
 800bbb8:	4b63      	ldr	r3, [pc, #396]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a62      	ldr	r2, [pc, #392]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	4b60      	ldr	r3, [pc, #384]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a5f      	ldr	r2, [pc, #380]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	4b5d      	ldr	r3, [pc, #372]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a5c      	ldr	r2, [pc, #368]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	e029      	b.n	800bc32 <HAL_RCC_OscConfig+0x3de>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800bbe6:	d112      	bne.n	800bc0e <HAL_RCC_OscConfig+0x3ba>
 800bbe8:	4b57      	ldr	r3, [pc, #348]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a56      	ldr	r2, [pc, #344]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	4b54      	ldr	r3, [pc, #336]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a53      	ldr	r2, [pc, #332]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bbfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	4b51      	ldr	r3, [pc, #324]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a50      	ldr	r2, [pc, #320]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	e011      	b.n	800bc32 <HAL_RCC_OscConfig+0x3de>
 800bc0e:	4b4e      	ldr	r3, [pc, #312]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a4d      	ldr	r2, [pc, #308]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	4b4b      	ldr	r3, [pc, #300]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a4a      	ldr	r2, [pc, #296]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc24:	6013      	str	r3, [r2, #0]
 800bc26:	4b48      	ldr	r3, [pc, #288]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a47      	ldr	r2, [pc, #284]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bc30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d014      	beq.n	800bc64 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800bc3a:	f7fd fb37 	bl	80092ac <HAL_GetTick>
 800bc3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc40:	e009      	b.n	800bc56 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc42:	f7fd fb33 	bl	80092ac <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	2b64      	cmp	r3, #100	@ 0x64
 800bc4e:	d902      	bls.n	800bc56 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	f000 bcd4 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc56:	4b3c      	ldr	r3, [pc, #240]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0ef      	beq.n	800bc42 <HAL_RCC_OscConfig+0x3ee>
 800bc62:	e013      	b.n	800bc8c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800bc64:	f7fd fb22 	bl	80092ac <HAL_GetTick>
 800bc68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc6a:	e009      	b.n	800bc80 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc6c:	f7fd fb1e 	bl	80092ac <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2b64      	cmp	r3, #100	@ 0x64
 800bc78:	d902      	bls.n	800bc80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	f000 bcbf 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc80:	4b31      	ldr	r3, [pc, #196]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1ef      	bne.n	800bc6c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 0302 	and.w	r3, r3, #2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d05f      	beq.n	800bd58 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d005      	beq.n	800bcaa <HAL_RCC_OscConfig+0x456>
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca0:	2b0c      	cmp	r3, #12
 800bca2:	d114      	bne.n	800bcce <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d111      	bne.n	800bcce <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d102      	bne.n	800bcb8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	f000 bca3 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bcb8:	4b23      	ldr	r3, [pc, #140]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	041b      	lsls	r3, r3, #16
 800bcc6:	4920      	ldr	r1, [pc, #128]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bccc:	e044      	b.n	800bd58 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d024      	beq.n	800bd20 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800bcd6:	4b1c      	ldr	r3, [pc, #112]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a1b      	ldr	r2, [pc, #108]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bcdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bce0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bce2:	f7fd fae3 	bl	80092ac <HAL_GetTick>
 800bce6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bce8:	e009      	b.n	800bcfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcea:	f7fd fadf 	bl	80092ac <HAL_GetTick>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d902      	bls.n	800bcfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	f000 bc80 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bcfe:	4b12      	ldr	r3, [pc, #72]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0ef      	beq.n	800bcea <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	041b      	lsls	r3, r3, #16
 800bd18:	490b      	ldr	r1, [pc, #44]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	610b      	str	r3, [r1, #16]
 800bd1e:	e01b      	b.n	800bd58 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800bd20:	4b09      	ldr	r3, [pc, #36]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a08      	ldr	r2, [pc, #32]	@ (800bd48 <HAL_RCC_OscConfig+0x4f4>)
 800bd26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bd2c:	f7fd fabe 	bl	80092ac <HAL_GetTick>
 800bd30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd32:	e00b      	b.n	800bd4c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd34:	f7fd faba 	bl	80092ac <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d904      	bls.n	800bd4c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800bd42:	2303      	movs	r3, #3
 800bd44:	f000 bc5b 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
 800bd48:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd4c:	4baf      	ldr	r3, [pc, #700]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1ed      	bne.n	800bd34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0308 	and.w	r3, r3, #8
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 80c8 	beq.w	800bef6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800bd66:	2300      	movs	r3, #0
 800bd68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd6c:	4ba7      	ldr	r3, [pc, #668]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bd6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd72:	f003 0304 	and.w	r3, r3, #4
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d111      	bne.n	800bd9e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd7a:	4ba4      	ldr	r3, [pc, #656]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bd7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd80:	4aa2      	ldr	r2, [pc, #648]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bd82:	f043 0304 	orr.w	r3, r3, #4
 800bd86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800bd8a:	4ba0      	ldr	r3, [pc, #640]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bd8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd90:	f003 0304 	and.w	r3, r3, #4
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bd9e:	4b9c      	ldr	r3, [pc, #624]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d119      	bne.n	800bdde <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bdaa:	4b99      	ldr	r3, [pc, #612]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bdac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdae:	4a98      	ldr	r2, [pc, #608]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bdb0:	f043 0301 	orr.w	r3, r3, #1
 800bdb4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bdb6:	f7fd fa79 	bl	80092ac <HAL_GetTick>
 800bdba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bdbc:	e009      	b.n	800bdd2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdbe:	f7fd fa75 	bl	80092ac <HAL_GetTick>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d902      	bls.n	800bdd2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	f000 bc16 	b.w	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bdd2:	4b8f      	ldr	r3, [pc, #572]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0ef      	beq.n	800bdbe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d05f      	beq.n	800bea6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800bde6:	4b89      	ldr	r3, [pc, #548]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bde8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdec:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	699a      	ldr	r2, [r3, #24]
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d037      	beq.n	800be6c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d006      	beq.n	800be14 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e3f4      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d01b      	beq.n	800be56 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800be1e:	4b7b      	ldr	r3, [pc, #492]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be24:	4a79      	ldr	r2, [pc, #484]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be26:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800be2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800be2e:	f7fd fa3d 	bl	80092ac <HAL_GetTick>
 800be32:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be34:	e008      	b.n	800be48 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be36:	f7fd fa39 	bl	80092ac <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	2b05      	cmp	r3, #5
 800be42:	d901      	bls.n	800be48 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800be44:	2303      	movs	r3, #3
 800be46:	e3da      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be48:	4b70      	ldr	r3, [pc, #448]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1ef      	bne.n	800be36 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800be56:	4b6d      	ldr	r3, [pc, #436]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	4969      	ldr	r1, [pc, #420]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be66:	4313      	orrs	r3, r2
 800be68:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800be6c:	4b67      	ldr	r3, [pc, #412]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be72:	4a66      	ldr	r2, [pc, #408]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800be7c:	f7fd fa16 	bl	80092ac <HAL_GetTick>
 800be80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be82:	e008      	b.n	800be96 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be84:	f7fd fa12 	bl	80092ac <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	2b05      	cmp	r3, #5
 800be90:	d901      	bls.n	800be96 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e3b3      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be96:	4b5d      	ldr	r3, [pc, #372]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800be98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0ef      	beq.n	800be84 <HAL_RCC_OscConfig+0x630>
 800bea4:	e01b      	b.n	800bede <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800bea6:	4b59      	ldr	r3, [pc, #356]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800beac:	4a57      	ldr	r2, [pc, #348]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800beae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800beb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800beb6:	f7fd f9f9 	bl	80092ac <HAL_GetTick>
 800beba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800bebc:	e008      	b.n	800bed0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bebe:	f7fd f9f5 	bl	80092ac <HAL_GetTick>
 800bec2:	4602      	mov	r2, r0
 800bec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	2b05      	cmp	r3, #5
 800beca:	d901      	bls.n	800bed0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800becc:	2303      	movs	r3, #3
 800bece:	e396      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800bed0:	4b4e      	ldr	r3, [pc, #312]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1ef      	bne.n	800bebe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bede:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d107      	bne.n	800bef6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bee6:	4b49      	ldr	r3, [pc, #292]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800beec:	4a47      	ldr	r2, [pc, #284]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800beee:	f023 0304 	bic.w	r3, r3, #4
 800bef2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0304 	and.w	r3, r3, #4
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 8111 	beq.w	800c126 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800bf04:	2300      	movs	r3, #0
 800bf06:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf0a:	4b40      	ldr	r3, [pc, #256]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bf0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf10:	f003 0304 	and.w	r3, r3, #4
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d111      	bne.n	800bf3c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf18:	4b3c      	ldr	r3, [pc, #240]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bf1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf1e:	4a3b      	ldr	r2, [pc, #236]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bf20:	f043 0304 	orr.w	r3, r3, #4
 800bf24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800bf28:	4b38      	ldr	r3, [pc, #224]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bf2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf2e:	f003 0304 	and.w	r3, r3, #4
 800bf32:	613b      	str	r3, [r7, #16]
 800bf34:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800bf36:	2301      	movs	r3, #1
 800bf38:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf3c:	4b34      	ldr	r3, [pc, #208]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d118      	bne.n	800bf7a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bf48:	4b31      	ldr	r3, [pc, #196]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4c:	4a30      	ldr	r2, [pc, #192]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bf4e:	f043 0301 	orr.w	r3, r3, #1
 800bf52:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf54:	f7fd f9aa 	bl	80092ac <HAL_GetTick>
 800bf58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf5a:	e008      	b.n	800bf6e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf5c:	f7fd f9a6 	bl	80092ac <HAL_GetTick>
 800bf60:	4602      	mov	r2, r0
 800bf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d901      	bls.n	800bf6e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e347      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf6e:	4b28      	ldr	r3, [pc, #160]	@ (800c010 <HAL_RCC_OscConfig+0x7bc>)
 800bf70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0f0      	beq.n	800bf5c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01f      	beq.n	800bfc6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d010      	beq.n	800bfb4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bf92:	4b1e      	ldr	r3, [pc, #120]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bf94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf98:	4a1c      	ldr	r2, [pc, #112]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bf9a:	f043 0304 	orr.w	r3, r3, #4
 800bf9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfa2:	4b1a      	ldr	r3, [pc, #104]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfa8:	4a18      	ldr	r2, [pc, #96]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfb2:	e018      	b.n	800bfe6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfb4:	4b15      	ldr	r3, [pc, #84]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfba:	4a14      	ldr	r2, [pc, #80]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfbc:	f043 0301 	orr.w	r3, r3, #1
 800bfc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfc4:	e00f      	b.n	800bfe6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfc6:	4b11      	ldr	r3, [pc, #68]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfcc:	4a0f      	ldr	r2, [pc, #60]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfce:	f023 0301 	bic.w	r3, r3, #1
 800bfd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bfd6:	4b0d      	ldr	r3, [pc, #52]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfdc:	4a0b      	ldr	r2, [pc, #44]	@ (800c00c <HAL_RCC_OscConfig+0x7b8>)
 800bfde:	f023 0304 	bic.w	r3, r3, #4
 800bfe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d057      	beq.n	800c09e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800bfee:	f7fd f95d 	bl	80092ac <HAL_GetTick>
 800bff2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bff4:	e00e      	b.n	800c014 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bff6:	f7fd f959 	bl	80092ac <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c004:	4293      	cmp	r3, r2
 800c006:	d905      	bls.n	800c014 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e2f8      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
 800c00c:	46020c00 	.word	0x46020c00
 800c010:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c014:	4b9c      	ldr	r3, [pc, #624]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0e9      	beq.n	800bff6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d01b      	beq.n	800c066 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c02e:	4b96      	ldr	r3, [pc, #600]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c034:	4a94      	ldr	r2, [pc, #592]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c03a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c03e:	e00a      	b.n	800c056 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c040:	f7fd f934 	bl	80092ac <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c04e:	4293      	cmp	r3, r2
 800c050:	d901      	bls.n	800c056 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c052:	2303      	movs	r3, #3
 800c054:	e2d3      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c056:	4b8c      	ldr	r3, [pc, #560]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c05c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0ed      	beq.n	800c040 <HAL_RCC_OscConfig+0x7ec>
 800c064:	e053      	b.n	800c10e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c066:	4b88      	ldr	r3, [pc, #544]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c06c:	4a86      	ldr	r2, [pc, #536]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c06e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c072:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c076:	e00a      	b.n	800c08e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c078:	f7fd f918 	bl	80092ac <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c086:	4293      	cmp	r3, r2
 800c088:	d901      	bls.n	800c08e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e2b7      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c08e:	4b7e      	ldr	r3, [pc, #504]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1ed      	bne.n	800c078 <HAL_RCC_OscConfig+0x824>
 800c09c:	e037      	b.n	800c10e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c09e:	f7fd f905 	bl	80092ac <HAL_GetTick>
 800c0a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c0a4:	e00a      	b.n	800c0bc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0a6:	f7fd f901 	bl	80092ac <HAL_GetTick>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d901      	bls.n	800c0bc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e2a0      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c0bc:	4b72      	ldr	r3, [pc, #456]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c0be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0c2:	f003 0302 	and.w	r3, r3, #2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1ed      	bne.n	800c0a6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c0ca:	4b6f      	ldr	r3, [pc, #444]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c0cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d01a      	beq.n	800c10e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c0d8:	4b6b      	ldr	r3, [pc, #428]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c0da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0de:	4a6a      	ldr	r2, [pc, #424]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c0e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c0e8:	e00a      	b.n	800c100 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0ea:	f7fd f8df 	bl	80092ac <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d901      	bls.n	800c100 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e27e      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c100:	4b61      	ldr	r3, [pc, #388]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1ed      	bne.n	800c0ea <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c10e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800c112:	2b01      	cmp	r3, #1
 800c114:	d107      	bne.n	800c126 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c116:	4b5c      	ldr	r3, [pc, #368]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c11c:	4a5a      	ldr	r2, [pc, #360]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c11e:	f023 0304 	bic.w	r3, r3, #4
 800c122:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d036      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d019      	beq.n	800c16e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c13a:	4b53      	ldr	r3, [pc, #332]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a52      	ldr	r2, [pc, #328]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c144:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c146:	f7fd f8b1 	bl	80092ac <HAL_GetTick>
 800c14a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c14c:	e008      	b.n	800c160 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c14e:	f7fd f8ad 	bl	80092ac <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e24e      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c160:	4b49      	ldr	r3, [pc, #292]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0f0      	beq.n	800c14e <HAL_RCC_OscConfig+0x8fa>
 800c16c:	e018      	b.n	800c1a0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c16e:	4b46      	ldr	r3, [pc, #280]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a45      	ldr	r2, [pc, #276]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c178:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c17a:	f7fd f897 	bl	80092ac <HAL_GetTick>
 800c17e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c180:	e008      	b.n	800c194 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c182:	f7fd f893 	bl	80092ac <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d901      	bls.n	800c194 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e234      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c194:	4b3c      	ldr	r3, [pc, #240]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1f0      	bne.n	800c182 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d036      	beq.n	800c21a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d019      	beq.n	800c1e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c1b4:	4b34      	ldr	r3, [pc, #208]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a33      	ldr	r2, [pc, #204]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c1ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c1be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c1c0:	f7fd f874 	bl	80092ac <HAL_GetTick>
 800c1c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c1c6:	e008      	b.n	800c1da <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c1c8:	f7fd f870 	bl	80092ac <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d901      	bls.n	800c1da <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e211      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c1da:	4b2b      	ldr	r3, [pc, #172]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0f0      	beq.n	800c1c8 <HAL_RCC_OscConfig+0x974>
 800c1e6:	e018      	b.n	800c21a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c1e8:	4b27      	ldr	r3, [pc, #156]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a26      	ldr	r2, [pc, #152]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c1ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c1f4:	f7fd f85a 	bl	80092ac <HAL_GetTick>
 800c1f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c1fa:	e008      	b.n	800c20e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c1fc:	f7fd f856 	bl	80092ac <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b02      	cmp	r3, #2
 800c208:	d901      	bls.n	800c20e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e1f7      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c20e:	4b1e      	ldr	r3, [pc, #120]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f0      	bne.n	800c1fc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	d07f      	beq.n	800c326 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d062      	beq.n	800c2f4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c22e:	4b16      	ldr	r3, [pc, #88]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	4a15      	ldr	r2, [pc, #84]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c234:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c238:	6093      	str	r3, [r2, #8]
 800c23a:	4b13      	ldr	r3, [pc, #76]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c246:	4910      	ldr	r1, [pc, #64]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c248:	4313      	orrs	r3, r2
 800c24a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c250:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c254:	d309      	bcc.n	800c26a <HAL_RCC_OscConfig+0xa16>
 800c256:	4b0c      	ldr	r3, [pc, #48]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	f023 021f 	bic.w	r2, r3, #31
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	4909      	ldr	r1, [pc, #36]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c264:	4313      	orrs	r3, r2
 800c266:	60cb      	str	r3, [r1, #12]
 800c268:	e02a      	b.n	800c2c0 <HAL_RCC_OscConfig+0xa6c>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da0c      	bge.n	800c28c <HAL_RCC_OscConfig+0xa38>
 800c272:	4b05      	ldr	r3, [pc, #20]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	015b      	lsls	r3, r3, #5
 800c280:	4901      	ldr	r1, [pc, #4]	@ (800c288 <HAL_RCC_OscConfig+0xa34>)
 800c282:	4313      	orrs	r3, r2
 800c284:	60cb      	str	r3, [r1, #12]
 800c286:	e01b      	b.n	800c2c0 <HAL_RCC_OscConfig+0xa6c>
 800c288:	46020c00 	.word	0x46020c00
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c294:	d30a      	bcc.n	800c2ac <HAL_RCC_OscConfig+0xa58>
 800c296:	4ba1      	ldr	r3, [pc, #644]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	029b      	lsls	r3, r3, #10
 800c2a4:	499d      	ldr	r1, [pc, #628]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	60cb      	str	r3, [r1, #12]
 800c2aa:	e009      	b.n	800c2c0 <HAL_RCC_OscConfig+0xa6c>
 800c2ac:	4b9b      	ldr	r3, [pc, #620]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	03db      	lsls	r3, r3, #15
 800c2ba:	4998      	ldr	r1, [pc, #608]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c2c0:	4b96      	ldr	r3, [pc, #600]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a95      	ldr	r2, [pc, #596]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2c6:	f043 0310 	orr.w	r3, r3, #16
 800c2ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c2cc:	f7fc ffee 	bl	80092ac <HAL_GetTick>
 800c2d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c2d2:	e008      	b.n	800c2e6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c2d4:	f7fc ffea 	bl	80092ac <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d901      	bls.n	800c2e6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	e18b      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c2e6:	4b8d      	ldr	r3, [pc, #564]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 0320 	and.w	r3, r3, #32
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0f0      	beq.n	800c2d4 <HAL_RCC_OscConfig+0xa80>
 800c2f2:	e018      	b.n	800c326 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c2f4:	4b89      	ldr	r3, [pc, #548]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a88      	ldr	r2, [pc, #544]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c2fa:	f023 0310 	bic.w	r3, r3, #16
 800c2fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c300:	f7fc ffd4 	bl	80092ac <HAL_GetTick>
 800c304:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c306:	e008      	b.n	800c31a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c308:	f7fc ffd0 	bl	80092ac <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	2b02      	cmp	r3, #2
 800c314:	d901      	bls.n	800c31a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e171      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c31a:	4b80      	ldr	r3, [pc, #512]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1f0      	bne.n	800c308 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 8166 	beq.w	800c5fc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c330:	2300      	movs	r3, #0
 800c332:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c336:	4b79      	ldr	r3, [pc, #484]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	f003 030c 	and.w	r3, r3, #12
 800c33e:	2b0c      	cmp	r3, #12
 800c340:	f000 80f2 	beq.w	800c528 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c348:	2b02      	cmp	r3, #2
 800c34a:	f040 80c5 	bne.w	800c4d8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c34e:	4b73      	ldr	r3, [pc, #460]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a72      	ldr	r2, [pc, #456]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c354:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c358:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c35a:	f7fc ffa7 	bl	80092ac <HAL_GetTick>
 800c35e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c360:	e008      	b.n	800c374 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c362:	f7fc ffa3 	bl	80092ac <HAL_GetTick>
 800c366:	4602      	mov	r2, r0
 800c368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d901      	bls.n	800c374 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e144      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c374:	4b69      	ldr	r3, [pc, #420]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1f0      	bne.n	800c362 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c380:	4b66      	ldr	r3, [pc, #408]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c386:	f003 0304 	and.w	r3, r3, #4
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d111      	bne.n	800c3b2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c38e:	4b63      	ldr	r3, [pc, #396]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c394:	4a61      	ldr	r2, [pc, #388]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c396:	f043 0304 	orr.w	r3, r3, #4
 800c39a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c39e:	4b5f      	ldr	r3, [pc, #380]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3a4:	f003 0304 	and.w	r3, r3, #4
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c3b2:	4b5b      	ldr	r3, [pc, #364]	@ (800c520 <HAL_RCC_OscConfig+0xccc>)
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3be:	d102      	bne.n	800c3c6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c3c6:	4b56      	ldr	r3, [pc, #344]	@ (800c520 <HAL_RCC_OscConfig+0xccc>)
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	4a55      	ldr	r2, [pc, #340]	@ (800c520 <HAL_RCC_OscConfig+0xccc>)
 800c3cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c3d0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c3d2:	4b52      	ldr	r3, [pc, #328]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3da:	f023 0303 	bic.w	r3, r3, #3
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c3e6:	3a01      	subs	r2, #1
 800c3e8:	0212      	lsls	r2, r2, #8
 800c3ea:	4311      	orrs	r1, r2
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	494a      	ldr	r1, [pc, #296]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c3f8:	4b48      	ldr	r3, [pc, #288]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c3fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3fc:	4b49      	ldr	r3, [pc, #292]	@ (800c524 <HAL_RCC_OscConfig+0xcd0>)
 800c3fe:	4013      	ands	r3, r2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c404:	3a01      	subs	r2, #1
 800c406:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c40e:	3a01      	subs	r2, #1
 800c410:	0252      	lsls	r2, r2, #9
 800c412:	b292      	uxth	r2, r2
 800c414:	4311      	orrs	r1, r2
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c41a:	3a01      	subs	r2, #1
 800c41c:	0412      	lsls	r2, r2, #16
 800c41e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c422:	4311      	orrs	r1, r2
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c428:	3a01      	subs	r2, #1
 800c42a:	0612      	lsls	r2, r2, #24
 800c42c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c430:	430a      	orrs	r2, r1
 800c432:	493a      	ldr	r1, [pc, #232]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c434:	4313      	orrs	r3, r2
 800c436:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c438:	4b38      	ldr	r3, [pc, #224]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43c:	4a37      	ldr	r2, [pc, #220]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c43e:	f023 0310 	bic.w	r3, r3, #16
 800c442:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c448:	4a34      	ldr	r2, [pc, #208]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c44e:	4b33      	ldr	r3, [pc, #204]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c452:	4a32      	ldr	r2, [pc, #200]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c454:	f043 0310 	orr.w	r3, r3, #16
 800c458:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800c45a:	4b30      	ldr	r3, [pc, #192]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45e:	f023 020c 	bic.w	r2, r3, #12
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c466:	492d      	ldr	r1, [pc, #180]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c468:	4313      	orrs	r3, r2
 800c46a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800c46c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c470:	2b01      	cmp	r3, #1
 800c472:	d105      	bne.n	800c480 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c474:	4b2a      	ldr	r3, [pc, #168]	@ (800c520 <HAL_RCC_OscConfig+0xccc>)
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	4a29      	ldr	r2, [pc, #164]	@ (800c520 <HAL_RCC_OscConfig+0xccc>)
 800c47a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c47e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800c480:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800c484:	2b01      	cmp	r3, #1
 800c486:	d107      	bne.n	800c498 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800c488:	4b24      	ldr	r3, [pc, #144]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c48a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c48e:	4a23      	ldr	r2, [pc, #140]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c490:	f023 0304 	bic.w	r3, r3, #4
 800c494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800c498:	4b20      	ldr	r3, [pc, #128]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a1f      	ldr	r2, [pc, #124]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c49e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c4a4:	f7fc ff02 	bl	80092ac <HAL_GetTick>
 800c4a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c4aa:	e008      	b.n	800c4be <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4ac:	f7fc fefe 	bl	80092ac <HAL_GetTick>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d901      	bls.n	800c4be <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e09f      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c4be:	4b17      	ldr	r3, [pc, #92]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0f0      	beq.n	800c4ac <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c4ca:	4b14      	ldr	r3, [pc, #80]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ce:	4a13      	ldr	r2, [pc, #76]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c4d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c4d4:	6293      	str	r3, [r2, #40]	@ 0x28
 800c4d6:	e091      	b.n	800c5fc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c4d8:	4b10      	ldr	r3, [pc, #64]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a0f      	ldr	r2, [pc, #60]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c4de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c4e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c4e4:	f7fc fee2 	bl	80092ac <HAL_GetTick>
 800c4e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c4ea:	e008      	b.n	800c4fe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4ec:	f7fc fede 	bl	80092ac <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d901      	bls.n	800c4fe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	e07f      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c4fe:	4b07      	ldr	r3, [pc, #28]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1f0      	bne.n	800c4ec <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c50a:	4b04      	ldr	r3, [pc, #16]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50e:	4a03      	ldr	r2, [pc, #12]	@ (800c51c <HAL_RCC_OscConfig+0xcc8>)
 800c510:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800c514:	f023 0303 	bic.w	r3, r3, #3
 800c518:	6293      	str	r3, [r2, #40]	@ 0x28
 800c51a:	e06f      	b.n	800c5fc <HAL_RCC_OscConfig+0xda8>
 800c51c:	46020c00 	.word	0x46020c00
 800c520:	46020800 	.word	0x46020800
 800c524:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c528:	4b37      	ldr	r3, [pc, #220]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c52e:	4b36      	ldr	r3, [pc, #216]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c532:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d039      	beq.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	f003 0203 	and.w	r2, r3, #3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c546:	429a      	cmp	r2, r3
 800c548:	d132      	bne.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	0a1b      	lsrs	r3, r3, #8
 800c54e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c556:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c558:	429a      	cmp	r2, r3
 800c55a:	d129      	bne.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c566:	429a      	cmp	r2, r3
 800c568:	d122      	bne.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c574:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c576:	429a      	cmp	r2, r3
 800c578:	d11a      	bne.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	0a5b      	lsrs	r3, r3, #9
 800c57e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c586:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c588:	429a      	cmp	r2, r3
 800c58a:	d111      	bne.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	0c1b      	lsrs	r3, r3, #16
 800c590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c598:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d108      	bne.n	800c5b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	0e1b      	lsrs	r3, r3, #24
 800c5a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5aa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d001      	beq.n	800c5b4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e024      	b.n	800c5fe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c5b4:	4b14      	ldr	r3, [pc, #80]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b8:	08db      	lsrs	r3, r3, #3
 800c5ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d01a      	beq.n	800c5fc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c5c6:	4b10      	ldr	r3, [pc, #64]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ca:	4a0f      	ldr	r2, [pc, #60]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c5cc:	f023 0310 	bic.w	r3, r3, #16
 800c5d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5d2:	f7fc fe6b 	bl	80092ac <HAL_GetTick>
 800c5d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800c5d8:	bf00      	nop
 800c5da:	f7fc fe67 	bl	80092ac <HAL_GetTick>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d0f9      	beq.n	800c5da <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5ea:	4a07      	ldr	r2, [pc, #28]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c5f0:	4b05      	ldr	r3, [pc, #20]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f4:	4a04      	ldr	r2, [pc, #16]	@ (800c608 <HAL_RCC_OscConfig+0xdb4>)
 800c5f6:	f043 0310 	orr.w	r3, r3, #16
 800c5fa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3738      	adds	r7, #56	@ 0x38
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	46020c00 	.word	0x46020c00

0800c60c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e1d9      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c620:	4b9b      	ldr	r3, [pc, #620]	@ (800c890 <HAL_RCC_ClockConfig+0x284>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 030f 	and.w	r3, r3, #15
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d910      	bls.n	800c650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c62e:	4b98      	ldr	r3, [pc, #608]	@ (800c890 <HAL_RCC_ClockConfig+0x284>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f023 020f 	bic.w	r2, r3, #15
 800c636:	4996      	ldr	r1, [pc, #600]	@ (800c890 <HAL_RCC_ClockConfig+0x284>)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c63e:	4b94      	ldr	r3, [pc, #592]	@ (800c890 <HAL_RCC_ClockConfig+0x284>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d001      	beq.n	800c650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e1c1      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 0310 	and.w	r3, r3, #16
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d010      	beq.n	800c67e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	695a      	ldr	r2, [r3, #20]
 800c660:	4b8c      	ldr	r3, [pc, #560]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c664:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c668:	429a      	cmp	r2, r3
 800c66a:	d908      	bls.n	800c67e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800c66c:	4b89      	ldr	r3, [pc, #548]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c670:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	4986      	ldr	r1, [pc, #536]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c67a:	4313      	orrs	r3, r2
 800c67c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 0308 	and.w	r3, r3, #8
 800c686:	2b00      	cmp	r3, #0
 800c688:	d012      	beq.n	800c6b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	691a      	ldr	r2, [r3, #16]
 800c68e:	4b81      	ldr	r3, [pc, #516]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	091b      	lsrs	r3, r3, #4
 800c694:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c698:	429a      	cmp	r2, r3
 800c69a:	d909      	bls.n	800c6b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c69c:	4b7d      	ldr	r3, [pc, #500]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	497a      	ldr	r1, [pc, #488]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0304 	and.w	r3, r3, #4
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d010      	beq.n	800c6de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	4b74      	ldr	r3, [pc, #464]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c6c2:	6a1b      	ldr	r3, [r3, #32]
 800c6c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d908      	bls.n	800c6de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c6cc:	4b71      	ldr	r3, [pc, #452]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	496e      	ldr	r1, [pc, #440]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d010      	beq.n	800c70c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689a      	ldr	r2, [r3, #8]
 800c6ee:	4b69      	ldr	r3, [pc, #420]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	f003 030f 	and.w	r3, r3, #15
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d908      	bls.n	800c70c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c6fa:	4b66      	ldr	r3, [pc, #408]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	f023 020f 	bic.w	r2, r3, #15
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	4963      	ldr	r1, [pc, #396]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c708:	4313      	orrs	r3, r2
 800c70a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 80d2 	beq.w	800c8be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c71a:	2300      	movs	r3, #0
 800c71c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	2b03      	cmp	r3, #3
 800c724:	d143      	bne.n	800c7ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c726:	4b5b      	ldr	r3, [pc, #364]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d110      	bne.n	800c756 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c734:	4b57      	ldr	r3, [pc, #348]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c73a:	4a56      	ldr	r2, [pc, #344]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c73c:	f043 0304 	orr.w	r3, r3, #4
 800c740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c744:	4b53      	ldr	r3, [pc, #332]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c74a:	f003 0304 	and.w	r3, r3, #4
 800c74e:	60bb      	str	r3, [r7, #8]
 800c750:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c752:	2301      	movs	r3, #1
 800c754:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c756:	f7fc fda9 	bl	80092ac <HAL_GetTick>
 800c75a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c75c:	4b4e      	ldr	r3, [pc, #312]	@ (800c898 <HAL_RCC_ClockConfig+0x28c>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00f      	beq.n	800c788 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c768:	e008      	b.n	800c77c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c76a:	f7fc fd9f 	bl	80092ac <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e12b      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c77c:	4b46      	ldr	r3, [pc, #280]	@ (800c898 <HAL_RCC_ClockConfig+0x28c>)
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f0      	beq.n	800c76a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d107      	bne.n	800c79e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c78e:	4b41      	ldr	r3, [pc, #260]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c794:	4a3f      	ldr	r2, [pc, #252]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c796:	f023 0304 	bic.w	r3, r3, #4
 800c79a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c79e:	4b3d      	ldr	r3, [pc, #244]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d121      	bne.n	800c7ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e112      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d107      	bne.n	800c7c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c7b6:	4b37      	ldr	r3, [pc, #220]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d115      	bne.n	800c7ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e106      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d107      	bne.n	800c7de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c7ce:	4b31      	ldr	r3, [pc, #196]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0304 	and.w	r3, r3, #4
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d109      	bne.n	800c7ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e0fa      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7de:	4b2d      	ldr	r3, [pc, #180]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e0f2      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800c7ee:	4b29      	ldr	r3, [pc, #164]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c7f0:	69db      	ldr	r3, [r3, #28]
 800c7f2:	f023 0203 	bic.w	r2, r3, #3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	4926      	ldr	r1, [pc, #152]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800c800:	f7fc fd54 	bl	80092ac <HAL_GetTick>
 800c804:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d112      	bne.n	800c834 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c80e:	e00a      	b.n	800c826 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c810:	f7fc fd4c 	bl	80092ac <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c81e:	4293      	cmp	r3, r2
 800c820:	d901      	bls.n	800c826 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e0d6      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c826:	4b1b      	ldr	r3, [pc, #108]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f003 030c 	and.w	r3, r3, #12
 800c82e:	2b0c      	cmp	r3, #12
 800c830:	d1ee      	bne.n	800c810 <HAL_RCC_ClockConfig+0x204>
 800c832:	e044      	b.n	800c8be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d112      	bne.n	800c862 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c83c:	e00a      	b.n	800c854 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c83e:	f7fc fd35 	bl	80092ac <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d901      	bls.n	800c854 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e0bf      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c854:	4b0f      	ldr	r3, [pc, #60]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	f003 030c 	and.w	r3, r3, #12
 800c85c:	2b08      	cmp	r3, #8
 800c85e:	d1ee      	bne.n	800c83e <HAL_RCC_ClockConfig+0x232>
 800c860:	e02d      	b.n	800c8be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d123      	bne.n	800c8b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c86a:	e00a      	b.n	800c882 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c86c:	f7fc fd1e 	bl	80092ac <HAL_GetTick>
 800c870:	4602      	mov	r2, r0
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d901      	bls.n	800c882 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e0a8      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c882:	4b04      	ldr	r3, [pc, #16]	@ (800c894 <HAL_RCC_ClockConfig+0x288>)
 800c884:	69db      	ldr	r3, [r3, #28]
 800c886:	f003 030c 	and.w	r3, r3, #12
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1ee      	bne.n	800c86c <HAL_RCC_ClockConfig+0x260>
 800c88e:	e016      	b.n	800c8be <HAL_RCC_ClockConfig+0x2b2>
 800c890:	40022000 	.word	0x40022000
 800c894:	46020c00 	.word	0x46020c00
 800c898:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c89c:	f7fc fd06 	bl	80092ac <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d901      	bls.n	800c8b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e090      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c8b2:	4b4a      	ldr	r3, [pc, #296]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c8b4:	69db      	ldr	r3, [r3, #28]
 800c8b6:	f003 030c 	and.w	r3, r3, #12
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d1ee      	bne.n	800c89c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 0302 	and.w	r3, r3, #2
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d010      	beq.n	800c8ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689a      	ldr	r2, [r3, #8]
 800c8ce:	4b43      	ldr	r3, [pc, #268]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	f003 030f 	and.w	r3, r3, #15
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d208      	bcs.n	800c8ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c8da:	4b40      	ldr	r3, [pc, #256]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	f023 020f 	bic.w	r2, r3, #15
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	493d      	ldr	r1, [pc, #244]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c8ec:	4b3c      	ldr	r3, [pc, #240]	@ (800c9e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 030f 	and.w	r3, r3, #15
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d210      	bcs.n	800c91c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8fa:	4b39      	ldr	r3, [pc, #228]	@ (800c9e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f023 020f 	bic.w	r2, r3, #15
 800c902:	4937      	ldr	r1, [pc, #220]	@ (800c9e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	4313      	orrs	r3, r2
 800c908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c90a:	4b35      	ldr	r3, [pc, #212]	@ (800c9e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 030f 	and.w	r3, r3, #15
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d001      	beq.n	800c91c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e05b      	b.n	800c9d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0304 	and.w	r3, r3, #4
 800c924:	2b00      	cmp	r3, #0
 800c926:	d010      	beq.n	800c94a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68da      	ldr	r2, [r3, #12]
 800c92c:	4b2b      	ldr	r3, [pc, #172]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c934:	429a      	cmp	r2, r3
 800c936:	d208      	bcs.n	800c94a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c938:	4b28      	ldr	r3, [pc, #160]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	4925      	ldr	r1, [pc, #148]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c946:	4313      	orrs	r3, r2
 800c948:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f003 0308 	and.w	r3, r3, #8
 800c952:	2b00      	cmp	r3, #0
 800c954:	d012      	beq.n	800c97c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	691a      	ldr	r2, [r3, #16]
 800c95a:	4b20      	ldr	r3, [pc, #128]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	091b      	lsrs	r3, r3, #4
 800c960:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c964:	429a      	cmp	r2, r3
 800c966:	d209      	bcs.n	800c97c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c968:	4b1c      	ldr	r3, [pc, #112]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	011b      	lsls	r3, r3, #4
 800c976:	4919      	ldr	r1, [pc, #100]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c978:	4313      	orrs	r3, r2
 800c97a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0310 	and.w	r3, r3, #16
 800c984:	2b00      	cmp	r3, #0
 800c986:	d010      	beq.n	800c9aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	695a      	ldr	r2, [r3, #20]
 800c98c:	4b13      	ldr	r3, [pc, #76]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c994:	429a      	cmp	r2, r3
 800c996:	d208      	bcs.n	800c9aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800c998:	4b10      	ldr	r3, [pc, #64]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	490d      	ldr	r1, [pc, #52]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c9aa:	f000 f821 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <HAL_RCC_ClockConfig+0x3d0>)
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	f003 030f 	and.w	r3, r3, #15
 800c9b8:	490a      	ldr	r1, [pc, #40]	@ (800c9e4 <HAL_RCC_ClockConfig+0x3d8>)
 800c9ba:	5ccb      	ldrb	r3, [r1, r3]
 800c9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c0:	4a09      	ldr	r2, [pc, #36]	@ (800c9e8 <HAL_RCC_ClockConfig+0x3dc>)
 800c9c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c9c4:	4b09      	ldr	r3, [pc, #36]	@ (800c9ec <HAL_RCC_ClockConfig+0x3e0>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fc fbe5 	bl	8009198 <HAL_InitTick>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73fb      	strb	r3, [r7, #15]

  return status;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	46020c00 	.word	0x46020c00
 800c9e0:	40022000 	.word	0x40022000
 800c9e4:	0818c95c 	.word	0x0818c95c
 800c9e8:	200000d4 	.word	0x200000d4
 800c9ec:	200000d8 	.word	0x200000d8

0800c9f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b08b      	sub	sp, #44	@ 0x2c
 800c9f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9fe:	4b78      	ldr	r3, [pc, #480]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	f003 030c 	and.w	r3, r3, #12
 800ca06:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca08:	4b75      	ldr	r3, [pc, #468]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <HAL_RCC_GetSysClockFreq+0x34>
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b0c      	cmp	r3, #12
 800ca1c:	d121      	bne.n	800ca62 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d11e      	bne.n	800ca62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ca24:	4b6e      	ldr	r3, [pc, #440]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d107      	bne.n	800ca40 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ca30:	4b6b      	ldr	r3, [pc, #428]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca36:	0b1b      	lsrs	r3, r3, #12
 800ca38:	f003 030f 	and.w	r3, r3, #15
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca3e:	e005      	b.n	800ca4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ca40:	4b67      	ldr	r3, [pc, #412]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	0f1b      	lsrs	r3, r3, #28
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ca4c:	4a65      	ldr	r2, [pc, #404]	@ (800cbe4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca54:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d110      	bne.n	800ca7e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca60:	e00d      	b.n	800ca7e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ca62:	4b5f      	ldr	r3, [pc, #380]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	f003 030c 	and.w	r3, r3, #12
 800ca6a:	2b04      	cmp	r3, #4
 800ca6c:	d102      	bne.n	800ca74 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ca6e:	4b5e      	ldr	r3, [pc, #376]	@ (800cbe8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ca70:	623b      	str	r3, [r7, #32]
 800ca72:	e004      	b.n	800ca7e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b08      	cmp	r3, #8
 800ca78:	d101      	bne.n	800ca7e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ca7a:	4b5b      	ldr	r3, [pc, #364]	@ (800cbe8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ca7c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	2b0c      	cmp	r3, #12
 800ca82:	f040 80a5 	bne.w	800cbd0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ca86:	4b56      	ldr	r3, [pc, #344]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8a:	f003 0303 	and.w	r3, r3, #3
 800ca8e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ca90:	4b53      	ldr	r3, [pc, #332]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ca92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca94:	0a1b      	lsrs	r3, r3, #8
 800ca96:	f003 030f 	and.w	r3, r3, #15
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ca9e:	4b50      	ldr	r3, [pc, #320]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa2:	091b      	lsrs	r3, r3, #4
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800caaa:	4b4d      	ldr	r3, [pc, #308]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800caac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caae:	08db      	lsrs	r3, r3, #3
 800cab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d003      	beq.n	800cad4 <HAL_RCC_GetSysClockFreq+0xe4>
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d022      	beq.n	800cb18 <HAL_RCC_GetSysClockFreq+0x128>
 800cad2:	e043      	b.n	800cb5c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cade:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800cbec <HAL_RCC_GetSysClockFreq+0x1fc>
 800cae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae6:	4b3e      	ldr	r3, [pc, #248]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800caf6:	ed97 6a01 	vldr	s12, [r7, #4]
 800cafa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800cbf0 <HAL_RCC_GetSysClockFreq+0x200>
 800cafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb16:	e046      	b.n	800cba6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb22:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800cbec <HAL_RCC_GetSysClockFreq+0x1fc>
 800cb26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb2a:	4b2d      	ldr	r3, [pc, #180]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb3a:	ed97 6a01 	vldr	s12, [r7, #4]
 800cb3e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800cbf0 <HAL_RCC_GetSysClockFreq+0x200>
 800cb42:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb5a:	e024      	b.n	800cba6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	ee07 3a90 	vmov	s15, r3
 800cb6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb74:	4b1a      	ldr	r3, [pc, #104]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cb76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb84:	ed97 6a01 	vldr	s12, [r7, #4]
 800cb88:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800cbf0 <HAL_RCC_GetSysClockFreq+0x200>
 800cb8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb98:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800cba6:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbaa:	0e1b      	lsrs	r3, r3, #24
 800cbac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	ee07 3a90 	vmov	s15, r3
 800cbba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cbbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbca:	ee17 3a90 	vmov	r3, s15
 800cbce:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	372c      	adds	r7, #44	@ 0x2c
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	46020c00 	.word	0x46020c00
 800cbe4:	0818c974 	.word	0x0818c974
 800cbe8:	00f42400 	.word	0x00f42400
 800cbec:	4b742400 	.word	0x4b742400
 800cbf0:	46000000 	.word	0x46000000

0800cbf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cbf8:	f7ff fefa 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	4b07      	ldr	r3, [pc, #28]	@ (800cc1c <HAL_RCC_GetHCLKFreq+0x28>)
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	f003 030f 	and.w	r3, r3, #15
 800cc06:	4906      	ldr	r1, [pc, #24]	@ (800cc20 <HAL_RCC_GetHCLKFreq+0x2c>)
 800cc08:	5ccb      	ldrb	r3, [r1, r3]
 800cc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0e:	4a05      	ldr	r2, [pc, #20]	@ (800cc24 <HAL_RCC_GetHCLKFreq+0x30>)
 800cc10:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800cc12:	4b04      	ldr	r3, [pc, #16]	@ (800cc24 <HAL_RCC_GetHCLKFreq+0x30>)
 800cc14:	681b      	ldr	r3, [r3, #0]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	46020c00 	.word	0x46020c00
 800cc20:	0818c95c 	.word	0x0818c95c
 800cc24:	200000d4 	.word	0x200000d4

0800cc28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800cc2c:	f7ff ffe2 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
 800cc30:	4602      	mov	r2, r0
 800cc32:	4b05      	ldr	r3, [pc, #20]	@ (800cc48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	091b      	lsrs	r3, r3, #4
 800cc38:	f003 0307 	and.w	r3, r3, #7
 800cc3c:	4903      	ldr	r1, [pc, #12]	@ (800cc4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc3e:	5ccb      	ldrb	r3, [r1, r3]
 800cc40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	46020c00 	.word	0x46020c00
 800cc4c:	0818c96c 	.word	0x0818c96c

0800cc50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800cc54:	f7ff ffce 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	0a1b      	lsrs	r3, r3, #8
 800cc60:	f003 0307 	and.w	r3, r3, #7
 800cc64:	4903      	ldr	r1, [pc, #12]	@ (800cc74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc66:	5ccb      	ldrb	r3, [r1, r3]
 800cc68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	46020c00 	.word	0x46020c00
 800cc74:	0818c96c 	.word	0x0818c96c

0800cc78 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800cc7c:	f7ff ffba 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
 800cc80:	4602      	mov	r2, r0
 800cc82:	4b05      	ldr	r3, [pc, #20]	@ (800cc98 <HAL_RCC_GetPCLK3Freq+0x20>)
 800cc84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc86:	091b      	lsrs	r3, r3, #4
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	4903      	ldr	r1, [pc, #12]	@ (800cc9c <HAL_RCC_GetPCLK3Freq+0x24>)
 800cc8e:	5ccb      	ldrb	r3, [r1, r3]
 800cc90:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	46020c00 	.word	0x46020c00
 800cc9c:	0818c96c 	.word	0x0818c96c

0800cca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cca8:	4b3e      	ldr	r3, [pc, #248]	@ (800cda4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ccaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ccb6:	f7fe fd9f 	bl	800b7f8 <HAL_PWREx_GetVoltageRange>
 800ccba:	6178      	str	r0, [r7, #20]
 800ccbc:	e019      	b.n	800ccf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ccbe:	4b39      	ldr	r3, [pc, #228]	@ (800cda4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ccc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccc4:	4a37      	ldr	r2, [pc, #220]	@ (800cda4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ccc6:	f043 0304 	orr.w	r3, r3, #4
 800ccca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ccce:	4b35      	ldr	r3, [pc, #212]	@ (800cda4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ccd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ccdc:	f7fe fd8c 	bl	800b7f8 <HAL_PWREx_GetVoltageRange>
 800cce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cce2:	4b30      	ldr	r3, [pc, #192]	@ (800cda4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cce8:	4a2e      	ldr	r2, [pc, #184]	@ (800cda4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ccea:	f023 0304 	bic.w	r3, r3, #4
 800ccee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ccf8:	d003      	beq.n	800cd02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd00:	d109      	bne.n	800cd16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd08:	d202      	bcs.n	800cd10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cd0e:	e033      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800cd10:	2300      	movs	r3, #0
 800cd12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cd14:	e030      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd1c:	d208      	bcs.n	800cd30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd24:	d102      	bne.n	800cd2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800cd26:	2303      	movs	r3, #3
 800cd28:	613b      	str	r3, [r7, #16]
 800cd2a:	e025      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e035      	b.n	800cd9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd36:	d90f      	bls.n	800cd58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d109      	bne.n	800cd52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd44:	d902      	bls.n	800cd4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800cd46:	2300      	movs	r3, #0
 800cd48:	613b      	str	r3, [r7, #16]
 800cd4a:	e015      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	613b      	str	r3, [r7, #16]
 800cd50:	e012      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800cd52:	2300      	movs	r3, #0
 800cd54:	613b      	str	r3, [r7, #16]
 800cd56:	e00f      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd5e:	d109      	bne.n	800cd74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd66:	d102      	bne.n	800cd6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800cd68:	2301      	movs	r3, #1
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	e004      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800cd6e:	2302      	movs	r3, #2
 800cd70:	613b      	str	r3, [r7, #16]
 800cd72:	e001      	b.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800cd74:	2301      	movs	r3, #1
 800cd76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cd78:	4b0b      	ldr	r3, [pc, #44]	@ (800cda8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f023 020f 	bic.w	r2, r3, #15
 800cd80:	4909      	ldr	r1, [pc, #36]	@ (800cda8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800cd88:	4b07      	ldr	r3, [pc, #28]	@ (800cda8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 030f 	and.w	r3, r3, #15
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d001      	beq.n	800cd9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3718      	adds	r7, #24
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	46020c00 	.word	0x46020c00
 800cda8:	40022000 	.word	0x40022000

0800cdac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800cdac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdb0:	b0ba      	sub	sp, #232	@ 0xe8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cdc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	f002 0401 	and.w	r4, r2, #1
 800cdd0:	2500      	movs	r5, #0
 800cdd2:	ea54 0305 	orrs.w	r3, r4, r5
 800cdd6:	d00b      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800cdd8:	4bcb      	ldr	r3, [pc, #812]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cdda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cdde:	f023 0103 	bic.w	r1, r3, #3
 800cde2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cde6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cde8:	4ac7      	ldr	r2, [pc, #796]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cdea:	430b      	orrs	r3, r1
 800cdec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cdf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	f002 0802 	and.w	r8, r2, #2
 800cdfc:	f04f 0900 	mov.w	r9, #0
 800ce00:	ea58 0309 	orrs.w	r3, r8, r9
 800ce04:	d00b      	beq.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800ce06:	4bc0      	ldr	r3, [pc, #768]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce0c:	f023 010c 	bic.w	r1, r3, #12
 800ce10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce16:	4abc      	ldr	r2, [pc, #752]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce18:	430b      	orrs	r3, r1
 800ce1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	f002 0a04 	and.w	sl, r2, #4
 800ce2a:	f04f 0b00 	mov.w	fp, #0
 800ce2e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ce32:	d00b      	beq.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800ce34:	4bb4      	ldr	r3, [pc, #720]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce3a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ce3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce44:	4ab0      	ldr	r2, [pc, #704]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce46:	430b      	orrs	r3, r1
 800ce48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	f002 0308 	and.w	r3, r2, #8
 800ce58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ce62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ce66:	460b      	mov	r3, r1
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	d00b      	beq.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ce6c:	4ba6      	ldr	r3, [pc, #664]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ce76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce7c:	4aa2      	ldr	r2, [pc, #648]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	f002 0310 	and.w	r3, r2, #16
 800ce90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce94:	2300      	movs	r3, #0
 800ce96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	4313      	orrs	r3, r2
 800cea2:	d00b      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800cea4:	4b98      	ldr	r3, [pc, #608]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ceaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ceae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ceb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ceb4:	4a94      	ldr	r2, [pc, #592]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ceb6:	430b      	orrs	r3, r1
 800ceb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f002 0320 	and.w	r3, r2, #32
 800cec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cecc:	2300      	movs	r3, #0
 800cece:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ced2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ced6:	460b      	mov	r3, r1
 800ced8:	4313      	orrs	r3, r2
 800ceda:	d00b      	beq.n	800cef4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800cedc:	4b8a      	ldr	r3, [pc, #552]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cee2:	f023 0107 	bic.w	r1, r3, #7
 800cee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ceea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceec:	4a86      	ldr	r2, [pc, #536]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ceee:	430b      	orrs	r3, r1
 800cef0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800cf00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf04:	2300      	movs	r3, #0
 800cf06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cf0e:	460b      	mov	r3, r1
 800cf10:	4313      	orrs	r3, r2
 800cf12:	d00b      	beq.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800cf14:	4b7c      	ldr	r3, [pc, #496]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf1a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800cf1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf24:	4a78      	ldr	r2, [pc, #480]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf26:	430b      	orrs	r3, r1
 800cf28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cf38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf42:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cf46:	460b      	mov	r3, r1
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	d00b      	beq.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800cf4c:	4b6e      	ldr	r3, [pc, #440]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf5c:	4a6a      	ldr	r2, [pc, #424]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf5e:	430b      	orrs	r3, r1
 800cf60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800cf70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf74:	2300      	movs	r3, #0
 800cf76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf7a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4313      	orrs	r3, r2
 800cf82:	d00b      	beq.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800cf84:	4b60      	ldr	r3, [pc, #384]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cf8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf94:	4a5c      	ldr	r2, [pc, #368]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf96:	430b      	orrs	r3, r1
 800cf98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800cfa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cfac:	2300      	movs	r3, #0
 800cfae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	d00b      	beq.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800cfbc:	4b52      	ldr	r3, [pc, #328]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfc2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800cfc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfcc:	4a4e      	ldr	r2, [pc, #312]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfce:	430b      	orrs	r3, r1
 800cfd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cfd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800cfe0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cfea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cfee:	460b      	mov	r3, r1
 800cff0:	4313      	orrs	r3, r2
 800cff2:	d00b      	beq.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800cff4:	4b44      	ldr	r3, [pc, #272]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cffa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800cffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d004:	4a40      	ldr	r2, [pc, #256]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d006:	430b      	orrs	r3, r1
 800d008:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d00c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d01c:	2300      	movs	r3, #0
 800d01e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d022:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d026:	460b      	mov	r3, r1
 800d028:	4313      	orrs	r3, r2
 800d02a:	d00b      	beq.n	800d044 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d02c:	4b36      	ldr	r3, [pc, #216]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d02e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d032:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800d036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d03a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d03c:	4a32      	ldr	r2, [pc, #200]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d03e:	430b      	orrs	r3, r1
 800d040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d054:	2300      	movs	r3, #0
 800d056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d05a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d05e:	460b      	mov	r3, r1
 800d060:	4313      	orrs	r3, r2
 800d062:	d00c      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d064:	4b28      	ldr	r3, [pc, #160]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d06a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d06e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d076:	4a24      	ldr	r2, [pc, #144]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d078:	430b      	orrs	r3, r1
 800d07a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d07e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d08a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d08c:	2300      	movs	r3, #0
 800d08e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d090:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d094:	460b      	mov	r3, r1
 800d096:	4313      	orrs	r3, r2
 800d098:	d04f      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d09a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0a2:	2b80      	cmp	r3, #128	@ 0x80
 800d0a4:	d02d      	beq.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800d0a6:	2b80      	cmp	r3, #128	@ 0x80
 800d0a8:	d827      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d0aa:	2b60      	cmp	r3, #96	@ 0x60
 800d0ac:	d02e      	beq.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d0ae:	2b60      	cmp	r3, #96	@ 0x60
 800d0b0:	d823      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d0b2:	2b40      	cmp	r3, #64	@ 0x40
 800d0b4:	d006      	beq.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800d0b6:	2b40      	cmp	r3, #64	@ 0x40
 800d0b8:	d81f      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d009      	beq.n	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800d0be:	2b20      	cmp	r3, #32
 800d0c0:	d011      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800d0c2:	e01a      	b.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d0c4:	4b10      	ldr	r3, [pc, #64]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0ce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d0d0:	e01d      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d0d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f002 fa17 	bl	800f50c <RCCEx_PLL2_Config>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d0e4:	e013      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d0e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0ea:	332c      	adds	r3, #44	@ 0x2c
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f002 faa5 	bl	800f63c <RCCEx_PLL3_Config>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d0f8:	e009      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d100:	e005      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800d102:	bf00      	nop
 800d104:	e003      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d106:	bf00      	nop
 800d108:	46020c00 	.word	0x46020c00
        break;
 800d10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d10e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10d      	bne.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d116:	4bb6      	ldr	r3, [pc, #728]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d11c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800d120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d128:	4ab1      	ldr	r2, [pc, #708]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d12a:	430b      	orrs	r3, r1
 800d12c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d130:	e003      	b.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d132:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d136:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d13a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d146:	673b      	str	r3, [r7, #112]	@ 0x70
 800d148:	2300      	movs	r3, #0
 800d14a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d14c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d150:	460b      	mov	r3, r1
 800d152:	4313      	orrs	r3, r2
 800d154:	d053      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d15a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d15e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d162:	d033      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d168:	d82c      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d16a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d16e:	d02f      	beq.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800d170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d174:	d826      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d17a:	d008      	beq.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800d17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d180:	d820      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800d186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d18a:	d011      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d18c:	e01a      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d18e:	4b98      	ldr	r3, [pc, #608]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d192:	4a97      	ldr	r2, [pc, #604]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d198:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d19a:	e01a      	b.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d19c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f002 f9b2 	bl	800f50c <RCCEx_PLL2_Config>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d1ae:	e010      	b.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d1b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1b4:	332c      	adds	r3, #44	@ 0x2c
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f002 fa40 	bl	800f63c <RCCEx_PLL3_Config>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d1c2:	e006      	b.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d1ca:	e002      	b.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d1cc:	bf00      	nop
 800d1ce:	e000      	b.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10d      	bne.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d1da:	4b85      	ldr	r3, [pc, #532]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d1dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d1e0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800d1e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d1ec:	4a80      	ldr	r2, [pc, #512]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d1ee:	430b      	orrs	r3, r1
 800d1f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d1f4:	e003      	b.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d1fa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d20a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d20c:	2300      	movs	r3, #0
 800d20e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d210:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d214:	460b      	mov	r3, r1
 800d216:	4313      	orrs	r3, r2
 800d218:	d046      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d21a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d21e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d222:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d226:	d028      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d228:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d22c:	d821      	bhi.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d22e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d232:	d022      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d238:	d81b      	bhi.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d23a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d23e:	d01c      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d240:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d244:	d815      	bhi.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d24a:	d008      	beq.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800d24c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d250:	d80f      	bhi.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d252:	2b00      	cmp	r3, #0
 800d254:	d011      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d25a:	d00e      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d25c:	e009      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d262:	3308      	adds	r3, #8
 800d264:	4618      	mov	r0, r3
 800d266:	f002 f951 	bl	800f50c <RCCEx_PLL2_Config>
 800d26a:	4603      	mov	r3, r0
 800d26c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d270:	e004      	b.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d278:	e000      	b.n	800d27c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800d27a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d27c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10d      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d284:	4b5a      	ldr	r3, [pc, #360]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d28a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d28e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d296:	4a56      	ldr	r2, [pc, #344]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d298:	430b      	orrs	r3, r1
 800d29a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d29e:	e003      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d2a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d2a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d2b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2ba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	d03f      	beq.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d2c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d81e      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x562>
 800d2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800d2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d6:	bf00      	nop
 800d2d8:	0800d317 	.word	0x0800d317
 800d2dc:	0800d2ed 	.word	0x0800d2ed
 800d2e0:	0800d2fb 	.word	0x0800d2fb
 800d2e4:	0800d317 	.word	0x0800d317
 800d2e8:	0800d317 	.word	0x0800d317
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d2ec:	4b40      	ldr	r3, [pc, #256]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f0:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d2f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2f6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800d2f8:	e00e      	b.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d2fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2fe:	332c      	adds	r3, #44	@ 0x2c
 800d300:	4618      	mov	r0, r3
 800d302:	f002 f99b 	bl	800f63c <RCCEx_PLL3_Config>
 800d306:	4603      	mov	r3, r0
 800d308:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d30c:	e004      	b.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d314:	e000      	b.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800d316:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d318:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10d      	bne.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d320:	4b33      	ldr	r3, [pc, #204]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d322:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d326:	f023 0107 	bic.w	r1, r3, #7
 800d32a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d332:	4a2f      	ldr	r2, [pc, #188]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d334:	430b      	orrs	r3, r1
 800d336:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d33a:	e003      	b.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d33c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d340:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d350:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d352:	2300      	movs	r3, #0
 800d354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d356:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d35a:	460b      	mov	r3, r1
 800d35c:	4313      	orrs	r3, r2
 800d35e:	d04d      	beq.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d368:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d36c:	d028      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800d36e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d372:	d821      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d374:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d378:	d024      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800d37a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d37e:	d81b      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d384:	d00e      	beq.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800d386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d38a:	d815      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d01b      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800d390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d394:	d110      	bne.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d396:	4b16      	ldr	r3, [pc, #88]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39a:	4a15      	ldr	r2, [pc, #84]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d39c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3a0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800d3a2:	e012      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d3a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d3a8:	332c      	adds	r3, #44	@ 0x2c
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f002 f946 	bl	800f63c <RCCEx_PLL3_Config>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d3b6:	e008      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d3be:	e004      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d3c0:	bf00      	nop
 800d3c2:	e002      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d3c4:	bf00      	nop
 800d3c6:	e000      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d3c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d3ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d110      	bne.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800d3d2:	4b07      	ldr	r3, [pc, #28]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d3d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d3d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d3dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3e4:	4a02      	ldr	r2, [pc, #8]	@ (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d3e6:	430b      	orrs	r3, r1
 800d3e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d3ec:	e006      	b.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x650>
 800d3ee:	bf00      	nop
 800d3f0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d3f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d3fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d408:	653b      	str	r3, [r7, #80]	@ 0x50
 800d40a:	2300      	movs	r3, #0
 800d40c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d40e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d412:	460b      	mov	r3, r1
 800d414:	4313      	orrs	r3, r2
 800d416:	f000 80b5 	beq.w	800d584 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d41a:	2300      	movs	r3, #0
 800d41c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d420:	4b9d      	ldr	r3, [pc, #628]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d426:	f003 0304 	and.w	r3, r3, #4
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d113      	bne.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d42e:	4b9a      	ldr	r3, [pc, #616]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d434:	4a98      	ldr	r2, [pc, #608]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d436:	f043 0304 	orr.w	r3, r3, #4
 800d43a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d43e:	4b96      	ldr	r3, [pc, #600]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d444:	f003 0304 	and.w	r3, r3, #4
 800d448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d44c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 800d450:	2301      	movs	r3, #1
 800d452:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d456:	4b91      	ldr	r3, [pc, #580]	@ (800d69c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45a:	4a90      	ldr	r2, [pc, #576]	@ (800d69c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d45c:	f043 0301 	orr.w	r3, r3, #1
 800d460:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d462:	f7fb ff23 	bl	80092ac <HAL_GetTick>
 800d466:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d46a:	e00b      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d46c:	f7fb ff1e 	bl	80092ac <HAL_GetTick>
 800d470:	4602      	mov	r2, r0
 800d472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d903      	bls.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800d47c:	2303      	movs	r3, #3
 800d47e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d482:	e005      	b.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d484:	4b85      	ldr	r3, [pc, #532]	@ (800d69c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d0ed      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800d490:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d165      	bne.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d498:	4b7f      	ldr	r3, [pc, #508]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d49a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d49e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800d4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d023      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800d4ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800d4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d01b      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d4be:	4b76      	ldr	r3, [pc, #472]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d4c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d4cc:	4b72      	ldr	r3, [pc, #456]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4d2:	4a71      	ldr	r2, [pc, #452]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d4dc:	4b6e      	ldr	r3, [pc, #440]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4e2:	4a6d      	ldr	r2, [pc, #436]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d4ec:	4a6a      	ldr	r2, [pc, #424]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4fa:	f003 0301 	and.w	r3, r3, #1
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d019      	beq.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d502:	f7fb fed3 	bl	80092ac <HAL_GetTick>
 800d506:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d50a:	e00d      	b.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d50c:	f7fb fece 	bl	80092ac <HAL_GetTick>
 800d510:	4602      	mov	r2, r0
 800d512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d516:	1ad2      	subs	r2, r2, r3
 800d518:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d903      	bls.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800d526:	e006      	b.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d528:	4b5b      	ldr	r3, [pc, #364]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d52e:	f003 0302 	and.w	r3, r3, #2
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0ea      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800d536:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10d      	bne.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800d53e:	4b56      	ldr	r3, [pc, #344]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d544:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d54c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d550:	4a51      	ldr	r2, [pc, #324]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d552:	430b      	orrs	r3, r1
 800d554:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d558:	e008      	b.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d55a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d55e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800d562:	e003      	b.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d564:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d568:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d56c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800d570:	2b01      	cmp	r3, #1
 800d572:	d107      	bne.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d574:	4b48      	ldr	r3, [pc, #288]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d57a:	4a47      	ldr	r2, [pc, #284]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d57c:	f023 0304 	bic.w	r3, r3, #4
 800d580:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800d584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d590:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d592:	2300      	movs	r3, #0
 800d594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d596:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d59a:	460b      	mov	r3, r1
 800d59c:	4313      	orrs	r3, r2
 800d59e:	d042      	beq.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800d5a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d5a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d5ac:	d022      	beq.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800d5ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d5b2:	d81b      	bhi.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x840>
 800d5b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5b8:	d011      	beq.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x832>
 800d5ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5be:	d815      	bhi.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x840>
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d019      	beq.n	800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800d5c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d5c8:	d110      	bne.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d5ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f001 ff9b 	bl	800f50c <RCCEx_PLL2_Config>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d5dc:	e00d      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5de:	4b2e      	ldr	r3, [pc, #184]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e2:	4a2d      	ldr	r2, [pc, #180]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5e8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800d5ea:	e006      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d5f2:	e002      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800d5f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d5fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10d      	bne.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800d602:	4b25      	ldr	r3, [pc, #148]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d608:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800d60c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d610:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d614:	4a20      	ldr	r2, [pc, #128]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d616:	430b      	orrs	r3, r1
 800d618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d61c:	e003      	b.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d61e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d622:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d632:	643b      	str	r3, [r7, #64]	@ 0x40
 800d634:	2300      	movs	r3, #0
 800d636:	647b      	str	r3, [r7, #68]	@ 0x44
 800d638:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d63c:	460b      	mov	r3, r1
 800d63e:	4313      	orrs	r3, r2
 800d640:	d032      	beq.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800d642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d646:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d64a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d64e:	d00b      	beq.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800d650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d654:	d804      	bhi.n	800d660 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800d656:	2b00      	cmp	r3, #0
 800d658:	d008      	beq.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800d65a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d65e:	d007      	beq.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d666:	e004      	b.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d668:	bf00      	nop
 800d66a:	e002      	b.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d66c:	bf00      	nop
 800d66e:	e000      	b.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d670:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d672:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d112      	bne.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800d67a:	4b07      	ldr	r3, [pc, #28]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d67c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d680:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d68c:	4a02      	ldr	r2, [pc, #8]	@ (800d698 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d68e:	430b      	orrs	r3, r1
 800d690:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d694:	e008      	b.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800d696:	bf00      	nop
 800d698:	46020c00 	.word	0x46020c00
 800d69c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d6a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800d6a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d6b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	d00c      	beq.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800d6c4:	4b98      	ldr	r3, [pc, #608]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6ca:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800d6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d6d6:	4a94      	ldr	r2, [pc, #592]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6d8:	430b      	orrs	r3, r1
 800d6da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800d6de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d6ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	d019      	beq.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800d6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d706:	d105      	bne.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d708:	4b87      	ldr	r3, [pc, #540]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d70c:	4a86      	ldr	r2, [pc, #536]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d70e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d712:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800d714:	4b84      	ldr	r3, [pc, #528]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d71a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800d71e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d726:	4a80      	ldr	r2, [pc, #512]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d728:	430b      	orrs	r3, r1
 800d72a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800d72e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d73a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d73c:	2300      	movs	r3, #0
 800d73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d740:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d744:	460b      	mov	r3, r1
 800d746:	4313      	orrs	r3, r2
 800d748:	d00c      	beq.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800d74a:	4b77      	ldr	r3, [pc, #476]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d750:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d75c:	4972      	ldr	r1, [pc, #456]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d75e:	4313      	orrs	r3, r2
 800d760:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800d764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d770:	623b      	str	r3, [r7, #32]
 800d772:	2300      	movs	r3, #0
 800d774:	627b      	str	r3, [r7, #36]	@ 0x24
 800d776:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d77a:	460b      	mov	r3, r1
 800d77c:	4313      	orrs	r3, r2
 800d77e:	d00c      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800d780:	4b69      	ldr	r3, [pc, #420]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d786:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d78a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d78e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d792:	4965      	ldr	r1, [pc, #404]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d794:	4313      	orrs	r3, r2
 800d796:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800d79a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d7a6:	61bb      	str	r3, [r7, #24]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	61fb      	str	r3, [r7, #28]
 800d7ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	d00c      	beq.n	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800d7b6:	4b5c      	ldr	r3, [pc, #368]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d7bc:	f023 0218 	bic.w	r2, r3, #24
 800d7c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d7c8:	4957      	ldr	r1, [pc, #348]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d7d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800d7dc:	613b      	str	r3, [r7, #16]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	d032      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800d7ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d7f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7f8:	d105      	bne.n	800d806 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7fa:	4b4b      	ldr	r3, [pc, #300]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7fe:	4a4a      	ldr	r2, [pc, #296]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d804:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800d806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d80a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d80e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d812:	d108      	bne.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d818:	3308      	adds	r3, #8
 800d81a:	4618      	mov	r0, r3
 800d81c:	f001 fe76 	bl	800f50c <RCCEx_PLL2_Config>
 800d820:	4603      	mov	r3, r0
 800d822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800d826:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10d      	bne.n	800d84a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800d82e:	4b3e      	ldr	r3, [pc, #248]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d830:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d834:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d83c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d840:	4939      	ldr	r1, [pc, #228]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d842:	4313      	orrs	r3, r2
 800d844:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800d848:	e003      	b.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d84a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d84e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800d852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800d85e:	60bb      	str	r3, [r7, #8]
 800d860:	2300      	movs	r3, #0
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d868:	460b      	mov	r3, r1
 800d86a:	4313      	orrs	r3, r2
 800d86c:	d03a      	beq.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800d86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d87a:	d00e      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800d87c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d880:	d815      	bhi.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800d882:	2b00      	cmp	r3, #0
 800d884:	d017      	beq.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d88a:	d110      	bne.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d88c:	4b26      	ldr	r3, [pc, #152]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d890:	4a25      	ldr	r2, [pc, #148]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d896:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d898:	e00e      	b.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d89a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d89e:	3308      	adds	r3, #8
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f001 fe33 	bl	800f50c <RCCEx_PLL2_Config>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d8ac:	e004      	b.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d8b4:	e000      	b.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800d8b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d8b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10d      	bne.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800d8c0:	4b19      	ldr	r3, [pc, #100]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d8c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8d2:	4915      	ldr	r1, [pc, #84]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800d8da:	e003      	b.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d8e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800d8e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800d8f0:	603b      	str	r3, [r7, #0]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	607b      	str	r3, [r7, #4]
 800d8f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	d00c      	beq.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800d900:	4b09      	ldr	r3, [pc, #36]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d906:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d90a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d90e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d912:	4905      	ldr	r1, [pc, #20]	@ (800d928 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d914:	4313      	orrs	r3, r2
 800d916:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800d91a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800d91e:	4618      	mov	r0, r3
 800d920:	37e8      	adds	r7, #232	@ 0xe8
 800d922:	46bd      	mov	sp, r7
 800d924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d928:	46020c00 	.word	0x46020c00

0800d92c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b089      	sub	sp, #36	@ 0x24
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800d934:	4ba6      	ldr	r3, [pc, #664]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d93e:	4ba4      	ldr	r3, [pc, #656]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d942:	f003 0303 	and.w	r3, r3, #3
 800d946:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d948:	4ba1      	ldr	r3, [pc, #644]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94c:	0a1b      	lsrs	r3, r3, #8
 800d94e:	f003 030f 	and.w	r3, r3, #15
 800d952:	3301      	adds	r3, #1
 800d954:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d956:	4b9e      	ldr	r3, [pc, #632]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95a:	091b      	lsrs	r3, r3, #4
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d962:	4b9b      	ldr	r3, [pc, #620]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d966:	08db      	lsrs	r3, r3, #3
 800d968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	fb02 f303 	mul.w	r3, r2, r3
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b03      	cmp	r3, #3
 800d982:	d062      	beq.n	800da4a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	2b03      	cmp	r3, #3
 800d988:	f200 8081 	bhi.w	800da8e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d024      	beq.n	800d9dc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d17a      	bne.n	800da8e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	ee07 3a90 	vmov	s15, r3
 800d99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800dbd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800d9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9aa:	4b89      	ldr	r3, [pc, #548]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9b2:	ee07 3a90 	vmov	s15, r3
 800d9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9be:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800dbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800d9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d9da:	e08f      	b.n	800dafc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d9dc:	4b7c      	ldr	r3, [pc, #496]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d005      	beq.n	800d9f4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800d9e8:	4b79      	ldr	r3, [pc, #484]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	0f1b      	lsrs	r3, r3, #28
 800d9ee:	f003 030f 	and.w	r3, r3, #15
 800d9f2:	e006      	b.n	800da02 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800d9f4:	4b76      	ldr	r3, [pc, #472]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800d9f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9fa:	041b      	lsls	r3, r3, #16
 800d9fc:	0f1b      	lsrs	r3, r3, #28
 800d9fe:	f003 030f 	and.w	r3, r3, #15
 800da02:	4a76      	ldr	r2, [pc, #472]	@ (800dbdc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800da04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	ee07 3a90 	vmov	s15, r3
 800da24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da28:	ed97 6a02 	vldr	s12, [r7, #8]
 800da2c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800dbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800da30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800da40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da48:	e058      	b.n	800dafc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	ee07 3a90 	vmov	s15, r3
 800da50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da54:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dbd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800da58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da5c:	4b5c      	ldr	r3, [pc, #368]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800da5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da64:	ee07 3a90 	vmov	s15, r3
 800da68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800da6c:	ed97 6a02 	vldr	s12, [r7, #8]
 800da70:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800dbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800da74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800da7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da8c:	e036      	b.n	800dafc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800da8e:	4b50      	ldr	r3, [pc, #320]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800da9a:	4b4d      	ldr	r3, [pc, #308]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	0f1b      	lsrs	r3, r3, #28
 800daa0:	f003 030f 	and.w	r3, r3, #15
 800daa4:	e006      	b.n	800dab4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800daa6:	4b4a      	ldr	r3, [pc, #296]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800daa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800daac:	041b      	lsls	r3, r3, #16
 800daae:	0f1b      	lsrs	r3, r3, #28
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	4a49      	ldr	r2, [pc, #292]	@ (800dbdc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800dab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daba:	ee07 3a90 	vmov	s15, r3
 800dabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	ee07 3a90 	vmov	s15, r3
 800dac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dacc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dada:	ed97 6a02 	vldr	s12, [r7, #8]
 800dade:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800dbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800dae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800daf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dafa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800dafc:	4b34      	ldr	r3, [pc, #208]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800dafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d017      	beq.n	800db38 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db08:	4b31      	ldr	r3, [pc, #196]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800db0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db0c:	0a5b      	lsrs	r3, r3, #9
 800db0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db12:	ee07 3a90 	vmov	s15, r3
 800db16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800db1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db22:	edd7 6a07 	vldr	s13, [r7, #28]
 800db26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db2e:	ee17 2a90 	vmov	r2, s15
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	e002      	b.n	800db3e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800db3e:	4b24      	ldr	r3, [pc, #144]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800db40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db46:	2b00      	cmp	r3, #0
 800db48:	d017      	beq.n	800db7a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db4a:	4b21      	ldr	r3, [pc, #132]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800db4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db4e:	0c1b      	lsrs	r3, r3, #16
 800db50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db54:	ee07 3a90 	vmov	s15, r3
 800db58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800db5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db60:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db64:	edd7 6a07 	vldr	s13, [r7, #28]
 800db68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db70:	ee17 2a90 	vmov	r2, s15
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	605a      	str	r2, [r3, #4]
 800db78:	e002      	b.n	800db80 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800db80:	4b13      	ldr	r3, [pc, #76]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800db82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d017      	beq.n	800dbbc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db8c:	4b10      	ldr	r3, [pc, #64]	@ (800dbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800db8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db90:	0e1b      	lsrs	r3, r3, #24
 800db92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db96:	ee07 3a90 	vmov	s15, r3
 800db9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800db9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dba2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dba6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbb2:	ee17 2a90 	vmov	r2, s15
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dbba:	e002      	b.n	800dbc2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	609a      	str	r2, [r3, #8]
}
 800dbc2:	bf00      	nop
 800dbc4:	3724      	adds	r7, #36	@ 0x24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	46020c00 	.word	0x46020c00
 800dbd4:	4b742400 	.word	0x4b742400
 800dbd8:	46000000 	.word	0x46000000
 800dbdc:	0818c974 	.word	0x0818c974

0800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b089      	sub	sp, #36	@ 0x24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800dbe8:	4ba6      	ldr	r3, [pc, #664]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dbea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800dbf2:	4ba4      	ldr	r3, [pc, #656]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf6:	f003 0303 	and.w	r3, r3, #3
 800dbfa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800dbfc:	4ba1      	ldr	r3, [pc, #644]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc00:	0a1b      	lsrs	r3, r3, #8
 800dc02:	f003 030f 	and.w	r3, r3, #15
 800dc06:	3301      	adds	r3, #1
 800dc08:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800dc0a:	4b9e      	ldr	r3, [pc, #632]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc0e:	091b      	lsrs	r3, r3, #4
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800dc16:	4b9b      	ldr	r3, [pc, #620]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dc18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc1a:	08db      	lsrs	r3, r3, #3
 800dc1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	fb02 f303 	mul.w	r3, r2, r3
 800dc26:	ee07 3a90 	vmov	s15, r3
 800dc2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d062      	beq.n	800dcfe <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	f200 8081 	bhi.w	800dd42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d024      	beq.n	800dc90 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d17a      	bne.n	800dd42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	ee07 3a90 	vmov	s15, r3
 800dc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc56:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800de88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800dc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc5e:	4b89      	ldr	r3, [pc, #548]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dc60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc66:	ee07 3a90 	vmov	s15, r3
 800dc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc72:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800de8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800dc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dc8e:	e08f      	b.n	800ddb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800dc90:	4b7c      	ldr	r3, [pc, #496]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d005      	beq.n	800dca8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800dc9c:	4b79      	ldr	r3, [pc, #484]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	0f1b      	lsrs	r3, r3, #28
 800dca2:	f003 030f 	and.w	r3, r3, #15
 800dca6:	e006      	b.n	800dcb6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800dca8:	4b76      	ldr	r3, [pc, #472]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dcaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dcae:	041b      	lsls	r3, r3, #16
 800dcb0:	0f1b      	lsrs	r3, r3, #28
 800dcb2:	f003 030f 	and.w	r3, r3, #15
 800dcb6:	4a76      	ldr	r2, [pc, #472]	@ (800de90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800dcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcbc:	ee07 3a90 	vmov	s15, r3
 800dcc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	ee07 3a90 	vmov	s15, r3
 800dcd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcdc:	ed97 6a02 	vldr	s12, [r7, #8]
 800dce0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800de8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800dce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800dcf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dcfc:	e058      	b.n	800ddb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	ee07 3a90 	vmov	s15, r3
 800dd04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd08:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800de88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800dd0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd10:	4b5c      	ldr	r3, [pc, #368]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dd12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd18:	ee07 3a90 	vmov	s15, r3
 800dd1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd20:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800de8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800dd28:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dd2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dd38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd40:	e036      	b.n	800ddb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800dd42:	4b50      	ldr	r3, [pc, #320]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d005      	beq.n	800dd5a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800dd4e:	4b4d      	ldr	r3, [pc, #308]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	0f1b      	lsrs	r3, r3, #28
 800dd54:	f003 030f 	and.w	r3, r3, #15
 800dd58:	e006      	b.n	800dd68 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800dd5a:	4b4a      	ldr	r3, [pc, #296]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800dd5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd60:	041b      	lsls	r3, r3, #16
 800dd62:	0f1b      	lsrs	r3, r3, #28
 800dd64:	f003 030f 	and.w	r3, r3, #15
 800dd68:	4a49      	ldr	r2, [pc, #292]	@ (800de90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800dd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd6e:	ee07 3a90 	vmov	s15, r3
 800dd72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	ee07 3a90 	vmov	s15, r3
 800dd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	ee07 3a90 	vmov	s15, r3
 800dd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd92:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800de8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800dd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800dda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ddae:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ddb0:	4b34      	ldr	r3, [pc, #208]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ddb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d017      	beq.n	800ddec <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ddbc:	4b31      	ldr	r3, [pc, #196]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ddbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc0:	0a5b      	lsrs	r3, r3, #9
 800ddc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddc6:	ee07 3a90 	vmov	s15, r3
 800ddca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ddce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ddd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dde2:	ee17 2a90 	vmov	r2, s15
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	601a      	str	r2, [r3, #0]
 800ddea:	e002      	b.n	800ddf2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ddf2:	4b24      	ldr	r3, [pc, #144]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ddf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d017      	beq.n	800de2e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ddfe:	4b21      	ldr	r3, [pc, #132]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800de00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de02:	0c1b      	lsrs	r3, r3, #16
 800de04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de08:	ee07 3a90 	vmov	s15, r3
 800de0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800de10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de18:	edd7 6a07 	vldr	s13, [r7, #28]
 800de1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de24:	ee17 2a90 	vmov	r2, s15
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	605a      	str	r2, [r3, #4]
 800de2c:	e002      	b.n	800de34 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800de34:	4b13      	ldr	r3, [pc, #76]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800de36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d017      	beq.n	800de70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de40:	4b10      	ldr	r3, [pc, #64]	@ (800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800de42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de44:	0e1b      	lsrs	r3, r3, #24
 800de46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de4a:	ee07 3a90 	vmov	s15, r3
 800de4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800de52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800de5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de66:	ee17 2a90 	vmov	r2, s15
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800de6e:	e002      	b.n	800de76 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	609a      	str	r2, [r3, #8]
}
 800de76:	bf00      	nop
 800de78:	3724      	adds	r7, #36	@ 0x24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	46020c00 	.word	0x46020c00
 800de88:	4b742400 	.word	0x4b742400
 800de8c:	46000000 	.word	0x46000000
 800de90:	0818c974 	.word	0x0818c974

0800de94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800de94:	b480      	push	{r7}
 800de96:	b089      	sub	sp, #36	@ 0x24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800de9c:	4ba6      	ldr	r3, [pc, #664]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800de9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dea4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800dea6:	4ba4      	ldr	r3, [pc, #656]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800dea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deaa:	f003 0303 	and.w	r3, r3, #3
 800deae:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800deb0:	4ba1      	ldr	r3, [pc, #644]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800deb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deb4:	0a1b      	lsrs	r3, r3, #8
 800deb6:	f003 030f 	and.w	r3, r3, #15
 800deba:	3301      	adds	r3, #1
 800debc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800debe:	4b9e      	ldr	r3, [pc, #632]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800dec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec2:	091b      	lsrs	r3, r3, #4
 800dec4:	f003 0301 	and.w	r3, r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800deca:	4b9b      	ldr	r3, [pc, #620]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800decc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dece:	08db      	lsrs	r3, r3, #3
 800ded0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	fb02 f303 	mul.w	r3, r2, r3
 800deda:	ee07 3a90 	vmov	s15, r3
 800dede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dee2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2b03      	cmp	r3, #3
 800deea:	d062      	beq.n	800dfb2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b03      	cmp	r3, #3
 800def0:	f200 8081 	bhi.w	800dff6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d024      	beq.n	800df44 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b02      	cmp	r3, #2
 800defe:	d17a      	bne.n	800dff6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	ee07 3a90 	vmov	s15, r3
 800df06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df0a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e13c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800df0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df12:	4b89      	ldr	r3, [pc, #548]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800df14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df1a:	ee07 3a90 	vmov	s15, r3
 800df1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800df22:	ed97 6a02 	vldr	s12, [r7, #8]
 800df26:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e140 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800df2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800df2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800df32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800df3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df3e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800df42:	e08f      	b.n	800e064 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800df44:	4b7c      	ldr	r3, [pc, #496]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d005      	beq.n	800df5c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800df50:	4b79      	ldr	r3, [pc, #484]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	0f1b      	lsrs	r3, r3, #28
 800df56:	f003 030f 	and.w	r3, r3, #15
 800df5a:	e006      	b.n	800df6a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800df5c:	4b76      	ldr	r3, [pc, #472]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800df5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800df62:	041b      	lsls	r3, r3, #16
 800df64:	0f1b      	lsrs	r3, r3, #28
 800df66:	f003 030f 	and.w	r3, r3, #15
 800df6a:	4a76      	ldr	r2, [pc, #472]	@ (800e144 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800df6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df70:	ee07 3a90 	vmov	s15, r3
 800df74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	ee07 3a90 	vmov	s15, r3
 800df7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	ee07 3a90 	vmov	s15, r3
 800df8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df90:	ed97 6a02 	vldr	s12, [r7, #8]
 800df94:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e140 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800df98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800dfa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfb0:	e058      	b.n	800e064 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	ee07 3a90 	vmov	s15, r3
 800dfb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfbc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e13c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800dfc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfc4:	4b5c      	ldr	r3, [pc, #368]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800dfc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfcc:	ee07 3a90 	vmov	s15, r3
 800dfd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800dfd4:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfd8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e140 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800dfdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800dfe4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dff0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dff4:	e036      	b.n	800e064 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800dff6:	4b50      	ldr	r3, [pc, #320]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800e002:	4b4d      	ldr	r3, [pc, #308]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	0f1b      	lsrs	r3, r3, #28
 800e008:	f003 030f 	and.w	r3, r3, #15
 800e00c:	e006      	b.n	800e01c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800e00e:	4b4a      	ldr	r3, [pc, #296]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e014:	041b      	lsls	r3, r3, #16
 800e016:	0f1b      	lsrs	r3, r3, #28
 800e018:	f003 030f 	and.w	r3, r3, #15
 800e01c:	4a49      	ldr	r2, [pc, #292]	@ (800e144 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e022:	ee07 3a90 	vmov	s15, r3
 800e026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	ee07 3a90 	vmov	s15, r3
 800e030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	ee07 3a90 	vmov	s15, r3
 800e03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e042:	ed97 6a02 	vldr	s12, [r7, #8]
 800e046:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e140 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e056:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e05e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e062:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e064:	4b34      	ldr	r3, [pc, #208]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d017      	beq.n	800e0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e070:	4b31      	ldr	r3, [pc, #196]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e074:	0a5b      	lsrs	r3, r3, #9
 800e076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e07a:	ee07 3a90 	vmov	s15, r3
 800e07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e086:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e096:	ee17 2a90 	vmov	r2, s15
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	e002      	b.n	800e0a6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e0a6:	4b24      	ldr	r3, [pc, #144]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d017      	beq.n	800e0e2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e0b2:	4b21      	ldr	r3, [pc, #132]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0b6:	0c1b      	lsrs	r3, r3, #16
 800e0b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0bc:	ee07 3a90 	vmov	s15, r3
 800e0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e0c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0c8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e0cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0d8:	ee17 2a90 	vmov	r2, s15
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	605a      	str	r2, [r3, #4]
 800e0e0:	e002      	b.n	800e0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e0e8:	4b13      	ldr	r3, [pc, #76]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e0ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d017      	beq.n	800e124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e0f4:	4b10      	ldr	r3, [pc, #64]	@ (800e138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e0f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f8:	0e1b      	lsrs	r3, r3, #24
 800e0fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e10a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e10e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e11a:	ee17 2a90 	vmov	r2, s15
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e122:	e002      	b.n	800e12a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	609a      	str	r2, [r3, #8]
}
 800e12a:	bf00      	nop
 800e12c:	3724      	adds	r7, #36	@ 0x24
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	46020c00 	.word	0x46020c00
 800e13c:	4b742400 	.word	0x4b742400
 800e140:	46000000 	.word	0x46000000
 800e144:	0818c974 	.word	0x0818c974

0800e148 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08e      	sub	sp, #56	@ 0x38
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e156:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800e15a:	430b      	orrs	r3, r1
 800e15c:	d145      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e15e:	4ba7      	ldr	r3, [pc, #668]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e168:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e16a:	4ba4      	ldr	r3, [pc, #656]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e16c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e170:	f003 0302 	and.w	r3, r3, #2
 800e174:	2b02      	cmp	r3, #2
 800e176:	d108      	bne.n	800e18a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e17e:	d104      	bne.n	800e18a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e180:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e184:	637b      	str	r3, [r7, #52]	@ 0x34
 800e186:	f001 b9b3 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e18a:	4b9c      	ldr	r3, [pc, #624]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e18c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e198:	d114      	bne.n	800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1a0:	d110      	bne.n	800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1a2:	4b96      	ldr	r3, [pc, #600]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e1a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1b0:	d103      	bne.n	800e1ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e1b2:	23fa      	movs	r3, #250	@ 0xfa
 800e1b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1b6:	f001 b99b 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800e1ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e1be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1c0:	f001 b996 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e1c4:	4b8d      	ldr	r3, [pc, #564]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1d0:	d107      	bne.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1d8:	d103      	bne.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e1da:	4b89      	ldr	r3, [pc, #548]	@ (800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e1dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1de:	f001 b987 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1e6:	f001 b983 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1ee:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	d151      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e1f6:	4b81      	ldr	r3, [pc, #516]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e1f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e1fc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800e200:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e204:	2b80      	cmp	r3, #128	@ 0x80
 800e206:	d035      	beq.n	800e274 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20a:	2b80      	cmp	r3, #128	@ 0x80
 800e20c:	d841      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e210:	2b60      	cmp	r3, #96	@ 0x60
 800e212:	d02a      	beq.n	800e26a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e216:	2b60      	cmp	r3, #96	@ 0x60
 800e218:	d83b      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21c:	2b40      	cmp	r3, #64	@ 0x40
 800e21e:	d009      	beq.n	800e234 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e222:	2b40      	cmp	r3, #64	@ 0x40
 800e224:	d835      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00c      	beq.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22e:	2b20      	cmp	r3, #32
 800e230:	d012      	beq.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e232:	e02e      	b.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff fb77 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e242:	f001 b955 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e246:	f107 0318 	add.w	r3, r7, #24
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff fcc8 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e254:	f001 b94c 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e258:	f107 030c 	add.w	r3, r7, #12
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7ff fe19 	bl	800de94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e266:	f001 b943 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e26a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e26e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e270:	f001 b93e 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e274:	4b61      	ldr	r3, [pc, #388]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e27c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e280:	d103      	bne.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e282:	4b60      	ldr	r3, [pc, #384]	@ (800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e284:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e286:	f001 b933 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800e28a:	2300      	movs	r3, #0
 800e28c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e28e:	f001 b92f 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e296:	f001 b92b 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e29e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	d158      	bne.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e2a6:	4b55      	ldr	r3, [pc, #340]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e2a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e2ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e2b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2b8:	d03b      	beq.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2c0:	d846      	bhi.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2c8:	d02e      	beq.n	800e328 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2d0:	d83e      	bhi.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2d8:	d00b      	beq.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2e0:	d836      	bhi.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00d      	beq.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2ee:	d012      	beq.n	800e316 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e2f0:	e02e      	b.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff fb18 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e300:	f001 b8f6 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e304:	f107 0318 	add.w	r3, r7, #24
 800e308:	4618      	mov	r0, r3
 800e30a:	f7ff fc69 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e312:	f001 b8ed 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e316:	f107 030c 	add.w	r3, r7, #12
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff fdba 	bl	800de94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e324:	f001 b8e4 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e328:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e32c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e32e:	f001 b8df 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e332:	4b32      	ldr	r3, [pc, #200]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e33a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e33e:	d103      	bne.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e340:	4b30      	ldr	r3, [pc, #192]	@ (800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e342:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e344:	f001 b8d4 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800e348:	2300      	movs	r3, #0
 800e34a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e34c:	f001 b8d0 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800e350:	2300      	movs	r3, #0
 800e352:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e354:	f001 b8cc 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e35c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800e360:	430b      	orrs	r3, r1
 800e362:	d126      	bne.n	800e3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e364:	4b25      	ldr	r3, [pc, #148]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e366:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e36a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e36e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e370:	4b22      	ldr	r3, [pc, #136]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e37c:	d106      	bne.n	800e38c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800e37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e380:	2b00      	cmp	r3, #0
 800e382:	d103      	bne.n	800e38c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800e384:	4b1f      	ldr	r3, [pc, #124]	@ (800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e386:	637b      	str	r3, [r7, #52]	@ 0x34
 800e388:	f001 b8b2 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800e38c:	4b1b      	ldr	r3, [pc, #108]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e398:	d107      	bne.n	800e3aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800e39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3a0:	d103      	bne.n	800e3aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800e3a2:	4b19      	ldr	r3, [pc, #100]	@ (800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800e3a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3a6:	f001 b8a3 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3ae:	f001 b89f 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800e3b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3b6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800e3ba:	430b      	orrs	r3, r1
 800e3bc:	d16e      	bne.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e3be:	4b0f      	ldr	r3, [pc, #60]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e3c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e3c4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800e3c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e3d0:	d03d      	beq.n	800e44e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e3d8:	d85c      	bhi.n	800e494 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e3e0:	d014      	beq.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800e3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e3e8:	d854      	bhi.n	800e494 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d01f      	beq.n	800e430 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800e3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3f6:	d012      	beq.n	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e3f8:	e04c      	b.n	800e494 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e3fa:	bf00      	nop
 800e3fc:	46020c00 	.word	0x46020c00
 800e400:	0007a120 	.word	0x0007a120
 800e404:	00f42400 	.word	0x00f42400
 800e408:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e40c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff fa8b 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e41a:	f001 b869 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e41e:	f107 0318 	add.w	r3, r7, #24
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fbdc 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e42c:	f001 b860 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e430:	4ba7      	ldr	r3, [pc, #668]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e43c:	d103      	bne.n	800e446 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800e43e:	4ba5      	ldr	r3, [pc, #660]	@ (800e6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800e440:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e442:	f001 b855 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800e446:	2300      	movs	r3, #0
 800e448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e44a:	f001 b851 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e44e:	4ba0      	ldr	r3, [pc, #640]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 0320 	and.w	r3, r3, #32
 800e456:	2b20      	cmp	r3, #32
 800e458:	d118      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e45a:	4b9d      	ldr	r3, [pc, #628]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e462:	2b00      	cmp	r3, #0
 800e464:	d005      	beq.n	800e472 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e466:	4b9a      	ldr	r3, [pc, #616]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	0e1b      	lsrs	r3, r3, #24
 800e46c:	f003 030f 	and.w	r3, r3, #15
 800e470:	e006      	b.n	800e480 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e472:	4b97      	ldr	r3, [pc, #604]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e478:	041b      	lsls	r3, r3, #16
 800e47a:	0e1b      	lsrs	r3, r3, #24
 800e47c:	f003 030f 	and.w	r3, r3, #15
 800e480:	4a95      	ldr	r2, [pc, #596]	@ (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e486:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e488:	f001 b832 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800e48c:	2300      	movs	r3, #0
 800e48e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e490:	f001 b82e 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800e494:	2300      	movs	r3, #0
 800e496:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e498:	f001 b82a 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e49c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4a0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800e4a4:	430b      	orrs	r3, r1
 800e4a6:	d17f      	bne.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e4a8:	4b89      	ldr	r3, [pc, #548]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e4aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e4ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d165      	bne.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e4ba:	4b85      	ldr	r3, [pc, #532]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e4bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e4c0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800e4c4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e4cc:	d034      	beq.n	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e4d4:	d853      	bhi.n	800e57e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4dc:	d00b      	beq.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800e4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4e4:	d84b      	bhi.n	800e57e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d016      	beq.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e4f2:	d009      	beq.n	800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800e4f4:	e043      	b.n	800e57e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff fa16 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e502:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800e504:	f000 bff4 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e508:	f107 0318 	add.w	r3, r7, #24
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7ff fb67 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800e516:	f000 bfeb 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e51a:	4b6d      	ldr	r3, [pc, #436]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e526:	d103      	bne.n	800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800e528:	4b6a      	ldr	r3, [pc, #424]	@ (800e6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800e52a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800e52c:	f000 bfe0 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800e530:	2300      	movs	r3, #0
 800e532:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800e534:	f000 bfdc 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e538:	4b65      	ldr	r3, [pc, #404]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f003 0320 	and.w	r3, r3, #32
 800e540:	2b20      	cmp	r3, #32
 800e542:	d118      	bne.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e544:	4b62      	ldr	r3, [pc, #392]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d005      	beq.n	800e55c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800e550:	4b5f      	ldr	r3, [pc, #380]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	0e1b      	lsrs	r3, r3, #24
 800e556:	f003 030f 	and.w	r3, r3, #15
 800e55a:	e006      	b.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800e55c:	4b5c      	ldr	r3, [pc, #368]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e55e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e562:	041b      	lsls	r3, r3, #16
 800e564:	0e1b      	lsrs	r3, r3, #24
 800e566:	f003 030f 	and.w	r3, r3, #15
 800e56a:	4a5b      	ldr	r2, [pc, #364]	@ (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e56c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e570:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800e572:	f000 bfbd 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800e576:	2300      	movs	r3, #0
 800e578:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800e57a:	f000 bfb9 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800e57e:	2300      	movs	r3, #0
 800e580:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800e582:	f000 bfb5 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e58c:	d108      	bne.n	800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e58e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff f9ca 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e59c:	f000 bfa8 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5a4:	f000 bfa4 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800e5a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5ac:	1e51      	subs	r1, r2, #1
 800e5ae:	430b      	orrs	r3, r1
 800e5b0:	d136      	bne.n	800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e5b2:	4b47      	ldr	r3, [pc, #284]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e5b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e5b8:	f003 0303 	and.w	r3, r3, #3
 800e5bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800e5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d104      	bne.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800e5c4:	f7fe fb44 	bl	800cc50 <HAL_RCC_GetPCLK2Freq>
 800e5c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800e5ca:	f000 bf91 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d104      	bne.n	800e5de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e5d4:	f7fe fa0c 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e5d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800e5da:	f000 bf89 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800e5de:	4b3c      	ldr	r3, [pc, #240]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5ea:	d106      	bne.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d103      	bne.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800e5f2:	4b3a      	ldr	r3, [pc, #232]	@ (800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e5f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5f6:	f000 bf7b 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800e5fa:	4b35      	ldr	r3, [pc, #212]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e5fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e600:	f003 0302 	and.w	r3, r3, #2
 800e604:	2b02      	cmp	r3, #2
 800e606:	d107      	bne.n	800e618 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800e608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60a:	2b03      	cmp	r3, #3
 800e60c:	d104      	bne.n	800e618 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800e60e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e612:	637b      	str	r3, [r7, #52]	@ 0x34
 800e614:	f000 bf6c 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800e618:	2300      	movs	r3, #0
 800e61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e61c:	f000 bf68 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800e620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e624:	1e91      	subs	r1, r2, #2
 800e626:	430b      	orrs	r3, r1
 800e628:	d136      	bne.n	800e698 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e62a:	4b29      	ldr	r3, [pc, #164]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e62c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e630:	f003 030c 	and.w	r3, r3, #12
 800e634:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800e636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d104      	bne.n	800e646 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e63c:	f7fe faf4 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800e640:	6378      	str	r0, [r7, #52]	@ 0x34
 800e642:	f000 bf55 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800e646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d104      	bne.n	800e656 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e64c:	f7fe f9d0 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e650:	6378      	str	r0, [r7, #52]	@ 0x34
 800e652:	f000 bf4d 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800e656:	4b1e      	ldr	r3, [pc, #120]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e65e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e662:	d106      	bne.n	800e672 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e666:	2b08      	cmp	r3, #8
 800e668:	d103      	bne.n	800e672 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800e66a:	4b1c      	ldr	r3, [pc, #112]	@ (800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e66c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e66e:	f000 bf3f 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800e672:	4b17      	ldr	r3, [pc, #92]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e678:	f003 0302 	and.w	r3, r3, #2
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d107      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800e680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e682:	2b0c      	cmp	r3, #12
 800e684:	d104      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800e686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e68a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e68c:	f000 bf30 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800e690:	2300      	movs	r3, #0
 800e692:	637b      	str	r3, [r7, #52]	@ 0x34
 800e694:	f000 bf2c 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800e698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e69c:	1f11      	subs	r1, r2, #4
 800e69e:	430b      	orrs	r3, r1
 800e6a0:	d13f      	bne.n	800e722 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e6a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e6a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e6ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d104      	bne.n	800e6be <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e6b4:	f7fe fab8 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800e6b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800e6ba:	f000 bf19 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800e6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c0:	2b10      	cmp	r3, #16
 800e6c2:	d10d      	bne.n	800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e6c4:	f7fe f994 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e6c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800e6ca:	f000 bf11 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800e6ce:	bf00      	nop
 800e6d0:	46020c00 	.word	0x46020c00
 800e6d4:	02dc6c00 	.word	0x02dc6c00
 800e6d8:	0818c974 	.word	0x0818c974
 800e6dc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800e6e0:	4ba6      	ldr	r3, [pc, #664]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6ec:	d106      	bne.n	800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f0:	2b20      	cmp	r3, #32
 800e6f2:	d103      	bne.n	800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800e6f4:	4ba2      	ldr	r3, [pc, #648]	@ (800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800e6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6f8:	f000 befa 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800e6fc:	4b9f      	ldr	r3, [pc, #636]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e702:	f003 0302 	and.w	r3, r3, #2
 800e706:	2b02      	cmp	r3, #2
 800e708:	d107      	bne.n	800e71a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800e70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70c:	2b30      	cmp	r3, #48	@ 0x30
 800e70e:	d104      	bne.n	800e71a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800e710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e714:	637b      	str	r3, [r7, #52]	@ 0x34
 800e716:	f000 beeb 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800e71a:	2300      	movs	r3, #0
 800e71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e71e:	f000 bee7 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800e722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e726:	f1a2 0108 	sub.w	r1, r2, #8
 800e72a:	430b      	orrs	r3, r1
 800e72c:	d136      	bne.n	800e79c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e72e:	4b93      	ldr	r3, [pc, #588]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e734:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e738:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800e73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d104      	bne.n	800e74a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e740:	f7fe fa72 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800e744:	6378      	str	r0, [r7, #52]	@ 0x34
 800e746:	f000 bed3 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800e74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74c:	2b40      	cmp	r3, #64	@ 0x40
 800e74e:	d104      	bne.n	800e75a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e750:	f7fe f94e 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e754:	6378      	str	r0, [r7, #52]	@ 0x34
 800e756:	f000 becb 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800e75a:	4b88      	ldr	r3, [pc, #544]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e766:	d106      	bne.n	800e776 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800e768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e76a:	2b80      	cmp	r3, #128	@ 0x80
 800e76c:	d103      	bne.n	800e776 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800e76e:	4b84      	ldr	r3, [pc, #528]	@ (800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800e770:	637b      	str	r3, [r7, #52]	@ 0x34
 800e772:	f000 bebd 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800e776:	4b81      	ldr	r3, [pc, #516]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e77c:	f003 0302 	and.w	r3, r3, #2
 800e780:	2b02      	cmp	r3, #2
 800e782:	d107      	bne.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800e784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e786:	2bc0      	cmp	r3, #192	@ 0xc0
 800e788:	d104      	bne.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800e78a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e790:	f000 beae 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800e794:	2300      	movs	r3, #0
 800e796:	637b      	str	r3, [r7, #52]	@ 0x34
 800e798:	f000 beaa 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800e79c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7a0:	f1a2 0110 	sub.w	r1, r2, #16
 800e7a4:	430b      	orrs	r3, r1
 800e7a6:	d139      	bne.n	800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e7a8:	4b74      	ldr	r3, [pc, #464]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e7aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e7ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d104      	bne.n	800e7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e7ba:	f7fe fa35 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800e7be:	6378      	str	r0, [r7, #52]	@ 0x34
 800e7c0:	f000 be96 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ca:	d104      	bne.n	800e7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e7cc:	f7fe f910 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e7d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800e7d2:	f000 be8d 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800e7d6:	4b69      	ldr	r3, [pc, #420]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e7de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7e2:	d107      	bne.n	800e7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7ea:	d103      	bne.n	800e7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800e7ec:	4b64      	ldr	r3, [pc, #400]	@ (800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800e7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7f0:	f000 be7e 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800e7f4:	4b61      	ldr	r3, [pc, #388]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e7f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e7fa:	f003 0302 	and.w	r3, r3, #2
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d108      	bne.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800e802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e808:	d104      	bne.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800e80a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e80e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e810:	f000 be6e 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800e814:	2300      	movs	r3, #0
 800e816:	637b      	str	r3, [r7, #52]	@ 0x34
 800e818:	f000 be6a 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800e81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e820:	f1a2 0120 	sub.w	r1, r2, #32
 800e824:	430b      	orrs	r3, r1
 800e826:	d158      	bne.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e828:	4b54      	ldr	r3, [pc, #336]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e82a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800e834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e836:	2b00      	cmp	r3, #0
 800e838:	d104      	bne.n	800e844 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800e83a:	f7fe fa1d 	bl	800cc78 <HAL_RCC_GetPCLK3Freq>
 800e83e:	6378      	str	r0, [r7, #52]	@ 0x34
 800e840:	f000 be56 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800e844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e846:	2b01      	cmp	r3, #1
 800e848:	d104      	bne.n	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e84a:	f7fe f8d1 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e84e:	6378      	str	r0, [r7, #52]	@ 0x34
 800e850:	f000 be4e 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e854:	4b49      	ldr	r3, [pc, #292]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e85c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e860:	d106      	bne.n	800e870 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800e862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e864:	2b02      	cmp	r3, #2
 800e866:	d103      	bne.n	800e870 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800e868:	4b45      	ldr	r3, [pc, #276]	@ (800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800e86a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e86c:	f000 be40 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e870:	4b42      	ldr	r3, [pc, #264]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e876:	f003 0302 	and.w	r3, r3, #2
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	d107      	bne.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800e87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e880:	2b03      	cmp	r3, #3
 800e882:	d104      	bne.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800e884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e888:	637b      	str	r3, [r7, #52]	@ 0x34
 800e88a:	f000 be31 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800e88e:	4b3b      	ldr	r3, [pc, #236]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f003 0320 	and.w	r3, r3, #32
 800e896:	2b20      	cmp	r3, #32
 800e898:	d11b      	bne.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800e89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e89c:	2b04      	cmp	r3, #4
 800e89e:	d118      	bne.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e8a0:	4b36      	ldr	r3, [pc, #216]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d005      	beq.n	800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800e8ac:	4b33      	ldr	r3, [pc, #204]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	0e1b      	lsrs	r3, r3, #24
 800e8b2:	f003 030f 	and.w	r3, r3, #15
 800e8b6:	e006      	b.n	800e8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800e8b8:	4b30      	ldr	r3, [pc, #192]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e8ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e8be:	041b      	lsls	r3, r3, #16
 800e8c0:	0e1b      	lsrs	r3, r3, #24
 800e8c2:	f003 030f 	and.w	r3, r3, #15
 800e8c6:	4a2f      	ldr	r2, [pc, #188]	@ (800e984 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8ce:	f000 be0f 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8d6:	f000 be0b 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800e8da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8de:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800e8e2:	430b      	orrs	r3, r1
 800e8e4:	d172      	bne.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800e8e6:	4b25      	ldr	r3, [pc, #148]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e8e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e8ec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e8f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8f8:	d104      	bne.n	800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e8fa:	f7fe f879 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800e8fe:	6378      	str	r0, [r7, #52]	@ 0x34
 800e900:	f000 bdf6 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800e904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e90a:	d108      	bne.n	800e91e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e90c:	f107 0318 	add.w	r3, r7, #24
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff f965 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	637b      	str	r3, [r7, #52]	@ 0x34
 800e91a:	f000 bde9 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800e91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e920:	2b00      	cmp	r3, #0
 800e922:	d104      	bne.n	800e92e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800e924:	f7fe f966 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
 800e928:	6378      	str	r0, [r7, #52]	@ 0x34
 800e92a:	f000 bde1 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800e92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e930:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e934:	d128      	bne.n	800e988 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e936:	4b11      	ldr	r3, [pc, #68]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f003 0320 	and.w	r3, r3, #32
 800e93e:	2b20      	cmp	r3, #32
 800e940:	d118      	bne.n	800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e942:	4b0e      	ldr	r3, [pc, #56]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800e94e:	4b0b      	ldr	r3, [pc, #44]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	0e1b      	lsrs	r3, r3, #24
 800e954:	f003 030f 	and.w	r3, r3, #15
 800e958:	e006      	b.n	800e968 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800e95a:	4b08      	ldr	r3, [pc, #32]	@ (800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800e95c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e960:	041b      	lsls	r3, r3, #16
 800e962:	0e1b      	lsrs	r3, r3, #24
 800e964:	f003 030f 	and.w	r3, r3, #15
 800e968:	4a06      	ldr	r2, [pc, #24]	@ (800e984 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e96e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e970:	f000 bdbe 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800e974:	2300      	movs	r3, #0
 800e976:	637b      	str	r3, [r7, #52]	@ 0x34
 800e978:	f000 bdba 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800e97c:	46020c00 	.word	0x46020c00
 800e980:	00f42400 	.word	0x00f42400
 800e984:	0818c974 	.word	0x0818c974
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800e988:	4baf      	ldr	r3, [pc, #700]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e994:	d107      	bne.n	800e9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800e996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e998:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e99c:	d103      	bne.n	800e9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800e99e:	4bab      	ldr	r3, [pc, #684]	@ (800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800e9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9a2:	f000 bda5 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800e9a6:	4ba8      	ldr	r3, [pc, #672]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9b2:	d107      	bne.n	800e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e9ba:	d103      	bne.n	800e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800e9bc:	4ba3      	ldr	r3, [pc, #652]	@ (800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800e9be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9c0:	f000 bd96 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9c8:	f000 bd92 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800e9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e9d4:	430b      	orrs	r3, r1
 800e9d6:	d158      	bne.n	800ea8a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800e9d8:	4b9b      	ldr	r3, [pc, #620]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e9da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e9de:	f003 0307 	and.w	r3, r3, #7
 800e9e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e6:	2b04      	cmp	r3, #4
 800e9e8:	d84b      	bhi.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800e9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800e9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f0:	0800ea29 	.word	0x0800ea29
 800e9f4:	0800ea05 	.word	0x0800ea05
 800e9f8:	0800ea17 	.word	0x0800ea17
 800e9fc:	0800ea33 	.word	0x0800ea33
 800ea00:	0800ea3d 	.word	0x0800ea3d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe ff8f 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ea12:	f000 bd6d 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea16:	f107 030c 	add.w	r3, r7, #12
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff fa3a 	bl	800de94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ea24:	f000 bd64 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ea28:	f7fe f8e4 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
 800ea2c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ea2e:	f000 bd5f 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ea32:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ea36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ea38:	f000 bd5a 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ea3c:	4b82      	ldr	r3, [pc, #520]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 0320 	and.w	r3, r3, #32
 800ea44:	2b20      	cmp	r3, #32
 800ea46:	d118      	bne.n	800ea7a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ea48:	4b7f      	ldr	r3, [pc, #508]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d005      	beq.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800ea54:	4b7c      	ldr	r3, [pc, #496]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	0e1b      	lsrs	r3, r3, #24
 800ea5a:	f003 030f 	and.w	r3, r3, #15
 800ea5e:	e006      	b.n	800ea6e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800ea60:	4b79      	ldr	r3, [pc, #484]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ea62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ea66:	041b      	lsls	r3, r3, #16
 800ea68:	0e1b      	lsrs	r3, r3, #24
 800ea6a:	f003 030f 	and.w	r3, r3, #15
 800ea6e:	4a78      	ldr	r2, [pc, #480]	@ (800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800ea70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea76:	f000 bd3b 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ea7e:	f000 bd37 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ea86:	f000 bd33 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ea8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea8e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ea92:	430b      	orrs	r3, r1
 800ea94:	d167      	bne.n	800eb66 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ea96:	4b6c      	ldr	r3, [pc, #432]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ea98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ea9c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800eaa0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eaa8:	d036      	beq.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eab0:	d855      	bhi.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800eab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800eab8:	d029      	beq.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800eac0:	d84d      	bhi.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800eac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eac8:	d013      	beq.n	800eaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800eaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eacc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ead0:	d845      	bhi.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800ead2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d015      	beq.n	800eb04 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800ead8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eade:	d13e      	bne.n	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fe ff21 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eaee:	f000 bcff 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaf2:	f107 030c 	add.w	r3, r7, #12
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff f9cc 	bl	800de94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb00:	f000 bcf6 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800eb04:	f7fe f876 	bl	800cbf4 <HAL_RCC_GetHCLKFreq>
 800eb08:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800eb0a:	f000 bcf1 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eb0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800eb12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb14:	f000 bcec 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800eb18:	4b4b      	ldr	r3, [pc, #300]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 0320 	and.w	r3, r3, #32
 800eb20:	2b20      	cmp	r3, #32
 800eb22:	d118      	bne.n	800eb56 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eb24:	4b48      	ldr	r3, [pc, #288]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d005      	beq.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800eb30:	4b45      	ldr	r3, [pc, #276]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	0e1b      	lsrs	r3, r3, #24
 800eb36:	f003 030f 	and.w	r3, r3, #15
 800eb3a:	e006      	b.n	800eb4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800eb3c:	4b42      	ldr	r3, [pc, #264]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eb3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eb42:	041b      	lsls	r3, r3, #16
 800eb44:	0e1b      	lsrs	r3, r3, #24
 800eb46:	f003 030f 	and.w	r3, r3, #15
 800eb4a:	4a41      	ldr	r2, [pc, #260]	@ (800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800eb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eb52:	f000 bccd 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800eb56:	2300      	movs	r3, #0
 800eb58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb5a:	f000 bcc9 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb62:	f000 bcc5 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800eb66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb6a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	d14c      	bne.n	800ec0c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800eb72:	4b35      	ldr	r3, [pc, #212]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eb74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eb78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800eb7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d104      	bne.n	800eb8e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800eb84:	f7fe f850 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800eb88:	6378      	str	r0, [r7, #52]	@ 0x34
 800eb8a:	f000 bcb1 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb94:	d104      	bne.n	800eba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eb96:	f7fd ff2b 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800eb9a:	6378      	str	r0, [r7, #52]	@ 0x34
 800eb9c:	f000 bca8 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800eba0:	4b29      	ldr	r3, [pc, #164]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebac:	d107      	bne.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800ebae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebb4:	d103      	bne.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800ebb6:	4b25      	ldr	r3, [pc, #148]	@ (800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800ebb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebba:	f000 bc99 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ebbe:	4b22      	ldr	r3, [pc, #136]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f003 0320 	and.w	r3, r3, #32
 800ebc6:	2b20      	cmp	r3, #32
 800ebc8:	d11c      	bne.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800ebca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ebd0:	d118      	bne.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ebd2:	4b1d      	ldr	r3, [pc, #116]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d005      	beq.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800ebde:	4b1a      	ldr	r3, [pc, #104]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	0e1b      	lsrs	r3, r3, #24
 800ebe4:	f003 030f 	and.w	r3, r3, #15
 800ebe8:	e006      	b.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800ebea:	4b17      	ldr	r3, [pc, #92]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ebec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ebf0:	041b      	lsls	r3, r3, #16
 800ebf2:	0e1b      	lsrs	r3, r3, #24
 800ebf4:	f003 030f 	and.w	r3, r3, #15
 800ebf8:	4a15      	ldr	r2, [pc, #84]	@ (800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800ebfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec00:	f000 bc76 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ec04:	2300      	movs	r3, #0
 800ec06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec08:	f000 bc72 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ec0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec10:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ec14:	430b      	orrs	r3, r1
 800ec16:	d153      	bne.n	800ecc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ec18:	4b0b      	ldr	r3, [pc, #44]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ec1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ec22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d104      	bne.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ec2a:	f7fd fffd 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800ec2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ec30:	f000 bc5e 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ec34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec3a:	d10b      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ec3c:	f7fd fed8 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800ec40:	6378      	str	r0, [r7, #52]	@ 0x34
 800ec42:	f000 bc55 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800ec46:	bf00      	nop
 800ec48:	46020c00 	.word	0x46020c00
 800ec4c:	00f42400 	.word	0x00f42400
 800ec50:	0818c974 	.word	0x0818c974
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ec54:	4ba1      	ldr	r3, [pc, #644]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec60:	d107      	bne.n	800ec72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800ec62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec68:	d103      	bne.n	800ec72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800ec6a:	4b9d      	ldr	r3, [pc, #628]	@ (800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800ec6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec6e:	f000 bc3f 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ec72:	4b9a      	ldr	r3, [pc, #616]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f003 0320 	and.w	r3, r3, #32
 800ec7a:	2b20      	cmp	r3, #32
 800ec7c:	d11c      	bne.n	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ec84:	d118      	bne.n	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ec86:	4b95      	ldr	r3, [pc, #596]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d005      	beq.n	800ec9e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800ec92:	4b92      	ldr	r3, [pc, #584]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	0e1b      	lsrs	r3, r3, #24
 800ec98:	f003 030f 	and.w	r3, r3, #15
 800ec9c:	e006      	b.n	800ecac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800ec9e:	4b8f      	ldr	r3, [pc, #572]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800eca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eca4:	041b      	lsls	r3, r3, #16
 800eca6:	0e1b      	lsrs	r3, r3, #24
 800eca8:	f003 030f 	and.w	r3, r3, #15
 800ecac:	4a8d      	ldr	r2, [pc, #564]	@ (800eee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800ecae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecb4:	f000 bc1c 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecbc:	f000 bc18 	b.w	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ecc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecc4:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ecc8:	430b      	orrs	r3, r1
 800ecca:	d151      	bne.n	800ed70 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800eccc:	4b83      	ldr	r3, [pc, #524]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ecce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ecd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ecd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecda:	2bc0      	cmp	r3, #192	@ 0xc0
 800ecdc:	d024      	beq.n	800ed28 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800ecde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece0:	2bc0      	cmp	r3, #192	@ 0xc0
 800ece2:	d842      	bhi.n	800ed6a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800ece4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece6:	2b80      	cmp	r3, #128	@ 0x80
 800ece8:	d00d      	beq.n	800ed06 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800ecea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecec:	2b80      	cmp	r3, #128	@ 0x80
 800ecee:	d83c      	bhi.n	800ed6a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d003      	beq.n	800ecfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf8:	2b40      	cmp	r3, #64	@ 0x40
 800ecfa:	d011      	beq.n	800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800ecfc:	e035      	b.n	800ed6a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ecfe:	f7fd ffbb 	bl	800cc78 <HAL_RCC_GetPCLK3Freq>
 800ed02:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ed04:	e3f4      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ed06:	4b75      	ldr	r3, [pc, #468]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed12:	d102      	bne.n	800ed1a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800ed14:	4b72      	ldr	r3, [pc, #456]	@ (800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800ed16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ed18:	e3ea      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed1e:	e3e7      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ed20:	f7fd fe66 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800ed24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ed26:	e3e3      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ed28:	4b6c      	ldr	r3, [pc, #432]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f003 0320 	and.w	r3, r3, #32
 800ed30:	2b20      	cmp	r3, #32
 800ed32:	d117      	bne.n	800ed64 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ed34:	4b69      	ldr	r3, [pc, #420]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d005      	beq.n	800ed4c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800ed40:	4b66      	ldr	r3, [pc, #408]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	0e1b      	lsrs	r3, r3, #24
 800ed46:	f003 030f 	and.w	r3, r3, #15
 800ed4a:	e006      	b.n	800ed5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800ed4c:	4b63      	ldr	r3, [pc, #396]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ed4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ed52:	041b      	lsls	r3, r3, #16
 800ed54:	0e1b      	lsrs	r3, r3, #24
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	4a62      	ldr	r2, [pc, #392]	@ (800eee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800ed5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ed62:	e3c5      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ed64:	2300      	movs	r3, #0
 800ed66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed68:	e3c2      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed6e:	e3bf      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ed70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed74:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	d147      	bne.n	800ee0c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ed7c:	4b57      	ldr	r3, [pc, #348]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ed7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ed86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ed88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d103      	bne.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ed8e:	f7fd ff4b 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800ed92:	6378      	str	r0, [r7, #52]	@ 0x34
 800ed94:	e3ac      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ed96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed9c:	d103      	bne.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ed9e:	f7fd fe27 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800eda2:	6378      	str	r0, [r7, #52]	@ 0x34
 800eda4:	e3a4      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800eda6:	4b4d      	ldr	r3, [pc, #308]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800edae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800edb2:	d106      	bne.n	800edc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800edb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edba:	d102      	bne.n	800edc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800edbc:	4b48      	ldr	r3, [pc, #288]	@ (800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800edbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800edc0:	e396      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800edc2:	4b46      	ldr	r3, [pc, #280]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f003 0320 	and.w	r3, r3, #32
 800edca:	2b20      	cmp	r3, #32
 800edcc:	d11b      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800edce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800edd4:	d117      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800edd6:	4b41      	ldr	r3, [pc, #260]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d005      	beq.n	800edee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800ede2:	4b3e      	ldr	r3, [pc, #248]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	0e1b      	lsrs	r3, r3, #24
 800ede8:	f003 030f 	and.w	r3, r3, #15
 800edec:	e006      	b.n	800edfc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800edee:	4b3b      	ldr	r3, [pc, #236]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800edf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800edf4:	041b      	lsls	r3, r3, #16
 800edf6:	0e1b      	lsrs	r3, r3, #24
 800edf8:	f003 030f 	and.w	r3, r3, #15
 800edfc:	4a39      	ldr	r2, [pc, #228]	@ (800eee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800edfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee04:	e374      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ee06:	2300      	movs	r3, #0
 800ee08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee0a:	e371      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ee0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee10:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ee14:	430b      	orrs	r3, r1
 800ee16:	d16a      	bne.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ee18:	4b30      	ldr	r3, [pc, #192]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ee1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ee24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d120      	bne.n	800ee6c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ee2a:	4b2c      	ldr	r3, [pc, #176]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f003 0320 	and.w	r3, r3, #32
 800ee32:	2b20      	cmp	r3, #32
 800ee34:	d117      	bne.n	800ee66 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ee36:	4b29      	ldr	r3, [pc, #164]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d005      	beq.n	800ee4e <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800ee42:	4b26      	ldr	r3, [pc, #152]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	0e1b      	lsrs	r3, r3, #24
 800ee48:	f003 030f 	and.w	r3, r3, #15
 800ee4c:	e006      	b.n	800ee5c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800ee4e:	4b23      	ldr	r3, [pc, #140]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ee54:	041b      	lsls	r3, r3, #16
 800ee56:	0e1b      	lsrs	r3, r3, #24
 800ee58:	f003 030f 	and.w	r3, r3, #15
 800ee5c:	4a21      	ldr	r2, [pc, #132]	@ (800eee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800ee5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee64:	e344      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800ee66:	2300      	movs	r3, #0
 800ee68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee6a:	e341      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ee6c:	4b1b      	ldr	r3, [pc, #108]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee7a:	d112      	bne.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee82:	d10e      	bne.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee84:	4b15      	ldr	r3, [pc, #84]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800ee86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ee8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee92:	d102      	bne.n	800ee9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800ee94:	23fa      	movs	r3, #250	@ 0xfa
 800ee96:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee98:	e32a      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800ee9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ee9e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eea0:	e326      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800eea2:	4b0e      	ldr	r3, [pc, #56]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eeaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eeae:	d106      	bne.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eeb6:	d102      	bne.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800eeb8:	4b09      	ldr	r3, [pc, #36]	@ (800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800eeba:	637b      	str	r3, [r7, #52]	@ 0x34
 800eebc:	e318      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800eebe:	4b07      	ldr	r3, [pc, #28]	@ (800eedc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800eec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eec4:	f003 0302 	and.w	r3, r3, #2
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d10d      	bne.n	800eee8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800eecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eed2:	d109      	bne.n	800eee8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800eed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eed8:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeda:	e309      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800eedc:	46020c00 	.word	0x46020c00
 800eee0:	00f42400 	.word	0x00f42400
 800eee4:	0818c974 	.word	0x0818c974
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800eee8:	2300      	movs	r3, #0
 800eeea:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeec:	e300      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800eeee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eef2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800eef6:	430b      	orrs	r3, r1
 800eef8:	d164      	bne.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800eefa:	4ba2      	ldr	r3, [pc, #648]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800eefc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ef00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ef04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ef06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d120      	bne.n	800ef4e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ef0c:	4b9d      	ldr	r3, [pc, #628]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f003 0320 	and.w	r3, r3, #32
 800ef14:	2b20      	cmp	r3, #32
 800ef16:	d117      	bne.n	800ef48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ef18:	4b9a      	ldr	r3, [pc, #616]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d005      	beq.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800ef24:	4b97      	ldr	r3, [pc, #604]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	0e1b      	lsrs	r3, r3, #24
 800ef2a:	f003 030f 	and.w	r3, r3, #15
 800ef2e:	e006      	b.n	800ef3e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800ef30:	4b94      	ldr	r3, [pc, #592]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ef36:	041b      	lsls	r3, r3, #16
 800ef38:	0e1b      	lsrs	r3, r3, #24
 800ef3a:	f003 030f 	and.w	r3, r3, #15
 800ef3e:	4a92      	ldr	r2, [pc, #584]	@ (800f188 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800ef40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef46:	e2d3      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef4c:	e2d0      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800ef4e:	4b8d      	ldr	r3, [pc, #564]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ef54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ef5c:	d112      	bne.n	800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef64:	d10e      	bne.n	800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef66:	4b87      	ldr	r3, [pc, #540]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ef6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ef70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef74:	d102      	bne.n	800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800ef76:	23fa      	movs	r3, #250	@ 0xfa
 800ef78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef7a:	e2b9      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800ef7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ef80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef82:	e2b5      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ef84:	4b7f      	ldr	r3, [pc, #508]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef90:	d106      	bne.n	800efa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ef98:	d102      	bne.n	800efa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800ef9a:	4b7c      	ldr	r3, [pc, #496]	@ (800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800ef9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef9e:	e2a7      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800efa0:	4b78      	ldr	r3, [pc, #480]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800efa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800efa6:	f003 0302 	and.w	r3, r3, #2
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d107      	bne.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800efae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800efb4:	d103      	bne.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800efb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efba:	637b      	str	r3, [r7, #52]	@ 0x34
 800efbc:	e298      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800efbe:	2300      	movs	r3, #0
 800efc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800efc2:	e295      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800efc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efc8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800efcc:	430b      	orrs	r3, r1
 800efce:	d147      	bne.n	800f060 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800efd0:	4b6c      	ldr	r3, [pc, #432]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800efd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800efd6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800efda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800efdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d103      	bne.n	800efea <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800efe2:	f7fd fe21 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800efe6:	6378      	str	r0, [r7, #52]	@ 0x34
 800efe8:	e282      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800efea:	4b66      	ldr	r3, [pc, #408]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800efec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eff8:	d112      	bne.n	800f020 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800effa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800effc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f000:	d10e      	bne.n	800f020 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f002:	4b60      	ldr	r3, [pc, #384]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f00c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f010:	d102      	bne.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800f012:	23fa      	movs	r3, #250	@ 0xfa
 800f014:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f016:	e26b      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f018:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f01c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f01e:	e267      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f020:	4b58      	ldr	r3, [pc, #352]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f02c:	d106      	bne.n	800f03c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800f02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f030:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f034:	d102      	bne.n	800f03c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800f036:	4b55      	ldr	r3, [pc, #340]	@ (800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f038:	637b      	str	r3, [r7, #52]	@ 0x34
 800f03a:	e259      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f03c:	4b51      	ldr	r3, [pc, #324]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f03e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f042:	f003 0302 	and.w	r3, r3, #2
 800f046:	2b02      	cmp	r3, #2
 800f048:	d107      	bne.n	800f05a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800f04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f04c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f050:	d103      	bne.n	800f05a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800f052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f056:	637b      	str	r3, [r7, #52]	@ 0x34
 800f058:	e24a      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f05a:	2300      	movs	r3, #0
 800f05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f05e:	e247      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f064:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800f068:	430b      	orrs	r3, r1
 800f06a:	d12d      	bne.n	800f0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f06c:	4b45      	ldr	r3, [pc, #276]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f06e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f072:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800f076:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f078:	4b42      	ldr	r3, [pc, #264]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f084:	d105      	bne.n	800f092 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d102      	bne.n	800f092 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800f08c:	4b3f      	ldr	r3, [pc, #252]	@ (800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f08e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f090:	e22e      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f098:	d107      	bne.n	800f0aa <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f09a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fc44 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0a8:	e222      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0b0:	d107      	bne.n	800f0c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0b2:	f107 0318 	add.w	r3, r7, #24
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe fd92 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0c0:	e216      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0c6:	e213      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f0c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0cc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800f0d0:	430b      	orrs	r3, r1
 800f0d2:	d15d      	bne.n	800f190 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f0d4:	4b2b      	ldr	r3, [pc, #172]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f0d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f0da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800f0de:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f0e6:	d028      	beq.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f0ee:	d845      	bhi.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f0f6:	d013      	beq.n	800f120 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f0fe:	d83d      	bhi.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800f100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f102:	2b00      	cmp	r3, #0
 800f104:	d004      	beq.n	800f110 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800f106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f10c:	d004      	beq.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800f10e:	e035      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f110:	f7fd fd9e 	bl	800cc50 <HAL_RCC_GetPCLK2Freq>
 800f114:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f116:	e1eb      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f118:	f7fd fc6a 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800f11c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f11e:	e1e7      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f120:	4b18      	ldr	r3, [pc, #96]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f12c:	d102      	bne.n	800f134 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800f12e:	4b17      	ldr	r3, [pc, #92]	@ (800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f130:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f132:	e1dd      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f134:	2300      	movs	r3, #0
 800f136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f138:	e1da      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f13a:	4b12      	ldr	r3, [pc, #72]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 0320 	and.w	r3, r3, #32
 800f142:	2b20      	cmp	r3, #32
 800f144:	d117      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f146:	4b0f      	ldr	r3, [pc, #60]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d005      	beq.n	800f15e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800f152:	4b0c      	ldr	r3, [pc, #48]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f154:	689b      	ldr	r3, [r3, #8]
 800f156:	0e1b      	lsrs	r3, r3, #24
 800f158:	f003 030f 	and.w	r3, r3, #15
 800f15c:	e006      	b.n	800f16c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800f15e:	4b09      	ldr	r3, [pc, #36]	@ (800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f164:	041b      	lsls	r3, r3, #16
 800f166:	0e1b      	lsrs	r3, r3, #24
 800f168:	f003 030f 	and.w	r3, r3, #15
 800f16c:	4a06      	ldr	r2, [pc, #24]	@ (800f188 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800f16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f172:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f174:	e1bc      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f176:	2300      	movs	r3, #0
 800f178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f17a:	e1b9      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f17c:	2300      	movs	r3, #0
 800f17e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f180:	e1b6      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f182:	bf00      	nop
 800f184:	46020c00 	.word	0x46020c00
 800f188:	0818c974 	.word	0x0818c974
 800f18c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f194:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800f198:	430b      	orrs	r3, r1
 800f19a:	d156      	bne.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f19c:	4ba5      	ldr	r3, [pc, #660]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f19e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f1a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f1a6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f1ae:	d028      	beq.n	800f202 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f1b6:	d845      	bhi.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1be:	d013      	beq.n	800f1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1c6:	d83d      	bhi.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d004      	beq.n	800f1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1d4:	d004      	beq.n	800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800f1d6:	e035      	b.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f1d8:	f7fd fd26 	bl	800cc28 <HAL_RCC_GetPCLK1Freq>
 800f1dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f1de:	e187      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f1e0:	f7fd fc06 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800f1e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f1e6:	e183      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f1e8:	4b92      	ldr	r3, [pc, #584]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f1f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1f4:	d102      	bne.n	800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800f1f6:	4b90      	ldr	r3, [pc, #576]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f1f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f1fa:	e179      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f200:	e176      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f202:	4b8c      	ldr	r3, [pc, #560]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f003 0320 	and.w	r3, r3, #32
 800f20a:	2b20      	cmp	r3, #32
 800f20c:	d117      	bne.n	800f23e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f20e:	4b89      	ldr	r3, [pc, #548]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d005      	beq.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800f21a:	4b86      	ldr	r3, [pc, #536]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	0e1b      	lsrs	r3, r3, #24
 800f220:	f003 030f 	and.w	r3, r3, #15
 800f224:	e006      	b.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800f226:	4b83      	ldr	r3, [pc, #524]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f22c:	041b      	lsls	r3, r3, #16
 800f22e:	0e1b      	lsrs	r3, r3, #24
 800f230:	f003 030f 	and.w	r3, r3, #15
 800f234:	4a81      	ldr	r2, [pc, #516]	@ (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800f236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f23a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f23c:	e158      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f23e:	2300      	movs	r3, #0
 800f240:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f242:	e155      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f244:	2300      	movs	r3, #0
 800f246:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f248:	e152      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800f24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f24e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800f252:	430b      	orrs	r3, r1
 800f254:	d177      	bne.n	800f346 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800f256:	4b77      	ldr	r3, [pc, #476]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f25c:	f003 0318 	and.w	r3, r3, #24
 800f260:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f264:	2b18      	cmp	r3, #24
 800f266:	d86b      	bhi.n	800f340 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800f268:	a201      	add	r2, pc, #4	@ (adr r2, 800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26e:	bf00      	nop
 800f270:	0800f2d5 	.word	0x0800f2d5
 800f274:	0800f341 	.word	0x0800f341
 800f278:	0800f341 	.word	0x0800f341
 800f27c:	0800f341 	.word	0x0800f341
 800f280:	0800f341 	.word	0x0800f341
 800f284:	0800f341 	.word	0x0800f341
 800f288:	0800f341 	.word	0x0800f341
 800f28c:	0800f341 	.word	0x0800f341
 800f290:	0800f2dd 	.word	0x0800f2dd
 800f294:	0800f341 	.word	0x0800f341
 800f298:	0800f341 	.word	0x0800f341
 800f29c:	0800f341 	.word	0x0800f341
 800f2a0:	0800f341 	.word	0x0800f341
 800f2a4:	0800f341 	.word	0x0800f341
 800f2a8:	0800f341 	.word	0x0800f341
 800f2ac:	0800f341 	.word	0x0800f341
 800f2b0:	0800f2e5 	.word	0x0800f2e5
 800f2b4:	0800f341 	.word	0x0800f341
 800f2b8:	0800f341 	.word	0x0800f341
 800f2bc:	0800f341 	.word	0x0800f341
 800f2c0:	0800f341 	.word	0x0800f341
 800f2c4:	0800f341 	.word	0x0800f341
 800f2c8:	0800f341 	.word	0x0800f341
 800f2cc:	0800f341 	.word	0x0800f341
 800f2d0:	0800f2ff 	.word	0x0800f2ff
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800f2d4:	f7fd fcd0 	bl	800cc78 <HAL_RCC_GetPCLK3Freq>
 800f2d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f2da:	e109      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f2dc:	f7fd fb88 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800f2e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f2e2:	e105      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f2e4:	4b53      	ldr	r3, [pc, #332]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f2ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2f0:	d102      	bne.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800f2f2:	4b51      	ldr	r3, [pc, #324]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f2f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f2f6:	e0fb      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f2fc:	e0f8      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f2fe:	4b4d      	ldr	r3, [pc, #308]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f003 0320 	and.w	r3, r3, #32
 800f306:	2b20      	cmp	r3, #32
 800f308:	d117      	bne.n	800f33a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f30a:	4b4a      	ldr	r3, [pc, #296]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f312:	2b00      	cmp	r3, #0
 800f314:	d005      	beq.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800f316:	4b47      	ldr	r3, [pc, #284]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	0e1b      	lsrs	r3, r3, #24
 800f31c:	f003 030f 	and.w	r3, r3, #15
 800f320:	e006      	b.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800f322:	4b44      	ldr	r3, [pc, #272]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f328:	041b      	lsls	r3, r3, #16
 800f32a:	0e1b      	lsrs	r3, r3, #24
 800f32c:	f003 030f 	and.w	r3, r3, #15
 800f330:	4a42      	ldr	r2, [pc, #264]	@ (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800f332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f336:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f338:	e0da      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f33a:	2300      	movs	r3, #0
 800f33c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f33e:	e0d7      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f340:	2300      	movs	r3, #0
 800f342:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f344:	e0d4      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800f346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f34a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800f34e:	430b      	orrs	r3, r1
 800f350:	d155      	bne.n	800f3fe <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800f352:	4b38      	ldr	r3, [pc, #224]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f354:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f358:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800f35c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f360:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f364:	d013      	beq.n	800f38e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800f366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f368:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f36c:	d844      	bhi.n	800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800f36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f370:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f374:	d013      	beq.n	800f39e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800f376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f37c:	d83c      	bhi.n	800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800f37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f380:	2b00      	cmp	r3, #0
 800f382:	d014      	beq.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800f384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f38a:	d014      	beq.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800f38c:	e034      	b.n	800f3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f38e:	f107 0318 	add.w	r3, r7, #24
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe fc24 	bl	800dbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f39c:	e0a8      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f39e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fe fac2 	bl	800d92c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3ac:	e0a0      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f3ae:	f7fd fb1f 	bl	800c9f0 <HAL_RCC_GetSysClockFreq>
 800f3b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f3b4:	e09c      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f3b6:	4b1f      	ldr	r3, [pc, #124]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f003 0320 	and.w	r3, r3, #32
 800f3be:	2b20      	cmp	r3, #32
 800f3c0:	d117      	bne.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3c2:	4b1c      	ldr	r3, [pc, #112]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d005      	beq.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800f3ce:	4b19      	ldr	r3, [pc, #100]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	0e1b      	lsrs	r3, r3, #24
 800f3d4:	f003 030f 	and.w	r3, r3, #15
 800f3d8:	e006      	b.n	800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800f3da:	4b16      	ldr	r3, [pc, #88]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f3dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f3e0:	041b      	lsls	r3, r3, #16
 800f3e2:	0e1b      	lsrs	r3, r3, #24
 800f3e4:	f003 030f 	and.w	r3, r3, #15
 800f3e8:	4a14      	ldr	r2, [pc, #80]	@ (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800f3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f3f0:	e07e      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3f6:	e07b      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3fc:	e078      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800f3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f402:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800f406:	430b      	orrs	r3, r1
 800f408:	d138      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800f40a:	4b0a      	ldr	r3, [pc, #40]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f40c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f414:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800f416:	4b07      	ldr	r3, [pc, #28]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f41c:	f003 0302 	and.w	r3, r3, #2
 800f420:	2b02      	cmp	r3, #2
 800f422:	d10d      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800f424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10a      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800f42a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f42e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f430:	e05e      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f432:	bf00      	nop
 800f434:	46020c00 	.word	0x46020c00
 800f438:	00f42400 	.word	0x00f42400
 800f43c:	0818c974 	.word	0x0818c974
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800f440:	4b2e      	ldr	r3, [pc, #184]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800f442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f44a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f44e:	d112      	bne.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800f450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f456:	d10e      	bne.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f458:	4b28      	ldr	r3, [pc, #160]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800f45a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f45e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f466:	d102      	bne.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800f468:	23fa      	movs	r3, #250	@ 0xfa
 800f46a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f46c:	e040      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f46e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f472:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f474:	e03c      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800f476:	2300      	movs	r3, #0
 800f478:	637b      	str	r3, [r7, #52]	@ 0x34
 800f47a:	e039      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800f47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f480:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f484:	430b      	orrs	r3, r1
 800f486:	d131      	bne.n	800f4ec <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800f488:	4b1c      	ldr	r3, [pc, #112]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800f48a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f48e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f492:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800f494:	4b19      	ldr	r3, [pc, #100]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f49c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4a0:	d105      	bne.n	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800f4a8:	4b15      	ldr	r3, [pc, #84]	@ (800f500 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800f4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ac:	e020      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800f4ae:	4b13      	ldr	r3, [pc, #76]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f4b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4ba:	d106      	bne.n	800f4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800f4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4c2:	d102      	bne.n	800f4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800f4c4:	4b0f      	ldr	r3, [pc, #60]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800f4c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4c8:	e012      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800f4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4d6:	d106      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4de:	d102      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800f4e0:	4b09      	ldr	r3, [pc, #36]	@ (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800f4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4e4:	e004      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ea:	e001      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800f4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3738      	adds	r7, #56	@ 0x38
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	46020c00 	.word	0x46020c00
 800f500:	02dc6c00 	.word	0x02dc6c00
 800f504:	016e3600 	.word	0x016e3600
 800f508:	00f42400 	.word	0x00f42400

0800f50c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800f514:	4b47      	ldr	r3, [pc, #284]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4a46      	ldr	r2, [pc, #280]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f51a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f51e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f520:	f7f9 fec4 	bl	80092ac <HAL_GetTick>
 800f524:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f526:	e008      	b.n	800f53a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f528:	f7f9 fec0 	bl	80092ac <HAL_GetTick>
 800f52c:	4602      	mov	r2, r0
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	2b02      	cmp	r3, #2
 800f534:	d901      	bls.n	800f53a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f536:	2303      	movs	r3, #3
 800f538:	e077      	b.n	800f62a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f53a:	4b3e      	ldr	r3, [pc, #248]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1f0      	bne.n	800f528 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800f546:	4b3b      	ldr	r3, [pc, #236]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800f54e:	f023 0303 	bic.w	r3, r3, #3
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	6811      	ldr	r1, [r2, #0]
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	6852      	ldr	r2, [r2, #4]
 800f55a:	3a01      	subs	r2, #1
 800f55c:	0212      	lsls	r2, r2, #8
 800f55e:	430a      	orrs	r2, r1
 800f560:	4934      	ldr	r1, [pc, #208]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f562:	4313      	orrs	r3, r2
 800f564:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800f566:	4b33      	ldr	r3, [pc, #204]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f56a:	4b33      	ldr	r3, [pc, #204]	@ (800f638 <RCCEx_PLL2_Config+0x12c>)
 800f56c:	4013      	ands	r3, r2
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	6892      	ldr	r2, [r2, #8]
 800f572:	3a01      	subs	r2, #1
 800f574:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	68d2      	ldr	r2, [r2, #12]
 800f57c:	3a01      	subs	r2, #1
 800f57e:	0252      	lsls	r2, r2, #9
 800f580:	b292      	uxth	r2, r2
 800f582:	4311      	orrs	r1, r2
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	6912      	ldr	r2, [r2, #16]
 800f588:	3a01      	subs	r2, #1
 800f58a:	0412      	lsls	r2, r2, #16
 800f58c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800f590:	4311      	orrs	r1, r2
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	6952      	ldr	r2, [r2, #20]
 800f596:	3a01      	subs	r2, #1
 800f598:	0612      	lsls	r2, r2, #24
 800f59a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800f59e:	430a      	orrs	r2, r1
 800f5a0:	4924      	ldr	r1, [pc, #144]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800f5a6:	4b23      	ldr	r3, [pc, #140]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5aa:	f023 020c 	bic.w	r2, r3, #12
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	699b      	ldr	r3, [r3, #24]
 800f5b2:	4920      	ldr	r1, [pc, #128]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800f5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6a1b      	ldr	r3, [r3, #32]
 800f5c0:	491c      	ldr	r1, [pc, #112]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800f5c6:	4b1b      	ldr	r3, [pc, #108]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ca:	4a1a      	ldr	r2, [pc, #104]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5cc:	f023 0310 	bic.w	r3, r3, #16
 800f5d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f5d2:	4b18      	ldr	r3, [pc, #96]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	69d2      	ldr	r2, [r2, #28]
 800f5e2:	00d2      	lsls	r2, r2, #3
 800f5e4:	4913      	ldr	r1, [pc, #76]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800f5ea:	4b12      	ldr	r3, [pc, #72]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ee:	4a11      	ldr	r2, [pc, #68]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5f0:	f043 0310 	orr.w	r3, r3, #16
 800f5f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800f5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a0e      	ldr	r2, [pc, #56]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f5fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f600:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f602:	f7f9 fe53 	bl	80092ac <HAL_GetTick>
 800f606:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f608:	e008      	b.n	800f61c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f60a:	f7f9 fe4f 	bl	80092ac <HAL_GetTick>
 800f60e:	4602      	mov	r2, r0
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	2b02      	cmp	r3, #2
 800f616:	d901      	bls.n	800f61c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800f618:	2303      	movs	r3, #3
 800f61a:	e006      	b.n	800f62a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f61c:	4b05      	ldr	r3, [pc, #20]	@ (800f634 <RCCEx_PLL2_Config+0x128>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f624:	2b00      	cmp	r3, #0
 800f626:	d0f0      	beq.n	800f60a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800f628:	2300      	movs	r3, #0

}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	46020c00 	.word	0x46020c00
 800f638:	80800000 	.word	0x80800000

0800f63c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800f644:	4b47      	ldr	r3, [pc, #284]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a46      	ldr	r2, [pc, #280]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f64a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f64e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f650:	f7f9 fe2c 	bl	80092ac <HAL_GetTick>
 800f654:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f656:	e008      	b.n	800f66a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f658:	f7f9 fe28 	bl	80092ac <HAL_GetTick>
 800f65c:	4602      	mov	r2, r0
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	2b02      	cmp	r3, #2
 800f664:	d901      	bls.n	800f66a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e077      	b.n	800f75a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f66a:	4b3e      	ldr	r3, [pc, #248]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1f0      	bne.n	800f658 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800f676:	4b3b      	ldr	r3, [pc, #236]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f67a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800f67e:	f023 0303 	bic.w	r3, r3, #3
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	6811      	ldr	r1, [r2, #0]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	6852      	ldr	r2, [r2, #4]
 800f68a:	3a01      	subs	r2, #1
 800f68c:	0212      	lsls	r2, r2, #8
 800f68e:	430a      	orrs	r2, r1
 800f690:	4934      	ldr	r1, [pc, #208]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f692:	4313      	orrs	r3, r2
 800f694:	630b      	str	r3, [r1, #48]	@ 0x30
 800f696:	4b33      	ldr	r3, [pc, #204]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f69a:	4b33      	ldr	r3, [pc, #204]	@ (800f768 <RCCEx_PLL3_Config+0x12c>)
 800f69c:	4013      	ands	r3, r2
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	6892      	ldr	r2, [r2, #8]
 800f6a2:	3a01      	subs	r2, #1
 800f6a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	68d2      	ldr	r2, [r2, #12]
 800f6ac:	3a01      	subs	r2, #1
 800f6ae:	0252      	lsls	r2, r2, #9
 800f6b0:	b292      	uxth	r2, r2
 800f6b2:	4311      	orrs	r1, r2
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	6912      	ldr	r2, [r2, #16]
 800f6b8:	3a01      	subs	r2, #1
 800f6ba:	0412      	lsls	r2, r2, #16
 800f6bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800f6c0:	4311      	orrs	r1, r2
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	6952      	ldr	r2, [r2, #20]
 800f6c6:	3a01      	subs	r2, #1
 800f6c8:	0612      	lsls	r2, r2, #24
 800f6ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800f6ce:	430a      	orrs	r2, r1
 800f6d0:	4924      	ldr	r1, [pc, #144]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800f6d6:	4b23      	ldr	r3, [pc, #140]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6da:	f023 020c 	bic.w	r2, r3, #12
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	699b      	ldr	r3, [r3, #24]
 800f6e2:	4920      	ldr	r1, [pc, #128]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800f6e8:	4b1e      	ldr	r3, [pc, #120]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a1b      	ldr	r3, [r3, #32]
 800f6f0:	491c      	ldr	r1, [pc, #112]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800f6f6:	4b1b      	ldr	r3, [pc, #108]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6fa:	4a1a      	ldr	r2, [pc, #104]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f6fc:	f023 0310 	bic.w	r3, r3, #16
 800f700:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f702:	4b18      	ldr	r3, [pc, #96]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f70a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	69d2      	ldr	r2, [r2, #28]
 800f712:	00d2      	lsls	r2, r2, #3
 800f714:	4913      	ldr	r1, [pc, #76]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f716:	4313      	orrs	r3, r2
 800f718:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800f71a:	4b12      	ldr	r3, [pc, #72]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f71e:	4a11      	ldr	r2, [pc, #68]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f720:	f043 0310 	orr.w	r3, r3, #16
 800f724:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800f726:	4b0f      	ldr	r3, [pc, #60]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a0e      	ldr	r2, [pc, #56]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f72c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f730:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f732:	f7f9 fdbb 	bl	80092ac <HAL_GetTick>
 800f736:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f738:	e008      	b.n	800f74c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f73a:	f7f9 fdb7 	bl	80092ac <HAL_GetTick>
 800f73e:	4602      	mov	r2, r0
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	2b02      	cmp	r3, #2
 800f746:	d901      	bls.n	800f74c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800f748:	2303      	movs	r3, #3
 800f74a:	e006      	b.n	800f75a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f74c:	4b05      	ldr	r3, [pc, #20]	@ (800f764 <RCCEx_PLL3_Config+0x128>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0f0      	beq.n	800f73a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	46020c00 	.word	0x46020c00
 800f768:	80800000 	.word	0x80800000

0800f76c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	e0fb      	b.n	800f976 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4a7f      	ldr	r2, [pc, #508]	@ (800f980 <HAL_SPI_Init+0x214>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d004      	beq.n	800f792 <HAL_SPI_Init+0x26>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a7d      	ldr	r2, [pc, #500]	@ (800f984 <HAL_SPI_Init+0x218>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	e000      	b.n	800f794 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800f792:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a78      	ldr	r2, [pc, #480]	@ (800f980 <HAL_SPI_Init+0x214>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d004      	beq.n	800f7ae <HAL_SPI_Init+0x42>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a76      	ldr	r2, [pc, #472]	@ (800f984 <HAL_SPI_Init+0x218>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d105      	bne.n	800f7ba <HAL_SPI_Init+0x4e>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	2b0f      	cmp	r3, #15
 800f7b4:	d901      	bls.n	800f7ba <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e0dd      	b.n	800f976 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f001 f9be 	bl	8010b3c <SPI_GetPacketSize>
 800f7c0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a6e      	ldr	r2, [pc, #440]	@ (800f980 <HAL_SPI_Init+0x214>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d004      	beq.n	800f7d6 <HAL_SPI_Init+0x6a>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a6c      	ldr	r2, [pc, #432]	@ (800f984 <HAL_SPI_Init+0x218>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d102      	bne.n	800f7dc <HAL_SPI_Init+0x70>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2b08      	cmp	r3, #8
 800f7da:	d816      	bhi.n	800f80a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f7e0:	4a69      	ldr	r2, [pc, #420]	@ (800f988 <HAL_SPI_Init+0x21c>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d00e      	beq.n	800f804 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a68      	ldr	r2, [pc, #416]	@ (800f98c <HAL_SPI_Init+0x220>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d009      	beq.n	800f804 <HAL_SPI_Init+0x98>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a66      	ldr	r2, [pc, #408]	@ (800f990 <HAL_SPI_Init+0x224>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d004      	beq.n	800f804 <HAL_SPI_Init+0x98>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a65      	ldr	r2, [pc, #404]	@ (800f994 <HAL_SPI_Init+0x228>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d104      	bne.n	800f80e <HAL_SPI_Init+0xa2>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2b10      	cmp	r3, #16
 800f808:	d901      	bls.n	800f80e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800f80a:	2301      	movs	r3, #1
 800f80c:	e0b3      	b.n	800f976 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f814:	b2db      	uxtb	r3, r3
 800f816:	2b00      	cmp	r3, #0
 800f818:	d106      	bne.n	800f828 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7f1 fdae 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f022 0201 	bic.w	r2, r2, #1
 800f83e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f84a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	699b      	ldr	r3, [r3, #24]
 800f850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f854:	d119      	bne.n	800f88a <HAL_SPI_Init+0x11e>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f85e:	d103      	bne.n	800f868 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f864:	2b00      	cmp	r3, #0
 800f866:	d008      	beq.n	800f87a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d10c      	bne.n	800f88a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f878:	d107      	bne.n	800f88a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f888:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00f      	beq.n	800f8b6 <HAL_SPI_Init+0x14a>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	2b06      	cmp	r3, #6
 800f89c:	d90b      	bls.n	800f8b6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	601a      	str	r2, [r3, #0]
 800f8b4:	e007      	b.n	800f8c6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f8c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	69da      	ldr	r2, [r3, #28]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8ce:	431a      	orrs	r2, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	431a      	orrs	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8d8:	ea42 0103 	orr.w	r1, r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	430a      	orrs	r2, r1
 800f8e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8f0:	431a      	orrs	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f6:	431a      	orrs	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	699b      	ldr	r3, [r3, #24]
 800f8fc:	431a      	orrs	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	691b      	ldr	r3, [r3, #16]
 800f902:	431a      	orrs	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	695b      	ldr	r3, [r3, #20]
 800f908:	431a      	orrs	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	431a      	orrs	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	431a      	orrs	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f91a:	431a      	orrs	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	431a      	orrs	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f926:	431a      	orrs	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f92c:	431a      	orrs	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f932:	ea42 0103 	orr.w	r1, r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	430a      	orrs	r2, r1
 800f940:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00a      	beq.n	800f964 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	430a      	orrs	r2, r1
 800f962:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	46002000 	.word	0x46002000
 800f984:	56002000 	.word	0x56002000
 800f988:	40013000 	.word	0x40013000
 800f98c:	50013000 	.word	0x50013000
 800f990:	40003800 	.word	0x40003800
 800f994:	50003800 	.word	0x50003800

0800f998 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b088      	sub	sp, #32
 800f99c:	af02      	add	r7, sp, #8
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	603b      	str	r3, [r7, #0]
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3320      	adds	r3, #32
 800f9ae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f9b0:	f7f9 fc7c 	bl	80092ac <HAL_GetTick>
 800f9b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d001      	beq.n	800f9c6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f9c2:	2302      	movs	r3, #2
 800f9c4:	e1f3      	b.n	800fdae <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <HAL_SPI_Transmit+0x3a>
 800f9cc:	88fb      	ldrh	r3, [r7, #6]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d101      	bne.n	800f9d6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e1eb      	b.n	800fdae <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d101      	bne.n	800f9e4 <HAL_SPI_Transmit+0x4c>
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	e1e4      	b.n	800fdae <HAL_SPI_Transmit+0x416>
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2203      	movs	r2, #3
 800f9f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	68ba      	ldr	r2, [r7, #8]
 800fa00:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	88fa      	ldrh	r2, [r7, #6]
 800fa06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	88fa      	ldrh	r2, [r7, #6]
 800fa0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800fa3c:	d108      	bne.n	800fa50 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa4c:	601a      	str	r2, [r3, #0]
 800fa4e:	e009      	b.n	800fa64 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800fa62:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	0c1b      	lsrs	r3, r3, #16
 800fa6c:	041b      	lsls	r3, r3, #16
 800fa6e:	88f9      	ldrh	r1, [r7, #6]
 800fa70:	68fa      	ldr	r2, [r7, #12]
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	430b      	orrs	r3, r1
 800fa76:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f042 0201 	orr.w	r2, r2, #1
 800fa86:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d10c      	bne.n	800fab0 <HAL_SPI_Transmit+0x118>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fa9e:	d107      	bne.n	800fab0 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800faae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	2b0f      	cmp	r3, #15
 800fab6:	d95b      	bls.n	800fb70 <HAL_SPI_Transmit+0x1d8>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a8f      	ldr	r2, [pc, #572]	@ (800fcfc <HAL_SPI_Transmit+0x364>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d04f      	beq.n	800fb62 <HAL_SPI_Transmit+0x1ca>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a8e      	ldr	r2, [pc, #568]	@ (800fd00 <HAL_SPI_Transmit+0x368>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d04a      	beq.n	800fb62 <HAL_SPI_Transmit+0x1ca>
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a8c      	ldr	r2, [pc, #560]	@ (800fd04 <HAL_SPI_Transmit+0x36c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d045      	beq.n	800fb62 <HAL_SPI_Transmit+0x1ca>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a8b      	ldr	r2, [pc, #556]	@ (800fd08 <HAL_SPI_Transmit+0x370>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d147      	bne.n	800fb70 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fae0:	e03f      	b.n	800fb62 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	695b      	ldr	r3, [r3, #20]
 800fae8:	f003 0302 	and.w	r3, r3, #2
 800faec:	2b02      	cmp	r3, #2
 800faee:	d114      	bne.n	800fb1a <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6812      	ldr	r2, [r2, #0]
 800fafa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb00:	1d1a      	adds	r2, r3, #4
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fb18:	e023      	b.n	800fb62 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb1a:	f7f9 fbc7 	bl	80092ac <HAL_GetTick>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	683a      	ldr	r2, [r7, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d803      	bhi.n	800fb32 <HAL_SPI_Transmit+0x19a>
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb30:	d102      	bne.n	800fb38 <HAL_SPI_Transmit+0x1a0>
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d114      	bne.n	800fb62 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f000 ff31 	bl	80109a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2201      	movs	r2, #1
 800fb52:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	e125      	b.n	800fdae <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1b9      	bne.n	800fae2 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fb6e:	e0f8      	b.n	800fd62 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	2b07      	cmp	r3, #7
 800fb76:	f240 80ed 	bls.w	800fd54 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fb7a:	e05d      	b.n	800fc38 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	695b      	ldr	r3, [r3, #20]
 800fb82:	f003 0302 	and.w	r3, r3, #2
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	d132      	bne.n	800fbf0 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d918      	bls.n	800fbc8 <HAL_SPI_Transmit+0x230>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d014      	beq.n	800fbc8 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6812      	ldr	r2, [r2, #0]
 800fba8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbae:	1d1a      	adds	r2, r3, #4
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	3b02      	subs	r3, #2
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fbc6:	e037      	b.n	800fc38 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbcc:	881a      	ldrh	r2, [r3, #0]
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbd6:	1c9a      	adds	r2, r3, #2
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fbee:	e023      	b.n	800fc38 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbf0:	f7f9 fb5c 	bl	80092ac <HAL_GetTick>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d803      	bhi.n	800fc08 <HAL_SPI_Transmit+0x270>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc06:	d102      	bne.n	800fc0e <HAL_SPI_Transmit+0x276>
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d114      	bne.n	800fc38 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f000 fec6 	bl	80109a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2201      	movs	r2, #1
 800fc28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800fc34:	2303      	movs	r3, #3
 800fc36:	e0ba      	b.n	800fdae <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d19b      	bne.n	800fb7c <HAL_SPI_Transmit+0x1e4>
 800fc44:	e08d      	b.n	800fd62 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	695b      	ldr	r3, [r3, #20]
 800fc4c:	f003 0302 	and.w	r3, r3, #2
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d15b      	bne.n	800fd0c <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d918      	bls.n	800fc92 <HAL_SPI_Transmit+0x2fa>
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc64:	2b40      	cmp	r3, #64	@ 0x40
 800fc66:	d914      	bls.n	800fc92 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6812      	ldr	r2, [r2, #0]
 800fc72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc78:	1d1a      	adds	r2, r3, #4
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	3b04      	subs	r3, #4
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fc90:	e060      	b.n	800fd54 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d917      	bls.n	800fcce <HAL_SPI_Transmit+0x336>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d013      	beq.n	800fcce <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcaa:	881a      	ldrh	r2, [r3, #0]
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcb4:	1c9a      	adds	r2, r3, #2
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	3b02      	subs	r3, #2
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fccc:	e042      	b.n	800fd54 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3320      	adds	r3, #32
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fce0:	1c5a      	adds	r2, r3, #1
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fcf8:	e02c      	b.n	800fd54 <HAL_SPI_Transmit+0x3bc>
 800fcfa:	bf00      	nop
 800fcfc:	40013000 	.word	0x40013000
 800fd00:	50013000 	.word	0x50013000
 800fd04:	40003800 	.word	0x40003800
 800fd08:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd0c:	f7f9 face 	bl	80092ac <HAL_GetTick>
 800fd10:	4602      	mov	r2, r0
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	683a      	ldr	r2, [r7, #0]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d803      	bhi.n	800fd24 <HAL_SPI_Transmit+0x38c>
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd22:	d102      	bne.n	800fd2a <HAL_SPI_Transmit+0x392>
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d114      	bne.n	800fd54 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f000 fe38 	bl	80109a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fd36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800fd50:	2303      	movs	r3, #3
 800fd52:	e02c      	b.n	800fdae <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f47f af72 	bne.w	800fc46 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	2108      	movs	r1, #8
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 feb7 	bl	8010ae0 <SPI_WaitOnFlagUntilTimeout>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d007      	beq.n	800fd88 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fd7e:	f043 0220 	orr.w	r2, r3, #32
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f000 fe09 	bl	80109a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d001      	beq.n	800fdac <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	e000      	b.n	800fdae <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 800fdac:	2300      	movs	r3, #0
  }
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3718      	adds	r7, #24
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop

0800fdb8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3330      	adds	r3, #48	@ 0x30
 800fdce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fdd0:	f7f9 fa6c 	bl	80092ac <HAL_GetTick>
 800fdd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d001      	beq.n	800fde6 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800fde2:	2302      	movs	r3, #2
 800fde4:	e17e      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d002      	beq.n	800fdf2 <HAL_SPI_Receive+0x3a>
 800fdec:	88fb      	ldrh	r3, [r7, #6]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e176      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d101      	bne.n	800fe04 <HAL_SPI_Receive+0x4c>
 800fe00:	2302      	movs	r3, #2
 800fe02:	e16f      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2204      	movs	r2, #4
 800fe10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	88fa      	ldrh	r2, [r7, #6]
 800fe26:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	88fa      	ldrh	r2, [r7, #6]
 800fe2e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2200      	movs	r2, #0
 800fe52:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800fe5c:	d108      	bne.n	800fe70 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e009      	b.n	800fe84 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800fe82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	0c1b      	lsrs	r3, r3, #16
 800fe8c:	041b      	lsls	r3, r3, #16
 800fe8e:	88f9      	ldrh	r1, [r7, #6]
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	6812      	ldr	r2, [r2, #0]
 800fe94:	430b      	orrs	r3, r1
 800fe96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f042 0201 	orr.w	r2, r2, #1
 800fea6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	69db      	ldr	r3, [r3, #28]
 800feae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10c      	bne.n	800fed0 <HAL_SPI_Receive+0x118>
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800febe:	d107      	bne.n	800fed0 <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fece:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	2b0f      	cmp	r3, #15
 800fed6:	d95c      	bls.n	800ff92 <HAL_SPI_Receive+0x1da>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a83      	ldr	r2, [pc, #524]	@ (80100ec <HAL_SPI_Receive+0x334>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d050      	beq.n	800ff84 <HAL_SPI_Receive+0x1cc>
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a82      	ldr	r2, [pc, #520]	@ (80100f0 <HAL_SPI_Receive+0x338>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d04b      	beq.n	800ff84 <HAL_SPI_Receive+0x1cc>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a80      	ldr	r2, [pc, #512]	@ (80100f4 <HAL_SPI_Receive+0x33c>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d046      	beq.n	800ff84 <HAL_SPI_Receive+0x1cc>
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4a7f      	ldr	r2, [pc, #508]	@ (80100f8 <HAL_SPI_Receive+0x340>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d148      	bne.n	800ff92 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ff00:	e040      	b.n	800ff84 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	695a      	ldr	r2, [r3, #20]
 800ff08:	f248 0308 	movw	r3, #32776	@ 0x8008
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d014      	beq.n	800ff3c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ff1c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff22:	1d1a      	adds	r2, r3, #4
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	3b01      	subs	r3, #1
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ff3a:	e023      	b.n	800ff84 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff3c:	f7f9 f9b6 	bl	80092ac <HAL_GetTick>
 800ff40:	4602      	mov	r2, r0
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	1ad3      	subs	r3, r2, r3
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d803      	bhi.n	800ff54 <HAL_SPI_Receive+0x19c>
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff52:	d102      	bne.n	800ff5a <HAL_SPI_Receive+0x1a2>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d114      	bne.n	800ff84 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f000 fd20 	bl	80109a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ff80:	2303      	movs	r3, #3
 800ff82:	e0af      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1b8      	bne.n	800ff02 <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ff90:	e095      	b.n	80100be <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	2b07      	cmp	r3, #7
 800ff98:	f240 808b 	bls.w	80100b2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ff9c:	e03f      	b.n	801001e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	695b      	ldr	r3, [r3, #20]
 800ffa4:	f003 0301 	and.w	r3, r3, #1
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d114      	bne.n	800ffd6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	8812      	ldrh	r2, [r2, #0]
 800ffb4:	b292      	uxth	r2, r2
 800ffb6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffbc:	1c9a      	adds	r2, r3, #2
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ffd4:	e023      	b.n	801001e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffd6:	f7f9 f969 	bl	80092ac <HAL_GetTick>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d803      	bhi.n	800ffee <HAL_SPI_Receive+0x236>
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffec:	d102      	bne.n	800fff4 <HAL_SPI_Receive+0x23c>
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d114      	bne.n	801001e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f000 fcd3 	bl	80109a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010000:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 801001a:	2303      	movs	r3, #3
 801001c:	e062      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010024:	b29b      	uxth	r3, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1b9      	bne.n	800ff9e <HAL_SPI_Receive+0x1e6>
 801002a:	e048      	b.n	80100be <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	695b      	ldr	r3, [r3, #20]
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	2b01      	cmp	r3, #1
 8010038:	d117      	bne.n	801006a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010046:	7812      	ldrb	r2, [r2, #0]
 8010048:	b2d2      	uxtb	r2, r2
 801004a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801005c:	b29b      	uxth	r3, r3
 801005e:	3b01      	subs	r3, #1
 8010060:	b29a      	uxth	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010068:	e023      	b.n	80100b2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801006a:	f7f9 f91f 	bl	80092ac <HAL_GetTick>
 801006e:	4602      	mov	r2, r0
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	429a      	cmp	r2, r3
 8010078:	d803      	bhi.n	8010082 <HAL_SPI_Receive+0x2ca>
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010080:	d102      	bne.n	8010088 <HAL_SPI_Receive+0x2d0>
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d114      	bne.n	80100b2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f000 fc89 	bl	80109a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010094:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2201      	movs	r2, #1
 80100a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80100ae:	2303      	movs	r3, #3
 80100b0:	e018      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1b6      	bne.n	801002c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f000 fc6e 	bl	80109a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2201      	movs	r2, #1
 80100c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80100de:	2301      	movs	r3, #1
 80100e0:	e000      	b.n	80100e4 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 80100e2:	2300      	movs	r3, #0
  }
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	40013000 	.word	0x40013000
 80100f0:	50013000 	.word	0x50013000
 80100f4:	40003800 	.word	0x40003800
 80100f8:	50003800 	.word	0x50003800

080100fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08c      	sub	sp, #48	@ 0x30
 8010100:	af02      	add	r7, sp, #8
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	3320      	adds	r3, #32
 8010110:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	3330      	adds	r3, #48	@ 0x30
 8010118:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801011a:	f7f9 f8c7 	bl	80092ac <HAL_GetTick>
 801011e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8010120:	887b      	ldrh	r3, [r7, #2]
 8010122:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8010124:	887b      	ldrh	r3, [r7, #2]
 8010126:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801012e:	b2db      	uxtb	r3, r3
 8010130:	2b01      	cmp	r3, #1
 8010132:	d001      	beq.n	8010138 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8010134:	2302      	movs	r3, #2
 8010136:	e237      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d005      	beq.n	801014a <HAL_SPI_TransmitReceive+0x4e>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <HAL_SPI_TransmitReceive+0x4e>
 8010144:	887b      	ldrh	r3, [r7, #2]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d101      	bne.n	801014e <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 801014a:	2301      	movs	r3, #1
 801014c:	e22c      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8010154:	2b01      	cmp	r3, #1
 8010156:	d101      	bne.n	801015c <HAL_SPI_TransmitReceive+0x60>
 8010158:	2302      	movs	r3, #2
 801015a:	e225      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2201      	movs	r2, #1
 8010160:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2205      	movs	r2, #5
 8010168:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2200      	movs	r2, #0
 8010170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	887a      	ldrh	r2, [r7, #2]
 801017e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	887a      	ldrh	r2, [r7, #2]
 8010186:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	887a      	ldrh	r2, [r7, #2]
 8010194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	887a      	ldrh	r2, [r7, #2]
 801019c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2200      	movs	r2, #0
 80101aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68da      	ldr	r2, [r3, #12]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80101ba:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a6c      	ldr	r2, [pc, #432]	@ (8010374 <HAL_SPI_TransmitReceive+0x278>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d00e      	beq.n	80101e4 <HAL_SPI_TransmitReceive+0xe8>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a6b      	ldr	r2, [pc, #428]	@ (8010378 <HAL_SPI_TransmitReceive+0x27c>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d009      	beq.n	80101e4 <HAL_SPI_TransmitReceive+0xe8>
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a69      	ldr	r2, [pc, #420]	@ (801037c <HAL_SPI_TransmitReceive+0x280>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d004      	beq.n	80101e4 <HAL_SPI_TransmitReceive+0xe8>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a68      	ldr	r2, [pc, #416]	@ (8010380 <HAL_SPI_TransmitReceive+0x284>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d102      	bne.n	80101ea <HAL_SPI_TransmitReceive+0xee>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80101e4:	2310      	movs	r3, #16
 80101e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80101e8:	e001      	b.n	80101ee <HAL_SPI_TransmitReceive+0xf2>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80101ea:	2308      	movs	r3, #8
 80101ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	0c1b      	lsrs	r3, r3, #16
 80101f6:	041b      	lsls	r3, r3, #16
 80101f8:	8879      	ldrh	r1, [r7, #2]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	6812      	ldr	r2, [r2, #0]
 80101fe:	430b      	orrs	r3, r1
 8010200:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f042 0201 	orr.w	r2, r2, #1
 8010210:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	69db      	ldr	r3, [r3, #28]
 8010218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10c      	bne.n	801023a <HAL_SPI_TransmitReceive+0x13e>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010228:	d107      	bne.n	801023a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	2b0f      	cmp	r3, #15
 8010240:	f240 808e 	bls.w	8010360 <HAL_SPI_TransmitReceive+0x264>
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a4a      	ldr	r2, [pc, #296]	@ (8010374 <HAL_SPI_TransmitReceive+0x278>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d00e      	beq.n	801026c <HAL_SPI_TransmitReceive+0x170>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a49      	ldr	r2, [pc, #292]	@ (8010378 <HAL_SPI_TransmitReceive+0x27c>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d009      	beq.n	801026c <HAL_SPI_TransmitReceive+0x170>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a47      	ldr	r2, [pc, #284]	@ (801037c <HAL_SPI_TransmitReceive+0x280>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d004      	beq.n	801026c <HAL_SPI_TransmitReceive+0x170>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a46      	ldr	r2, [pc, #280]	@ (8010380 <HAL_SPI_TransmitReceive+0x284>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d179      	bne.n	8010360 <HAL_SPI_TransmitReceive+0x264>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 801026c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801026e:	089b      	lsrs	r3, r3, #2
 8010270:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010272:	e06e      	b.n	8010352 <HAL_SPI_TransmitReceive+0x256>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	695b      	ldr	r3, [r3, #20]
 801027a:	f003 0302 	and.w	r3, r3, #2
 801027e:	2b02      	cmp	r3, #2
 8010280:	d120      	bne.n	80102c4 <HAL_SPI_TransmitReceive+0x1c8>
 8010282:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010284:	2b00      	cmp	r3, #0
 8010286:	d01d      	beq.n	80102c4 <HAL_SPI_TransmitReceive+0x1c8>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010288:	8c3a      	ldrh	r2, [r7, #32]
 801028a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801028c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010290:	429a      	cmp	r2, r3
 8010292:	d217      	bcs.n	80102c4 <HAL_SPI_TransmitReceive+0x1c8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102a4:	1d1a      	adds	r2, r3, #4
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	3b01      	subs	r3, #1
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80102c2:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	695a      	ldr	r2, [r3, #20]
 80102ca:	f248 0308 	movw	r3, #32776	@ 0x8008
 80102ce:	4013      	ands	r3, r2
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d01a      	beq.n	801030a <HAL_SPI_TransmitReceive+0x20e>
 80102d4:	8c3b      	ldrh	r3, [r7, #32]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d017      	beq.n	801030a <HAL_SPI_TransmitReceive+0x20e>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80102e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102ea:	1d1a      	adds	r2, r3, #4
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	3b01      	subs	r3, #1
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010308:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801030a:	f7f8 ffcf 	bl	80092ac <HAL_GetTick>
 801030e:	4602      	mov	r2, r0
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010316:	429a      	cmp	r2, r3
 8010318:	d803      	bhi.n	8010322 <HAL_SPI_TransmitReceive+0x226>
 801031a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010320:	d102      	bne.n	8010328 <HAL_SPI_TransmitReceive+0x22c>
 8010322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010324:	2b00      	cmp	r3, #0
 8010326:	d114      	bne.n	8010352 <HAL_SPI_TransmitReceive+0x256>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f000 fb39 	bl	80109a0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010334:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2201      	movs	r2, #1
 8010342:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801034e:	2303      	movs	r3, #3
 8010350:	e12a      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010352:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010354:	2b00      	cmp	r3, #0
 8010356:	d18d      	bne.n	8010274 <HAL_SPI_TransmitReceive+0x178>
 8010358:	8c3b      	ldrh	r3, [r7, #32]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d18a      	bne.n	8010274 <HAL_SPI_TransmitReceive+0x178>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801035e:	e0fd      	b.n	801055c <HAL_SPI_TransmitReceive+0x460>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	2b07      	cmp	r3, #7
 8010366:	f240 80f3 	bls.w	8010550 <HAL_SPI_TransmitReceive+0x454>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 801036a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036c:	085b      	lsrs	r3, r3, #1
 801036e:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010370:	e075      	b.n	801045e <HAL_SPI_TransmitReceive+0x362>
 8010372:	bf00      	nop
 8010374:	40013000 	.word	0x40013000
 8010378:	50013000 	.word	0x50013000
 801037c:	40003800 	.word	0x40003800
 8010380:	50003800 	.word	0x50003800
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	695b      	ldr	r3, [r3, #20]
 801038a:	f003 0302 	and.w	r3, r3, #2
 801038e:	2b02      	cmp	r3, #2
 8010390:	d11f      	bne.n	80103d2 <HAL_SPI_TransmitReceive+0x2d6>
 8010392:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010394:	2b00      	cmp	r3, #0
 8010396:	d01c      	beq.n	80103d2 <HAL_SPI_TransmitReceive+0x2d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010398:	8c3a      	ldrh	r2, [r7, #32]
 801039a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801039c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801039e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d216      	bcs.n	80103d2 <HAL_SPI_TransmitReceive+0x2d6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103a8:	881a      	ldrh	r2, [r3, #0]
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103b2:	1c9a      	adds	r2, r3, #2
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80103be:	b29b      	uxth	r3, r3
 80103c0:	3b01      	subs	r3, #1
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80103d0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	695b      	ldr	r3, [r3, #20]
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d11a      	bne.n	8010416 <HAL_SPI_TransmitReceive+0x31a>
 80103e0:	8c3b      	ldrh	r3, [r7, #32]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d017      	beq.n	8010416 <HAL_SPI_TransmitReceive+0x31a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	8812      	ldrh	r2, [r2, #0]
 80103ee:	b292      	uxth	r2, r2
 80103f0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103f6:	1c9a      	adds	r2, r3, #2
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010402:	b29b      	uxth	r3, r3
 8010404:	3b01      	subs	r3, #1
 8010406:	b29a      	uxth	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010414:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010416:	f7f8 ff49 	bl	80092ac <HAL_GetTick>
 801041a:	4602      	mov	r2, r0
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010422:	429a      	cmp	r2, r3
 8010424:	d803      	bhi.n	801042e <HAL_SPI_TransmitReceive+0x332>
 8010426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042c:	d102      	bne.n	8010434 <HAL_SPI_TransmitReceive+0x338>
 801042e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010430:	2b00      	cmp	r3, #0
 8010432:	d114      	bne.n	801045e <HAL_SPI_TransmitReceive+0x362>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f000 fab3 	bl	80109a0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010440:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2201      	movs	r2, #1
 801044e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2200      	movs	r2, #0
 8010456:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801045a:	2303      	movs	r3, #3
 801045c:	e0a4      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801045e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010460:	2b00      	cmp	r3, #0
 8010462:	d18f      	bne.n	8010384 <HAL_SPI_TransmitReceive+0x288>
 8010464:	8c3b      	ldrh	r3, [r7, #32]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d18c      	bne.n	8010384 <HAL_SPI_TransmitReceive+0x288>
 801046a:	e077      	b.n	801055c <HAL_SPI_TransmitReceive+0x460>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	695b      	ldr	r3, [r3, #20]
 8010472:	f003 0302 	and.w	r3, r3, #2
 8010476:	2b02      	cmp	r3, #2
 8010478:	d121      	bne.n	80104be <HAL_SPI_TransmitReceive+0x3c2>
 801047a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801047c:	2b00      	cmp	r3, #0
 801047e:	d01e      	beq.n	80104be <HAL_SPI_TransmitReceive+0x3c2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010480:	8c3a      	ldrh	r2, [r7, #32]
 8010482:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8010484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010486:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010488:	429a      	cmp	r2, r3
 801048a:	d218      	bcs.n	80104be <HAL_SPI_TransmitReceive+0x3c2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3320      	adds	r3, #32
 8010496:	7812      	ldrb	r2, [r2, #0]
 8010498:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801049e:	1c5a      	adds	r2, r3, #1
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	3b01      	subs	r3, #1
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104bc:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	695b      	ldr	r3, [r3, #20]
 80104c4:	f003 0301 	and.w	r3, r3, #1
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d11d      	bne.n	8010508 <HAL_SPI_TransmitReceive+0x40c>
 80104cc:	8c3b      	ldrh	r3, [r7, #32]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d01a      	beq.n	8010508 <HAL_SPI_TransmitReceive+0x40c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104de:	7812      	ldrb	r2, [r2, #0]
 80104e0:	b2d2      	uxtb	r2, r2
 80104e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104e8:	1c5a      	adds	r2, r3, #1
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	3b01      	subs	r3, #1
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010506:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010508:	f7f8 fed0 	bl	80092ac <HAL_GetTick>
 801050c:	4602      	mov	r2, r0
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010514:	429a      	cmp	r2, r3
 8010516:	d803      	bhi.n	8010520 <HAL_SPI_TransmitReceive+0x424>
 8010518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801051a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051e:	d102      	bne.n	8010526 <HAL_SPI_TransmitReceive+0x42a>
 8010520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010522:	2b00      	cmp	r3, #0
 8010524:	d114      	bne.n	8010550 <HAL_SPI_TransmitReceive+0x454>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f000 fa3a 	bl	80109a0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010532:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801054c:	2303      	movs	r3, #3
 801054e:	e02b      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010552:	2b00      	cmp	r3, #0
 8010554:	d18a      	bne.n	801046c <HAL_SPI_TransmitReceive+0x370>
 8010556:	8c3b      	ldrh	r3, [r7, #32]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d187      	bne.n	801046c <HAL_SPI_TransmitReceive+0x370>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	9300      	str	r3, [sp, #0]
 8010560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010562:	2200      	movs	r2, #0
 8010564:	2108      	movs	r1, #8
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f000 faba 	bl	8010ae0 <SPI_WaitOnFlagUntilTimeout>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d007      	beq.n	8010582 <HAL_SPI_TransmitReceive+0x486>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010578:	f043 0220 	orr.w	r2, r3, #32
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	f000 fa0c 	bl	80109a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2201      	movs	r2, #1
 801058c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <HAL_SPI_TransmitReceive+0x4aa>
  {
    return HAL_ERROR;
 80105a2:	2301      	movs	r3, #1
 80105a4:	e000      	b.n	80105a8 <HAL_SPI_TransmitReceive+0x4ac>
  }
  else
  {
    return HAL_OK;
 80105a6:	2300      	movs	r3, #0
  }
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3728      	adds	r7, #40	@ 0x28
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b08a      	sub	sp, #40	@ 0x28
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	695b      	ldr	r3, [r3, #20]
 80105c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80105c8:	6a3a      	ldr	r2, [r7, #32]
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	4013      	ands	r3, r2
 80105ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80105d8:	2300      	movs	r3, #0
 80105da:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80105e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3330      	adds	r3, #48	@ 0x30
 80105ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d010      	beq.n	8010618 <HAL_SPI_IRQHandler+0x68>
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	f003 0308 	and.w	r3, r3, #8
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	699a      	ldr	r2, [r3, #24]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801060e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 f9a1 	bl	8010958 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010616:	e19a      	b.n	801094e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801061e:	2b00      	cmp	r3, #0
 8010620:	d113      	bne.n	801064a <HAL_SPI_IRQHandler+0x9a>
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	f003 0320 	and.w	r3, r3, #32
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10e      	bne.n	801064a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010632:	2b00      	cmp	r3, #0
 8010634:	d009      	beq.n	801064a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	4798      	blx	r3
    handled = 1UL;
 8010646:	2301      	movs	r3, #1
 8010648:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10f      	bne.n	8010674 <HAL_SPI_IRQHandler+0xc4>
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	f003 0301 	and.w	r3, r3, #1
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00a      	beq.n	8010674 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010664:	2b00      	cmp	r3, #0
 8010666:	d105      	bne.n	8010674 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	4798      	blx	r3
    handled = 1UL;
 8010670:	2301      	movs	r3, #1
 8010672:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	f003 0320 	and.w	r3, r3, #32
 801067a:	2b00      	cmp	r3, #0
 801067c:	d10f      	bne.n	801069e <HAL_SPI_IRQHandler+0xee>
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	f003 0302 	and.w	r3, r3, #2
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00a      	beq.n	801069e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801068e:	2b00      	cmp	r3, #0
 8010690:	d105      	bne.n	801069e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	4798      	blx	r3
    handled = 1UL;
 801069a:	2301      	movs	r3, #1
 801069c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 801069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f040 814f 	bne.w	8010944 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	f003 0308 	and.w	r3, r3, #8
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f000 808b 	beq.w	80107c8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	699a      	ldr	r2, [r3, #24]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f042 0208 	orr.w	r2, r2, #8
 80106c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	699a      	ldr	r2, [r3, #24]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f042 0210 	orr.w	r2, r2, #16
 80106d0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	699a      	ldr	r2, [r3, #24]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80106e0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	691a      	ldr	r2, [r3, #16]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f022 0208 	bic.w	r2, r2, #8
 80106f0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d13d      	bne.n	801077c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8010700:	e036      	b.n	8010770 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	2b0f      	cmp	r3, #15
 8010708:	d90b      	bls.n	8010722 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010712:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010714:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801071a:	1d1a      	adds	r2, r3, #4
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010720:	e01d      	b.n	801075e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	2b07      	cmp	r3, #7
 8010728:	d90b      	bls.n	8010742 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	8812      	ldrh	r2, [r2, #0]
 8010732:	b292      	uxth	r2, r2
 8010734:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801073a:	1c9a      	adds	r2, r3, #2
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010740:	e00d      	b.n	801075e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801074e:	7812      	ldrb	r2, [r2, #0]
 8010750:	b2d2      	uxtb	r2, r2
 8010752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010758:	1c5a      	adds	r2, r3, #1
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010764:	b29b      	uxth	r3, r3
 8010766:	3b01      	subs	r3, #1
 8010768:	b29a      	uxth	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010776:	b29b      	uxth	r3, r3
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1c2      	bne.n	8010702 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 f90f 	bl	80109a0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2201      	movs	r2, #1
 8010786:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010790:	2b00      	cmp	r3, #0
 8010792:	d003      	beq.n	801079c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7f8 f9d9 	bl	8008b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801079a:	e0d8      	b.n	801094e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801079c:	7cfb      	ldrb	r3, [r7, #19]
 801079e:	2b05      	cmp	r3, #5
 80107a0:	d103      	bne.n	80107aa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7f2 fcf8 	bl	8003198 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80107a8:	e0ce      	b.n	8010948 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80107aa:	7cfb      	ldrb	r3, [r7, #19]
 80107ac:	2b04      	cmp	r3, #4
 80107ae:	d103      	bne.n	80107b8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7f2 fccd 	bl	8003150 <HAL_SPI_RxCpltCallback>
    return;
 80107b6:	e0c7      	b.n	8010948 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80107b8:	7cfb      	ldrb	r3, [r7, #19]
 80107ba:	2b03      	cmp	r3, #3
 80107bc:	f040 80c4 	bne.w	8010948 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7f2 fcd7 	bl	8003174 <HAL_SPI_TxCpltCallback>
    return;
 80107c6:	e0bf      	b.n	8010948 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f000 80bd 	beq.w	801094e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00f      	beq.n	80107fe <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107e4:	f043 0204 	orr.w	r2, r3, #4
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	699a      	ldr	r2, [r3, #24]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80107fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00f      	beq.n	8010828 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801080e:	f043 0201 	orr.w	r2, r3, #1
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	699a      	ldr	r2, [r3, #24]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010826:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00f      	beq.n	8010852 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010838:	f043 0208 	orr.w	r2, r3, #8
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	699a      	ldr	r2, [r3, #24]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010850:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	f003 0320 	and.w	r3, r3, #32
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00f      	beq.n	801087c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010862:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	699a      	ldr	r2, [r3, #24]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f042 0220 	orr.w	r2, r2, #32
 801087a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010882:	2b00      	cmp	r3, #0
 8010884:	d062      	beq.n	801094c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f022 0201 	bic.w	r2, r2, #1
 8010894:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	691b      	ldr	r3, [r3, #16]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	6812      	ldr	r2, [r2, #0]
 80108a0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80108a4:	f023 0303 	bic.w	r3, r3, #3
 80108a8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80108b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80108b4:	d13e      	bne.n	8010934 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	689a      	ldr	r2, [r3, #8]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80108c4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d015      	beq.n	80108fc <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108d6:	4a1f      	ldr	r2, [pc, #124]	@ (8010954 <HAL_SPI_IRQHandler+0x3a4>)
 80108d8:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7f8 ff23 	bl	800972c <HAL_DMA_Abort_IT>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d007      	beq.n	80108fc <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010902:	2b00      	cmp	r3, #0
 8010904:	d022      	beq.n	801094c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801090c:	4a11      	ldr	r2, [pc, #68]	@ (8010954 <HAL_SPI_IRQHandler+0x3a4>)
 801090e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010916:	4618      	mov	r0, r3
 8010918:	f7f8 ff08 	bl	800972c <HAL_DMA_Abort_IT>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d014      	beq.n	801094c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010928:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010932:	e00b      	b.n	801094c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2201      	movs	r2, #1
 8010938:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7f8 f905 	bl	8008b4c <HAL_SPI_ErrorCallback>
    return;
 8010942:	e003      	b.n	801094c <HAL_SPI_IRQHandler+0x39c>
    return;
 8010944:	bf00      	nop
 8010946:	e002      	b.n	801094e <HAL_SPI_IRQHandler+0x39e>
    return;
 8010948:	bf00      	nop
 801094a:	e000      	b.n	801094e <HAL_SPI_IRQHandler+0x39e>
    return;
 801094c:	bf00      	nop
  }
}
 801094e:	3728      	adds	r7, #40	@ 0x28
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	0801096d 	.word	0x0801096d

08010958 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010978:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2201      	movs	r2, #1
 801098e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010992:	68f8      	ldr	r0, [r7, #12]
 8010994:	f7f8 f8da 	bl	8008b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010998:	bf00      	nop
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	695b      	ldr	r3, [r3, #20]
 80109ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	699a      	ldr	r2, [r3, #24]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f042 0208 	orr.w	r2, r2, #8
 80109be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	699a      	ldr	r2, [r3, #24]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f042 0210 	orr.w	r2, r2, #16
 80109ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f022 0201 	bic.w	r2, r2, #1
 80109de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	691b      	ldr	r3, [r3, #16]
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	6812      	ldr	r2, [r2, #0]
 80109ea:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80109ee:	f023 0303 	bic.w	r3, r3, #3
 80109f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	689a      	ldr	r2, [r3, #8]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010a02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	2b04      	cmp	r3, #4
 8010a0e:	d014      	beq.n	8010a3a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f003 0320 	and.w	r3, r3, #32
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00f      	beq.n	8010a3a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	699a      	ldr	r2, [r3, #24]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f042 0220 	orr.w	r2, r2, #32
 8010a38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	2b03      	cmp	r3, #3
 8010a44:	d014      	beq.n	8010a70 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d00f      	beq.n	8010a70 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a56:	f043 0204 	orr.w	r2, r3, #4
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	699a      	ldr	r2, [r3, #24]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010a6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00f      	beq.n	8010a9a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a80:	f043 0201 	orr.w	r2, r3, #1
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	699a      	ldr	r2, [r3, #24]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010a98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00f      	beq.n	8010ac4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010aaa:	f043 0208 	orr.w	r2, r3, #8
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	699a      	ldr	r2, [r3, #24]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010ac2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8010ad4:	bf00      	nop
 8010ad6:	3714      	adds	r7, #20
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b084      	sub	sp, #16
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	60f8      	str	r0, [r7, #12]
 8010ae8:	60b9      	str	r1, [r7, #8]
 8010aea:	603b      	str	r3, [r7, #0]
 8010aec:	4613      	mov	r3, r2
 8010aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010af0:	e010      	b.n	8010b14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010af2:	f7f8 fbdb 	bl	80092ac <HAL_GetTick>
 8010af6:	4602      	mov	r2, r0
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d803      	bhi.n	8010b0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b08:	d102      	bne.n	8010b10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d101      	bne.n	8010b14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010b10:	2303      	movs	r3, #3
 8010b12:	e00f      	b.n	8010b34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	695a      	ldr	r2, [r3, #20]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	4013      	ands	r3, r2
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	bf0c      	ite	eq
 8010b24:	2301      	moveq	r3, #1
 8010b26:	2300      	movne	r3, #0
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	79fb      	ldrb	r3, [r7, #7]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d0df      	beq.n	8010af2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010b32:	2300      	movs	r3, #0
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b48:	095b      	lsrs	r3, r3, #5
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	3301      	adds	r3, #1
 8010b54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	3307      	adds	r3, #7
 8010b5a:	08db      	lsrs	r3, r3, #3
 8010b5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	fb02 f303 	mul.w	r3, r2, r3
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3714      	adds	r7, #20
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b082      	sub	sp, #8
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b80:	2301      	movs	r3, #1
 8010b82:	e042      	b.n	8010c0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d106      	bne.n	8010b9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7f0 fc74 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2224      	movs	r2, #36	@ 0x24
 8010ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f022 0201 	bic.w	r2, r2, #1
 8010bb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d002      	beq.n	8010bc2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fbdb 	bl	8011378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fa36 	bl	8011034 <UART_SetConfig>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d101      	bne.n	8010bd2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e01b      	b.n	8010c0a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	685a      	ldr	r2, [r3, #4]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010be0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	689a      	ldr	r2, [r3, #8]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010bf0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f042 0201 	orr.w	r2, r2, #1
 8010c00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fc5a 	bl	80114bc <UART_CheckIdleState>
 8010c08:	4603      	mov	r3, r0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b08a      	sub	sp, #40	@ 0x28
 8010c16:	af02      	add	r7, sp, #8
 8010c18:	60f8      	str	r0, [r7, #12]
 8010c1a:	60b9      	str	r1, [r7, #8]
 8010c1c:	603b      	str	r3, [r7, #0]
 8010c1e:	4613      	mov	r3, r2
 8010c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c28:	2b20      	cmp	r3, #32
 8010c2a:	f040 808b 	bne.w	8010d44 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d002      	beq.n	8010c3a <HAL_UART_Transmit+0x28>
 8010c34:	88fb      	ldrh	r3, [r7, #6]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e083      	b.n	8010d46 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c48:	2b80      	cmp	r3, #128	@ 0x80
 8010c4a:	d107      	bne.n	8010c5c <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	689a      	ldr	r2, [r3, #8]
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010c5a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2221      	movs	r2, #33	@ 0x21
 8010c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010c6c:	f7f8 fb1e 	bl	80092ac <HAL_GetTick>
 8010c70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	88fa      	ldrh	r2, [r7, #6]
 8010c76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	88fa      	ldrh	r2, [r7, #6]
 8010c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010c8a:	d108      	bne.n	8010c9e <HAL_UART_Transmit+0x8c>
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	691b      	ldr	r3, [r3, #16]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d104      	bne.n	8010c9e <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8010c94:	2300      	movs	r3, #0
 8010c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	61bb      	str	r3, [r7, #24]
 8010c9c:	e003      	b.n	8010ca6 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010ca6:	e030      	b.n	8010d0a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2180      	movs	r1, #128	@ 0x80
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	f000 fcac 	bl	8011610 <UART_WaitOnFlagUntilTimeout>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d005      	beq.n	8010cca <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2220      	movs	r2, #32
 8010cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010cc6:	2303      	movs	r3, #3
 8010cc8:	e03d      	b.n	8010d46 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10b      	bne.n	8010ce8 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010cde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	3302      	adds	r3, #2
 8010ce4:	61bb      	str	r3, [r7, #24]
 8010ce6:	e007      	b.n	8010cf8 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	781a      	ldrb	r2, [r3, #0]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	3b01      	subs	r3, #1
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1c8      	bne.n	8010ca8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2140      	movs	r1, #64	@ 0x40
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f000 fc75 	bl	8011610 <UART_WaitOnFlagUntilTimeout>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d005      	beq.n	8010d38 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2220      	movs	r2, #32
 8010d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010d34:	2303      	movs	r3, #3
 8010d36:	e006      	b.n	8010d46 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2220      	movs	r2, #32
 8010d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010d40:	2300      	movs	r3, #0
 8010d42:	e000      	b.n	8010d46 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8010d44:	2302      	movs	r3, #2
  }
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3720      	adds	r7, #32
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b08a      	sub	sp, #40	@ 0x28
 8010d52:	af02      	add	r7, sp, #8
 8010d54:	60f8      	str	r0, [r7, #12]
 8010d56:	60b9      	str	r1, [r7, #8]
 8010d58:	603b      	str	r3, [r7, #0]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d64:	2b20      	cmp	r3, #32
 8010d66:	f040 80c4 	bne.w	8010ef2 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <HAL_UART_Receive+0x28>
 8010d70:	88fb      	ldrh	r3, [r7, #6]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d101      	bne.n	8010d7a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010d76:	2301      	movs	r3, #1
 8010d78:	e0bc      	b.n	8010ef4 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d84:	2b40      	cmp	r3, #64	@ 0x40
 8010d86:	d107      	bne.n	8010d98 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	689a      	ldr	r2, [r3, #8]
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010d96:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2222      	movs	r2, #34	@ 0x22
 8010da4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010dae:	f7f8 fa7d 	bl	80092ac <HAL_GetTick>
 8010db2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	88fa      	ldrh	r2, [r7, #6]
 8010db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	88fa      	ldrh	r2, [r7, #6]
 8010dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010dcc:	d10e      	bne.n	8010dec <HAL_UART_Receive+0x9e>
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d105      	bne.n	8010de2 <HAL_UART_Receive+0x94>
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010de0:	e02d      	b.n	8010e3e <HAL_UART_Receive+0xf0>
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	22ff      	movs	r2, #255	@ 0xff
 8010de6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010dea:	e028      	b.n	8010e3e <HAL_UART_Receive+0xf0>
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d10d      	bne.n	8010e10 <HAL_UART_Receive+0xc2>
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d104      	bne.n	8010e06 <HAL_UART_Receive+0xb8>
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	22ff      	movs	r2, #255	@ 0xff
 8010e00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010e04:	e01b      	b.n	8010e3e <HAL_UART_Receive+0xf0>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	227f      	movs	r2, #127	@ 0x7f
 8010e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010e0e:	e016      	b.n	8010e3e <HAL_UART_Receive+0xf0>
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	689b      	ldr	r3, [r3, #8]
 8010e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e18:	d10d      	bne.n	8010e36 <HAL_UART_Receive+0xe8>
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	691b      	ldr	r3, [r3, #16]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d104      	bne.n	8010e2c <HAL_UART_Receive+0xde>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	227f      	movs	r2, #127	@ 0x7f
 8010e26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010e2a:	e008      	b.n	8010e3e <HAL_UART_Receive+0xf0>
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	223f      	movs	r2, #63	@ 0x3f
 8010e30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010e34:	e003      	b.n	8010e3e <HAL_UART_Receive+0xf0>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	689b      	ldr	r3, [r3, #8]
 8010e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e4e:	d108      	bne.n	8010e62 <HAL_UART_Receive+0x114>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	691b      	ldr	r3, [r3, #16]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d104      	bne.n	8010e62 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	61bb      	str	r3, [r7, #24]
 8010e60:	e003      	b.n	8010e6a <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010e66:	2300      	movs	r3, #0
 8010e68:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010e6a:	e036      	b.n	8010eda <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	9300      	str	r3, [sp, #0]
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	2200      	movs	r2, #0
 8010e74:	2120      	movs	r1, #32
 8010e76:	68f8      	ldr	r0, [r7, #12]
 8010e78:	f000 fbca 	bl	8011610 <UART_WaitOnFlagUntilTimeout>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d005      	beq.n	8010e8e <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2220      	movs	r2, #32
 8010e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	e032      	b.n	8010ef4 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d10c      	bne.n	8010eae <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	8a7b      	ldrh	r3, [r7, #18]
 8010e9e:	4013      	ands	r3, r2
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	61bb      	str	r3, [r7, #24]
 8010eac:	e00c      	b.n	8010ec8 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eb4:	b2da      	uxtb	r2, r3
 8010eb6:	8a7b      	ldrh	r3, [r7, #18]
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	4013      	ands	r3, r2
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1c2      	bne.n	8010e6c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2220      	movs	r2, #32
 8010eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e000      	b.n	8010ef4 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8010ef2:	2302      	movs	r3, #2
  }
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3720      	adds	r7, #32
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b094      	sub	sp, #80	@ 0x50
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f0c:	e853 3f00 	ldrex	r3, [r3]
 8010f10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f2a:	e841 2300 	strex	r3, r2, [r1]
 8010f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1e6      	bne.n	8010f04 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	3308      	adds	r3, #8
 8010f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3e:	6a3b      	ldr	r3, [r7, #32]
 8010f40:	e853 3f00 	ldrex	r3, [r3]
 8010f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010f4c:	f023 0301 	bic.w	r3, r3, #1
 8010f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	3308      	adds	r3, #8
 8010f58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f62:	e841 2300 	strex	r3, r2, [r1]
 8010f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1e3      	bne.n	8010f36 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d118      	bne.n	8010fa8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	e853 3f00 	ldrex	r3, [r3]
 8010f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	f023 0310 	bic.w	r3, r3, #16
 8010f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	461a      	mov	r2, r3
 8010f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f94:	61bb      	str	r3, [r7, #24]
 8010f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f98:	6979      	ldr	r1, [r7, #20]
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	e841 2300 	strex	r3, r2, [r1]
 8010fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1e6      	bne.n	8010f76 <HAL_UART_AbortReceive+0x7a>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fb2:	2b40      	cmp	r3, #64	@ 0x40
 8010fb4:	d121      	bne.n	8010ffa <HAL_UART_AbortReceive+0xfe>
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d01c      	beq.n	8010ffa <HAL_UART_AbortReceive+0xfe>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7f8 fb2f 	bl	8009634 <HAL_DMA_Abort>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00e      	beq.n	8010ffa <HAL_UART_AbortReceive+0xfe>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f8 fbcb 	bl	800977e <HAL_DMA_GetError>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b10      	cmp	r3, #16
 8010fec:	d105      	bne.n	8010ffa <HAL_UART_AbortReceive+0xfe>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2210      	movs	r2, #16
 8010ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8010ff6:	2303      	movs	r3, #3
 8010ff8:	e017      	b.n	801102a <HAL_UART_AbortReceive+0x12e>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	220f      	movs	r2, #15
 8011008:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	699a      	ldr	r2, [r3, #24]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f042 0208 	orr.w	r2, r2, #8
 8011018:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2220      	movs	r2, #32
 801101e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3750      	adds	r7, #80	@ 0x50
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
	...

08011034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011038:	b094      	sub	sp, #80	@ 0x50
 801103a:	af00      	add	r7, sp, #0
 801103c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801103e:	2300      	movs	r3, #0
 8011040:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8011044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	4b7e      	ldr	r3, [pc, #504]	@ (8011244 <UART_SetConfig+0x210>)
 801104a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801104c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801104e:	689a      	ldr	r2, [r3, #8]
 8011050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011052:	691b      	ldr	r3, [r3, #16]
 8011054:	431a      	orrs	r2, r3
 8011056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011058:	695b      	ldr	r3, [r3, #20]
 801105a:	431a      	orrs	r2, r3
 801105c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801105e:	69db      	ldr	r3, [r3, #28]
 8011060:	4313      	orrs	r3, r2
 8011062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	4977      	ldr	r1, [pc, #476]	@ (8011248 <UART_SetConfig+0x214>)
 801106c:	4019      	ands	r1, r3
 801106e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011074:	430b      	orrs	r3, r1
 8011076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011084:	68d9      	ldr	r1, [r3, #12]
 8011086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	ea40 0301 	orr.w	r3, r0, r1
 801108e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011092:	699b      	ldr	r3, [r3, #24]
 8011094:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	4b6a      	ldr	r3, [pc, #424]	@ (8011244 <UART_SetConfig+0x210>)
 801109c:	429a      	cmp	r2, r3
 801109e:	d009      	beq.n	80110b4 <UART_SetConfig+0x80>
 80110a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	4b69      	ldr	r3, [pc, #420]	@ (801124c <UART_SetConfig+0x218>)
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d004      	beq.n	80110b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ac:	6a1a      	ldr	r2, [r3, #32]
 80110ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110b0:	4313      	orrs	r3, r2
 80110b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80110b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	689b      	ldr	r3, [r3, #8]
 80110ba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80110be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80110c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110c8:	430b      	orrs	r3, r1
 80110ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80110cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110d2:	f023 000f 	bic.w	r0, r3, #15
 80110d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80110da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	ea40 0301 	orr.w	r3, r0, r1
 80110e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80110e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	4b59      	ldr	r3, [pc, #356]	@ (8011250 <UART_SetConfig+0x21c>)
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d102      	bne.n	80110f4 <UART_SetConfig+0xc0>
 80110ee:	2301      	movs	r3, #1
 80110f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110f2:	e029      	b.n	8011148 <UART_SetConfig+0x114>
 80110f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	4b56      	ldr	r3, [pc, #344]	@ (8011254 <UART_SetConfig+0x220>)
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d102      	bne.n	8011104 <UART_SetConfig+0xd0>
 80110fe:	2302      	movs	r3, #2
 8011100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011102:	e021      	b.n	8011148 <UART_SetConfig+0x114>
 8011104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	4b53      	ldr	r3, [pc, #332]	@ (8011258 <UART_SetConfig+0x224>)
 801110a:	429a      	cmp	r2, r3
 801110c:	d102      	bne.n	8011114 <UART_SetConfig+0xe0>
 801110e:	2304      	movs	r3, #4
 8011110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011112:	e019      	b.n	8011148 <UART_SetConfig+0x114>
 8011114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	4b50      	ldr	r3, [pc, #320]	@ (801125c <UART_SetConfig+0x228>)
 801111a:	429a      	cmp	r2, r3
 801111c:	d102      	bne.n	8011124 <UART_SetConfig+0xf0>
 801111e:	2308      	movs	r3, #8
 8011120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011122:	e011      	b.n	8011148 <UART_SetConfig+0x114>
 8011124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	4b4d      	ldr	r3, [pc, #308]	@ (8011260 <UART_SetConfig+0x22c>)
 801112a:	429a      	cmp	r2, r3
 801112c:	d102      	bne.n	8011134 <UART_SetConfig+0x100>
 801112e:	2310      	movs	r3, #16
 8011130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011132:	e009      	b.n	8011148 <UART_SetConfig+0x114>
 8011134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	4b42      	ldr	r3, [pc, #264]	@ (8011244 <UART_SetConfig+0x210>)
 801113a:	429a      	cmp	r2, r3
 801113c:	d102      	bne.n	8011144 <UART_SetConfig+0x110>
 801113e:	2320      	movs	r3, #32
 8011140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011142:	e001      	b.n	8011148 <UART_SetConfig+0x114>
 8011144:	2300      	movs	r3, #0
 8011146:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	4b3d      	ldr	r3, [pc, #244]	@ (8011244 <UART_SetConfig+0x210>)
 801114e:	429a      	cmp	r2, r3
 8011150:	d005      	beq.n	801115e <UART_SetConfig+0x12a>
 8011152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	4b3d      	ldr	r3, [pc, #244]	@ (801124c <UART_SetConfig+0x218>)
 8011158:	429a      	cmp	r2, r3
 801115a:	f040 8085 	bne.w	8011268 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801115e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011160:	2200      	movs	r2, #0
 8011162:	623b      	str	r3, [r7, #32]
 8011164:	627a      	str	r2, [r7, #36]	@ 0x24
 8011166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801116a:	f7fc ffed 	bl	800e148 <HAL_RCCEx_GetPeriphCLKFreq>
 801116e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8011170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 80e8 	beq.w	8011348 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801117c:	4a39      	ldr	r2, [pc, #228]	@ (8011264 <UART_SetConfig+0x230>)
 801117e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011182:	461a      	mov	r2, r3
 8011184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011186:	fbb3 f3f2 	udiv	r3, r3, r2
 801118a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801118e:	685a      	ldr	r2, [r3, #4]
 8011190:	4613      	mov	r3, r2
 8011192:	005b      	lsls	r3, r3, #1
 8011194:	4413      	add	r3, r2
 8011196:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011198:	429a      	cmp	r2, r3
 801119a:	d305      	bcc.n	80111a8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801119c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80111a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d903      	bls.n	80111b0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80111a8:	2301      	movs	r3, #1
 80111aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80111ae:	e048      	b.n	8011242 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111b2:	2200      	movs	r2, #0
 80111b4:	61bb      	str	r3, [r7, #24]
 80111b6:	61fa      	str	r2, [r7, #28]
 80111b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111bc:	4a29      	ldr	r2, [pc, #164]	@ (8011264 <UART_SetConfig+0x230>)
 80111be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	2200      	movs	r2, #0
 80111c6:	613b      	str	r3, [r7, #16]
 80111c8:	617a      	str	r2, [r7, #20]
 80111ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80111ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80111d2:	f7ef fd67 	bl	8000ca4 <__aeabi_uldivmod>
 80111d6:	4602      	mov	r2, r0
 80111d8:	460b      	mov	r3, r1
 80111da:	4610      	mov	r0, r2
 80111dc:	4619      	mov	r1, r3
 80111de:	f04f 0200 	mov.w	r2, #0
 80111e2:	f04f 0300 	mov.w	r3, #0
 80111e6:	020b      	lsls	r3, r1, #8
 80111e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80111ec:	0202      	lsls	r2, r0, #8
 80111ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80111f0:	6849      	ldr	r1, [r1, #4]
 80111f2:	0849      	lsrs	r1, r1, #1
 80111f4:	2000      	movs	r0, #0
 80111f6:	460c      	mov	r4, r1
 80111f8:	4605      	mov	r5, r0
 80111fa:	eb12 0804 	adds.w	r8, r2, r4
 80111fe:	eb43 0905 	adc.w	r9, r3, r5
 8011202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	60bb      	str	r3, [r7, #8]
 801120a:	60fa      	str	r2, [r7, #12]
 801120c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011210:	4640      	mov	r0, r8
 8011212:	4649      	mov	r1, r9
 8011214:	f7ef fd46 	bl	8000ca4 <__aeabi_uldivmod>
 8011218:	4602      	mov	r2, r0
 801121a:	460b      	mov	r3, r1
 801121c:	4613      	mov	r3, r2
 801121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011226:	d308      	bcc.n	801123a <UART_SetConfig+0x206>
 8011228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801122a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801122e:	d204      	bcs.n	801123a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8011230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011236:	60da      	str	r2, [r3, #12]
 8011238:	e003      	b.n	8011242 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 801123a:	2301      	movs	r3, #1
 801123c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8011240:	e082      	b.n	8011348 <UART_SetConfig+0x314>
 8011242:	e081      	b.n	8011348 <UART_SetConfig+0x314>
 8011244:	46002400 	.word	0x46002400
 8011248:	cfff69f3 	.word	0xcfff69f3
 801124c:	56002400 	.word	0x56002400
 8011250:	40013800 	.word	0x40013800
 8011254:	40004400 	.word	0x40004400
 8011258:	40004800 	.word	0x40004800
 801125c:	40004c00 	.word	0x40004c00
 8011260:	40005000 	.word	0x40005000
 8011264:	0818ca34 	.word	0x0818ca34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801126a:	69db      	ldr	r3, [r3, #28]
 801126c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011270:	d13c      	bne.n	80112ec <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011274:	2200      	movs	r2, #0
 8011276:	603b      	str	r3, [r7, #0]
 8011278:	607a      	str	r2, [r7, #4]
 801127a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801127e:	f7fc ff63 	bl	800e148 <HAL_RCCEx_GetPeriphCLKFreq>
 8011282:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011286:	2b00      	cmp	r3, #0
 8011288:	d05e      	beq.n	8011348 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801128a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128e:	4a39      	ldr	r2, [pc, #228]	@ (8011374 <UART_SetConfig+0x340>)
 8011290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011294:	461a      	mov	r2, r3
 8011296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011298:	fbb3 f3f2 	udiv	r3, r3, r2
 801129c:	005a      	lsls	r2, r3, #1
 801129e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	085b      	lsrs	r3, r3, #1
 80112a4:	441a      	add	r2, r3
 80112a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112b2:	2b0f      	cmp	r3, #15
 80112b4:	d916      	bls.n	80112e4 <UART_SetConfig+0x2b0>
 80112b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112bc:	d212      	bcs.n	80112e4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	f023 030f 	bic.w	r3, r3, #15
 80112c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ca:	085b      	lsrs	r3, r3, #1
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	f003 0307 	and.w	r3, r3, #7
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80112d6:	4313      	orrs	r3, r2
 80112d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80112da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80112e0:	60da      	str	r2, [r3, #12]
 80112e2:	e031      	b.n	8011348 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80112e4:	2301      	movs	r3, #1
 80112e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80112ea:	e02d      	b.n	8011348 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80112ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112ee:	2200      	movs	r2, #0
 80112f0:	469a      	mov	sl, r3
 80112f2:	4693      	mov	fp, r2
 80112f4:	4650      	mov	r0, sl
 80112f6:	4659      	mov	r1, fp
 80112f8:	f7fc ff26 	bl	800e148 <HAL_RCCEx_GetPeriphCLKFreq>
 80112fc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80112fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011300:	2b00      	cmp	r3, #0
 8011302:	d021      	beq.n	8011348 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011308:	4a1a      	ldr	r2, [pc, #104]	@ (8011374 <UART_SetConfig+0x340>)
 801130a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801130e:	461a      	mov	r2, r3
 8011310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011312:	fbb3 f2f2 	udiv	r2, r3, r2
 8011316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	085b      	lsrs	r3, r3, #1
 801131c:	441a      	add	r2, r3
 801131e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	fbb2 f3f3 	udiv	r3, r2, r3
 8011326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801132a:	2b0f      	cmp	r3, #15
 801132c:	d909      	bls.n	8011342 <UART_SetConfig+0x30e>
 801132e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011334:	d205      	bcs.n	8011342 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011338:	b29a      	uxth	r2, r3
 801133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	60da      	str	r2, [r3, #12]
 8011340:	e002      	b.n	8011348 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8011342:	2301      	movs	r3, #1
 8011344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134a:	2201      	movs	r2, #1
 801134c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011352:	2201      	movs	r2, #1
 8011354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801135a:	2200      	movs	r2, #0
 801135c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011360:	2200      	movs	r2, #0
 8011362:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011364:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011368:	4618      	mov	r0, r3
 801136a:	3750      	adds	r7, #80	@ 0x50
 801136c:	46bd      	mov	sp, r7
 801136e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011372:	bf00      	nop
 8011374:	0818ca34 	.word	0x0818ca34

08011378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011384:	f003 0308 	and.w	r3, r3, #8
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00a      	beq.n	80113a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	430a      	orrs	r2, r1
 80113a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00a      	beq.n	80113c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	430a      	orrs	r2, r1
 80113c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113c8:	f003 0302 	and.w	r3, r3, #2
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d00a      	beq.n	80113e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	430a      	orrs	r2, r1
 80113e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ea:	f003 0304 	and.w	r3, r3, #4
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00a      	beq.n	8011408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	430a      	orrs	r2, r1
 8011406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801140c:	f003 0310 	and.w	r3, r3, #16
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00a      	beq.n	801142a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	430a      	orrs	r2, r1
 8011428:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801142e:	f003 0320 	and.w	r3, r3, #32
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00a      	beq.n	801144c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	430a      	orrs	r2, r1
 801144a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011454:	2b00      	cmp	r3, #0
 8011456:	d01a      	beq.n	801148e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	430a      	orrs	r2, r1
 801146c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011476:	d10a      	bne.n	801148e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	430a      	orrs	r2, r1
 801148c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00a      	beq.n	80114b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	430a      	orrs	r2, r1
 80114ae:	605a      	str	r2, [r3, #4]
  }
}
 80114b0:	bf00      	nop
 80114b2:	370c      	adds	r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr

080114bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b098      	sub	sp, #96	@ 0x60
 80114c0:	af02      	add	r7, sp, #8
 80114c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80114cc:	f7f7 feee 	bl	80092ac <HAL_GetTick>
 80114d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f003 0308 	and.w	r3, r3, #8
 80114dc:	2b08      	cmp	r3, #8
 80114de:	d12f      	bne.n	8011540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114e8:	2200      	movs	r2, #0
 80114ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 f88e 	bl	8011610 <UART_WaitOnFlagUntilTimeout>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d022      	beq.n	8011540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011502:	e853 3f00 	ldrex	r3, [r3]
 8011506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801150a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801150e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	461a      	mov	r2, r3
 8011516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011518:	647b      	str	r3, [r7, #68]	@ 0x44
 801151a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801151e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011520:	e841 2300 	strex	r3, r2, [r1]
 8011524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1e6      	bne.n	80114fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2220      	movs	r2, #32
 8011530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801153c:	2303      	movs	r3, #3
 801153e:	e063      	b.n	8011608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f003 0304 	and.w	r3, r3, #4
 801154a:	2b04      	cmp	r3, #4
 801154c:	d149      	bne.n	80115e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801154e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011552:	9300      	str	r3, [sp, #0]
 8011554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011556:	2200      	movs	r2, #0
 8011558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 f857 	bl	8011610 <UART_WaitOnFlagUntilTimeout>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d03c      	beq.n	80115e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011570:	e853 3f00 	ldrex	r3, [r3]
 8011574:	623b      	str	r3, [r7, #32]
   return(result);
 8011576:	6a3b      	ldr	r3, [r7, #32]
 8011578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801157c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	461a      	mov	r2, r3
 8011584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011586:	633b      	str	r3, [r7, #48]	@ 0x30
 8011588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801158c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801158e:	e841 2300 	strex	r3, r2, [r1]
 8011592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011596:	2b00      	cmp	r3, #0
 8011598:	d1e6      	bne.n	8011568 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	3308      	adds	r3, #8
 80115a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	e853 3f00 	ldrex	r3, [r3]
 80115a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f023 0301 	bic.w	r3, r3, #1
 80115b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	3308      	adds	r3, #8
 80115b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115ba:	61fa      	str	r2, [r7, #28]
 80115bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115be:	69b9      	ldr	r1, [r7, #24]
 80115c0:	69fa      	ldr	r2, [r7, #28]
 80115c2:	e841 2300 	strex	r3, r2, [r1]
 80115c6:	617b      	str	r3, [r7, #20]
   return(result);
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1e5      	bne.n	801159a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2220      	movs	r2, #32
 80115d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2200      	movs	r2, #0
 80115da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115de:	2303      	movs	r3, #3
 80115e0:	e012      	b.n	8011608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2220      	movs	r2, #32
 80115e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2220      	movs	r2, #32
 80115ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2200      	movs	r2, #0
 80115f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2200      	movs	r2, #0
 80115fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2200      	movs	r2, #0
 8011602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011606:	2300      	movs	r3, #0
}
 8011608:	4618      	mov	r0, r3
 801160a:	3758      	adds	r7, #88	@ 0x58
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	603b      	str	r3, [r7, #0]
 801161c:	4613      	mov	r3, r2
 801161e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011620:	e04f      	b.n	80116c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011628:	d04b      	beq.n	80116c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801162a:	f7f7 fe3f 	bl	80092ac <HAL_GetTick>
 801162e:	4602      	mov	r2, r0
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	69ba      	ldr	r2, [r7, #24]
 8011636:	429a      	cmp	r2, r3
 8011638:	d302      	bcc.n	8011640 <UART_WaitOnFlagUntilTimeout+0x30>
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d101      	bne.n	8011644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011640:	2303      	movs	r3, #3
 8011642:	e04e      	b.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f003 0304 	and.w	r3, r3, #4
 801164e:	2b00      	cmp	r3, #0
 8011650:	d037      	beq.n	80116c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b80      	cmp	r3, #128	@ 0x80
 8011656:	d034      	beq.n	80116c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	2b40      	cmp	r3, #64	@ 0x40
 801165c:	d031      	beq.n	80116c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	69db      	ldr	r3, [r3, #28]
 8011664:	f003 0308 	and.w	r3, r3, #8
 8011668:	2b08      	cmp	r3, #8
 801166a:	d110      	bne.n	801168e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2208      	movs	r2, #8
 8011672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f000 f838 	bl	80116ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2208      	movs	r2, #8
 801167e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2200      	movs	r2, #0
 8011686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801168a:	2301      	movs	r3, #1
 801168c:	e029      	b.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	69db      	ldr	r3, [r3, #28]
 8011694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801169c:	d111      	bne.n	80116c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80116a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f000 f81e 	bl	80116ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2220      	movs	r2, #32
 80116b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80116be:	2303      	movs	r3, #3
 80116c0:	e00f      	b.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	69da      	ldr	r2, [r3, #28]
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	4013      	ands	r3, r2
 80116cc:	68ba      	ldr	r2, [r7, #8]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	bf0c      	ite	eq
 80116d2:	2301      	moveq	r3, #1
 80116d4:	2300      	movne	r3, #0
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	461a      	mov	r2, r3
 80116da:	79fb      	ldrb	r3, [r7, #7]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d0a0      	beq.n	8011622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80116e0:	2300      	movs	r3, #0
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80116ea:	b480      	push	{r7}
 80116ec:	b095      	sub	sp, #84	@ 0x54
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116fa:	e853 3f00 	ldrex	r3, [r3]
 80116fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	461a      	mov	r2, r3
 801170e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011710:	643b      	str	r3, [r7, #64]	@ 0x40
 8011712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011718:	e841 2300 	strex	r3, r2, [r1]
 801171c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801171e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011720:	2b00      	cmp	r3, #0
 8011722:	d1e6      	bne.n	80116f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	3308      	adds	r3, #8
 801172a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	e853 3f00 	ldrex	r3, [r3]
 8011732:	61fb      	str	r3, [r7, #28]
   return(result);
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801173a:	f023 0301 	bic.w	r3, r3, #1
 801173e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	3308      	adds	r3, #8
 8011746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801174a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801174c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801174e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011750:	e841 2300 	strex	r3, r2, [r1]
 8011754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	d1e3      	bne.n	8011724 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011760:	2b01      	cmp	r3, #1
 8011762:	d118      	bne.n	8011796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	e853 3f00 	ldrex	r3, [r3]
 8011770:	60bb      	str	r3, [r7, #8]
   return(result);
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	f023 0310 	bic.w	r3, r3, #16
 8011778:	647b      	str	r3, [r7, #68]	@ 0x44
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	461a      	mov	r2, r3
 8011780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011782:	61bb      	str	r3, [r7, #24]
 8011784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011786:	6979      	ldr	r1, [r7, #20]
 8011788:	69ba      	ldr	r2, [r7, #24]
 801178a:	e841 2300 	strex	r3, r2, [r1]
 801178e:	613b      	str	r3, [r7, #16]
   return(result);
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d1e6      	bne.n	8011764 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2220      	movs	r2, #32
 801179a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2200      	movs	r2, #0
 80117a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2200      	movs	r2, #0
 80117a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80117aa:	bf00      	nop
 80117ac:	3754      	adds	r7, #84	@ 0x54
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80117b6:	b480      	push	{r7}
 80117b8:	b085      	sub	sp, #20
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d101      	bne.n	80117cc <HAL_UARTEx_DisableFifoMode+0x16>
 80117c8:	2302      	movs	r3, #2
 80117ca:	e027      	b.n	801181c <HAL_UARTEx_DisableFifoMode+0x66>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2224      	movs	r2, #36	@ 0x24
 80117d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f022 0201 	bic.w	r2, r2, #1
 80117f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80117fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2220      	movs	r2, #32
 801180e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <net_ntoa_r>:
  * @param buf: buffer to fill with string corresponding to the given IP address
  * @param buflen: the length of the given buffer to fill
  * @return IPv4 address string, like "192.168.1.10"
  */
char_t *net_ntoa_r(const net_ip_addr_t *addr, char_t *buf, int32_t buflen)
{
 8011828:	b480      	push	{r7}
 801182a:	b08b      	sub	sp, #44	@ 0x2c
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	607a      	str	r2, [r7, #4]
  char_t inv[3];
  int32_t len = 0;
 8011834:	2300      	movs	r3, #0
 8011836:	627b      	str	r3, [r7, #36]	@ 0x24
  char_t *buf_ret = NULL;
 8011838:	2300      	movs	r3, #0
 801183a:	623b      	str	r3, [r7, #32]
  const uint32_t addr_32bits = addr->addr;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	613b      	str	r3, [r7, #16]
  const uint8_t *ap = (const uint8_t *)&addr_32bits;
 8011842:	f107 0310 	add.w	r3, r7, #16
 8011846:	61bb      	str	r3, [r7, #24]

  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8011848:	2300      	movs	r3, #0
 801184a:	77fb      	strb	r3, [r7, #31]
 801184c:	e04e      	b.n	80118ec <net_ntoa_r+0xc4>
  {
    uint8_t i = 0;
 801184e:	2300      	movs	r3, #0
 8011850:	77bb      	strb	r3, [r7, #30]
    uint8_t val = ap[n];
 8011852:	7ffb      	ldrb	r3, [r7, #31]
 8011854:	69ba      	ldr	r2, [r7, #24]
 8011856:	4413      	add	r3, r2
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	777b      	strb	r3, [r7, #29]
    do
    {
      const uint8_t rem = val % 10U;
 801185c:	7f7a      	ldrb	r2, [r7, #29]
 801185e:	4b2e      	ldr	r3, [pc, #184]	@ (8011918 <net_ntoa_r+0xf0>)
 8011860:	fba3 1302 	umull	r1, r3, r3, r2
 8011864:	08d9      	lsrs	r1, r3, #3
 8011866:	460b      	mov	r3, r1
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	440b      	add	r3, r1
 801186c:	005b      	lsls	r3, r3, #1
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	75fb      	strb	r3, [r7, #23]
      val /=  10U;
 8011872:	7f7b      	ldrb	r3, [r7, #29]
 8011874:	4a28      	ldr	r2, [pc, #160]	@ (8011918 <net_ntoa_r+0xf0>)
 8011876:	fba2 2303 	umull	r2, r3, r2, r3
 801187a:	08db      	lsrs	r3, r3, #3
 801187c:	777b      	strb	r3, [r7, #29]
      inv[i] = (char_t)'0' + rem;
 801187e:	7fbb      	ldrb	r3, [r7, #30]
 8011880:	7dfa      	ldrb	r2, [r7, #23]
 8011882:	3230      	adds	r2, #48	@ 0x30
 8011884:	b2d2      	uxtb	r2, r2
 8011886:	3328      	adds	r3, #40	@ 0x28
 8011888:	443b      	add	r3, r7
 801188a:	f803 2c14 	strb.w	r2, [r3, #-20]
      i++;
 801188e:	7fbb      	ldrb	r3, [r7, #30]
 8011890:	3301      	adds	r3, #1
 8011892:	77bb      	strb	r3, [r7, #30]
    } while (val != 0U);
 8011894:	7f7b      	ldrb	r3, [r7, #29]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1e0      	bne.n	801185c <net_ntoa_r+0x34>

    while (i != 0U)
 801189a:	e012      	b.n	80118c2 <net_ntoa_r+0x9a>
    {
      i--;
 801189c:	7fbb      	ldrb	r3, [r7, #30]
 801189e:	3b01      	subs	r3, #1
 80118a0:	77bb      	strb	r3, [r7, #30]
      if (len < buflen)
 80118a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	da0b      	bge.n	80118c2 <net_ntoa_r+0x9a>
      {
        buf[len] = inv[i];
 80118aa:	7fba      	ldrb	r2, [r7, #30]
 80118ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ae:	68b9      	ldr	r1, [r7, #8]
 80118b0:	440b      	add	r3, r1
 80118b2:	3228      	adds	r2, #40	@ 0x28
 80118b4:	443a      	add	r2, r7
 80118b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80118ba:	701a      	strb	r2, [r3, #0]
        len++;
 80118bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118be:	3301      	adds	r3, #1
 80118c0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0U)
 80118c2:	7fbb      	ldrb	r3, [r7, #30]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1e9      	bne.n	801189c <net_ntoa_r+0x74>
      }
    }

    if ((n < 3U) && (len < buflen))
 80118c8:	7ffb      	ldrb	r3, [r7, #31]
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d80b      	bhi.n	80118e6 <net_ntoa_r+0xbe>
 80118ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	da07      	bge.n	80118e6 <net_ntoa_r+0xbe>
    {
      buf[len] = (char_t) '.';
 80118d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d8:	68ba      	ldr	r2, [r7, #8]
 80118da:	4413      	add	r3, r2
 80118dc:	222e      	movs	r2, #46	@ 0x2e
 80118de:	701a      	strb	r2, [r3, #0]
      len++;
 80118e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e2:	3301      	adds	r3, #1
 80118e4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 80118e6:	7ffb      	ldrb	r3, [r7, #31]
 80118e8:	3301      	adds	r3, #1
 80118ea:	77fb      	strb	r3, [r7, #31]
 80118ec:	7ffb      	ldrb	r3, [r7, #31]
 80118ee:	2b03      	cmp	r3, #3
 80118f0:	d9ad      	bls.n	801184e <net_ntoa_r+0x26>
    }
  }

  if (len < buflen)
 80118f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	da06      	bge.n	8011908 <net_ntoa_r+0xe0>
  {
    buf[len] = (char_t) '\0';
 80118fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	4413      	add	r3, r2
 8011900:	2200      	movs	r2, #0
 8011902:	701a      	strb	r2, [r3, #0]
    buf_ret = buf;
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	623b      	str	r3, [r7, #32]
  }

  return buf_ret;
 8011908:	6a3b      	ldr	r3, [r7, #32]
}
 801190a:	4618      	mov	r0, r3
 801190c:	372c      	adds	r7, #44	@ 0x2c
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	cccccccd 	.word	0xcccccccd

0801191c <net_ntoa>:
  * @brief  Convert IPv4 address from structure to string
  * @param  addr: an IP address structure
  * @retval IP address as a string
  */
char_t *net_ntoa(const net_ip_addr_t *addr)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  static char_t str[16];

  memset(str, 0, sizeof(str));
 8011924:	2210      	movs	r2, #16
 8011926:	2100      	movs	r1, #0
 8011928:	4806      	ldr	r0, [pc, #24]	@ (8011944 <net_ntoa+0x28>)
 801192a:	f003 fe25 	bl	8015578 <memset>

  return net_ntoa_r(addr, str, sizeof(str));
 801192e:	2210      	movs	r2, #16
 8011930:	4904      	ldr	r1, [pc, #16]	@ (8011944 <net_ntoa+0x28>)
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff ff78 	bl	8011828 <net_ntoa_r>
 8011938:	4603      	mov	r3, r0
}
 801193a:	4618      	mov	r0, r3
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	2000327c 	.word	0x2000327c

08011948 <net_set_port>:
  * @param  pAddr: a socket structure
  * @param  Port: the port value
  * @retval
  */
void net_set_port(net_sockaddr_t *pAddr, uint16_t Port)
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	460b      	mov	r3, r1
 8011952:	807b      	strh	r3, [r7, #2]
  }
  else

#endif /* NET_USE_IPV6 */
  {
    ((net_sockaddr_in_t *)pAddr)->sin_port = NET_HTONS(Port);
 8011954:	887b      	ldrh	r3, [r7, #2]
 8011956:	ba5b      	rev16	r3, r3
 8011958:	b29a      	uxth	r2, r3
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	805a      	strh	r2, [r3, #2]
  }
}
 801195e:	bf00      	nop
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <net_get_ip_addr>:
  * @brief  Function description
  * @param  pAddr: a socket structure
  * @retval IP address value
  */
net_ip_addr_t net_get_ip_addr(const net_sockaddr_t *pAddr)
{
 801196a:	b480      	push	{r7}
 801196c:	b085      	sub	sp, #20
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  net_ip_addr_t ip_addr = {0};
 8011972:	2300      	movs	r3, #0
 8011974:	60bb      	str	r3, [r7, #8]
    inet6_addr_to_ip6addr(&ip_addr.u_addr.ip6, &p_s_addr_in6->sin6_addr);
  }
  else
#endif /* NET_USE_IPV6 */
  {
    const net_sockaddr_in_t *const p_s_addr_in = (const net_sockaddr_in_t *)pAddr;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	60fb      	str	r3, [r7, #12]

#ifdef NET_USE_LWIP_DEFINITIONS
    ip_addr.u_addr.ip4.addr = p_s_addr_in->sin_addr.s_addr;
#else
    ip_addr.addr = p_s_addr_in->sin_addr.s_addr;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	60bb      	str	r3, [r7, #8]
#endif /* NET_USE_LWIP_DEFINITIONS */
  }

  return ip_addr;
 8011980:	68bb      	ldr	r3, [r7, #8]
}
 8011982:	4618      	mov	r0, r3
 8011984:	3714      	adds	r7, #20
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr

0801198e <net_wifi_get_class>:

/*static*/ const char *NO_NETWORK_INTERFACE_DEFINED = "No network interface defined\n";


net_interface_class_t net_wifi_get_class(net_if_handle_t *pnetif)
{
 801198e:	b480      	push	{r7}
 8011990:	b083      	sub	sp, #12
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  return pnetif->pdrv->if_class;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801199c:	781b      	ldrb	r3, [r3, #0]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	370c      	adds	r7, #12
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
	...

080119ac <net_wifi_security_to_string>:
  * @brief  Convert WiFi security enumerated value to string
  * @param  sec is an unsigned integer
  * @retval a constant string, for instance "Open" or "WPA2-AES"
  */
const char_t *net_wifi_security_to_string(uint32_t sec)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  const char_t *s;
  if (sec == NET_WIFI_SM_OPEN)
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d102      	bne.n	80119c0 <net_wifi_security_to_string+0x14>
  {
    s = "Open";
 80119ba:	4b45      	ldr	r3, [pc, #276]	@ (8011ad0 <net_wifi_security_to_string+0x124>)
 80119bc:	60fb      	str	r3, [r7, #12]
 80119be:	e080      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WEP_SHARED)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f248 0201 	movw	r2, #32769	@ 0x8001
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d102      	bne.n	80119d0 <net_wifi_security_to_string+0x24>
  {
    s = "WEP-shared";
 80119ca:	4b42      	ldr	r3, [pc, #264]	@ (8011ad4 <net_wifi_security_to_string+0x128>)
 80119cc:	60fb      	str	r3, [r7, #12]
 80119ce:	e078      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_TKIP_PSK)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4a41      	ldr	r2, [pc, #260]	@ (8011ad8 <net_wifi_security_to_string+0x12c>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d102      	bne.n	80119de <net_wifi_security_to_string+0x32>
  {
    s = "WPA-TKIP";
 80119d8:	4b40      	ldr	r3, [pc, #256]	@ (8011adc <net_wifi_security_to_string+0x130>)
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e071      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_MIXED_PSK)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	4a3f      	ldr	r2, [pc, #252]	@ (8011ae0 <net_wifi_security_to_string+0x134>)
 80119e2:	4293      	cmp	r3, r2
 80119e4:	d102      	bne.n	80119ec <net_wifi_security_to_string+0x40>
  {
    s = "WPA-Mixed";
 80119e6:	4b3f      	ldr	r3, [pc, #252]	@ (8011ae4 <net_wifi_security_to_string+0x138>)
 80119e8:	60fb      	str	r3, [r7, #12]
 80119ea:	e06a      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_PSK)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4a3e      	ldr	r2, [pc, #248]	@ (8011ae8 <net_wifi_security_to_string+0x13c>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d102      	bne.n	80119fa <net_wifi_security_to_string+0x4e>
  {
    s = "WPA2-AES";
 80119f4:	4b3d      	ldr	r3, [pc, #244]	@ (8011aec <net_wifi_security_to_string+0x140>)
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	e063      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_PSK)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4a3c      	ldr	r2, [pc, #240]	@ (8011af0 <net_wifi_security_to_string+0x144>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d102      	bne.n	8011a08 <net_wifi_security_to_string+0x5c>
  {
    s = "WPA2-TKIP";
 8011a02:	4b3c      	ldr	r3, [pc, #240]	@ (8011af4 <net_wifi_security_to_string+0x148>)
 8011a04:	60fb      	str	r3, [r7, #12]
 8011a06:	e05c      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_PSK)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4a3b      	ldr	r2, [pc, #236]	@ (8011af8 <net_wifi_security_to_string+0x14c>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d102      	bne.n	8011a16 <net_wifi_security_to_string+0x6a>
  {
    s = "WPA2_Mixed";
 8011a10:	4b3a      	ldr	r3, [pc, #232]	@ (8011afc <net_wifi_security_to_string+0x150>)
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	e055      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_PSK)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4a39      	ldr	r2, [pc, #228]	@ (8011b00 <net_wifi_security_to_string+0x154>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d102      	bne.n	8011a24 <net_wifi_security_to_string+0x78>
  {
    s = "WPA2-FBT";
 8011a1e:	4b39      	ldr	r3, [pc, #228]	@ (8011b04 <net_wifi_security_to_string+0x158>)
 8011a20:	60fb      	str	r3, [r7, #12]
 8011a22:	e04e      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_SAE)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a38      	ldr	r2, [pc, #224]	@ (8011b08 <net_wifi_security_to_string+0x15c>)
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d102      	bne.n	8011a32 <net_wifi_security_to_string+0x86>
  {
    s = "WPA3";
 8011a2c:	4b37      	ldr	r3, [pc, #220]	@ (8011b0c <net_wifi_security_to_string+0x160>)
 8011a2e:	60fb      	str	r3, [r7, #12]
 8011a30:	e047      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_WPA2_PSK)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4a36      	ldr	r2, [pc, #216]	@ (8011b10 <net_wifi_security_to_string+0x164>)
 8011a36:	4293      	cmp	r3, r2
 8011a38:	d102      	bne.n	8011a40 <net_wifi_security_to_string+0x94>
  {
    s = "WPA3-WPA2";
 8011a3a:	4b36      	ldr	r3, [pc, #216]	@ (8011b14 <net_wifi_security_to_string+0x168>)
 8011a3c:	60fb      	str	r3, [r7, #12]
 8011a3e:	e040      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_WPA_TKIP_ENT)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4a35      	ldr	r2, [pc, #212]	@ (8011b18 <net_wifi_security_to_string+0x16c>)
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d102      	bne.n	8011a4e <net_wifi_security_to_string+0xa2>
  {
    s = "WPA-TKIP-Ent";
 8011a48:	4b34      	ldr	r3, [pc, #208]	@ (8011b1c <net_wifi_security_to_string+0x170>)
 8011a4a:	60fb      	str	r3, [r7, #12]
 8011a4c:	e039      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_AES_ENT)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	4a33      	ldr	r2, [pc, #204]	@ (8011b20 <net_wifi_security_to_string+0x174>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d102      	bne.n	8011a5c <net_wifi_security_to_string+0xb0>
  {
    s = "WPA-AES-Ent";
 8011a56:	4b33      	ldr	r3, [pc, #204]	@ (8011b24 <net_wifi_security_to_string+0x178>)
 8011a58:	60fb      	str	r3, [r7, #12]
 8011a5a:	e032      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_ENT)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4a32      	ldr	r2, [pc, #200]	@ (8011b28 <net_wifi_security_to_string+0x17c>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d102      	bne.n	8011a6a <net_wifi_security_to_string+0xbe>
  {
    s = "WPA2-TKIP-Ent";
 8011a64:	4b31      	ldr	r3, [pc, #196]	@ (8011b2c <net_wifi_security_to_string+0x180>)
 8011a66:	60fb      	str	r3, [r7, #12]
 8011a68:	e02b      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_ENT)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4a30      	ldr	r2, [pc, #192]	@ (8011b30 <net_wifi_security_to_string+0x184>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d102      	bne.n	8011a78 <net_wifi_security_to_string+0xcc>
  {
    s = "WPA2-AES-Ent";
 8011a72:	4b30      	ldr	r3, [pc, #192]	@ (8011b34 <net_wifi_security_to_string+0x188>)
 8011a74:	60fb      	str	r3, [r7, #12]
 8011a76:	e024      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_ENT)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8011b38 <net_wifi_security_to_string+0x18c>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d102      	bne.n	8011a86 <net_wifi_security_to_string+0xda>
  {
    s = "WPA2-Mixed-Ent";
 8011a80:	4b2e      	ldr	r3, [pc, #184]	@ (8011b3c <net_wifi_security_to_string+0x190>)
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	e01d      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_ENT)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	4a2d      	ldr	r2, [pc, #180]	@ (8011b40 <net_wifi_security_to_string+0x194>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d102      	bne.n	8011a94 <net_wifi_security_to_string+0xe8>
  {
    s = "WPA-FBT-Ent";
 8011a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8011b44 <net_wifi_security_to_string+0x198>)
 8011a90:	60fb      	str	r3, [r7, #12]
 8011a92:	e016      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_IBSS_OPEN)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011a9a:	d102      	bne.n	8011aa2 <net_wifi_security_to_string+0xf6>
  {
    s = "IBS";
 8011a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8011b48 <net_wifi_security_to_string+0x19c>)
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	e00f      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_OPEN)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011aa8:	d102      	bne.n	8011ab0 <net_wifi_security_to_string+0x104>
  {
    s = "WPS";
 8011aaa:	4b28      	ldr	r3, [pc, #160]	@ (8011b4c <net_wifi_security_to_string+0x1a0>)
 8011aac:	60fb      	str	r3, [r7, #12]
 8011aae:	e008      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_SECURE)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4a27      	ldr	r2, [pc, #156]	@ (8011b50 <net_wifi_security_to_string+0x1a4>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d102      	bne.n	8011abe <net_wifi_security_to_string+0x112>
  {
    s = "WPS-AES";
 8011ab8:	4b26      	ldr	r3, [pc, #152]	@ (8011b54 <net_wifi_security_to_string+0x1a8>)
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	e001      	b.n	8011ac2 <net_wifi_security_to_string+0x116>
  }
  else
  {
    s = "unknown";
 8011abe:	4b26      	ldr	r3, [pc, #152]	@ (8011b58 <net_wifi_security_to_string+0x1ac>)
 8011ac0:	60fb      	str	r3, [r7, #12]
  }
  return s;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3714      	adds	r7, #20
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr
 8011ad0:	0801a1a4 	.word	0x0801a1a4
 8011ad4:	0801a1ac 	.word	0x0801a1ac
 8011ad8:	00200002 	.word	0x00200002
 8011adc:	0801a1b8 	.word	0x0801a1b8
 8011ae0:	00200006 	.word	0x00200006
 8011ae4:	0801a1c4 	.word	0x0801a1c4
 8011ae8:	00400004 	.word	0x00400004
 8011aec:	0801a1d0 	.word	0x0801a1d0
 8011af0:	00400002 	.word	0x00400002
 8011af4:	0801a1dc 	.word	0x0801a1dc
 8011af8:	00400006 	.word	0x00400006
 8011afc:	0801a1e8 	.word	0x0801a1e8
 8011b00:	40400004 	.word	0x40400004
 8011b04:	0801a1f4 	.word	0x0801a1f4
 8011b08:	01000004 	.word	0x01000004
 8011b0c:	0801a200 	.word	0x0801a200
 8011b10:	01400004 	.word	0x01400004
 8011b14:	0801a208 	.word	0x0801a208
 8011b18:	02200002 	.word	0x02200002
 8011b1c:	0801a214 	.word	0x0801a214
 8011b20:	02200004 	.word	0x02200004
 8011b24:	0801a224 	.word	0x0801a224
 8011b28:	02400002 	.word	0x02400002
 8011b2c:	0801a230 	.word	0x0801a230
 8011b30:	02400004 	.word	0x02400004
 8011b34:	0801a240 	.word	0x0801a240
 8011b38:	02400006 	.word	0x02400006
 8011b3c:	0801a250 	.word	0x0801a250
 8011b40:	42400004 	.word	0x42400004
 8011b44:	0801a260 	.word	0x0801a260
 8011b48:	0801a26c 	.word	0x0801a26c
 8011b4c:	0801a270 	.word	0x0801a270
 8011b50:	10000004 	.word	0x10000004
 8011b54:	0801a274 	.word	0x0801a274
 8011b58:	0801a27c 	.word	0x0801a27c

08011b5c <net_wifi_scan>:
  * @param  ssid is a pointer to a string, when not null, scan searches only this SSID
  * @retval return the number of found access point, max value is "number".
  * This function is a synchronous function.
  */
int32_t net_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b086      	sub	sp, #24
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	460b      	mov	r3, r1
 8011b66:	607a      	str	r2, [r7, #4]
 8011b68:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	617b      	str	r3, [r7, #20]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f000 f97a 	bl	8011e68 <netif_check>
 8011b74:	6138      	str	r0, [r7, #16]

  if (p_netif == NULL)
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d111      	bne.n	8011ba0 <net_wifi_scan+0x44>
  {
    NET_DBG_ERROR("%s", NO_NETWORK_INTERFACE_DEFINED);
 8011b7c:	22e5      	movs	r2, #229	@ 0xe5
 8011b7e:	4922      	ldr	r1, [pc, #136]	@ (8011c08 <net_wifi_scan+0xac>)
 8011b80:	4822      	ldr	r0, [pc, #136]	@ (8011c0c <net_wifi_scan+0xb0>)
 8011b82:	f003 fa43 	bl	801500c <iprintf>
 8011b86:	4b22      	ldr	r3, [pc, #136]	@ (8011c10 <net_wifi_scan+0xb4>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4821      	ldr	r0, [pc, #132]	@ (8011c14 <net_wifi_scan+0xb8>)
 8011b8e:	f003 fa3d 	bl	801500c <iprintf>
 8011b92:	200a      	movs	r0, #10
 8011b94:	f003 fa4c 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8011b98:	f06f 0303 	mvn.w	r3, #3
 8011b9c:	617b      	str	r3, [r7, #20]
 8011b9e:	e02e      	b.n	8011bfe <net_wifi_scan+0xa2>
  }
  else if (p_netif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00e      	beq.n	8011bca <net_wifi_scan+0x6e>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
 8011bac:	22ea      	movs	r2, #234	@ 0xea
 8011bae:	4916      	ldr	r1, [pc, #88]	@ (8011c08 <net_wifi_scan+0xac>)
 8011bb0:	4816      	ldr	r0, [pc, #88]	@ (8011c0c <net_wifi_scan+0xb0>)
 8011bb2:	f003 fa2b 	bl	801500c <iprintf>
 8011bb6:	4818      	ldr	r0, [pc, #96]	@ (8011c18 <net_wifi_scan+0xbc>)
 8011bb8:	f003 fa98 	bl	80150ec <puts>
 8011bbc:	200a      	movs	r0, #10
 8011bbe:	f003 fa37 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8011bc2:	f06f 0303 	mvn.w	r3, #3
 8011bc6:	617b      	str	r3, [r7, #20]
 8011bc8:	e019      	b.n	8011bfe <net_wifi_scan+0xa2>
  }
  else
  {
    if (p_netif->pdrv->extension.wifi->scan(p_netif, mode, ssid) != NET_OK)
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	7af9      	ldrb	r1, [r7, #11]
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	6938      	ldr	r0, [r7, #16]
 8011bda:	4798      	blx	r3
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00d      	beq.n	8011bfe <net_wifi_scan+0xa2>
    {
      NET_DBG_ERROR("Error when executing net_wifi_scan function\n");
 8011be2:	22f1      	movs	r2, #241	@ 0xf1
 8011be4:	4908      	ldr	r1, [pc, #32]	@ (8011c08 <net_wifi_scan+0xac>)
 8011be6:	4809      	ldr	r0, [pc, #36]	@ (8011c0c <net_wifi_scan+0xb0>)
 8011be8:	f003 fa10 	bl	801500c <iprintf>
 8011bec:	480b      	ldr	r0, [pc, #44]	@ (8011c1c <net_wifi_scan+0xc0>)
 8011bee:	f003 fa7d 	bl	80150ec <puts>
 8011bf2:	200a      	movs	r0, #10
 8011bf4:	f003 fa1c 	bl	8015030 <putchar>
      ret = NET_ERROR_GENERIC;
 8011bf8:	f06f 031c 	mvn.w	r3, #28
 8011bfc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8011bfe:	697b      	ldr	r3, [r7, #20]
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3718      	adds	r7, #24
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	0801a29c 	.word	0x0801a29c
 8011c0c:	0801a304 	.word	0x0801a304
 8011c10:	200000e0 	.word	0x200000e0
 8011c14:	0801a314 	.word	0x0801a314
 8011c18:	0801a318 	.word	0x0801a318
 8011c1c:	0801a358 	.word	0x0801a358

08011c20 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer, size of the array 'results'
  * @retval return the number of found access point, max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f000 f91a 	bl	8011e68 <netif_check>
 8011c34:	6138      	str	r0, [r7, #16]

  if (p_netif == NULL)
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d112      	bne.n	8011c62 <net_wifi_get_scan_results+0x42>
  {
    NET_DBG_ERROR("%s", NO_NETWORK_INTERFACE_DEFINED);
 8011c3c:	f240 1207 	movw	r2, #263	@ 0x107
 8011c40:	491a      	ldr	r1, [pc, #104]	@ (8011cac <net_wifi_get_scan_results+0x8c>)
 8011c42:	481b      	ldr	r0, [pc, #108]	@ (8011cb0 <net_wifi_get_scan_results+0x90>)
 8011c44:	f003 f9e2 	bl	801500c <iprintf>
 8011c48:	4b1a      	ldr	r3, [pc, #104]	@ (8011cb4 <net_wifi_get_scan_results+0x94>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	481a      	ldr	r0, [pc, #104]	@ (8011cb8 <net_wifi_get_scan_results+0x98>)
 8011c50:	f003 f9dc 	bl	801500c <iprintf>
 8011c54:	200a      	movs	r0, #10
 8011c56:	f003 f9eb 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8011c5a:	f06f 0303 	mvn.w	r3, #3
 8011c5e:	617b      	str	r3, [r7, #20]
 8011c60:	e01f      	b.n	8011ca2 <net_wifi_get_scan_results+0x82>
  }
  else if (p_netif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d00f      	beq.n	8011c8e <net_wifi_get_scan_results+0x6e>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
 8011c6e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8011c72:	490e      	ldr	r1, [pc, #56]	@ (8011cac <net_wifi_get_scan_results+0x8c>)
 8011c74:	480e      	ldr	r0, [pc, #56]	@ (8011cb0 <net_wifi_get_scan_results+0x90>)
 8011c76:	f003 f9c9 	bl	801500c <iprintf>
 8011c7a:	4810      	ldr	r0, [pc, #64]	@ (8011cbc <net_wifi_get_scan_results+0x9c>)
 8011c7c:	f003 fa36 	bl	80150ec <puts>
 8011c80:	200a      	movs	r0, #10
 8011c82:	f003 f9d5 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8011c86:	f06f 0303 	mvn.w	r3, #3
 8011c8a:	617b      	str	r3, [r7, #20]
 8011c8c:	e009      	b.n	8011ca2 <net_wifi_get_scan_results+0x82>
  }
  else
  {
    ret = p_netif->pdrv->extension.wifi->get_scan_results(p_netif, results, number);
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	79fa      	ldrb	r2, [r7, #7]
 8011c9a:	68b9      	ldr	r1, [r7, #8]
 8011c9c:	6938      	ldr	r0, [r7, #16]
 8011c9e:	4798      	blx	r3
 8011ca0:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8011ca2:	697b      	ldr	r3, [r7, #20]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3718      	adds	r7, #24
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	0801a29c 	.word	0x0801a29c
 8011cb0:	0801a304 	.word	0x0801a304
 8011cb4:	200000e0 	.word	0x200000e0
 8011cb8:	0801a314 	.word	0x0801a314
 8011cbc:	0801a318 	.word	0x0801a318

08011cc0 <net_wifi_set_credentials>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  credentials a pointer to a const allocated structure which contain credentials values (SSID, password)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  pnetif->pdrv->extension.wifi->credentials = credentials;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	619a      	str	r2, [r3, #24]
  return NET_OK;
 8011cd6:	2300      	movs	r3, #0
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	370c      	adds	r7, #12
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr

08011ce4 <net_wifi_set_access_mode>:
  * @brief  Set the access mode for a WIFI interface: AP or STA mode
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_mode(net_if_handle_t *pnetif, net_wifi_mode_t mode)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	460b      	mov	r3, r1
 8011cee:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->mode = mode;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	771a      	strb	r2, [r3, #28]
  return NET_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	370c      	adds	r7, #12
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr

08011d0a <net_wifi_set_access_channel>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  channel is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_channel(net_if_handle_t *pnetif,  uint8_t channel)
{
 8011d0a:	b480      	push	{r7}
 8011d0c:	b083      	sub	sp, #12
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	460b      	mov	r3, r1
 8011d14:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->access_channel = channel;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d1e:	78fa      	ldrb	r2, [r7, #3]
 8011d20:	775a      	strb	r2, [r3, #29]
  return NET_OK;
 8011d22:	2300      	movs	r3, #0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	370c      	adds	r7, #12
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <net_wifi_set_ap_max_connections>:
  * @param  pnetif is a pointer to an allocated network interface structure
  * @param  count is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_ap_max_connections(net_if_handle_t *pnetif,  uint8_t count)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	460b      	mov	r3, r1
 8011d3a:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->max_connections = count;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d44:	78fa      	ldrb	r2, [r7, #3]
 8011d46:	779a      	strb	r2, [r3, #30]
  return NET_OK;
 8011d48:	2300      	movs	r3, #0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
	...

08011d58 <netif_add_to_list>:
#define __IO volatile
#endif /* IO */


static void netif_add_to_list(net_if_handle_t *pnetif)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();
  if (NetIfList == NULL)
 8011d60:	4b0d      	ldr	r3, [pc, #52]	@ (8011d98 <netif_add_to_list+0x40>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d103      	bne.n	8011d70 <netif_add_to_list+0x18>
  {
    NetIfList = pnetif;
 8011d68:	4a0b      	ldr	r2, [pc, #44]	@ (8011d98 <netif_add_to_list+0x40>)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6013      	str	r3, [r2, #0]
      p_last_netif = p_last_netif->next;
    }
    p_last_netif->next = pnetif;
  }
  UNLOCK_NETIF_LIST();
}
 8011d6e:	e00d      	b.n	8011d8c <netif_add_to_list+0x34>
    net_if_handle_t *p_last_netif = NetIfList;
 8011d70:	4b09      	ldr	r3, [pc, #36]	@ (8011d98 <netif_add_to_list+0x40>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	60fb      	str	r3, [r7, #12]
    while (p_last_netif->next != NULL)
 8011d76:	e002      	b.n	8011d7e <netif_add_to_list+0x26>
      p_last_netif = p_last_netif->next;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	60fb      	str	r3, [r7, #12]
    while (p_last_netif->next != NULL)
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d1f8      	bne.n	8011d78 <netif_add_to_list+0x20>
    p_last_netif->next = pnetif;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	601a      	str	r2, [r3, #0]
}
 8011d8c:	bf00      	nop
 8011d8e:	3714      	adds	r7, #20
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	2000328c 	.word	0x2000328c

08011d9c <netif_remove_from_list>:


static void netif_remove_from_list(net_if_handle_t *pnetif)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b085      	sub	sp, #20
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();

  if (NetIfList == pnetif)
 8011da4:	4b13      	ldr	r3, [pc, #76]	@ (8011df4 <netif_remove_from_list+0x58>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d105      	bne.n	8011dba <netif_remove_from_list+0x1e>
  {
    NetIfList = NetIfList->next;
 8011dae:	4b11      	ldr	r3, [pc, #68]	@ (8011df4 <netif_remove_from_list+0x58>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a0f      	ldr	r2, [pc, #60]	@ (8011df4 <netif_remove_from_list+0x58>)
 8011db6:	6013      	str	r3, [r2, #0]
        break;
      }
    }
  }
  UNLOCK_NETIF_LIST();
}
 8011db8:	e015      	b.n	8011de6 <netif_remove_from_list+0x4a>
    for (net_if_handle_t *p_netif_prev = NetIfList; p_netif_prev->next != NULL; p_netif_prev = p_netif_prev->next)
 8011dba:	4b0e      	ldr	r3, [pc, #56]	@ (8011df4 <netif_remove_from_list+0x58>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	60fb      	str	r3, [r7, #12]
 8011dc0:	e00d      	b.n	8011dde <netif_remove_from_list+0x42>
      if (p_netif_prev->next == pnetif)
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d105      	bne.n	8011dd8 <netif_remove_from_list+0x3c>
        p_netif_prev->next = pnetif->next;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	601a      	str	r2, [r3, #0]
        break;
 8011dd4:	bf00      	nop
}
 8011dd6:	e006      	b.n	8011de6 <netif_remove_from_list+0x4a>
    for (net_if_handle_t *p_netif_prev = NetIfList; p_netif_prev->next != NULL; p_netif_prev = p_netif_prev->next)
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	60fb      	str	r3, [r7, #12]
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d1ed      	bne.n	8011dc2 <netif_remove_from_list+0x26>
}
 8011de6:	bf00      	nop
 8011de8:	3714      	adds	r7, #20
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	2000328c 	.word	0x2000328c

08011df8 <net_if_find>:
  * @brief  Function description
  * @param  addr
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  const net_if_handle_t *ptr;
  net_ip_addr_t ipaddr = {0};
 8011e00:	2300      	movs	r3, #0
 8011e02:	613b      	str	r3, [r7, #16]
  net_ip_addr_t ipaddr_zero = {0};
 8011e04:	2300      	movs	r3, #0
 8011e06:	60fb      	str	r3, [r7, #12]

  if (addr != NULL)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d004      	beq.n	8011e18 <net_if_find+0x20>
  {
    ipaddr = net_get_ip_addr(addr);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7ff fdab 	bl	801196a <net_get_ip_addr>
 8011e14:	4603      	mov	r3, r0
 8011e16:	613b      	str	r3, [r7, #16]
  }

  LOCK_NETIF_LIST();

  ptr = NetIfList;
 8011e18:	4b12      	ldr	r3, [pc, #72]	@ (8011e64 <net_if_find+0x6c>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	617b      	str	r3, [r7, #20]
  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 8011e1e:	f107 010c 	add.w	r1, r7, #12
 8011e22:	f107 0310 	add.w	r3, r7, #16
 8011e26:	2204      	movs	r2, #4
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f003 fb7b 	bl	8015524 <memcmp>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d012      	beq.n	8011e5a <net_if_find+0x62>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	3304      	adds	r3, #4
 8011e38:	f107 0110 	add.w	r1, r7, #16
 8011e3c:	2204      	movs	r2, #4
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f003 fb70 	bl	8015524 <memcmp>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d006      	beq.n	8011e58 <net_if_find+0x60>
      {
        break;
      }
      ptr = ptr->next;
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	617b      	str	r3, [r7, #20]
    } while (ptr != NULL);
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1ee      	bne.n	8011e34 <net_if_find+0x3c>
 8011e56:	e000      	b.n	8011e5a <net_if_find+0x62>
        break;
 8011e58:	bf00      	nop
  }
  UNLOCK_NETIF_LIST();

  return (net_if_handle_t *)ptr;
 8011e5a:	697b      	ldr	r3, [r7, #20]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	2000328c 	.word	0x2000328c

08011e68 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  net_if_handle_t *p_netif = pnetif;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	60fb      	str	r3, [r7, #12]
  if (p_netif == NULL)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d111      	bne.n	8011e9e <netif_check+0x36>
  {
    /* Get default interface. */
    p_netif = net_if_find(NULL);
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f7ff ffbc 	bl	8011df8 <net_if_find>
 8011e80:	60f8      	str	r0, [r7, #12]
    if (p_netif == NULL)
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10a      	bne.n	8011e9e <netif_check+0x36>
    {
      NET_DBG_ERROR("No network interface defined\n");
 8011e88:	227c      	movs	r2, #124	@ 0x7c
 8011e8a:	4907      	ldr	r1, [pc, #28]	@ (8011ea8 <netif_check+0x40>)
 8011e8c:	4807      	ldr	r0, [pc, #28]	@ (8011eac <netif_check+0x44>)
 8011e8e:	f003 f8bd 	bl	801500c <iprintf>
 8011e92:	4807      	ldr	r0, [pc, #28]	@ (8011eb0 <netif_check+0x48>)
 8011e94:	f003 f92a 	bl	80150ec <puts>
 8011e98:	200a      	movs	r0, #10
 8011e9a:	f003 f8c9 	bl	8015030 <putchar>
    }
  }
  return p_netif;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	0801a48c 	.word	0x0801a48c
 8011eac:	0801a4ec 	.word	0x0801a4ec
 8011eb0:	0801a4fc 	.word	0x0801a4fc

08011eb4 <net_if_wait_state>:
  * @param  state  the expected state
  * @param  timeout max time to wait in ms for the transition
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8011eb4:	b590      	push	{r4, r7, lr}
 8011eb6:	b089      	sub	sp, #36	@ 0x24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	607a      	str	r2, [r7, #4]
 8011ec0:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	61fb      	str	r3, [r7, #28]
  __IO net_state_t *const p = &pnetif->state;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	33eb      	adds	r3, #235	@ 0xeb
 8011eca:	61bb      	str	r3, [r7, #24]

  uint32_t start_time = HAL_GetTick();
 8011ecc:	f7f7 f9ee 	bl	80092ac <HAL_GetTick>
 8011ed0:	6178      	str	r0, [r7, #20]
  while (*p != state)
 8011ed2:	e019      	b.n	8011f08 <net_if_wait_state+0x54>
  {
    if (HAL_GetTick() >= (start_time + timeout))
 8011ed4:	f7f7 f9ea 	bl	80092ac <HAL_GetTick>
 8011ed8:	4601      	mov	r1, r0
 8011eda:	697a      	ldr	r2, [r7, #20]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	4413      	add	r3, r2
 8011ee0:	4299      	cmp	r1, r3
 8011ee2:	d303      	bcc.n	8011eec <net_if_wait_state+0x38>
    {
      ret = NET_TIMEOUT;
 8011ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ee8:	61fb      	str	r3, [r7, #28]
      break;
 8011eea:	e013      	b.n	8011f14 <net_if_wait_state+0x60>
    }
    WAIT_STATE_CHANGE(timeout - (HAL_GetTick() - start_time));
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8011ef2:	695c      	ldr	r4, [r3, #20]
 8011ef4:	f7f7 f9da 	bl	80092ac <HAL_GetTick>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	1a9a      	subs	r2, r3, r2
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4413      	add	r3, r2
 8011f02:	4619      	mov	r1, r3
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	47a0      	blx	r4
  while (*p != state)
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	7afa      	ldrb	r2, [r7, #11]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d1df      	bne.n	8011ed4 <net_if_wait_state+0x20>
  }
  return ret;
 8011f14:	69fb      	ldr	r3, [r7, #28]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3724      	adds	r7, #36	@ 0x24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd90      	pop	{r4, r7, pc}

08011f1e <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void *event_data)
{
 8011f1e:	b590      	push	{r4, r7, lr}
 8011f20:	b085      	sub	sp, #20
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	60f8      	str	r0, [r7, #12]
 8011f26:	607a      	str	r2, [r7, #4]
 8011f28:	603b      	str	r3, [r7, #0]
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	72fb      	strb	r3, [r7, #11]
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d011      	beq.n	8011f5c <net_if_notify+0x3e>
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00b      	beq.n	8011f5c <net_if_notify+0x3e>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011f4a:	681c      	ldr	r4, [r3, #0]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011f52:	6858      	ldr	r0, [r3, #4]
 8011f54:	7af9      	ldrb	r1, [r7, #11]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	47a0      	blx	r4
  }
}
 8011f5c:	bf00      	nop
 8011f5e:	3714      	adds	r7, #20
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd90      	pop	{r4, r7, pc}

08011f64 <net_if_init>:
  * @retval 0 in case of success, an error code otherwise
   * This function is a synchronous function.
  */
int32_t net_if_init(net_if_handle_t *pnetif, net_if_driver_init_func driver_init,
                    const net_event_handler_t *event_handler)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  net_if_handle_t *const p_netif = pnetif;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	613b      	str	r3, [r7, #16]
    net_init_locks();
    NetInitialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (p_netif != NULL)
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d027      	beq.n	8011fca <net_if_init+0x66>
  {
    p_netif->event_handler = event_handler;
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    p_netif->state = NET_STATE_INITIALIZED;
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	2201      	movs	r2, #1
 8011f86:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
    netif_add_to_list(p_netif);
 8011f8a:	6938      	ldr	r0, [r7, #16]
 8011f8c:	f7ff fee4 	bl	8011d58 <netif_add_to_list>
    ret = (*driver_init)(p_netif);
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	6938      	ldr	r0, [r7, #16]
 8011f94:	4798      	blx	r3
 8011f96:	6178      	str	r0, [r7, #20]
    if (NET_OK != ret)
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d023      	beq.n	8011fe6 <net_if_init+0x82>
    {
      p_netif->state = NET_STATE_DEINITIALIZED;
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
      netif_remove_from_list(p_netif);
 8011fa6:	6938      	ldr	r0, [r7, #16]
 8011fa8:	f7ff fef8 	bl	8011d9c <netif_remove_from_list>

      NET_DBG_ERROR("Interface cannot be initialized.\n");
 8011fac:	22d8      	movs	r2, #216	@ 0xd8
 8011fae:	4910      	ldr	r1, [pc, #64]	@ (8011ff0 <net_if_init+0x8c>)
 8011fb0:	4810      	ldr	r0, [pc, #64]	@ (8011ff4 <net_if_init+0x90>)
 8011fb2:	f003 f82b 	bl	801500c <iprintf>
 8011fb6:	4810      	ldr	r0, [pc, #64]	@ (8011ff8 <net_if_init+0x94>)
 8011fb8:	f003 f898 	bl	80150ec <puts>
 8011fbc:	200a      	movs	r0, #10
 8011fbe:	f003 f837 	bl	8015030 <putchar>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8011fc2:	f06f 0310 	mvn.w	r3, #16
 8011fc6:	617b      	str	r3, [r7, #20]
 8011fc8:	e00d      	b.n	8011fe6 <net_if_init+0x82>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 8011fca:	22de      	movs	r2, #222	@ 0xde
 8011fcc:	4908      	ldr	r1, [pc, #32]	@ (8011ff0 <net_if_init+0x8c>)
 8011fce:	4809      	ldr	r0, [pc, #36]	@ (8011ff4 <net_if_init+0x90>)
 8011fd0:	f003 f81c 	bl	801500c <iprintf>
 8011fd4:	4809      	ldr	r0, [pc, #36]	@ (8011ffc <net_if_init+0x98>)
 8011fd6:	f003 f889 	bl	80150ec <puts>
 8011fda:	200a      	movs	r0, #10
 8011fdc:	f003 f828 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8011fe0:	f06f 0303 	mvn.w	r3, #3
 8011fe4:	617b      	str	r3, [r7, #20]
    net_destroy_locks();
    NetInitialized = 0;
  }
#endif /* NET_USE_RTOS */

  return ret;
 8011fe6:	697b      	ldr	r3, [r7, #20]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	0801a48c 	.word	0x0801a48c
 8011ff4:	0801a4ec 	.word	0x0801a4ec
 8011ff8:	0801a51c 	.word	0x0801a51c
 8011ffc:	0801a540 	.word	0x0801a540

08012000 <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8012008:	2101      	movs	r1, #1
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f001 f88a 	bl	8013124 <net_state_manage_event>
 8012010:	4603      	mov	r3, r0
}
 8012012:	4618      	mov	r0, r3
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b082      	sub	sp, #8
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 8012022:	2102      	movs	r1, #2
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f001 f87d 	bl	8013124 <net_state_manage_event>
 801202a:	4603      	mov	r3, r0
}
 801202c:	4618      	mov	r0, r3
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <net_if_getState>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  state  a pointer to a net_state_t enum
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_getState(net_if_handle_t *pnetif, net_state_t *state)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const net_if_handle_t *const p_netif = netif_check(pnetif);
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7ff ff12 	bl	8011e68 <netif_check>
 8012044:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d007      	beq.n	801205c <net_if_getState+0x28>
  {
    *state = p_netif->state;
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	701a      	strb	r2, [r3, #0]
    ret = NET_OK;
 8012056:	2300      	movs	r3, #0
 8012058:	60fb      	str	r3, [r7, #12]
 801205a:	e011      	b.n	8012080 <net_if_getState+0x4c>
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801205c:	f240 1289 	movw	r2, #393	@ 0x189
 8012060:	490a      	ldr	r1, [pc, #40]	@ (801208c <net_if_getState+0x58>)
 8012062:	480b      	ldr	r0, [pc, #44]	@ (8012090 <net_if_getState+0x5c>)
 8012064:	f002 ffd2 	bl	801500c <iprintf>
 8012068:	480a      	ldr	r0, [pc, #40]	@ (8012094 <net_if_getState+0x60>)
 801206a:	f003 f83f 	bl	80150ec <puts>
 801206e:	200a      	movs	r0, #10
 8012070:	f002 ffde 	bl	8015030 <putchar>
    *state = NET_STATE_DEINITIALIZED;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	2200      	movs	r2, #0
 8012078:	701a      	strb	r2, [r3, #0]
    ret = NET_ERROR_PARAMETER;
 801207a:	f06f 0303 	mvn.w	r3, #3
 801207e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012080:	68fb      	ldr	r3, [r7, #12]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3710      	adds	r7, #16
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	0801a48c 	.word	0x0801a48c
 8012090:	0801a4ec 	.word	0x0801a4ec
 8012094:	0801a540 	.word	0x0801a540

08012098 <net_if_get_ip_address>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  ip a pointer to an allocated net_ip_addr_t structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_get_ip_address(net_if_handle_t *pnetif, net_ip_addr_t *ip)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const net_if_handle_t *const p_netif = netif_check(pnetif);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff fee0 	bl	8011e68 <netif_check>
 80120a8:	60b8      	str	r0, [r7, #8]

  if ((p_netif != NULL) && (ip != NULL))
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d01e      	beq.n	80120ee <net_if_get_ip_address+0x56>
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d01b      	beq.n	80120ee <net_if_get_ip_address+0x56>
  {
    if (p_netif->state == NET_STATE_CONNECTED)
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80120bc:	2b05      	cmp	r3, #5
 80120be:	d106      	bne.n	80120ce <net_if_get_ip_address+0x36>
    {
      *ip = p_netif->ipaddr;
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	68ba      	ldr	r2, [r7, #8]
 80120c4:	6852      	ldr	r2, [r2, #4]
 80120c6:	601a      	str	r2, [r3, #0]
      ret = NET_OK;
 80120c8:	2300      	movs	r3, #0
 80120ca:	60fb      	str	r3, [r7, #12]
    if (p_netif->state == NET_STATE_CONNECTED)
 80120cc:	e01e      	b.n	801210c <net_if_get_ip_address+0x74>
    }
    else
    {
      NET_DBG_ERROR("Can get ipaddr for un-connected network interface.\n");
 80120ce:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 80120d2:	4911      	ldr	r1, [pc, #68]	@ (8012118 <net_if_get_ip_address+0x80>)
 80120d4:	4811      	ldr	r0, [pc, #68]	@ (801211c <net_if_get_ip_address+0x84>)
 80120d6:	f002 ff99 	bl	801500c <iprintf>
 80120da:	4811      	ldr	r0, [pc, #68]	@ (8012120 <net_if_get_ip_address+0x88>)
 80120dc:	f003 f806 	bl	80150ec <puts>
 80120e0:	200a      	movs	r0, #10
 80120e2:	f002 ffa5 	bl	8015030 <putchar>
      ret = NET_ERROR_INTERFACE_FAILURE;
 80120e6:	f06f 0310 	mvn.w	r3, #16
 80120ea:	60fb      	str	r3, [r7, #12]
    if (p_netif->state == NET_STATE_CONNECTED)
 80120ec:	e00e      	b.n	801210c <net_if_get_ip_address+0x74>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.\n");
 80120ee:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 80120f2:	4909      	ldr	r1, [pc, #36]	@ (8012118 <net_if_get_ip_address+0x80>)
 80120f4:	4809      	ldr	r0, [pc, #36]	@ (801211c <net_if_get_ip_address+0x84>)
 80120f6:	f002 ff89 	bl	801500c <iprintf>
 80120fa:	480a      	ldr	r0, [pc, #40]	@ (8012124 <net_if_get_ip_address+0x8c>)
 80120fc:	f002 fff6 	bl	80150ec <puts>
 8012100:	200a      	movs	r0, #10
 8012102:	f002 ff95 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8012106:	f06f 0303 	mvn.w	r3, #3
 801210a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801210c:	68fb      	ldr	r3, [r7, #12]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	0801a48c 	.word	0x0801a48c
 801211c:	0801a4ec 	.word	0x0801a4ec
 8012120:	0801a608 	.word	0x0801a608
 8012124:	0801a540 	.word	0x0801a540

08012128 <net_if_set_dhcp_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean, true to activate DHCP
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_mode(net_if_handle_t *pnetif, bool mode)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012134:	f06f 0318 	mvn.w	r3, #24
 8012138:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7ff fe94 	bl	8011e68 <netif_check>
 8012140:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d005      	beq.n	8012154 <net_if_set_dhcp_mode+0x2c>
  {
    p_netif->dhcp_mode = mode;
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	78fa      	ldrb	r2, [r7, #3]
 801214c:	f883 2020 	strb.w	r2, [r3, #32]
    ret = NET_OK;
 8012150:	2300      	movs	r3, #0
 8012152:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012154:	68fb      	ldr	r3, [r7, #12]
}
 8012156:	4618      	mov	r0, r3
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <net_if_set_dhcp_server_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean, true to activate the DHCP server
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_server_mode(net_if_handle_t *pnetif, bool mode)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b084      	sub	sp, #16
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
 8012166:	460b      	mov	r3, r1
 8012168:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 801216a:	f06f 0318 	mvn.w	r3, #24
 801216e:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7ff fe79 	bl	8011e68 <netif_check>
 8012176:	60b8      	str	r0, [r7, #8]

  if (p_netif != NULL)
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d005      	beq.n	801218a <net_if_set_dhcp_server_mode+0x2c>
  {
    p_netif->dhcp_server = mode;
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	78fa      	ldrb	r2, [r7, #3]
 8012182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    ret = NET_OK;
 8012186:	2300      	movs	r3, #0
 8012188:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801218a:	68fb      	ldr	r3, [r7, #12]
}
 801218c:	4618      	mov	r0, r3
 801218e:	3710      	adds	r7, #16
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}

08012194 <net_if_set_ipaddr>:
  * @param  netmask is a pointer to the net_ip_addr_t structure used as the netmask
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_ipaddr(net_if_handle_t *pnetif, net_ip_addr_t ipaddr,
                          net_ip_addr_t gateway, net_ip_addr_t netmask)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b086      	sub	sp, #24
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
 80121a0:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 80121a2:	f06f 0318 	mvn.w	r3, #24
 80121a6:	617b      	str	r3, [r7, #20]
  net_if_handle_t *const p_netif = netif_check(pnetif);
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f7ff fe5d 	bl	8011e68 <netif_check>
 80121ae:	6138      	str	r0, [r7, #16]

  if (p_netif != NULL)
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00a      	beq.n	80121cc <net_if_set_ipaddr+0x38>
  {
    p_netif->static_ipaddr  = ipaddr;
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	68ba      	ldr	r2, [r7, #8]
 80121ba:	611a      	str	r2, [r3, #16]
    p_netif->static_gateway = gateway;
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	615a      	str	r2, [r3, #20]
    p_netif->static_netmask = netmask;
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	683a      	ldr	r2, [r7, #0]
 80121c6:	619a      	str	r2, [r3, #24]
    ret = NET_OK;
 80121c8:	2300      	movs	r3, #0
 80121ca:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80121cc:	697b      	ldr	r3, [r7, #20]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3718      	adds	r7, #24
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
	...

080121d8 <net_socket_get_and_lock>:

static net_socket_t Sockets[NET_MAX_SOCKETS_NBR] = {0};


static net_socket_t *net_socket_get_and_lock(int32_t sock)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  LOCK_SOCK(sock);
  return &Sockets[sock];
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	222c      	movs	r2, #44	@ 0x2c
 80121e4:	fb02 f303 	mul.w	r3, r2, r3
 80121e8:	4a03      	ldr	r2, [pc, #12]	@ (80121f8 <net_socket_get_and_lock+0x20>)
 80121ea:	4413      	add	r3, r2
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr
 80121f8:	20003290 	.word	0x20003290

080121fc <is_valid_socket>:
  * @brief  Verify if internal socket is already allocated
  * @param  sock  [in] the internal socket index
  * @retval socket status
  */
static bool is_valid_socket(int32_t sock)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b085      	sub	sp, #20
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8012204:	2300      	movs	r3, #0
 8012206:	73fb      	strb	r3, [r7, #15]
  if ((sock >= 0) && (sock < (int32_t) NET_MAX_SOCKETS_NBR))
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	db0e      	blt.n	801222c <is_valid_socket+0x30>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b04      	cmp	r3, #4
 8012212:	dc0b      	bgt.n	801222c <is_valid_socket+0x30>
  {
    if (Sockets[sock].status != SOCKET_NOT_ALIVE)
 8012214:	4a09      	ldr	r2, [pc, #36]	@ (801223c <is_valid_socket+0x40>)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	212c      	movs	r1, #44	@ 0x2c
 801221a:	fb01 f303 	mul.w	r3, r1, r3
 801221e:	4413      	add	r3, r2
 8012220:	3308      	adds	r3, #8
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d001      	beq.n	801222c <is_valid_socket+0x30>
    {
      ret = true;
 8012228:	2301      	movs	r3, #1
 801222a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801222c:	7bfb      	ldrb	r3, [r7, #15]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3714      	adds	r7, #20
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop
 801223c:	20003290 	.word	0x20003290

08012240 <create_low_level_socket>:
  * @brief  function description
  * @param  sock  [in] the internal socket index
  * @retval socket status
  */
static int32_t create_low_level_socket(int32_t sock)
{
 8012240:	b5b0      	push	{r4, r5, r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  net_socket_t *const p_socket = &Sockets[sock];
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	222c      	movs	r2, #44	@ 0x2c
 801224c:	fb02 f303 	mul.w	r3, r2, r3
 8012250:	4a38      	ldr	r2, [pc, #224]	@ (8012334 <create_low_level_socket+0xf4>)
 8012252:	4413      	add	r3, r2
 8012254:	60fb      	str	r3, [r7, #12]

  if (p_socket->ulsocket == -1)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225e:	d162      	bne.n	8012326 <create_low_level_socket+0xe6>
  {
    if (net_access_control(p_socket->pnetif, NET_ACCESS_SOCKET, &p_socket->ulsocket))
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	6818      	ldr	r0, [r3, #0]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	3304      	adds	r3, #4
 8012268:	461a      	mov	r2, r3
 801226a:	2100      	movs	r1, #0
 801226c:	f000 fd5a 	bl	8012d24 <net_access_control>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d057      	beq.n	8012326 <create_low_level_socket+0xe6>
    {
      if (0 == Sockets[sock].protocol)
 8012276:	4a2f      	ldr	r2, [pc, #188]	@ (8012334 <create_low_level_socket+0xf4>)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	212c      	movs	r1, #44	@ 0x2c
 801227c:	fb01 f303 	mul.w	r3, r1, r3
 8012280:	4413      	add	r3, r2
 8012282:	3314      	adds	r3, #20
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d125      	bne.n	80122d6 <create_low_level_socket+0x96>
      {
        if (Sockets[sock].type == NET_SOCK_STREAM)
 801228a:	4a2a      	ldr	r2, [pc, #168]	@ (8012334 <create_low_level_socket+0xf4>)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	212c      	movs	r1, #44	@ 0x2c
 8012290:	fb01 f303 	mul.w	r3, r1, r3
 8012294:	4413      	add	r3, r2
 8012296:	3310      	adds	r3, #16
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b01      	cmp	r3, #1
 801229c:	d108      	bne.n	80122b0 <create_low_level_socket+0x70>
        {
          Sockets[sock].protocol = NET_IPPROTO_TCP;
 801229e:	4a25      	ldr	r2, [pc, #148]	@ (8012334 <create_low_level_socket+0xf4>)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	212c      	movs	r1, #44	@ 0x2c
 80122a4:	fb01 f303 	mul.w	r3, r1, r3
 80122a8:	4413      	add	r3, r2
 80122aa:	3314      	adds	r3, #20
 80122ac:	2206      	movs	r2, #6
 80122ae:	601a      	str	r2, [r3, #0]
        }
        if (Sockets[sock].type == NET_SOCK_DGRAM)
 80122b0:	4a20      	ldr	r2, [pc, #128]	@ (8012334 <create_low_level_socket+0xf4>)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	212c      	movs	r1, #44	@ 0x2c
 80122b6:	fb01 f303 	mul.w	r3, r1, r3
 80122ba:	4413      	add	r3, r2
 80122bc:	3310      	adds	r3, #16
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d108      	bne.n	80122d6 <create_low_level_socket+0x96>
        {
          Sockets[sock].protocol = NET_IPPROTO_UDP;
 80122c4:	4a1b      	ldr	r2, [pc, #108]	@ (8012334 <create_low_level_socket+0xf4>)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	212c      	movs	r1, #44	@ 0x2c
 80122ca:	fb01 f303 	mul.w	r3, r1, r3
 80122ce:	4413      	add	r3, r2
 80122d0:	3314      	adds	r3, #20
 80122d2:	2211      	movs	r2, #17
 80122d4:	601a      	str	r2, [r3, #0]
        }
      }

      if (NULL != p_socket->pnetif->pdrv->psocket)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80122de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d020      	beq.n	8012326 <create_low_level_socket+0xe6>
      {
        p_socket->ulsocket = p_socket->pnetif->pdrv->psocket(Sockets[sock].domain,
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80122ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122ee:	4911      	ldr	r1, [pc, #68]	@ (8012334 <create_low_level_socket+0xf4>)
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	202c      	movs	r0, #44	@ 0x2c
 80122f4:	fb00 f202 	mul.w	r2, r0, r2
 80122f8:	440a      	add	r2, r1
 80122fa:	320c      	adds	r2, #12
 80122fc:	6810      	ldr	r0, [r2, #0]
 80122fe:	490d      	ldr	r1, [pc, #52]	@ (8012334 <create_low_level_socket+0xf4>)
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	242c      	movs	r4, #44	@ 0x2c
 8012304:	fb04 f202 	mul.w	r2, r4, r2
 8012308:	440a      	add	r2, r1
 801230a:	3210      	adds	r2, #16
 801230c:	6811      	ldr	r1, [r2, #0]
 801230e:	4c09      	ldr	r4, [pc, #36]	@ (8012334 <create_low_level_socket+0xf4>)
 8012310:	687a      	ldr	r2, [r7, #4]
 8012312:	252c      	movs	r5, #44	@ 0x2c
 8012314:	fb05 f202 	mul.w	r2, r5, r2
 8012318:	4422      	add	r2, r4
 801231a:	3214      	adds	r2, #20
 801231c:	6812      	ldr	r2, [r2, #0]
 801231e:	4798      	blx	r3
 8012320:	4602      	mov	r2, r0
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	605a      	str	r2, [r3, #4]
                                                             Sockets[sock].type,
                                                             Sockets[sock].protocol);
      }
    }
  }
  return p_socket->ulsocket;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	685b      	ldr	r3, [r3, #4]
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bdb0      	pop	{r4, r5, r7, pc}
 8012332:	bf00      	nop
 8012334:	20003290 	.word	0x20003290

08012338 <check_low_level_socket>:

static int32_t check_low_level_socket(int32_t sock)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  int32_t ret = -1;
 8012340:	f04f 33ff 	mov.w	r3, #4294967295
 8012344:	60fb      	str	r3, [r7, #12]

  if (is_valid_socket(sock))
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7ff ff58 	bl	80121fc <is_valid_socket>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d008      	beq.n	8012364 <check_low_level_socket+0x2c>
  {
    ret = Sockets[sock].ulsocket;
 8012352:	4a07      	ldr	r2, [pc, #28]	@ (8012370 <check_low_level_socket+0x38>)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	212c      	movs	r1, #44	@ 0x2c
 8012358:	fb01 f303 	mul.w	r3, r1, r3
 801235c:	4413      	add	r3, r2
 801235e:	3304      	adds	r3, #4
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012364:	68fb      	ldr	r3, [r7, #12]
}
 8012366:	4618      	mov	r0, r3
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	20003290 	.word	0x20003290

08012374 <find_free_socket>:
/**
  * @brief  function description
  * @retval the internal socket index
  */
static int32_t find_free_socket(void)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
  int32_t ret = NET_ERROR_INVALID_SOCKET;
 801237a:	f06f 0305 	mvn.w	r3, #5
 801237e:	607b      	str	r3, [r7, #4]

  LOCK_SOCK_ARRAY();

  for (int32_t sidx = 0; sidx < (int32_t)NET_MAX_SOCKETS_NBR; sidx++)
 8012380:	2300      	movs	r3, #0
 8012382:	603b      	str	r3, [r7, #0]
 8012384:	e06e      	b.n	8012464 <find_free_socket+0xf0>
  {
    if (Sockets[sidx].status == SOCKET_NOT_ALIVE)
 8012386:	4a3b      	ldr	r2, [pc, #236]	@ (8012474 <find_free_socket+0x100>)
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	212c      	movs	r1, #44	@ 0x2c
 801238c:	fb01 f303 	mul.w	r3, r1, r3
 8012390:	4413      	add	r3, r2
 8012392:	3308      	adds	r3, #8
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d161      	bne.n	801245e <find_free_socket+0xea>
    {
      Sockets[sidx].idx      = sidx;
 801239a:	4a36      	ldr	r2, [pc, #216]	@ (8012474 <find_free_socket+0x100>)
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	212c      	movs	r1, #44	@ 0x2c
 80123a0:	fb01 f303 	mul.w	r3, r1, r3
 80123a4:	4413      	add	r3, r2
 80123a6:	3328      	adds	r3, #40	@ 0x28
 80123a8:	683a      	ldr	r2, [r7, #0]
 80123aa:	601a      	str	r2, [r3, #0]
      Sockets[sidx].status   = SOCKET_ALLOCATED;
 80123ac:	4a31      	ldr	r2, [pc, #196]	@ (8012474 <find_free_socket+0x100>)
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	212c      	movs	r1, #44	@ 0x2c
 80123b2:	fb01 f303 	mul.w	r3, r1, r3
 80123b6:	4413      	add	r3, r2
 80123b8:	3308      	adds	r3, #8
 80123ba:	2201      	movs	r2, #1
 80123bc:	701a      	strb	r2, [r3, #0]
      Sockets[sidx].domain   = 0;
 80123be:	4a2d      	ldr	r2, [pc, #180]	@ (8012474 <find_free_socket+0x100>)
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	212c      	movs	r1, #44	@ 0x2c
 80123c4:	fb01 f303 	mul.w	r3, r1, r3
 80123c8:	4413      	add	r3, r2
 80123ca:	330c      	adds	r3, #12
 80123cc:	2200      	movs	r2, #0
 80123ce:	601a      	str	r2, [r3, #0]
      Sockets[sidx].type     = 0;
 80123d0:	4a28      	ldr	r2, [pc, #160]	@ (8012474 <find_free_socket+0x100>)
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	212c      	movs	r1, #44	@ 0x2c
 80123d6:	fb01 f303 	mul.w	r3, r1, r3
 80123da:	4413      	add	r3, r2
 80123dc:	3310      	adds	r3, #16
 80123de:	2200      	movs	r2, #0
 80123e0:	601a      	str	r2, [r3, #0]
      Sockets[sidx].protocol = 0;
 80123e2:	4a24      	ldr	r2, [pc, #144]	@ (8012474 <find_free_socket+0x100>)
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	212c      	movs	r1, #44	@ 0x2c
 80123e8:	fb01 f303 	mul.w	r3, r1, r3
 80123ec:	4413      	add	r3, r2
 80123ee:	3314      	adds	r3, #20
 80123f0:	2200      	movs	r2, #0
 80123f2:	601a      	str	r2, [r3, #0]
#ifdef NET_MBEDTLS_HOST_SUPPORT
      Sockets[sidx].is_secure = false;
      Sockets[sidx].tlsData   = NULL;
#endif /* NET_MBEDTLS_HOST_SUPPORT */
      Sockets[sidx].read_timeout  = NET_SOCK_DEFAULT_RECEIVE_TO;
 80123f4:	4a1f      	ldr	r2, [pc, #124]	@ (8012474 <find_free_socket+0x100>)
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	212c      	movs	r1, #44	@ 0x2c
 80123fa:	fb01 f303 	mul.w	r3, r1, r3
 80123fe:	4413      	add	r3, r2
 8012400:	331c      	adds	r3, #28
 8012402:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8012406:	601a      	str	r2, [r3, #0]
      Sockets[sidx].write_timeout = NET_SOCK_DEFAULT_SEND_TO;
 8012408:	4a1a      	ldr	r2, [pc, #104]	@ (8012474 <find_free_socket+0x100>)
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	212c      	movs	r1, #44	@ 0x2c
 801240e:	fb01 f303 	mul.w	r3, r1, r3
 8012412:	4413      	add	r3, r2
 8012414:	3320      	adds	r3, #32
 8012416:	f64e 2260 	movw	r2, #60000	@ 0xea60
 801241a:	601a      	str	r2, [r3, #0]
      Sockets[sidx].blocking = true;
 801241c:	4a15      	ldr	r2, [pc, #84]	@ (8012474 <find_free_socket+0x100>)
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	212c      	movs	r1, #44	@ 0x2c
 8012422:	fb01 f303 	mul.w	r3, r1, r3
 8012426:	4413      	add	r3, r2
 8012428:	3324      	adds	r3, #36	@ 0x24
 801242a:	2201      	movs	r2, #1
 801242c:	701a      	strb	r2, [r3, #0]
      Sockets[sidx].ulsocket = -1;
 801242e:	4a11      	ldr	r2, [pc, #68]	@ (8012474 <find_free_socket+0x100>)
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	212c      	movs	r1, #44	@ 0x2c
 8012434:	fb01 f303 	mul.w	r3, r1, r3
 8012438:	4413      	add	r3, r2
 801243a:	3304      	adds	r3, #4
 801243c:	f04f 32ff 	mov.w	r2, #4294967295
 8012440:	601a      	str	r2, [r3, #0]
      Sockets[sidx].pnetif   = net_if_find(NULL);
 8012442:	2000      	movs	r0, #0
 8012444:	f7ff fcd8 	bl	8011df8 <net_if_find>
 8012448:	4602      	mov	r2, r0
 801244a:	490a      	ldr	r1, [pc, #40]	@ (8012474 <find_free_socket+0x100>)
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	202c      	movs	r0, #44	@ 0x2c
 8012450:	fb00 f303 	mul.w	r3, r0, r3
 8012454:	440b      	add	r3, r1
 8012456:	601a      	str	r2, [r3, #0]

      LOCK_SOCK(sidx);
      ret = sidx;
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	607b      	str	r3, [r7, #4]
      break;
 801245c:	e005      	b.n	801246a <find_free_socket+0xf6>
  for (int32_t sidx = 0; sidx < (int32_t)NET_MAX_SOCKETS_NBR; sidx++)
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	3301      	adds	r3, #1
 8012462:	603b      	str	r3, [r7, #0]
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	2b04      	cmp	r3, #4
 8012468:	dd8d      	ble.n	8012386 <find_free_socket+0x12>
    }
  }
  UNLOCK_SOCK_ARRAY();
  return ret;
 801246a:	687b      	ldr	r3, [r7, #4]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	20003290 	.word	0x20003290

08012478 <clone_socket>:

static int32_t clone_socket(int32_t sock)
{
 8012478:	b5b0      	push	{r4, r5, r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  const int32_t newsock = find_free_socket();
 8012480:	f7ff ff78 	bl	8012374 <find_free_socket>
 8012484:	60f8      	str	r0, [r7, #12]

  if (newsock >= 0)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	db15      	blt.n	80124b8 <clone_socket+0x40>
  {
    Sockets[newsock] = Sockets[sock];
 801248c:	4a0d      	ldr	r2, [pc, #52]	@ (80124c4 <clone_socket+0x4c>)
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	212c      	movs	r1, #44	@ 0x2c
 8012492:	fb01 f303 	mul.w	r3, r1, r3
 8012496:	18d0      	adds	r0, r2, r3
 8012498:	4a0a      	ldr	r2, [pc, #40]	@ (80124c4 <clone_socket+0x4c>)
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	212c      	movs	r1, #44	@ 0x2c
 801249e:	fb01 f303 	mul.w	r3, r1, r3
 80124a2:	4413      	add	r3, r2
 80124a4:	4604      	mov	r4, r0
 80124a6:	461d      	mov	r5, r3
 80124a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80124b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }
  return newsock;
 80124b8:	68fb      	ldr	r3, [r7, #12]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bdb0      	pop	{r4, r5, r7, pc}
 80124c2:	bf00      	nop
 80124c4:	20003290 	.word	0x20003290

080124c8 <net_socket>:
  * @param  type [in] integer should be NET_SOCK_STREAM,NET_SOCK_DGRAM or NET_SOCK_RAW
  * @param  protocol [in] integer should be NET_IPPROTO_TCP,NET_IPPROTO_ICMP,NET_IPPROTO_UDP or NET_IPPROTO_TCP_TLS
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_socket(int32_t domain, int32_t type, int32_t protocol)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b086      	sub	sp, #24
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  const int32_t newsock = find_free_socket();
 80124d4:	f7ff ff4e 	bl	8012374 <find_free_socket>
 80124d8:	6178      	str	r0, [r7, #20]

  if (newsock >= 0)
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	db1b      	blt.n	8012518 <net_socket+0x50>
  {
    Sockets[newsock].domain   = domain;
 80124e0:	4a15      	ldr	r2, [pc, #84]	@ (8012538 <net_socket+0x70>)
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	212c      	movs	r1, #44	@ 0x2c
 80124e6:	fb01 f303 	mul.w	r3, r1, r3
 80124ea:	4413      	add	r3, r2
 80124ec:	330c      	adds	r3, #12
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	601a      	str	r2, [r3, #0]
    Sockets[newsock].type     = type;
 80124f2:	4a11      	ldr	r2, [pc, #68]	@ (8012538 <net_socket+0x70>)
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	212c      	movs	r1, #44	@ 0x2c
 80124f8:	fb01 f303 	mul.w	r3, r1, r3
 80124fc:	4413      	add	r3, r2
 80124fe:	3310      	adds	r3, #16
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	601a      	str	r2, [r3, #0]
    Sockets[newsock].protocol = protocol;
 8012504:	4a0c      	ldr	r2, [pc, #48]	@ (8012538 <net_socket+0x70>)
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	212c      	movs	r1, #44	@ 0x2c
 801250a:	fb01 f303 	mul.w	r3, r1, r3
 801250e:	4413      	add	r3, r2
 8012510:	3314      	adds	r3, #20
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	601a      	str	r2, [r3, #0]
 8012516:	e00a      	b.n	801252e <net_socket+0x66>
    UNLOCK_SOCK(newsock);
  }
  else
  {
    NET_DBG_ERROR("Socket allocation failed.\n");
 8012518:	22c0      	movs	r2, #192	@ 0xc0
 801251a:	4908      	ldr	r1, [pc, #32]	@ (801253c <net_socket+0x74>)
 801251c:	4808      	ldr	r0, [pc, #32]	@ (8012540 <net_socket+0x78>)
 801251e:	f002 fd75 	bl	801500c <iprintf>
 8012522:	4808      	ldr	r0, [pc, #32]	@ (8012544 <net_socket+0x7c>)
 8012524:	f002 fde2 	bl	80150ec <puts>
 8012528:	200a      	movs	r0, #10
 801252a:	f002 fd81 	bl	8015030 <putchar>
  }
  return newsock;
 801252e:	697b      	ldr	r3, [r7, #20]
}
 8012530:	4618      	mov	r0, r3
 8012532:	3718      	adds	r7, #24
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	20003290 	.word	0x20003290
 801253c:	0801a63c 	.word	0x0801a63c
 8012540:	0801a69c 	.word	0x0801a69c
 8012544:	0801a6ac 	.word	0x0801a6ac

08012548 <net_bind>:
  * @param  addr [in] pointer to net_sockaddr_t structure
  * @param  addrlen [in] unsigned integer length of the net_sockaddr_t
  * @retval zero in case of success, error code otherwise
  */
int32_t net_bind(int32_t sock, net_sockaddr_t *addr, uint32_t addrlen)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b086      	sub	sp, #24
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012554:	f06f 0318 	mvn.w	r3, #24
 8012558:	613b      	str	r3, [r7, #16]

  if (!is_valid_socket(sock))
 801255a:	68f8      	ldr	r0, [r7, #12]
 801255c:	f7ff fe4e 	bl	80121fc <is_valid_socket>
 8012560:	4603      	mov	r3, r0
 8012562:	f083 0301 	eor.w	r3, r3, #1
 8012566:	b2db      	uxtb	r3, r3
 8012568:	2b00      	cmp	r3, #0
 801256a:	d00e      	beq.n	801258a <net_bind+0x42>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801256c:	22d2      	movs	r2, #210	@ 0xd2
 801256e:	492d      	ldr	r1, [pc, #180]	@ (8012624 <net_bind+0xdc>)
 8012570:	482d      	ldr	r0, [pc, #180]	@ (8012628 <net_bind+0xe0>)
 8012572:	f002 fd4b 	bl	801500c <iprintf>
 8012576:	482d      	ldr	r0, [pc, #180]	@ (801262c <net_bind+0xe4>)
 8012578:	f002 fdb8 	bl	80150ec <puts>
 801257c:	200a      	movs	r0, #10
 801257e:	f002 fd57 	bl	8015030 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012582:	f06f 0305 	mvn.w	r3, #5
 8012586:	613b      	str	r3, [r7, #16]
 8012588:	e047      	b.n	801261a <net_bind+0xd2>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 801258a:	68f8      	ldr	r0, [r7, #12]
 801258c:	f7ff fe24 	bl	80121d8 <net_socket_get_and_lock>
 8012590:	6178      	str	r0, [r7, #20]

#if (NET_USE_DEFAULT_INTERFACE == 1)
    if (p_socket->pnetif == NULL)
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d105      	bne.n	80125a6 <net_bind+0x5e>
    {
      p_socket->pnetif = net_if_find(NULL);
 801259a:	2000      	movs	r0, #0
 801259c:	f7ff fc2c 	bl	8011df8 <net_if_find>
 80125a0:	4602      	mov	r2, r0
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	601a      	str	r2, [r3, #0]
    }
#endif /* NET_USE_DEFAULT_INTERFACE */

    if (create_low_level_socket(sock) < 0)
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f7ff fe4a 	bl	8012240 <create_low_level_socket>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	da0e      	bge.n	80125d0 <net_bind+0x88>
    {
      ret = NET_ERROR_SOCKET_FAILURE;
 80125b2:	f06f 0312 	mvn.w	r3, #18
 80125b6:	613b      	str	r3, [r7, #16]
      NET_DBG_ERROR("low level socket creation failed.\n");
 80125b8:	22e3      	movs	r2, #227	@ 0xe3
 80125ba:	491a      	ldr	r1, [pc, #104]	@ (8012624 <net_bind+0xdc>)
 80125bc:	481a      	ldr	r0, [pc, #104]	@ (8012628 <net_bind+0xe0>)
 80125be:	f002 fd25 	bl	801500c <iprintf>
 80125c2:	481b      	ldr	r0, [pc, #108]	@ (8012630 <net_bind+0xe8>)
 80125c4:	f002 fd92 	bl	80150ec <puts>
 80125c8:	200a      	movs	r0, #10
 80125ca:	f002 fd31 	bl	8015030 <putchar>
 80125ce:	e024      	b.n	801261a <net_bind+0xd2>
    }
    else
    {
      if (net_access_control(p_socket->pnetif, NET_ACCESS_BIND, &ret))
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f107 0210 	add.w	r2, r7, #16
 80125d8:	2101      	movs	r1, #1
 80125da:	4618      	mov	r0, r3
 80125dc:	f000 fba2 	bl	8012d24 <net_access_control>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d019      	beq.n	801261a <net_bind+0xd2>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->pbind(p_socket->ulsocket, addr, addrlen);
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80125ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125f0:	697a      	ldr	r2, [r7, #20]
 80125f2:	6850      	ldr	r0, [r2, #4]
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	4798      	blx	r3
 80125fa:	4603      	mov	r3, r0
 80125fc:	613b      	str	r3, [r7, #16]
        LOCK_SOCK(sock);
        if (ret != NET_OK)
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00a      	beq.n	801261a <net_bind+0xd2>
        {
          NET_DBG_ERROR("Socket cannot be bound.\n");
 8012604:	22ee      	movs	r2, #238	@ 0xee
 8012606:	4907      	ldr	r1, [pc, #28]	@ (8012624 <net_bind+0xdc>)
 8012608:	4807      	ldr	r0, [pc, #28]	@ (8012628 <net_bind+0xe0>)
 801260a:	f002 fcff 	bl	801500c <iprintf>
 801260e:	4809      	ldr	r0, [pc, #36]	@ (8012634 <net_bind+0xec>)
 8012610:	f002 fd6c 	bl	80150ec <puts>
 8012614:	200a      	movs	r0, #10
 8012616:	f002 fd0b 	bl	8015030 <putchar>
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 801261a:	693b      	ldr	r3, [r7, #16]
}
 801261c:	4618      	mov	r0, r3
 801261e:	3718      	adds	r7, #24
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	0801a63c 	.word	0x0801a63c
 8012628:	0801a69c 	.word	0x0801a69c
 801262c:	0801a6c8 	.word	0x0801a6c8
 8012630:	0801a6d8 	.word	0x0801a6d8
 8012634:	0801a6fc 	.word	0x0801a6fc

08012638 <net_accept>:
  * @param  addr [out] pointer to net_sockaddr_t structure of remote connection
  * @param  addrlen [out] pointer to unsigned integer, length of the remote net_sockaddr_t
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b088      	sub	sp, #32
 801263c:	af00      	add	r7, sp, #0
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	607a      	str	r2, [r7, #4]
  int32_t newsock;

  if (!is_valid_socket(sock))
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f7ff fdd9 	bl	80121fc <is_valid_socket>
 801264a:	4603      	mov	r3, r0
 801264c:	f083 0301 	eor.w	r3, r3, #1
 8012650:	b2db      	uxtb	r3, r3
 8012652:	2b00      	cmp	r3, #0
 8012654:	d00f      	beq.n	8012676 <net_accept+0x3e>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8012656:	f240 1205 	movw	r2, #261	@ 0x105
 801265a:	493d      	ldr	r1, [pc, #244]	@ (8012750 <net_accept+0x118>)
 801265c:	483d      	ldr	r0, [pc, #244]	@ (8012754 <net_accept+0x11c>)
 801265e:	f002 fcd5 	bl	801500c <iprintf>
 8012662:	483d      	ldr	r0, [pc, #244]	@ (8012758 <net_accept+0x120>)
 8012664:	f002 fd42 	bl	80150ec <puts>
 8012668:	200a      	movs	r0, #10
 801266a:	f002 fce1 	bl	8015030 <putchar>
    newsock = NET_ERROR_INVALID_SOCKET;
 801266e:	f06f 0305 	mvn.w	r3, #5
 8012672:	61fb      	str	r3, [r7, #28]
 8012674:	e067      	b.n	8012746 <net_accept+0x10e>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7ff fe5e 	bl	8012338 <check_low_level_socket>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	da0f      	bge.n	80126a2 <net_accept+0x6a>
    {
      NET_DBG_ERROR("low level Socket has not been created.\n");
 8012682:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8012686:	4932      	ldr	r1, [pc, #200]	@ (8012750 <net_accept+0x118>)
 8012688:	4832      	ldr	r0, [pc, #200]	@ (8012754 <net_accept+0x11c>)
 801268a:	f002 fcbf 	bl	801500c <iprintf>
 801268e:	4833      	ldr	r0, [pc, #204]	@ (801275c <net_accept+0x124>)
 8012690:	f002 fd2c 	bl	80150ec <puts>
 8012694:	200a      	movs	r0, #10
 8012696:	f002 fccb 	bl	8015030 <putchar>
      newsock = NET_ERROR_SOCKET_FAILURE;
 801269a:	f06f 0312 	mvn.w	r3, #18
 801269e:	61fb      	str	r3, [r7, #28]
 80126a0:	e051      	b.n	8012746 <net_accept+0x10e>
    }
    else
    {
      net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7ff fd98 	bl	80121d8 <net_socket_get_and_lock>
 80126a8:	61b8      	str	r0, [r7, #24]
      int32_t ulnewsock = -1;
 80126aa:	f04f 33ff 	mov.w	r3, #4294967295
 80126ae:	617b      	str	r3, [r7, #20]

      if (net_access_control(p_socket->pnetif, NET_ACCESS_BIND, &ulnewsock))
 80126b0:	69bb      	ldr	r3, [r7, #24]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f107 0214 	add.w	r2, r7, #20
 80126b8:	2101      	movs	r1, #1
 80126ba:	4618      	mov	r0, r3
 80126bc:	f000 fb32 	bl	8012d24 <net_access_control>
 80126c0:	4603      	mov	r3, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d00b      	beq.n	80126de <net_accept+0xa6>
      {
        UNLOCK_SOCK(sock);
        ulnewsock = p_socket->pnetif->pdrv->paccept(p_socket->ulsocket, addr, addrlen);
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80126ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126d0:	69ba      	ldr	r2, [r7, #24]
 80126d2:	6850      	ldr	r0, [r2, #4]
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	68b9      	ldr	r1, [r7, #8]
 80126d8:	4798      	blx	r3
 80126da:	4603      	mov	r3, r0
 80126dc:	617b      	str	r3, [r7, #20]
        LOCK_SOCK(sock);

      }
      if (ulnewsock < 0)
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	da0e      	bge.n	8012702 <net_accept+0xca>
      {
        NET_DBG_ERROR("No connection has been established.\n");
 80126e4:	f240 121d 	movw	r2, #285	@ 0x11d
 80126e8:	4919      	ldr	r1, [pc, #100]	@ (8012750 <net_accept+0x118>)
 80126ea:	481a      	ldr	r0, [pc, #104]	@ (8012754 <net_accept+0x11c>)
 80126ec:	f002 fc8e 	bl	801500c <iprintf>
 80126f0:	481b      	ldr	r0, [pc, #108]	@ (8012760 <net_accept+0x128>)
 80126f2:	f002 fcfb 	bl	80150ec <puts>
 80126f6:	200a      	movs	r0, #10
 80126f8:	f002 fc9a 	bl	8015030 <putchar>
        newsock = ulnewsock;
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	61fb      	str	r3, [r7, #28]
 8012700:	e021      	b.n	8012746 <net_accept+0x10e>
      }
      else
      {
        Sockets[sock].status = SOCKET_CONNECTED;
 8012702:	4a18      	ldr	r2, [pc, #96]	@ (8012764 <net_accept+0x12c>)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	212c      	movs	r1, #44	@ 0x2c
 8012708:	fb01 f303 	mul.w	r3, r1, r3
 801270c:	4413      	add	r3, r2
 801270e:	3308      	adds	r3, #8
 8012710:	2202      	movs	r2, #2
 8012712:	701a      	strb	r2, [r3, #0]
        newsock = clone_socket(sock);
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f7ff feaf 	bl	8012478 <clone_socket>
 801271a:	61f8      	str	r0, [r7, #28]
        if (newsock >= 0)
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	2b00      	cmp	r3, #0
 8012720:	db11      	blt.n	8012746 <net_accept+0x10e>
        {
          Sockets[newsock].ulsocket = ulnewsock;
 8012722:	697a      	ldr	r2, [r7, #20]
 8012724:	490f      	ldr	r1, [pc, #60]	@ (8012764 <net_accept+0x12c>)
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	202c      	movs	r0, #44	@ 0x2c
 801272a:	fb00 f303 	mul.w	r3, r0, r3
 801272e:	440b      	add	r3, r1
 8012730:	3304      	adds	r3, #4
 8012732:	601a      	str	r2, [r3, #0]
          Sockets[newsock].cloneserver = true;
 8012734:	4a0b      	ldr	r2, [pc, #44]	@ (8012764 <net_accept+0x12c>)
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	212c      	movs	r1, #44	@ 0x2c
 801273a:	fb01 f303 	mul.w	r3, r1, r3
 801273e:	4413      	add	r3, r2
 8012740:	3318      	adds	r3, #24
 8012742:	2201      	movs	r2, #1
 8012744:	701a      	strb	r2, [r3, #0]
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return newsock;
 8012746:	69fb      	ldr	r3, [r7, #28]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3720      	adds	r7, #32
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	0801a63c 	.word	0x0801a63c
 8012754:	0801a69c 	.word	0x0801a69c
 8012758:	0801a6c8 	.word	0x0801a6c8
 801275c:	0801a714 	.word	0x0801a714
 8012760:	0801a73c 	.word	0x0801a73c
 8012764:	20003290 	.word	0x20003290

08012768 <net_listen>:
  * @param  sock [in] integer socket number
  * @param  backlog [in] integer maximum number of queued connection
  * @retval zero in case of success, none zero value in case of error
  */
int32_t net_listen(int32_t sock, int32_t backlog)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	6039      	str	r1, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012772:	f06f 0318 	mvn.w	r3, #24
 8012776:	60bb      	str	r3, [r7, #8]

  if (!is_valid_socket(sock))
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff fd3f 	bl	80121fc <is_valid_socket>
 801277e:	4603      	mov	r3, r0
 8012780:	f083 0301 	eor.w	r3, r3, #1
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	d00f      	beq.n	80127aa <net_listen+0x42>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801278a:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 801278e:	4929      	ldr	r1, [pc, #164]	@ (8012834 <net_listen+0xcc>)
 8012790:	4829      	ldr	r0, [pc, #164]	@ (8012838 <net_listen+0xd0>)
 8012792:	f002 fc3b 	bl	801500c <iprintf>
 8012796:	4829      	ldr	r0, [pc, #164]	@ (801283c <net_listen+0xd4>)
 8012798:	f002 fca8 	bl	80150ec <puts>
 801279c:	200a      	movs	r0, #10
 801279e:	f002 fc47 	bl	8015030 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 80127a2:	f06f 0305 	mvn.w	r3, #5
 80127a6:	60bb      	str	r3, [r7, #8]
 80127a8:	e03f      	b.n	801282a <net_listen+0xc2>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7ff fdc4 	bl	8012338 <check_low_level_socket>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	da0f      	bge.n	80127d6 <net_listen+0x6e>
    {
      NET_DBG_ERROR("low level socket has not been created.\n");
 80127b6:	f240 1245 	movw	r2, #325	@ 0x145
 80127ba:	491e      	ldr	r1, [pc, #120]	@ (8012834 <net_listen+0xcc>)
 80127bc:	481e      	ldr	r0, [pc, #120]	@ (8012838 <net_listen+0xd0>)
 80127be:	f002 fc25 	bl	801500c <iprintf>
 80127c2:	481f      	ldr	r0, [pc, #124]	@ (8012840 <net_listen+0xd8>)
 80127c4:	f002 fc92 	bl	80150ec <puts>
 80127c8:	200a      	movs	r0, #10
 80127ca:	f002 fc31 	bl	8015030 <putchar>
      ret = NET_ERROR_SOCKET_FAILURE;
 80127ce:	f06f 0312 	mvn.w	r3, #18
 80127d2:	60bb      	str	r3, [r7, #8]
 80127d4:	e029      	b.n	801282a <net_listen+0xc2>
    }
    else
    {
      net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7ff fcfe 	bl	80121d8 <net_socket_get_and_lock>
 80127dc:	60f8      	str	r0, [r7, #12]
      if (net_access_control(p_socket->pnetif, NET_ACCESS_LISTEN, &ret))
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f107 0208 	add.w	r2, r7, #8
 80127e6:	2102      	movs	r1, #2
 80127e8:	4618      	mov	r0, r3
 80127ea:	f000 fa9b 	bl	8012d24 <net_access_control>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d01a      	beq.n	801282a <net_listen+0xc2>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->plisten(p_socket->ulsocket, backlog);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80127fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127fe:	68fa      	ldr	r2, [r7, #12]
 8012800:	6852      	ldr	r2, [r2, #4]
 8012802:	6839      	ldr	r1, [r7, #0]
 8012804:	4610      	mov	r0, r2
 8012806:	4798      	blx	r3
 8012808:	4603      	mov	r3, r0
 801280a:	60bb      	str	r3, [r7, #8]
        LOCK_SOCK(sock);

        if (ret != NET_OK)
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d00b      	beq.n	801282a <net_listen+0xc2>
        {
          NET_DBG_ERROR("Listen state cannot be set.\n");
 8012812:	f240 1253 	movw	r2, #339	@ 0x153
 8012816:	4907      	ldr	r1, [pc, #28]	@ (8012834 <net_listen+0xcc>)
 8012818:	4807      	ldr	r0, [pc, #28]	@ (8012838 <net_listen+0xd0>)
 801281a:	f002 fbf7 	bl	801500c <iprintf>
 801281e:	4809      	ldr	r0, [pc, #36]	@ (8012844 <net_listen+0xdc>)
 8012820:	f002 fc64 	bl	80150ec <puts>
 8012824:	200a      	movs	r0, #10
 8012826:	f002 fc03 	bl	8015030 <putchar>
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return ret;
 801282a:	68bb      	ldr	r3, [r7, #8]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3710      	adds	r7, #16
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}
 8012834:	0801a63c 	.word	0x0801a63c
 8012838:	0801a69c 	.word	0x0801a69c
 801283c:	0801a6c8 	.word	0x0801a6c8
 8012840:	0801a760 	.word	0x0801a760
 8012844:	0801a788 	.word	0x0801a788

08012848 <net_send>:
  * @param  buf [in] pointer to an array of unsigned byte
  * @param  len [in] number of byte to send
  * @retval number of byte transmitted, negative value in case of error or timeout
  */
int32_t net_send(int32_t sock, const uint8_t *buf, uint32_t len, int32_t flags)
{
 8012848:	b590      	push	{r4, r7, lr}
 801284a:	b087      	sub	sp, #28
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
 8012854:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012856:	f06f 0318 	mvn.w	r3, #24
 801285a:	613b      	str	r3, [r7, #16]

  if (!is_valid_socket(sock))
 801285c:	68f8      	ldr	r0, [r7, #12]
 801285e:	f7ff fccd 	bl	80121fc <is_valid_socket>
 8012862:	4603      	mov	r3, r0
 8012864:	f083 0301 	eor.w	r3, r3, #1
 8012868:	b2db      	uxtb	r3, r3
 801286a:	2b00      	cmp	r3, #0
 801286c:	d00f      	beq.n	801288e <net_send+0x46>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801286e:	f44f 72e9 	mov.w	r2, #466	@ 0x1d2
 8012872:	492f      	ldr	r1, [pc, #188]	@ (8012930 <net_send+0xe8>)
 8012874:	482f      	ldr	r0, [pc, #188]	@ (8012934 <net_send+0xec>)
 8012876:	f002 fbc9 	bl	801500c <iprintf>
 801287a:	482f      	ldr	r0, [pc, #188]	@ (8012938 <net_send+0xf0>)
 801287c:	f002 fc36 	bl	80150ec <puts>
 8012880:	200a      	movs	r0, #10
 8012882:	f002 fbd5 	bl	8015030 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012886:	f06f 0305 	mvn.w	r3, #5
 801288a:	613b      	str	r3, [r7, #16]
 801288c:	e04b      	b.n	8012926 <net_send+0xde>
  }
  else
  {
    if (buf == NULL)
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d103      	bne.n	801289c <net_send+0x54>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 8012894:	f06f 0305 	mvn.w	r3, #5
 8012898:	613b      	str	r3, [r7, #16]
 801289a:	e044      	b.n	8012926 <net_send+0xde>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f7ff fd4b 	bl	8012338 <check_low_level_socket>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	da0f      	bge.n	80128c8 <net_send+0x80>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
 80128a8:	f240 12df 	movw	r2, #479	@ 0x1df
 80128ac:	4920      	ldr	r1, [pc, #128]	@ (8012930 <net_send+0xe8>)
 80128ae:	4821      	ldr	r0, [pc, #132]	@ (8012934 <net_send+0xec>)
 80128b0:	f002 fbac 	bl	801500c <iprintf>
 80128b4:	4821      	ldr	r0, [pc, #132]	@ (801293c <net_send+0xf4>)
 80128b6:	f002 fc19 	bl	80150ec <puts>
 80128ba:	200a      	movs	r0, #10
 80128bc:	f002 fbb8 	bl	8015030 <putchar>
        ret = NET_ERROR_SOCKET_FAILURE;
 80128c0:	f06f 0312 	mvn.w	r3, #18
 80128c4:	613b      	str	r3, [r7, #16]
 80128c6:	e02e      	b.n	8012926 <net_send+0xde>
      }
      else
      {
        net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	f7ff fc85 	bl	80121d8 <net_socket_get_and_lock>
 80128ce:	6178      	str	r0, [r7, #20]
          ret = (int32_t) net_mbedtls_sock_send(p_socket, buf, len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_SEND, &ret))
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f107 0210 	add.w	r2, r7, #16
 80128d8:	2104      	movs	r1, #4
 80128da:	4618      	mov	r0, r3
 80128dc:	f000 fa22 	bl	8012d24 <net_access_control>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d01f      	beq.n	8012926 <net_send+0xde>
          {
            UNLOCK_SOCK(sock);
            ret = p_socket->pnetif->pdrv->psend(p_socket->ulsocket, buf, (int32_t)len, flags);
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80128ee:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	6858      	ldr	r0, [r3, #4]
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	47a0      	blx	r4
 80128fc:	4603      	mov	r3, r0
 80128fe:	613b      	str	r3, [r7, #16]
            LOCK_SOCK(sock);

            if ((ret < 0) && (ret != NET_ERROR_DISCONNECTED))
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	2b00      	cmp	r3, #0
 8012904:	da0f      	bge.n	8012926 <net_send+0xde>
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	f113 0f16 	cmn.w	r3, #22
 801290c:	d00b      	beq.n	8012926 <net_send+0xde>
            {
              NET_DBG_ERROR("Error during sending data.\n");
 801290e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8012912:	4907      	ldr	r1, [pc, #28]	@ (8012930 <net_send+0xe8>)
 8012914:	4807      	ldr	r0, [pc, #28]	@ (8012934 <net_send+0xec>)
 8012916:	f002 fb79 	bl	801500c <iprintf>
 801291a:	4809      	ldr	r0, [pc, #36]	@ (8012940 <net_send+0xf8>)
 801291c:	f002 fbe6 	bl	80150ec <puts>
 8012920:	200a      	movs	r0, #10
 8012922:	f002 fb85 	bl	8015030 <putchar>
        }
        UNLOCK_SOCK(sock);
      }
    }
  }
  return ret;
 8012926:	693b      	ldr	r3, [r7, #16]
}
 8012928:	4618      	mov	r0, r3
 801292a:	371c      	adds	r7, #28
 801292c:	46bd      	mov	sp, r7
 801292e:	bd90      	pop	{r4, r7, pc}
 8012930:	0801a63c 	.word	0x0801a63c
 8012934:	0801a69c 	.word	0x0801a69c
 8012938:	0801a6c8 	.word	0x0801a6c8
 801293c:	0801a760 	.word	0x0801a760
 8012940:	0801a818 	.word	0x0801a818

08012944 <net_recv>:
  * @param  len [in] number of byte to read
  * @param  flags [in] specify blocking or non blocking, 0 is blocking mode, NET_MSG_DONTWAIT is non blocking
  * @retval number of byte received, negative value in case of error or timeout
  */
int32_t net_recv(int32_t sock, uint8_t *buf, uint32_t len, int32_t flags_in)
{
 8012944:	b590      	push	{r4, r7, lr}
 8012946:	b089      	sub	sp, #36	@ 0x24
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	607a      	str	r2, [r7, #4]
 8012950:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012952:	f06f 0318 	mvn.w	r3, #24
 8012956:	617b      	str	r3, [r7, #20]
  int32_t flags = flags_in;
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	61fb      	str	r3, [r7, #28]


  if (!is_valid_socket(sock))
 801295c:	68f8      	ldr	r0, [r7, #12]
 801295e:	f7ff fc4d 	bl	80121fc <is_valid_socket>
 8012962:	4603      	mov	r3, r0
 8012964:	f083 0301 	eor.w	r3, r3, #1
 8012968:	b2db      	uxtb	r3, r3
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00f      	beq.n	801298e <net_recv+0x4a>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 801296e:	f240 2212 	movw	r2, #530	@ 0x212
 8012972:	4935      	ldr	r1, [pc, #212]	@ (8012a48 <net_recv+0x104>)
 8012974:	4835      	ldr	r0, [pc, #212]	@ (8012a4c <net_recv+0x108>)
 8012976:	f002 fb49 	bl	801500c <iprintf>
 801297a:	4835      	ldr	r0, [pc, #212]	@ (8012a50 <net_recv+0x10c>)
 801297c:	f002 fbb6 	bl	80150ec <puts>
 8012980:	200a      	movs	r0, #10
 8012982:	f002 fb55 	bl	8015030 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012986:	f06f 0305 	mvn.w	r3, #5
 801298a:	617b      	str	r3, [r7, #20]
 801298c:	e057      	b.n	8012a3e <net_recv+0xfa>
  }
  else
  {
    if (buf == NULL)
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d103      	bne.n	801299c <net_recv+0x58>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 8012994:	f06f 0305 	mvn.w	r3, #5
 8012998:	617b      	str	r3, [r7, #20]
 801299a:	e050      	b.n	8012a3e <net_recv+0xfa>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f7ff fccb 	bl	8012338 <check_low_level_socket>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	da0f      	bge.n	80129c8 <net_recv+0x84>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
 80129a8:	f240 221f 	movw	r2, #543	@ 0x21f
 80129ac:	4926      	ldr	r1, [pc, #152]	@ (8012a48 <net_recv+0x104>)
 80129ae:	4827      	ldr	r0, [pc, #156]	@ (8012a4c <net_recv+0x108>)
 80129b0:	f002 fb2c 	bl	801500c <iprintf>
 80129b4:	4827      	ldr	r0, [pc, #156]	@ (8012a54 <net_recv+0x110>)
 80129b6:	f002 fb99 	bl	80150ec <puts>
 80129ba:	200a      	movs	r0, #10
 80129bc:	f002 fb38 	bl	8015030 <putchar>
        ret = NET_ERROR_SOCKET_FAILURE;
 80129c0:	f06f 0312 	mvn.w	r3, #18
 80129c4:	617b      	str	r3, [r7, #20]
 80129c6:	e03a      	b.n	8012a3e <net_recv+0xfa>
      }
      else
      {
        net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 80129c8:	68f8      	ldr	r0, [r7, #12]
 80129ca:	f7ff fc05 	bl	80121d8 <net_socket_get_and_lock>
 80129ce:	61b8      	str	r0, [r7, #24]
          ret = net_mbedtls_sock_recv(p_socket, buf, len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_RECV, &ret))
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f107 0214 	add.w	r2, r7, #20
 80129d8:	2106      	movs	r1, #6
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 f9a2 	bl	8012d24 <net_access_control>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d02b      	beq.n	8012a3e <net_recv+0xfa>
          {
            UNLOCK_SOCK(sock);
            if (p_socket->read_timeout == 0)
 80129e6:	69bb      	ldr	r3, [r7, #24]
 80129e8:	69db      	ldr	r3, [r3, #28]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d101      	bne.n	80129f2 <net_recv+0xae>
            {
              flags = (int8_t) NET_MSG_DONTWAIT;
 80129ee:	2308      	movs	r3, #8
 80129f0:	61fb      	str	r3, [r7, #28]
            }
            ret = p_socket->pnetif->pdrv->precv(p_socket->ulsocket, buf, (int32_t)len, flags);
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80129fa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	6858      	ldr	r0, [r3, #4]
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	68b9      	ldr	r1, [r7, #8]
 8012a06:	47a0      	blx	r4
 8012a08:	4603      	mov	r3, r0
 8012a0a:	617b      	str	r3, [r7, #20]
            LOCK_SOCK(sock);
            if ((ret < 0) && (ret != NET_TIMEOUT) && (ret != NET_ERROR_DISCONNECTED))
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	da15      	bge.n	8012a3e <net_recv+0xfa>
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a18:	d011      	beq.n	8012a3e <net_recv+0xfa>
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	f113 0f16 	cmn.w	r3, #22
 8012a20:	d00d      	beq.n	8012a3e <net_recv+0xfa>
            {
              NET_DBG_ERROR("Error (%"PRId32") during receiving data.\n", ret);
 8012a22:	f240 2239 	movw	r2, #569	@ 0x239
 8012a26:	4908      	ldr	r1, [pc, #32]	@ (8012a48 <net_recv+0x104>)
 8012a28:	4808      	ldr	r0, [pc, #32]	@ (8012a4c <net_recv+0x108>)
 8012a2a:	f002 faef 	bl	801500c <iprintf>
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	4619      	mov	r1, r3
 8012a32:	4809      	ldr	r0, [pc, #36]	@ (8012a58 <net_recv+0x114>)
 8012a34:	f002 faea 	bl	801500c <iprintf>
 8012a38:	200a      	movs	r0, #10
 8012a3a:	f002 faf9 	bl	8015030 <putchar>
        UNLOCK_SOCK(sock);
      }
    }
  }

  return ret;
 8012a3e:	697b      	ldr	r3, [r7, #20]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3724      	adds	r7, #36	@ 0x24
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd90      	pop	{r4, r7, pc}
 8012a48:	0801a63c 	.word	0x0801a63c
 8012a4c:	0801a69c 	.word	0x0801a69c
 8012a50:	0801a6c8 	.word	0x0801a6c8
 8012a54:	0801a760 	.word	0x0801a760
 8012a58:	0801a834 	.word	0x0801a834

08012a5c <net_closesocket>:
  * @brief  close a socket
  * @param  sock [in] integer socket number
  * @retval zero on success, negative value in case of error
  */
int32_t net_closesocket(int32_t sock)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012a64:	f06f 0318 	mvn.w	r3, #24
 8012a68:	60bb      	str	r3, [r7, #8]

  if (!is_valid_socket(sock))
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f7ff fbc6 	bl	80121fc <is_valid_socket>
 8012a70:	4603      	mov	r3, r0
 8012a72:	f083 0301 	eor.w	r3, r3, #1
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d00f      	beq.n	8012a9c <net_closesocket+0x40>
  {
    NET_WARNING("Invalid socket, can not close it.\n");
 8012a7c:	f240 22fb 	movw	r2, #763	@ 0x2fb
 8012a80:	4931      	ldr	r1, [pc, #196]	@ (8012b48 <net_closesocket+0xec>)
 8012a82:	4832      	ldr	r0, [pc, #200]	@ (8012b4c <net_closesocket+0xf0>)
 8012a84:	f002 fac2 	bl	801500c <iprintf>
 8012a88:	4831      	ldr	r0, [pc, #196]	@ (8012b50 <net_closesocket+0xf4>)
 8012a8a:	f002 fb2f 	bl	80150ec <puts>
 8012a8e:	200a      	movs	r0, #10
 8012a90:	f002 face 	bl	8015030 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012a94:	f06f 0305 	mvn.w	r3, #5
 8012a98:	60bb      	str	r3, [r7, #8]
 8012a9a:	e04f      	b.n	8012b3c <net_closesocket+0xe0>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7ff fb9b 	bl	80121d8 <net_socket_get_and_lock>
 8012aa2:	60f8      	str	r0, [r7, #12]
      }
      p_socket->is_secure = false;
    }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

    if (check_low_level_socket(sock) < 0)
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7ff fc47 	bl	8012338 <check_low_level_socket>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	da17      	bge.n	8012ae0 <net_closesocket+0x84>
    {
      NET_WARNING("Failed to close: low level socket not existing.\n");
 8012ab0:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8012ab4:	4924      	ldr	r1, [pc, #144]	@ (8012b48 <net_closesocket+0xec>)
 8012ab6:	4825      	ldr	r0, [pc, #148]	@ (8012b4c <net_closesocket+0xf0>)
 8012ab8:	f002 faa8 	bl	801500c <iprintf>
 8012abc:	4825      	ldr	r0, [pc, #148]	@ (8012b54 <net_closesocket+0xf8>)
 8012abe:	f002 fb15 	bl	80150ec <puts>
 8012ac2:	200a      	movs	r0, #10
 8012ac4:	f002 fab4 	bl	8015030 <putchar>
      Sockets[sock].status = SOCKET_NOT_ALIVE;
 8012ac8:	4a23      	ldr	r2, [pc, #140]	@ (8012b58 <net_closesocket+0xfc>)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	212c      	movs	r1, #44	@ 0x2c
 8012ace:	fb01 f303 	mul.w	r3, r1, r3
 8012ad2:	4413      	add	r3, r2
 8012ad4:	3308      	adds	r3, #8
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	701a      	strb	r2, [r3, #0]
      ret = NET_OK;
 8012ada:	2300      	movs	r3, #0
 8012adc:	60bb      	str	r3, [r7, #8]
 8012ade:	e02d      	b.n	8012b3c <net_closesocket+0xe0>
    }
    else
    {
      if (net_access_control(p_socket->pnetif, NET_ACCESS_CLOSE, &ret))
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f107 0208 	add.w	r2, r7, #8
 8012ae8:	2108      	movs	r1, #8
 8012aea:	4618      	mov	r0, r3
 8012aec:	f000 f91a 	bl	8012d24 <net_access_control>
 8012af0:	4603      	mov	r3, r0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d022      	beq.n	8012b3c <net_closesocket+0xe0>
      {
        UNLOCK_SOCK(sock);
        ret = p_socket->pnetif->pdrv->pclose(p_socket->ulsocket, p_socket->cloneserver);
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	6850      	ldr	r0, [r2, #4]
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	7e12      	ldrb	r2, [r2, #24]
 8012b08:	4611      	mov	r1, r2
 8012b0a:	4798      	blx	r3
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	60bb      	str	r3, [r7, #8]
        LOCK_SOCK(sock);

        if (ret != NET_OK)
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d00b      	beq.n	8012b2e <net_closesocket+0xd2>
        {
          NET_DBG_ERROR("Socket cannot be closed.\n");
 8012b16:	f240 321e 	movw	r2, #798	@ 0x31e
 8012b1a:	490b      	ldr	r1, [pc, #44]	@ (8012b48 <net_closesocket+0xec>)
 8012b1c:	480f      	ldr	r0, [pc, #60]	@ (8012b5c <net_closesocket+0x100>)
 8012b1e:	f002 fa75 	bl	801500c <iprintf>
 8012b22:	480f      	ldr	r0, [pc, #60]	@ (8012b60 <net_closesocket+0x104>)
 8012b24:	f002 fae2 	bl	80150ec <puts>
 8012b28:	200a      	movs	r0, #10
 8012b2a:	f002 fa81 	bl	8015030 <putchar>
        }
        p_socket->ulsocket = -1;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	f04f 32ff 	mov.w	r2, #4294967295
 8012b34:	605a      	str	r2, [r3, #4]
        p_socket->status = SOCKET_NOT_ALIVE;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	721a      	strb	r2, [r3, #8]
      }
    }
    UNLOCK_SOCK(sock);
  }

  return ret;
 8012b3c:	68bb      	ldr	r3, [r7, #8]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	0801a63c 	.word	0x0801a63c
 8012b4c:	0801a858 	.word	0x0801a858
 8012b50:	0801a8b8 	.word	0x0801a8b8
 8012b54:	0801a8dc 	.word	0x0801a8dc
 8012b58:	20003290 	.word	0x20003290
 8012b5c:	0801a69c 	.word	0x0801a69c
 8012b60:	0801a90c 	.word	0x0801a90c

08012b64 <net_setsockopt>:
  * @param  optvalue [in] void pointer to the wanted option value
  * @param  optlen [in] length of data pointed by optvalue
  * @retval zero on success, negative value in case of error
  */
int32_t net_setsockopt(int32_t sock, int32_t level, net_socketoption_t optname, const void *optvalue, uint32_t optlen)
{
 8012b64:	b590      	push	{r4, r7, lr}
 8012b66:	b08b      	sub	sp, #44	@ 0x2c
 8012b68:	af02      	add	r7, sp, #8
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	603b      	str	r3, [r7, #0]
 8012b70:	4613      	mov	r3, r2
 8012b72:	80fb      	strh	r3, [r7, #6]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012b74:	f06f 0318 	mvn.w	r3, #24
 8012b78:	617b      	str	r3, [r7, #20]
  bool forward = false;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	77fb      	strb	r3, [r7, #31]
#ifdef NET_MBEDTLS_HOST_SUPPORT
  const char_t *optvalue_string = optvalue;
#endif /* NET_MBEDTLS_HOST_SUPPORT */

  if (!is_valid_socket(sock))
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	f7ff fb3c 	bl	80121fc <is_valid_socket>
 8012b84:	4603      	mov	r3, r0
 8012b86:	f083 0301 	eor.w	r3, r3, #1
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00f      	beq.n	8012bb0 <net_setsockopt+0x4c>
  {
    NET_DBG_ERROR("Invalid socket.\n");
 8012b90:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012b94:	495d      	ldr	r1, [pc, #372]	@ (8012d0c <net_setsockopt+0x1a8>)
 8012b96:	485e      	ldr	r0, [pc, #376]	@ (8012d10 <net_setsockopt+0x1ac>)
 8012b98:	f002 fa38 	bl	801500c <iprintf>
 8012b9c:	485d      	ldr	r0, [pc, #372]	@ (8012d14 <net_setsockopt+0x1b0>)
 8012b9e:	f002 faa5 	bl	80150ec <puts>
 8012ba2:	200a      	movs	r0, #10
 8012ba4:	f002 fa44 	bl	8015030 <putchar>
    ret = NET_ERROR_INVALID_SOCKET;
 8012ba8:	f06f 0305 	mvn.w	r3, #5
 8012bac:	617b      	str	r3, [r7, #20]
 8012bae:	e0a7      	b.n	8012d00 <net_setsockopt+0x19c>
  }
  else
  {
    net_socket_t *const p_socket = net_socket_get_and_lock(sock);
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f7ff fb11 	bl	80121d8 <net_socket_get_and_lock>
 8012bb6:	61b8      	str	r0, [r7, #24]

    switch (optname)
 8012bb8:	88fb      	ldrh	r3, [r7, #6]
 8012bba:	f241 0206 	movw	r2, #4102	@ 0x1006
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d01b      	beq.n	8012bfa <net_setsockopt+0x96>
 8012bc2:	f241 0206 	movw	r2, #4102	@ 0x1006
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	dc33      	bgt.n	8012c32 <net_setsockopt+0xce>
 8012bca:	2b03      	cmp	r3, #3
 8012bcc:	d004      	beq.n	8012bd8 <net_setsockopt+0x74>
 8012bce:	f241 0205 	movw	r2, #4101	@ 0x1005
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d01f      	beq.n	8012c16 <net_setsockopt+0xb2>
 8012bd6:	e02c      	b.n	8012c32 <net_setsockopt+0xce>
    {
      case NET_SO_BINDTODEVICE:
      {
        OPTCHECKTYPE(void *, optlen);
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bda:	2b04      	cmp	r3, #4
 8012bdc:	d003      	beq.n	8012be6 <net_setsockopt+0x82>
 8012bde:	f06f 0303 	mvn.w	r3, #3
 8012be2:	617b      	str	r3, [r7, #20]
 8012be4:	e029      	b.n	8012c3a <net_setsockopt+0xd6>

        p_socket->pnetif = (net_if_handle_t *)optvalue;
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	601a      	str	r2, [r3, #0]
        if (p_socket->pnetif != NULL)
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d021      	beq.n	8012c38 <net_setsockopt+0xd4>
        {
          forward = true; /* forward to driver */
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	77fb      	strb	r3, [r7, #31]
        }
      }
      break;
 8012bf8:	e01e      	b.n	8012c38 <net_setsockopt+0xd4>

      case NET_SO_RCVTIMEO:
      {
        OPTCHECKTYPE(int32_t, optlen);
 8012bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfc:	2b04      	cmp	r3, #4
 8012bfe:	d003      	beq.n	8012c08 <net_setsockopt+0xa4>
 8012c00:	f06f 0303 	mvn.w	r3, #3
 8012c04:	617b      	str	r3, [r7, #20]
 8012c06:	e018      	b.n	8012c3a <net_setsockopt+0xd6>
        p_socket->read_timeout = *(const int32_t *)optvalue;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	61da      	str	r2, [r3, #28]

#ifdef NET_MBEDTLS_HOST_SUPPORT
        net_mbedtls_set_read_timeout(p_socket);
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        forward = true;
 8012c10:	2301      	movs	r3, #1
 8012c12:	77fb      	strb	r3, [r7, #31]
      }
      break;
 8012c14:	e011      	b.n	8012c3a <net_setsockopt+0xd6>


      case NET_SO_SNDTIMEO:
      {
        OPTCHECKTYPE(int32_t, optlen);
 8012c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c18:	2b04      	cmp	r3, #4
 8012c1a:	d003      	beq.n	8012c24 <net_setsockopt+0xc0>
 8012c1c:	f06f 0303 	mvn.w	r3, #3
 8012c20:	617b      	str	r3, [r7, #20]
 8012c22:	e00a      	b.n	8012c3a <net_setsockopt+0xd6>
        p_socket->write_timeout = *(const int32_t *)optvalue;
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	621a      	str	r2, [r3, #32]

        forward = true;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	77fb      	strb	r3, [r7, #31]
      }
      break;
 8012c30:	e003      	b.n	8012c3a <net_setsockopt+0xd6>
        break;
      }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

      default:
        forward = true;
 8012c32:	2301      	movs	r3, #1
 8012c34:	77fb      	strb	r3, [r7, #31]
        break;
 8012c36:	e000      	b.n	8012c3a <net_setsockopt+0xd6>
      break;
 8012c38:	bf00      	nop
    }

    if (true == forward)
 8012c3a:	7ffb      	ldrb	r3, [r7, #31]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d05f      	beq.n	8012d00 <net_setsockopt+0x19c>
    {
#if (NET_USE_DEFAULT_INTERFACE == 1)
      if (p_socket->pnetif == NULL)
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d105      	bne.n	8012c54 <net_setsockopt+0xf0>
      {
        p_socket->pnetif = net_if_find(NULL);
 8012c48:	2000      	movs	r0, #0
 8012c4a:	f7ff f8d5 	bl	8011df8 <net_if_find>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	601a      	str	r2, [r3, #0]
      }
#endif /* NET_USE_DEFAULT_INTERFACE */

      if (p_socket->pnetif == NULL)
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d10f      	bne.n	8012c7c <net_setsockopt+0x118>
      {
        NET_DBG_ERROR("No physical interface can be bound");
 8012c5c:	f240 42b1 	movw	r2, #1201	@ 0x4b1
 8012c60:	492a      	ldr	r1, [pc, #168]	@ (8012d0c <net_setsockopt+0x1a8>)
 8012c62:	482b      	ldr	r0, [pc, #172]	@ (8012d10 <net_setsockopt+0x1ac>)
 8012c64:	f002 f9d2 	bl	801500c <iprintf>
 8012c68:	482b      	ldr	r0, [pc, #172]	@ (8012d18 <net_setsockopt+0x1b4>)
 8012c6a:	f002 f9cf 	bl	801500c <iprintf>
 8012c6e:	200a      	movs	r0, #10
 8012c70:	f002 f9de 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012c74:	f06f 0310 	mvn.w	r3, #16
 8012c78:	617b      	str	r3, [r7, #20]
 8012c7a:	e041      	b.n	8012d00 <net_setsockopt+0x19c>
      }
      else
      {
        if (create_low_level_socket(sock) < 0)
 8012c7c:	68f8      	ldr	r0, [r7, #12]
 8012c7e:	f7ff fadf 	bl	8012240 <create_low_level_socket>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	da0f      	bge.n	8012ca8 <net_setsockopt+0x144>
        {
          NET_DBG_ERROR("low level socket creation failed.\n");
 8012c88:	f44f 6297 	mov.w	r2, #1208	@ 0x4b8
 8012c8c:	491f      	ldr	r1, [pc, #124]	@ (8012d0c <net_setsockopt+0x1a8>)
 8012c8e:	4820      	ldr	r0, [pc, #128]	@ (8012d10 <net_setsockopt+0x1ac>)
 8012c90:	f002 f9bc 	bl	801500c <iprintf>
 8012c94:	4821      	ldr	r0, [pc, #132]	@ (8012d1c <net_setsockopt+0x1b8>)
 8012c96:	f002 fa29 	bl	80150ec <puts>
 8012c9a:	200a      	movs	r0, #10
 8012c9c:	f002 f9c8 	bl	8015030 <putchar>
          ret = NET_ERROR_SOCKET_FAILURE;
 8012ca0:	f06f 0312 	mvn.w	r3, #18
 8012ca4:	617b      	str	r3, [r7, #20]
 8012ca6:	e02b      	b.n	8012d00 <net_setsockopt+0x19c>
        }
        else
        {
          if (net_access_control(p_socket->pnetif, NET_ACCESS_SETSOCKOPT, &ret))
 8012ca8:	69bb      	ldr	r3, [r7, #24]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f107 0214 	add.w	r2, r7, #20
 8012cb0:	2109      	movs	r1, #9
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f000 f836 	bl	8012d24 <net_access_control>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d020      	beq.n	8012d00 <net_setsockopt+0x19c>
          {
            UNLOCK_SOCK(sock);
            ret = p_socket->pnetif->pdrv->psetsockopt(p_socket->ulsocket, level, optname, optvalue, optlen);
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012cc6:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	6858      	ldr	r0, [r3, #4]
 8012ccc:	88fa      	ldrh	r2, [r7, #6]
 8012cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cd0:	9300      	str	r3, [sp, #0]
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	68b9      	ldr	r1, [r7, #8]
 8012cd6:	47a0      	blx	r4
 8012cd8:	4603      	mov	r3, r0
 8012cda:	617b      	str	r3, [r7, #20]
            LOCK_SOCK(sock);
            if (ret < 0)
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	da0e      	bge.n	8012d00 <net_setsockopt+0x19c>
            {
              NET_DBG_ERROR("Error %"PRId32" while setting socket option (optname=%d).\n", ret, optname);
 8012ce2:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8012ce6:	4909      	ldr	r1, [pc, #36]	@ (8012d0c <net_setsockopt+0x1a8>)
 8012ce8:	4809      	ldr	r0, [pc, #36]	@ (8012d10 <net_setsockopt+0x1ac>)
 8012cea:	f002 f98f 	bl	801500c <iprintf>
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	88fa      	ldrh	r2, [r7, #6]
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	480a      	ldr	r0, [pc, #40]	@ (8012d20 <net_setsockopt+0x1bc>)
 8012cf6:	f002 f989 	bl	801500c <iprintf>
 8012cfa:	200a      	movs	r0, #10
 8012cfc:	f002 f998 	bl	8015030 <putchar>
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 8012d00:	697b      	ldr	r3, [r7, #20]
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3724      	adds	r7, #36	@ 0x24
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd90      	pop	{r4, r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	0801a63c 	.word	0x0801a63c
 8012d10:	0801a69c 	.word	0x0801a69c
 8012d14:	0801a6c8 	.word	0x0801a6c8
 8012d18:	0801a968 	.word	0x0801a968
 8012d1c:	0801a6d8 	.word	0x0801a6d8
 8012d20:	0801a98c 	.word	0x0801a98c

08012d24 <net_access_control>:

/** @defgroup Socket
  * @}
  */
bool net_access_control(net_if_handle_t *pnetif, net_access_t func, int32_t *code)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b087      	sub	sp, #28
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 8012d32:	2301      	movs	r3, #1
 8012d34:	75fb      	strb	r3, [r7, #23]
  if ((pnetif == NULL) || (pnetif->state == NET_STATE_CONNECTION_LOST))
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d004      	beq.n	8012d46 <net_access_control+0x22>
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8012d42:	2b08      	cmp	r3, #8
 8012d44:	d104      	bne.n	8012d50 <net_access_control+0x2c>
  {
    /* send, receive function return zero, so user application should normally retry transfer */
    ret = false;
 8012d46:	2300      	movs	r3, #0
 8012d48:	75fb      	strb	r3, [r7, #23]
    *code = 0;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	601a      	str	r2, [r3, #0]
  }

  switch (func)
 8012d50:	7afb      	ldrb	r3, [r7, #11]
 8012d52:	2b09      	cmp	r3, #9
 8012d54:	d82f      	bhi.n	8012db6 <net_access_control+0x92>
 8012d56:	a201      	add	r2, pc, #4	@ (adr r2, 8012d5c <net_access_control+0x38>)
 8012d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d5c:	08012d85 	.word	0x08012d85
 8012d60:	08012dc1 	.word	0x08012dc1
 8012d64:	08012dc1 	.word	0x08012dc1
 8012d68:	08012dc1 	.word	0x08012dc1
 8012d6c:	08012d91 	.word	0x08012d91
 8012d70:	08012d99 	.word	0x08012d99
 8012d74:	08012da1 	.word	0x08012da1
 8012d78:	08012da9 	.word	0x08012da9
 8012d7c:	08012d8b 	.word	0x08012d8b
 8012d80:	08012db1 	.word	0x08012db1
  {
    case NET_ACCESS_SOCKET:
      ret = true;
 8012d84:	2301      	movs	r3, #1
 8012d86:	75fb      	strb	r3, [r7, #23]
      break;
 8012d88:	e01b      	b.n	8012dc2 <net_access_control+0x9e>

    case NET_ACCESS_CONNECT:
      break;

    case NET_ACCESS_CLOSE:
      ret = true;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8012d8e:	e018      	b.n	8012dc2 <net_access_control+0x9e>

    case NET_ACCESS_SEND:
      *code = 0;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	601a      	str	r2, [r3, #0]
      break;
 8012d96:	e014      	b.n	8012dc2 <net_access_control+0x9e>

    case NET_ACCESS_SENDTO:
      *code = 0;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	601a      	str	r2, [r3, #0]
      break;
 8012d9e:	e010      	b.n	8012dc2 <net_access_control+0x9e>

    case NET_ACCESS_RECV:
      *code = 0;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2200      	movs	r2, #0
 8012da4:	601a      	str	r2, [r3, #0]
      break;
 8012da6:	e00c      	b.n	8012dc2 <net_access_control+0x9e>

    case NET_ACCESS_RECVFROM:
      *code = 0;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	601a      	str	r2, [r3, #0]
      break;
 8012dae:	e008      	b.n	8012dc2 <net_access_control+0x9e>

    case NET_ACCESS_SETSOCKOPT:
      ret = true;
 8012db0:	2301      	movs	r3, #1
 8012db2:	75fb      	strb	r3, [r7, #23]
      break;
 8012db4:	e005      	b.n	8012dc2 <net_access_control+0x9e>

    default:
      *code = NET_ERROR_FRAMEWORK;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f06f 0218 	mvn.w	r2, #24
 8012dbc:	601a      	str	r2, [r3, #0]
      break;
 8012dbe:	e000      	b.n	8012dc2 <net_access_control+0x9e>
      break;
 8012dc0:	bf00      	nop
  }
  return ret;
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	371c      	adds	r7, #28
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <set_state>:
static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event);
static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event);


static void set_state(net_if_handle_t *pnetif, net_state_t state)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	460b      	mov	r3, r1
 8012dda:	70fb      	strb	r3, [r7, #3]
  pnetif->state = state;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	78fa      	ldrb	r2, [r7, #3]
 8012de0:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 8012de4:	78fa      	ldrb	r2, [r7, #3]
 8012de6:	2300      	movs	r3, #0
 8012de8:	2100      	movs	r1, #0
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff f897 	bl	8011f1e <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 8012df0:	bf00      	nop
 8012df2:	3708      	adds	r7, #8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <net_state_initialized>:


static int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	460b      	mov	r3, r1
 8012e02:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8012e04:	2300      	movs	r3, #0
 8012e06:	60fb      	str	r3, [r7, #12]

  switch (event)
 8012e08:	78fb      	ldrb	r3, [r7, #3]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d002      	beq.n	8012e14 <net_state_initialized+0x1c>
 8012e0e:	2b05      	cmp	r3, #5
 8012e10:	d01d      	beq.n	8012e4e <net_state_initialized+0x56>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 8012e12:	e03c      	b.n	8012e8e <net_state_initialized+0x96>
      set_state(pnetif, NET_STATE_STARTING);
 8012e14:	2102      	movs	r1, #2
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f7ff ffda 	bl	8012dd0 <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	4798      	blx	r3
 8012e28:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d02b      	beq.n	8012e88 <net_state_initialized+0x90>
        NET_DBG_ERROR("Interface cannot be started.\n");
 8012e30:	2258      	movs	r2, #88	@ 0x58
 8012e32:	4919      	ldr	r1, [pc, #100]	@ (8012e98 <net_state_initialized+0xa0>)
 8012e34:	4819      	ldr	r0, [pc, #100]	@ (8012e9c <net_state_initialized+0xa4>)
 8012e36:	f002 f8e9 	bl	801500c <iprintf>
 8012e3a:	4819      	ldr	r0, [pc, #100]	@ (8012ea0 <net_state_initialized+0xa8>)
 8012e3c:	f002 f956 	bl	80150ec <puts>
 8012e40:	200a      	movs	r0, #10
 8012e42:	f002 f8f5 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012e46:	f06f 0310 	mvn.w	r3, #16
 8012e4a:	60fb      	str	r3, [r7, #12]
      break;
 8012e4c:	e01c      	b.n	8012e88 <net_state_initialized+0x90>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012e54:	689b      	ldr	r3, [r3, #8]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	4798      	blx	r3
 8012e5a:	60f8      	str	r0, [r7, #12]
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7ff ffb6 	bl	8012dd0 <set_state>
      if (NET_OK != ret)
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d010      	beq.n	8012e8c <net_state_initialized+0x94>
        NET_DBG_ERROR("Interface cannot be de-initialized.\n");
 8012e6a:	2262      	movs	r2, #98	@ 0x62
 8012e6c:	490a      	ldr	r1, [pc, #40]	@ (8012e98 <net_state_initialized+0xa0>)
 8012e6e:	480b      	ldr	r0, [pc, #44]	@ (8012e9c <net_state_initialized+0xa4>)
 8012e70:	f002 f8cc 	bl	801500c <iprintf>
 8012e74:	480b      	ldr	r0, [pc, #44]	@ (8012ea4 <net_state_initialized+0xac>)
 8012e76:	f002 f939 	bl	80150ec <puts>
 8012e7a:	200a      	movs	r0, #10
 8012e7c:	f002 f8d8 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012e80:	f06f 0310 	mvn.w	r3, #16
 8012e84:	60fb      	str	r3, [r7, #12]
      break;
 8012e86:	e001      	b.n	8012e8c <net_state_initialized+0x94>
      break;
 8012e88:	bf00      	nop
 8012e8a:	e000      	b.n	8012e8e <net_state_initialized+0x96>
      break;
 8012e8c:	bf00      	nop
  }
  return ret;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	0801a9c4 	.word	0x0801a9c4
 8012e9c:	0801aa24 	.word	0x0801aa24
 8012ea0:	0801aa34 	.word	0x0801aa34
 8012ea4:	0801aa54 	.word	0x0801aa54

08012ea8 <net_state_starting>:


static int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t event)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	60fb      	str	r3, [r7, #12]

  switch (event)
 8012eb8:	78fb      	ldrb	r3, [r7, #3]
 8012eba:	2b04      	cmp	r3, #4
 8012ebc:	d006      	beq.n	8012ecc <net_state_starting+0x24>
 8012ebe:	2b07      	cmp	r3, #7
 8012ec0:	d121      	bne.n	8012f06 <net_state_starting+0x5e>
  {
    case NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 8012ec2:	2103      	movs	r1, #3
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7ff ff83 	bl	8012dd0 <set_state>
      break;
 8012eca:	e01f      	b.n	8012f0c <net_state_starting+0x64>

    case NET_EVENT_CMD_STOP:
      set_state(pnetif, NET_STATE_INITIALIZED);
 8012ecc:	2101      	movs	r1, #1
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f7ff ff7e 	bl	8012dd0 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012eda:	691b      	ldr	r3, [r3, #16]
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	4798      	blx	r3
 8012ee0:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d010      	beq.n	8012f0a <net_state_starting+0x62>
      {
        NET_DBG_ERROR("Interface cannot stop.\n");
 8012ee8:	227d      	movs	r2, #125	@ 0x7d
 8012eea:	490b      	ldr	r1, [pc, #44]	@ (8012f18 <net_state_starting+0x70>)
 8012eec:	480b      	ldr	r0, [pc, #44]	@ (8012f1c <net_state_starting+0x74>)
 8012eee:	f002 f88d 	bl	801500c <iprintf>
 8012ef2:	480b      	ldr	r0, [pc, #44]	@ (8012f20 <net_state_starting+0x78>)
 8012ef4:	f002 f8fa 	bl	80150ec <puts>
 8012ef8:	200a      	movs	r0, #10
 8012efa:	f002 f899 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012efe:	f06f 0310 	mvn.w	r3, #16
 8012f02:	60fb      	str	r3, [r7, #12]
      }
      break;
 8012f04:	e001      	b.n	8012f0a <net_state_starting+0x62>
    default:
      break;
 8012f06:	bf00      	nop
 8012f08:	e000      	b.n	8012f0c <net_state_starting+0x64>
      break;
 8012f0a:	bf00      	nop
  }
  return ret;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	0801a9c4 	.word	0x0801a9c4
 8012f1c:	0801aa24 	.word	0x0801aa24
 8012f20:	0801aa78 	.word	0x0801aa78

08012f24 <net_state_ready>:


static int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b084      	sub	sp, #16
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8012f30:	2300      	movs	r3, #0
 8012f32:	60fb      	str	r3, [r7, #12]

  switch (event)
 8012f34:	78fb      	ldrb	r3, [r7, #3]
 8012f36:	2b02      	cmp	r3, #2
 8012f38:	d002      	beq.n	8012f40 <net_state_ready+0x1c>
 8012f3a:	2b04      	cmp	r3, #4
 8012f3c:	d01d      	beq.n	8012f7a <net_state_ready+0x56>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 8012f3e:	e03c      	b.n	8012fba <net_state_ready+0x96>
      set_state(pnetif, NET_STATE_CONNECTING);
 8012f40:	2104      	movs	r1, #4
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7ff ff44 	bl	8012dd0 <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012f4e:	699b      	ldr	r3, [r3, #24]
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	4798      	blx	r3
 8012f54:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d02b      	beq.n	8012fb4 <net_state_ready+0x90>
        NET_DBG_ERROR("Interface cannot connect.\n");
 8012f5c:	2293      	movs	r2, #147	@ 0x93
 8012f5e:	4919      	ldr	r1, [pc, #100]	@ (8012fc4 <net_state_ready+0xa0>)
 8012f60:	4819      	ldr	r0, [pc, #100]	@ (8012fc8 <net_state_ready+0xa4>)
 8012f62:	f002 f853 	bl	801500c <iprintf>
 8012f66:	4819      	ldr	r0, [pc, #100]	@ (8012fcc <net_state_ready+0xa8>)
 8012f68:	f002 f8c0 	bl	80150ec <puts>
 8012f6c:	200a      	movs	r0, #10
 8012f6e:	f002 f85f 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012f72:	f06f 0310 	mvn.w	r3, #16
 8012f76:	60fb      	str	r3, [r7, #12]
      break;
 8012f78:	e01c      	b.n	8012fb4 <net_state_ready+0x90>
      set_state(pnetif, NET_STATE_STOPPING);
 8012f7a:	2106      	movs	r1, #6
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7ff ff27 	bl	8012dd0 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8012f88:	691b      	ldr	r3, [r3, #16]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	4798      	blx	r3
 8012f8e:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d010      	beq.n	8012fb8 <net_state_ready+0x94>
        NET_DBG_ERROR("Interface cannot stop.\n");
 8012f96:	229d      	movs	r2, #157	@ 0x9d
 8012f98:	490a      	ldr	r1, [pc, #40]	@ (8012fc4 <net_state_ready+0xa0>)
 8012f9a:	480b      	ldr	r0, [pc, #44]	@ (8012fc8 <net_state_ready+0xa4>)
 8012f9c:	f002 f836 	bl	801500c <iprintf>
 8012fa0:	480b      	ldr	r0, [pc, #44]	@ (8012fd0 <net_state_ready+0xac>)
 8012fa2:	f002 f8a3 	bl	80150ec <puts>
 8012fa6:	200a      	movs	r0, #10
 8012fa8:	f002 f842 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012fac:	f06f 0310 	mvn.w	r3, #16
 8012fb0:	60fb      	str	r3, [r7, #12]
      break;
 8012fb2:	e001      	b.n	8012fb8 <net_state_ready+0x94>
      break;
 8012fb4:	bf00      	nop
 8012fb6:	e000      	b.n	8012fba <net_state_ready+0x96>
      break;
 8012fb8:	bf00      	nop
  }
  return ret;
 8012fba:	68fb      	ldr	r3, [r7, #12]
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3710      	adds	r7, #16
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	0801a9c4 	.word	0x0801a9c4
 8012fc8:	0801aa24 	.word	0x0801aa24
 8012fcc:	0801aa90 	.word	0x0801aa90
 8012fd0:	0801aa78 	.word	0x0801aa78

08012fd4 <net_state_connecting>:


static int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	460b      	mov	r3, r1
 8012fde:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	60fb      	str	r3, [r7, #12]

  switch (event)
 8012fe4:	78fb      	ldrb	r3, [r7, #3]
 8012fe6:	2b03      	cmp	r3, #3
 8012fe8:	d006      	beq.n	8012ff8 <net_state_connecting+0x24>
 8012fea:	2b0a      	cmp	r3, #10
 8012fec:	d109      	bne.n	8013002 <net_state_connecting+0x2e>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 8012fee:	2105      	movs	r1, #5
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7ff feed 	bl	8012dd0 <set_state>
      break;
 8012ff6:	e005      	b.n	8013004 <net_state_connecting+0x30>

    case NET_EVENT_CMD_DISCONNECT:
      set_state(pnetif, NET_STATE_READY);
 8012ff8:	2103      	movs	r1, #3
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f7ff fee8 	bl	8012dd0 <set_state>
      break;
 8013000:	e000      	b.n	8013004 <net_state_connecting+0x30>

    default:
      break;
 8013002:	bf00      	nop
  }
  return ret;
 8013004:	68fb      	ldr	r3, [r7, #12]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
	...

08013010 <net_state_connected>:


static int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	460b      	mov	r3, r1
 801301a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013020:	78fb      	ldrb	r3, [r7, #3]
 8013022:	2b0a      	cmp	r3, #10
 8013024:	d028      	beq.n	8013078 <net_state_connected+0x68>
 8013026:	2b0a      	cmp	r3, #10
 8013028:	dc2b      	bgt.n	8013082 <net_state_connected+0x72>
 801302a:	2b03      	cmp	r3, #3
 801302c:	d002      	beq.n	8013034 <net_state_connected+0x24>
 801302e:	2b09      	cmp	r3, #9
 8013030:	d01d      	beq.n	801306e <net_state_connected+0x5e>
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
      break;

    default:
      break;
 8013032:	e026      	b.n	8013082 <net_state_connected+0x72>
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8013034:	2107      	movs	r1, #7
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7ff feca 	bl	8012dd0 <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013042:	69db      	ldr	r3, [r3, #28]
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	4798      	blx	r3
 8013048:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d01a      	beq.n	8013086 <net_state_connected+0x76>
        NET_DBG_ERROR("Interface cannot disconnect.\n");
 8013050:	22c9      	movs	r2, #201	@ 0xc9
 8013052:	4910      	ldr	r1, [pc, #64]	@ (8013094 <net_state_connected+0x84>)
 8013054:	4810      	ldr	r0, [pc, #64]	@ (8013098 <net_state_connected+0x88>)
 8013056:	f001 ffd9 	bl	801500c <iprintf>
 801305a:	4810      	ldr	r0, [pc, #64]	@ (801309c <net_state_connected+0x8c>)
 801305c:	f002 f846 	bl	80150ec <puts>
 8013060:	200a      	movs	r0, #10
 8013062:	f001 ffe5 	bl	8015030 <putchar>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8013066:	f06f 0310 	mvn.w	r3, #16
 801306a:	60fb      	str	r3, [r7, #12]
      break;
 801306c:	e00b      	b.n	8013086 <net_state_connected+0x76>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 801306e:	2108      	movs	r1, #8
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff fead 	bl	8012dd0 <set_state>
      break;
 8013076:	e007      	b.n	8013088 <net_state_connected+0x78>
      set_state(pnetif, NET_STATE_CONNECTED);
 8013078:	2105      	movs	r1, #5
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7ff fea8 	bl	8012dd0 <set_state>
      break;
 8013080:	e002      	b.n	8013088 <net_state_connected+0x78>
      break;
 8013082:	bf00      	nop
 8013084:	e000      	b.n	8013088 <net_state_connected+0x78>
      break;
 8013086:	bf00      	nop
  }
  return ret;
 8013088:	68fb      	ldr	r3, [r7, #12]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	0801a9c4 	.word	0x0801a9c4
 8013098:	0801aa24 	.word	0x0801aa24
 801309c:	0801aaac 	.word	0x0801aaac

080130a0 <net_state_disconnecting>:


static int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b084      	sub	sp, #16
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	460b      	mov	r3, r1
 80130aa:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80130ac:	2300      	movs	r3, #0
 80130ae:	60fb      	str	r3, [r7, #12]

  switch (event)
 80130b0:	78fb      	ldrb	r3, [r7, #3]
 80130b2:	2b07      	cmp	r3, #7
 80130b4:	d104      	bne.n	80130c0 <net_state_disconnecting+0x20>
  {
    case NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 80130b6:	2103      	movs	r1, #3
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7ff fe89 	bl	8012dd0 <set_state>
      break;
 80130be:	e000      	b.n	80130c2 <net_state_disconnecting+0x22>

    default:
      break;
 80130c0:	bf00      	nop
  }
  return ret;
 80130c2:	68fb      	ldr	r3, [r7, #12]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3710      	adds	r7, #16
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <net_state_stopping>:


static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	460b      	mov	r3, r1
 80130d6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80130d8:	2300      	movs	r3, #0
 80130da:	60fb      	str	r3, [r7, #12]

  switch (event)
 80130dc:	78fb      	ldrb	r3, [r7, #3]
 80130de:	2b06      	cmp	r3, #6
 80130e0:	d104      	bne.n	80130ec <net_state_stopping+0x20>
  {
    case NET_EVENT_INTERFACE_INITIALIZED:
      set_state(pnetif, NET_STATE_INITIALIZED);
 80130e2:	2101      	movs	r1, #1
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7ff fe73 	bl	8012dd0 <set_state>
      break;
 80130ea:	e000      	b.n	80130ee <net_state_stopping+0x22>

    default:
      break;
 80130ec:	bf00      	nop
  }
  return ret;
 80130ee:	68fb      	ldr	r3, [r7, #12]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <net_state_connection_lost>:


static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	460b      	mov	r3, r1
 8013102:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8013104:	2300      	movs	r3, #0
 8013106:	60fb      	str	r3, [r7, #12]

  switch (event)
 8013108:	78fb      	ldrb	r3, [r7, #3]
 801310a:	2b08      	cmp	r3, #8
 801310c:	d104      	bne.n	8013118 <net_state_connection_lost+0x20>
  {
    case NET_EVENT_LINK_UP:
      set_state(pnetif, NET_STATE_CONNECTING);
 801310e:	2104      	movs	r1, #4
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f7ff fe5d 	bl	8012dd0 <set_state>
      break;
 8013116:	e000      	b.n	801311a <net_state_connection_lost+0x22>

    default:
      break;
 8013118:	bf00      	nop
  }
  return ret;
 801311a:	68fb      	ldr	r3, [r7, #12]
}
 801311c:	4618      	mov	r0, r3
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <net_state_manage_event>:


int32_t net_state_manage_event(net_if_handle_t *pnetif, net_state_event_t state_to)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	460b      	mov	r3, r1
 801312e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;
  net_if_handle_t *const p_netif = netif_check(pnetif);
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7fe fe99 	bl	8011e68 <netif_check>
 8013136:	60b8      	str	r0, [r7, #8]

  if (p_netif == NULL)
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10f      	bne.n	801315e <net_state_manage_event+0x3a>
  {
    NET_DBG_ERROR("Invalid interface.\n");
 801313e:	f240 1217 	movw	r2, #279	@ 0x117
 8013142:	4934      	ldr	r1, [pc, #208]	@ (8013214 <net_state_manage_event+0xf0>)
 8013144:	4834      	ldr	r0, [pc, #208]	@ (8013218 <net_state_manage_event+0xf4>)
 8013146:	f001 ff61 	bl	801500c <iprintf>
 801314a:	4834      	ldr	r0, [pc, #208]	@ (801321c <net_state_manage_event+0xf8>)
 801314c:	f001 ffce 	bl	80150ec <puts>
 8013150:	200a      	movs	r0, #10
 8013152:	f001 ff6d 	bl	8015030 <putchar>
    ret = NET_ERROR_PARAMETER;
 8013156:	f06f 0303 	mvn.w	r3, #3
 801315a:	60fb      	str	r3, [r7, #12]
 801315c:	e054      	b.n	8013208 <net_state_manage_event+0xe4>
  {
#ifdef DEBUGSTATE
    printf("In state %s, received event %s\n", statestr[p_netif->state], eventstr[state_to]);
#endif /* DEBUGSTATE */

    switch (p_netif->state)
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8013164:	3b01      	subs	r3, #1
 8013166:	2b07      	cmp	r3, #7
 8013168:	d84a      	bhi.n	8013200 <net_state_manage_event+0xdc>
 801316a:	a201      	add	r2, pc, #4	@ (adr r2, 8013170 <net_state_manage_event+0x4c>)
 801316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013170:	08013191 	.word	0x08013191
 8013174:	0801319f 	.word	0x0801319f
 8013178:	080131ad 	.word	0x080131ad
 801317c:	080131bb 	.word	0x080131bb
 8013180:	080131c9 	.word	0x080131c9
 8013184:	080131f3 	.word	0x080131f3
 8013188:	080131d7 	.word	0x080131d7
 801318c:	080131e5 	.word	0x080131e5
    {
      case NET_STATE_INITIALIZED:
        ret = net_state_initialized(p_netif, state_to);
 8013190:	78fb      	ldrb	r3, [r7, #3]
 8013192:	4619      	mov	r1, r3
 8013194:	68b8      	ldr	r0, [r7, #8]
 8013196:	f7ff fe2f 	bl	8012df8 <net_state_initialized>
 801319a:	60f8      	str	r0, [r7, #12]
        break;
 801319c:	e034      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_STARTING:
        ret = net_state_starting(p_netif, state_to);
 801319e:	78fb      	ldrb	r3, [r7, #3]
 80131a0:	4619      	mov	r1, r3
 80131a2:	68b8      	ldr	r0, [r7, #8]
 80131a4:	f7ff fe80 	bl	8012ea8 <net_state_starting>
 80131a8:	60f8      	str	r0, [r7, #12]
        break;
 80131aa:	e02d      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_READY:
        ret = net_state_ready(p_netif, state_to);
 80131ac:	78fb      	ldrb	r3, [r7, #3]
 80131ae:	4619      	mov	r1, r3
 80131b0:	68b8      	ldr	r0, [r7, #8]
 80131b2:	f7ff feb7 	bl	8012f24 <net_state_ready>
 80131b6:	60f8      	str	r0, [r7, #12]
        break;
 80131b8:	e026      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTING:
        ret = net_state_connecting(p_netif, state_to);
 80131ba:	78fb      	ldrb	r3, [r7, #3]
 80131bc:	4619      	mov	r1, r3
 80131be:	68b8      	ldr	r0, [r7, #8]
 80131c0:	f7ff ff08 	bl	8012fd4 <net_state_connecting>
 80131c4:	60f8      	str	r0, [r7, #12]
        break;
 80131c6:	e01f      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTED:
        ret = net_state_connected(p_netif, state_to);
 80131c8:	78fb      	ldrb	r3, [r7, #3]
 80131ca:	4619      	mov	r1, r3
 80131cc:	68b8      	ldr	r0, [r7, #8]
 80131ce:	f7ff ff1f 	bl	8013010 <net_state_connected>
 80131d2:	60f8      	str	r0, [r7, #12]
        break;
 80131d4:	e018      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_DISCONNECTING:
        ret = net_state_disconnecting(p_netif, state_to);
 80131d6:	78fb      	ldrb	r3, [r7, #3]
 80131d8:	4619      	mov	r1, r3
 80131da:	68b8      	ldr	r0, [r7, #8]
 80131dc:	f7ff ff60 	bl	80130a0 <net_state_disconnecting>
 80131e0:	60f8      	str	r0, [r7, #12]
        break;
 80131e2:	e011      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_CONNECTION_LOST:
        ret = net_state_connection_lost(p_netif, state_to);
 80131e4:	78fb      	ldrb	r3, [r7, #3]
 80131e6:	4619      	mov	r1, r3
 80131e8:	68b8      	ldr	r0, [r7, #8]
 80131ea:	f7ff ff85 	bl	80130f8 <net_state_connection_lost>
 80131ee:	60f8      	str	r0, [r7, #12]
        break;
 80131f0:	e00a      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_STOPPING:
        ret = net_state_stopping(p_netif, state_to);
 80131f2:	78fb      	ldrb	r3, [r7, #3]
 80131f4:	4619      	mov	r1, r3
 80131f6:	68b8      	ldr	r0, [r7, #8]
 80131f8:	f7ff ff68 	bl	80130cc <net_state_stopping>
 80131fc:	60f8      	str	r0, [r7, #12]
        break;
 80131fe:	e003      	b.n	8013208 <net_state_manage_event+0xe4>

      case NET_STATE_DEINITIALIZED:
      default:
        ret = NET_ERROR_INVALID_STATE;
 8013200:	f06f 031b 	mvn.w	r3, #27
 8013204:	60fb      	str	r3, [r7, #12]
        break;
 8013206:	bf00      	nop
    }
  }
  return ret;
 8013208:	68fb      	ldr	r3, [r7, #12]
}
 801320a:	4618      	mov	r0, r3
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	0801a9c4 	.word	0x0801a9c4
 8013218:	0801aa24 	.word	0x0801aa24
 801321c:	0801aacc 	.word	0x0801aacc

08013220 <mx_wifi_driver>:
  * @brief                   WiFi driver initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
int32_t mx_wifi_driver(net_if_handle_t *pnetif)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  /* Initialize the LwIP library here if not already done by another network interface. */
#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
  net_ip_init();
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return mx_wifi_if_init(pnetif);
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f000 f805 	bl	8013238 <mx_wifi_if_init>
 801322e:	4603      	mov	r3, r0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <mx_wifi_if_init>:
  * @brief                   Mxchip WiFi driver interface initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_init(net_if_handle_t *pnetif)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b086      	sub	sp, #24
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  void *ptmp;

  /* Create netif and set Mxchip WiFi functions. */
  ptmp = NET_MALLOC(sizeof(net_if_drv_t));
 8013240:	2084      	movs	r0, #132	@ 0x84
 8013242:	f000 fef7 	bl	8014034 <malloc>
 8013246:	4603      	mov	r3, r0
 8013248:	613b      	str	r3, [r7, #16]

  if (ptmp != NULL)
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 8084 	beq.w	801335a <mx_wifi_if_init+0x122>
  {
    net_if_drv_t *const p = (net_if_drv_t *)ptmp;
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	60fb      	str	r3, [r7, #12]

    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2200      	movs	r2, #0
 801325a:	701a      	strb	r2, [r3, #0]

    p->if_init = mx_wifi_if_init;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	4a49      	ldr	r2, [pc, #292]	@ (8013384 <mx_wifi_if_init+0x14c>)
 8013260:	605a      	str	r2, [r3, #4]
    p->if_deinit = mx_wifi_if_deinit;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	4a48      	ldr	r2, [pc, #288]	@ (8013388 <mx_wifi_if_init+0x150>)
 8013266:	609a      	str	r2, [r3, #8]

    p->if_start = mx_wifi_if_start;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	4a48      	ldr	r2, [pc, #288]	@ (801338c <mx_wifi_if_init+0x154>)
 801326c:	60da      	str	r2, [r3, #12]
    p->if_stop = mx_wifi_if_stop;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	4a47      	ldr	r2, [pc, #284]	@ (8013390 <mx_wifi_if_init+0x158>)
 8013272:	611a      	str	r2, [r3, #16]
    p->if_yield = mx_wifi_if_yield;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4a47      	ldr	r2, [pc, #284]	@ (8013394 <mx_wifi_if_init+0x15c>)
 8013278:	615a      	str	r2, [r3, #20]

    p->if_connect = mx_wifi_if_connect;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	4a46      	ldr	r2, [pc, #280]	@ (8013398 <mx_wifi_if_init+0x160>)
 801327e:	619a      	str	r2, [r3, #24]
    p->if_disconnect = mx_wifi_if_disconnect;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	4a46      	ldr	r2, [pc, #280]	@ (801339c <mx_wifi_if_init+0x164>)
 8013284:	61da      	str	r2, [r3, #28]

    /* socket functions */
#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
    p->psocket = mx_wifi_socket;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	4a45      	ldr	r2, [pc, #276]	@ (80133a0 <mx_wifi_if_init+0x168>)
 801328a:	635a      	str	r2, [r3, #52]	@ 0x34
    p->pbind = mx_wifi_bind;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	4a45      	ldr	r2, [pc, #276]	@ (80133a4 <mx_wifi_if_init+0x16c>)
 8013290:	639a      	str	r2, [r3, #56]	@ 0x38
    p->plisten = mx_wifi_listen;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	4a44      	ldr	r2, [pc, #272]	@ (80133a8 <mx_wifi_if_init+0x170>)
 8013296:	63da      	str	r2, [r3, #60]	@ 0x3c
    p->paccept = mx_wifi_accept;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	4a44      	ldr	r2, [pc, #272]	@ (80133ac <mx_wifi_if_init+0x174>)
 801329c:	641a      	str	r2, [r3, #64]	@ 0x40
    p->pconnect = mx_wifi_connect;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	4a43      	ldr	r2, [pc, #268]	@ (80133b0 <mx_wifi_if_init+0x178>)
 80132a2:	645a      	str	r2, [r3, #68]	@ 0x44
    p->psend = mx_wifi_send;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	4a43      	ldr	r2, [pc, #268]	@ (80133b4 <mx_wifi_if_init+0x17c>)
 80132a8:	649a      	str	r2, [r3, #72]	@ 0x48
    p->precv = mx_wifi_recv;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	4a42      	ldr	r2, [pc, #264]	@ (80133b8 <mx_wifi_if_init+0x180>)
 80132ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    p->psendto = mx_wifi_sendto;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	4a42      	ldr	r2, [pc, #264]	@ (80133bc <mx_wifi_if_init+0x184>)
 80132b4:	651a      	str	r2, [r3, #80]	@ 0x50
    p->precvfrom = mx_wifi_recvfrom;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	4a41      	ldr	r2, [pc, #260]	@ (80133c0 <mx_wifi_if_init+0x188>)
 80132ba:	655a      	str	r2, [r3, #84]	@ 0x54
    p->psetsockopt = mx_wifi_setsockopt;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	4a41      	ldr	r2, [pc, #260]	@ (80133c4 <mx_wifi_if_init+0x18c>)
 80132c0:	659a      	str	r2, [r3, #88]	@ 0x58
    p->pgetsockopt = mx_wifi_getsockopt;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	4a40      	ldr	r2, [pc, #256]	@ (80133c8 <mx_wifi_if_init+0x190>)
 80132c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    p->pgetsockname = mx_wifi_getsockname;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	4a40      	ldr	r2, [pc, #256]	@ (80133cc <mx_wifi_if_init+0x194>)
 80132cc:	661a      	str	r2, [r3, #96]	@ 0x60
    p->pgetpeername = mx_wifi_getpeername;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	4a3f      	ldr	r2, [pc, #252]	@ (80133d0 <mx_wifi_if_init+0x198>)
 80132d2:	665a      	str	r2, [r3, #100]	@ 0x64
    p->pclose = mx_wifi_close;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	4a3f      	ldr	r2, [pc, #252]	@ (80133d4 <mx_wifi_if_init+0x19c>)
 80132d8:	669a      	str	r2, [r3, #104]	@ 0x68
    p->pshutdown = mx_wifi_shutdown;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	4a3e      	ldr	r2, [pc, #248]	@ (80133d8 <mx_wifi_if_init+0x1a0>)
 80132de:	66da      	str	r2, [r3, #108]	@ 0x6c
    p->pgethostbyname = mx_wifi_gethostbyname;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	4a3e      	ldr	r2, [pc, #248]	@ (80133dc <mx_wifi_if_init+0x1a4>)
 80132e4:	671a      	str	r2, [r3, #112]	@ 0x70
    p->pping = mx_wifi_ping;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	4a3d      	ldr	r2, [pc, #244]	@ (80133e0 <mx_wifi_if_init+0x1a8>)
 80132ea:	675a      	str	r2, [r3, #116]	@ 0x74
    p->pping = icmp_ping;
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */


    /* WiFi function. */
    ptmp = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 80132ec:	202c      	movs	r0, #44	@ 0x2c
 80132ee:	f000 fea1 	bl	8014034 <malloc>
 80132f2:	4603      	mov	r3, r0
 80132f4:	613b      	str	r3, [r7, #16]
    if (NULL == ptmp)
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d112      	bne.n	8013322 <mx_wifi_if_init+0xea>
    {
      NET_DBG_ERROR("Can't allocate memory for mx_wifi_driver class\n");
 80132fc:	f240 2205 	movw	r2, #517	@ 0x205
 8013300:	4938      	ldr	r1, [pc, #224]	@ (80133e4 <mx_wifi_if_init+0x1ac>)
 8013302:	4839      	ldr	r0, [pc, #228]	@ (80133e8 <mx_wifi_if_init+0x1b0>)
 8013304:	f001 fe82 	bl	801500c <iprintf>
 8013308:	4838      	ldr	r0, [pc, #224]	@ (80133ec <mx_wifi_if_init+0x1b4>)
 801330a:	f001 feef 	bl	80150ec <puts>
 801330e:	200a      	movs	r0, #10
 8013310:	f001 fe8e 	bl	8015030 <putchar>
      NET_FREE(p);
 8013314:	68f8      	ldr	r0, [r7, #12]
 8013316:	f000 fe95 	bl	8014044 <free>
      ret = NET_ERROR_NO_MEMORY;
 801331a:	f06f 0307 	mvn.w	r3, #7
 801331e:	617b      	str	r3, [r7, #20]
 8013320:	e02a      	b.n	8013378 <mx_wifi_if_init+0x140>
    }
    else
    {
      p->extension.wifi = (net_if_wifi_class_extension_t *)ptmp;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	693a      	ldr	r2, [r7, #16]
 8013326:	679a      	str	r2, [r3, #120]	@ 0x78
      /* DHCP mode. */
      pnetif->dhcp_mode = true;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2201      	movs	r2, #1
 801332c:	f883 2020 	strb.w	r2, [r3, #32]
      pnetif->pdrv = p;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
      /* Scan function. */
      p->extension.wifi->scan = mx_wifi_scan;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801333c:	4a2c      	ldr	r2, [pc, #176]	@ (80133f0 <mx_wifi_if_init+0x1b8>)
 801333e:	601a      	str	r2, [r3, #0]
      p->extension.wifi->get_scan_results = mx_wifi_get_scan_result;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013344:	4a2b      	ldr	r2, [pc, #172]	@ (80133f4 <mx_wifi_if_init+0x1bc>)
 8013346:	605a      	str	r2, [r3, #4]
      p->extension.wifi->mode = NET_WIFI_MODE_STA;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801334c:	2200      	movs	r2, #0
 801334e:	771a      	strb	r2, [r3, #28]

      ret = hw_start(pnetif);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 f897 	bl	8013484 <hw_start>
 8013356:	6178      	str	r0, [r7, #20]
 8013358:	e00e      	b.n	8013378 <mx_wifi_if_init+0x140>
    }
  }
  else
  {
    NET_DBG_ERROR("Can't allocate memory for mx_wifi_driver class\n");
 801335a:	f240 2219 	movw	r2, #537	@ 0x219
 801335e:	4921      	ldr	r1, [pc, #132]	@ (80133e4 <mx_wifi_if_init+0x1ac>)
 8013360:	4821      	ldr	r0, [pc, #132]	@ (80133e8 <mx_wifi_if_init+0x1b0>)
 8013362:	f001 fe53 	bl	801500c <iprintf>
 8013366:	4821      	ldr	r0, [pc, #132]	@ (80133ec <mx_wifi_if_init+0x1b4>)
 8013368:	f001 fec0 	bl	80150ec <puts>
 801336c:	200a      	movs	r0, #10
 801336e:	f001 fe5f 	bl	8015030 <putchar>
    ret = NET_ERROR_NO_MEMORY;
 8013372:	f06f 0307 	mvn.w	r3, #7
 8013376:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8013378:	697b      	ldr	r3, [r7, #20]
}
 801337a:	4618      	mov	r0, r3
 801337c:	3718      	adds	r7, #24
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	08013239 	.word	0x08013239
 8013388:	080133f9 	.word	0x080133f9
 801338c:	08013453 	.word	0x08013453
 8013390:	0801355d 	.word	0x0801355d
 8013394:	080135d5 	.word	0x080135d5
 8013398:	080139ef 	.word	0x080139ef
 801339c:	080139d1 	.word	0x080139d1
 80133a0:	08013c75 	.word	0x08013c75
 80133a4:	08013d05 	.word	0x08013d05
 80133a8:	08013d43 	.word	0x08013d43
 80133ac:	08013d69 	.word	0x08013d69
 80133b0:	08013d8f 	.word	0x08013d8f
 80133b4:	08013e01 	.word	0x08013e01
 80133b8:	08013e2d 	.word	0x08013e2d
 80133bc:	08013e6d 	.word	0x08013e6d
 80133c0:	08013eb9 	.word	0x08013eb9
 80133c4:	08013c9b 	.word	0x08013c9b
 80133c8:	08013cd5 	.word	0x08013cd5
 80133cc:	08013fb1 	.word	0x08013fb1
 80133d0:	08013fd7 	.word	0x08013fd7
 80133d4:	08013ddb 	.word	0x08013ddb
 80133d8:	08013db5 	.word	0x08013db5
 80133dc:	08013f0f 	.word	0x08013f0f
 80133e0:	08013f37 	.word	0x08013f37
 80133e4:	0801aae0 	.word	0x0801aae0
 80133e8:	0801ab54 	.word	0x0801ab54
 80133ec:	0801ab64 	.word	0x0801ab64
 80133f0:	08013b21 	.word	0x08013b21
 80133f4:	08013b5d 	.word	0x08013b5d

080133f8 <mx_wifi_if_deinit>:
  * @brief                   Mxchip WiFi driver interface de-initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_deinit(net_if_handle_t *pnetif)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_OK;
 8013400:	2300      	movs	r3, #0
 8013402:	60fb      	str	r3, [r7, #12]

#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
  (void)MX_WIFI_Network_bypass_mode_set(wifi_obj_get(), 0, NULL, NULL);
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  if (MX_WIFI_STATUS_OK != MX_WIFI_DeInit(wifi_obj_get()))
 8013404:	f7f5 fe5e 	bl	80090c4 <wifi_obj_get>
 8013408:	4603      	mov	r3, r0
 801340a:	4618      	mov	r0, r3
 801340c:	f7f3 fd82 	bl	8006f14 <MX_WIFI_DeInit>
 8013410:	4603      	mov	r3, r0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d002      	beq.n	801341c <mx_wifi_if_deinit+0x24>
  {
    ret = NET_ERROR_GENERIC;
 8013416:	f06f 031c 	mvn.w	r3, #28
 801341a:	60fb      	str	r3, [r7, #12]
  }

  NET_FREE(pnetif->pdrv->extension.wifi);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013424:	4618      	mov	r0, r3
 8013426:	f000 fe0d 	bl	8014044 <free>
  pnetif->pdrv->extension.wifi = NULL;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013430:	2200      	movs	r2, #0
 8013432:	679a      	str	r2, [r3, #120]	@ 0x78
  NET_FREE(pnetif->pdrv);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801343a:	4618      	mov	r0, r3
 801343c:	f000 fe02 	bl	8014044 <free>
  pnetif->pdrv = NULL;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2200      	movs	r2, #0
 8013444:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

  return ret;
 8013448:	68fb      	ldr	r3, [r7, #12]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <mx_wifi_if_start>:
  * @brief                   Mxchip WiFi driver start
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_start(net_if_handle_t *pnetif)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013462:	7f1b      	ldrb	r3, [r3, #28]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d104      	bne.n	8013472 <mx_wifi_if_start+0x20>
  {
    ret = mx_wifi_if_start_station(pnetif);
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 f987 	bl	801377c <mx_wifi_if_start_station>
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	e003      	b.n	801347a <mx_wifi_if_start+0x28>
    }
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }
  else
  {
    ret = mx_wifi_if_start_softap(pnetif);
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f000 f9ea 	bl	801384c <mx_wifi_if_start_softap>
 8013478:	60f8      	str	r0, [r7, #12]
      SoftAP_pNetif = pnetif;
    }
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }

  return ret;
 801347a:	68fb      	ldr	r3, [r7, #12]
}
 801347c:	4618      	mov	r0, r3
 801347e:	3710      	adds	r7, #16
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <hw_start>:
  * @brief                   Mxchip WiFi hardware initialization
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t hw_start(net_if_handle_t *pnetif)
{
 8013484:	b590      	push	{r4, r7, lr}
 8013486:	b085      	sub	sp, #20
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_DEVICE_ERROR;
 801348c:	f06f 030c 	mvn.w	r3, #12
 8013490:	60fb      	str	r3, [r7, #12]

  if (mxwifi_probe(&pnetif->pdrv->context) == 0)
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013498:	3330      	adds	r3, #48	@ 0x30
 801349a:	4618      	mov	r0, r3
 801349c:	f7f5 fde4 	bl	8009068 <mxwifi_probe>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d154      	bne.n	8013550 <hw_start+0xcc>
  {
    DEBUG_LOG("%s\n", "MX_WIFI IO [OK]");

    if (wifi_obj_get()->Runtime.interfaces == 0U)
 80134a6:	f7f5 fe0d 	bl	80090c4 <wifi_obj_get>
 80134aa:	4603      	mov	r3, r0
 80134ac:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d108      	bne.n	80134c6 <hw_start+0x42>
    {
      /* WiFi module hardware reboot. */
      DEBUG_LOG("%s\n", "MX_WIFI REBOOT(HW) ...");
      ret = MX_WIFI_HardResetModule(wifi_obj_get());
 80134b4:	f7f5 fe06 	bl	80090c4 <wifi_obj_get>
 80134b8:	4603      	mov	r3, r0
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7f3 fc1a 	bl	8006cf4 <MX_WIFI_HardResetModule>
 80134c0:	4603      	mov	r3, r0
 80134c2:	60fb      	str	r3, [r7, #12]
 80134c4:	e001      	b.n	80134ca <hw_start+0x46>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 80134c6:	2300      	movs	r3, #0
 80134c8:	60fb      	str	r3, [r7, #12]
    }

    if (MX_WIFI_STATUS_OK != ret)
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d003      	beq.n	80134d8 <hw_start+0x54>
    {
      ret = NET_ERROR_DEVICE_ERROR;
 80134d0:	f06f 030c 	mvn.w	r3, #12
 80134d4:	60fb      	str	r3, [r7, #12]
 80134d6:	e03b      	b.n	8013550 <hw_start+0xcc>
    else
    {
      /* Wait for Mxchip WiFi reboot. */

      /* Initialize the WiFi module. */
      if (MX_WIFI_STATUS_OK != MX_WIFI_Init(wifi_obj_get()))
 80134d8:	f7f5 fdf4 	bl	80090c4 <wifi_obj_get>
 80134dc:	4603      	mov	r3, r0
 80134de:	4618      	mov	r0, r3
 80134e0:	f7f3 fc26 	bl	8006d30 <MX_WIFI_Init>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d003      	beq.n	80134f2 <hw_start+0x6e>
      {
        ret = NET_ERROR_INTERFACE_FAILURE;
 80134ea:	f06f 0310 	mvn.w	r3, #16
 80134ee:	60fb      	str	r3, [r7, #12]
 80134f0:	e02e      	b.n	8013550 <hw_start+0xcc>
      }
      else
      {
        DEBUG_LOG("%s\n", "MX_WIFI_Init [OK]");
        /* Retrieve the WiFi module information. */
        (void)strncpy(pnetif->DeviceName, (const char *)wifi_obj_get()->SysInfo.Product_Name, sizeof(pnetif->DeviceName));
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f103 0425 	add.w	r4, r3, #37	@ 0x25
 80134f8:	f7f5 fde4 	bl	80090c4 <wifi_obj_get>
 80134fc:	4603      	mov	r3, r0
 80134fe:	3314      	adds	r3, #20
 8013500:	2240      	movs	r2, #64	@ 0x40
 8013502:	4619      	mov	r1, r3
 8013504:	4620      	mov	r0, r4
 8013506:	f002 f860 	bl	80155ca <strncpy>
        (void)strncpy(pnetif->DeviceID, (const char *)wifi_obj_get()->SysInfo.Product_ID, sizeof(pnetif->DeviceID));
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f103 0465 	add.w	r4, r3, #101	@ 0x65
 8013510:	f7f5 fdd8 	bl	80090c4 <wifi_obj_get>
 8013514:	4603      	mov	r3, r0
 8013516:	3334      	adds	r3, #52	@ 0x34
 8013518:	2240      	movs	r2, #64	@ 0x40
 801351a:	4619      	mov	r1, r3
 801351c:	4620      	mov	r0, r4
 801351e:	f002 f854 	bl	80155ca <strncpy>
        (void)strncpy(pnetif->DeviceVer, (const char *)wifi_obj_get()->SysInfo.FW_Rev, sizeof(pnetif->DeviceVer));
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f103 04a5 	add.w	r4, r3, #165	@ 0xa5
 8013528:	f7f5 fdcc 	bl	80090c4 <wifi_obj_get>
 801352c:	4603      	mov	r3, r0
 801352e:	3354      	adds	r3, #84	@ 0x54
 8013530:	2240      	movs	r2, #64	@ 0x40
 8013532:	4619      	mov	r1, r3
 8013534:	4620      	mov	r0, r4
 8013536:	f002 f848 	bl	80155ca <strncpy>

        (void)MX_WIFI_GetMACAddress(wifi_obj_get(), pnetif->macaddr.mac);
 801353a:	f7f5 fdc3 	bl	80090c4 <wifi_obj_get>
 801353e:	4602      	mov	r2, r0
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	33e5      	adds	r3, #229	@ 0xe5
 8013544:	4619      	mov	r1, r3
 8013546:	4610      	mov	r0, r2
 8013548:	f7f3 fd2a 	bl	8006fa0 <MX_WIFI_GetMACAddress>
          ret = NET_ERROR_MODULE_INITIALIZATION;
        }
        else
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
        {
          ret = NET_OK;
 801354c:	2300      	movs	r3, #0
 801354e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8013550:	68fb      	ldr	r3, [r7, #12]
}
 8013552:	4618      	mov	r0, r3
 8013554:	3714      	adds	r7, #20
 8013556:	46bd      	mov	sp, r7
 8013558:	bd90      	pop	{r4, r7, pc}
	...

0801355c <mx_wifi_if_stop>:
  * @brief                   Mxchip WiFi driver interface stop
  * @param  pnetif           net interface pointer
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_stop(net_if_handle_t *pnetif)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801356a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801356c:	7f1b      	ldrb	r3, [r3, #28]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d11e      	bne.n	80135b0 <mx_wifi_if_stop+0x54>
  {
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801357a:	699b      	ldr	r3, [r3, #24]
 801357c:	689b      	ldr	r3, [r3, #8]
 801357e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013582:	d008      	beq.n	8013596 <mx_wifi_if_stop+0x3a>
        ((int32_t)NET_WIFI_SM_WPS_SECURE == pnetif->pdrv->extension.wifi->credentials->security_mode))
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801358a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801358c:	699b      	ldr	r3, [r3, #24]
 801358e:	689b      	ldr	r3, [r3, #8]
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8013590:	4a0f      	ldr	r2, [pc, #60]	@ (80135d0 <mx_wifi_if_stop+0x74>)
 8013592:	4293      	cmp	r3, r2
 8013594:	d105      	bne.n	80135a2 <mx_wifi_if_stop+0x46>
    {
      (void)MX_WIFI_WPS_Stop(wifi_obj_get());
 8013596:	f7f5 fd95 	bl	80090c4 <wifi_obj_get>
 801359a:	4603      	mov	r3, r0
 801359c:	4618      	mov	r0, r3
 801359e:	f7f3 ff99 	bl	80074d4 <MX_WIFI_WPS_Stop>
    }
    (void)MX_WIFI_Disconnect(wifi_obj_get());
 80135a2:	f7f5 fd8f 	bl	80090c4 <wifi_obj_get>
 80135a6:	4603      	mov	r3, r0
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7f3 ff3d 	bl	8007428 <MX_WIFI_Disconnect>
 80135ae:	e005      	b.n	80135bc <mx_wifi_if_stop+0x60>
    Station_pNetif = NULL;
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }
  else
  {
    (void)MX_WIFI_StopAP(wifi_obj_get());
 80135b0:	f7f5 fd88 	bl	80090c4 <wifi_obj_get>
 80135b4:	4603      	mov	r3, r0
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7f4 f8a8 	bl	800770c <MX_WIFI_StopAP>
#if (defined(MX_WIFI_NETWORK_BYPASS_MODE) && (MX_WIFI_NETWORK_BYPASS_MODE == 1))
    SoftAP_pNetif = NULL;
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */
  }

  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 80135bc:	2106      	movs	r1, #6
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f7ff fdb0 	bl	8013124 <net_state_manage_event>

  return NET_OK;
 80135c4:	2300      	movs	r3, #0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	10000004 	.word	0x10000004

080135d4 <mx_wifi_if_yield>:
  * @param  pnetif           net interface
  * @param  timeout_ms       timeout in milliseconds
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_yield(net_if_handle_t *pnetif, uint32_t timeout_ms)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_IO_YIELD(wifi_obj_get(), timeout_ms);
 80135de:	f7f5 fd71 	bl	80090c4 <wifi_obj_get>
 80135e2:	4603      	mov	r3, r0
 80135e4:	6839      	ldr	r1, [r7, #0]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7f3 fcc7 	bl	8006f7a <MX_WIFI_IO_YIELD>
 80135ec:	4603      	mov	r3, r0
 80135ee:	60fb      	str	r3, [r7, #12]

  (void)pnetif;

  return ret;
 80135f0:	68fb      	ldr	r3, [r7, #12]
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <mx_wifi_status_changed>:
  * @param  cate             status cate
  * @param  status           status
  * @param  arg              user arguments
  */
static void mx_wifi_status_changed(uint8_t cate, uint8_t status, void *arg)
{
 80135fa:	b590      	push	{r4, r7, lr}
 80135fc:	b085      	sub	sp, #20
 80135fe:	af00      	add	r7, sp, #0
 8013600:	4603      	mov	r3, r0
 8013602:	603a      	str	r2, [r7, #0]
 8013604:	71fb      	strb	r3, [r7, #7]
 8013606:	460b      	mov	r3, r1
 8013608:	71bb      	strb	r3, [r7, #6]
  net_if_handle_t *const pnetif = (net_if_handle_t *)arg;
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	60fb      	str	r3, [r7, #12]
  net_state_t net_state = NET_STATE_DEINITIALIZED;
 801360e:	2300      	movs	r3, #0
 8013610:	72fb      	strb	r3, [r7, #11]

  net_if_getState(pnetif, &net_state);
 8013612:	f107 030b 	add.w	r3, r7, #11
 8013616:	4619      	mov	r1, r3
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7fe fd0b 	bl	8012034 <net_if_getState>

  if ((uint8_t)MC_STATION == cate)
 801361e:	79fb      	ldrb	r3, [r7, #7]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d17c      	bne.n	801371e <mx_wifi_status_changed+0x124>
  {
    switch (status)
 8013624:	79bb      	ldrb	r3, [r7, #6]
 8013626:	2b03      	cmp	r3, #3
 8013628:	d01d      	beq.n	8013666 <mx_wifi_status_changed+0x6c>
 801362a:	2b03      	cmp	r3, #3
 801362c:	f300 809e 	bgt.w	801376c <mx_wifi_status_changed+0x172>
 8013630:	2b01      	cmp	r3, #1
 8013632:	d002      	beq.n	801363a <mx_wifi_status_changed+0x40>
 8013634:	2b02      	cmp	r3, #2
 8013636:	d011      	beq.n	801365c <mx_wifi_status_changed+0x62>
#endif  /* MX_WIFI_NETWORK_BYPASS_MODE */
      }
      break;

      default:
        break;
 8013638:	e098      	b.n	801376c <mx_wifi_status_changed+0x172>
        if (NET_STATE_STOPPING == net_state)
 801363a:	7afb      	ldrb	r3, [r7, #11]
 801363c:	2b06      	cmp	r3, #6
 801363e:	d104      	bne.n	801364a <mx_wifi_status_changed+0x50>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8013640:	2106      	movs	r1, #6
 8013642:	68f8      	ldr	r0, [r7, #12]
 8013644:	f7ff fd6e 	bl	8013124 <net_state_manage_event>
      break;
 8013648:	e092      	b.n	8013770 <mx_wifi_status_changed+0x176>
        else if (NET_STATE_CONNECTED == net_state)
 801364a:	7afb      	ldrb	r3, [r7, #11]
 801364c:	2b05      	cmp	r3, #5
 801364e:	f040 808f 	bne.w	8013770 <mx_wifi_status_changed+0x176>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8013652:	2109      	movs	r1, #9
 8013654:	68f8      	ldr	r0, [r7, #12]
 8013656:	f7ff fd65 	bl	8013124 <net_state_manage_event>
      break;
 801365a:	e089      	b.n	8013770 <mx_wifi_status_changed+0x176>
        (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 801365c:	2107      	movs	r1, #7
 801365e:	68f8      	ldr	r0, [r7, #12]
 8013660:	f7ff fd60 	bl	8013124 <net_state_manage_event>
      break;
 8013664:	e085      	b.n	8013772 <mx_wifi_status_changed+0x178>
        pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 8013666:	f7f5 fd2d 	bl	80090c4 <wifi_obj_get>
 801366a:	4603      	mov	r3, r0
 801366c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8013670:	061c      	lsls	r4, r3, #24
 8013672:	f7f5 fd27 	bl	80090c4 <wifi_obj_get>
 8013676:	4603      	mov	r3, r0
 8013678:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 801367c:	041b      	lsls	r3, r3, #16
 801367e:	431c      	orrs	r4, r3
 8013680:	f7f5 fd20 	bl	80090c4 <wifi_obj_get>
 8013684:	4603      	mov	r3, r0
 8013686:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 801368a:	021b      	lsls	r3, r3, #8
 801368c:	431c      	orrs	r4, r3
 801368e:	f7f5 fd19 	bl	80090c4 <wifi_obj_get>
 8013692:	4603      	mov	r3, r0
 8013694:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8013698:	ea44 0203 	orr.w	r2, r4, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 80136a0:	f7f5 fd10 	bl	80090c4 <wifi_obj_get>
 80136a4:	4603      	mov	r3, r0
 80136a6:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80136aa:	061c      	lsls	r4, r3, #24
 80136ac:	f7f5 fd0a 	bl	80090c4 <wifi_obj_get>
 80136b0:	4603      	mov	r3, r0
 80136b2:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80136b6:	041b      	lsls	r3, r3, #16
 80136b8:	431c      	orrs	r4, r3
 80136ba:	f7f5 fd03 	bl	80090c4 <wifi_obj_get>
 80136be:	4603      	mov	r3, r0
 80136c0:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80136c4:	021b      	lsls	r3, r3, #8
 80136c6:	431c      	orrs	r4, r3
 80136c8:	f7f5 fcfc 	bl	80090c4 <wifi_obj_get>
 80136cc:	4603      	mov	r3, r0
 80136ce:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 80136d2:	ea44 0203 	orr.w	r2, r4, r3
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 80136da:	f7f5 fcf3 	bl	80090c4 <wifi_obj_get>
 80136de:	4603      	mov	r3, r0
 80136e0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80136e4:	061c      	lsls	r4, r3, #24
 80136e6:	f7f5 fced 	bl	80090c4 <wifi_obj_get>
 80136ea:	4603      	mov	r3, r0
 80136ec:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80136f0:	041b      	lsls	r3, r3, #16
 80136f2:	431c      	orrs	r4, r3
 80136f4:	f7f5 fce6 	bl	80090c4 <wifi_obj_get>
 80136f8:	4603      	mov	r3, r0
 80136fa:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80136fe:	021b      	lsls	r3, r3, #8
 8013700:	431c      	orrs	r4, r3
 8013702:	f7f5 fcdf 	bl	80090c4 <wifi_obj_get>
 8013706:	4603      	mov	r3, r0
 8013708:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 801370c:	ea44 0203 	orr.w	r2, r4, r3
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	609a      	str	r2, [r3, #8]
        (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8013714:	210a      	movs	r1, #10
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f7ff fd04 	bl	8013124 <net_state_manage_event>
      break;
 801371c:	e029      	b.n	8013772 <mx_wifi_status_changed+0x178>
    }
  }
  else if ((uint8_t)MC_SOFTAP == cate)
 801371e:	79fb      	ldrb	r3, [r7, #7]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d126      	bne.n	8013772 <mx_wifi_status_changed+0x178>
  {
    switch (status)
 8013724:	79bb      	ldrb	r3, [r7, #6]
 8013726:	2b04      	cmp	r3, #4
 8013728:	d002      	beq.n	8013730 <mx_wifi_status_changed+0x136>
 801372a:	2b05      	cmp	r3, #5
 801372c:	d00d      	beq.n	801374a <mx_wifi_status_changed+0x150>
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
      }
      break;

      default:
        break;
 801372e:	e020      	b.n	8013772 <mx_wifi_status_changed+0x178>
        if (NET_STATE_CONNECTED == net_state)
 8013730:	7afb      	ldrb	r3, [r7, #11]
 8013732:	2b05      	cmp	r3, #5
 8013734:	d104      	bne.n	8013740 <mx_wifi_status_changed+0x146>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8013736:	2109      	movs	r1, #9
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f7ff fcf3 	bl	8013124 <net_state_manage_event>
      break;
 801373e:	e018      	b.n	8013772 <mx_wifi_status_changed+0x178>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8013740:	2107      	movs	r1, #7
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	f7ff fcee 	bl	8013124 <net_state_manage_event>
      break;
 8013748:	e013      	b.n	8013772 <mx_wifi_status_changed+0x178>
        pnetif->ipaddr = pnetif->static_ipaddr;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	6912      	ldr	r2, [r2, #16]
 8013750:	605a      	str	r2, [r3, #4]
        pnetif->gateway = pnetif->static_gateway;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	68fa      	ldr	r2, [r7, #12]
 8013756:	6952      	ldr	r2, [r2, #20]
 8013758:	609a      	str	r2, [r3, #8]
        pnetif->netmask = pnetif->static_netmask;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	68fa      	ldr	r2, [r7, #12]
 801375e:	6992      	ldr	r2, [r2, #24]
 8013760:	60da      	str	r2, [r3, #12]
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8013762:	2107      	movs	r1, #7
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f7ff fcdd 	bl	8013124 <net_state_manage_event>
      break;
 801376a:	e002      	b.n	8013772 <mx_wifi_status_changed+0x178>
        break;
 801376c:	bf00      	nop
 801376e:	e000      	b.n	8013772 <mx_wifi_status_changed+0x178>
      break;
 8013770:	bf00      	nop
  }
  else
  {
    /* nothing */
  }
}
 8013772:	bf00      	nop
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	bd90      	pop	{r4, r7, pc}
	...

0801377c <mx_wifi_if_start_station>:
  * @brief                   Mxchip WiFi connect to AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_station(net_if_handle_t *pnetif)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b086      	sub	sp, #24
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  int32_t ret;
  const net_wifi_credentials_t *const credentials = pnetif->pdrv->extension.wifi->credentials;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801378a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801378c:	699b      	ldr	r3, [r3, #24]
 801378e:	613b      	str	r3, [r7, #16]

  if (false == pnetif->dhcp_mode)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013796:	f083 0301 	eor.w	r3, r3, #1
 801379a:	b2db      	uxtb	r3, r3
 801379c:	2b00      	cmp	r3, #0
 801379e:	d01e      	beq.n	80137de <mx_wifi_if_start_station+0x62>
  {
    wifi_obj_get()->NetSettings.DHCP_IsEnabled = 0;
 80137a0:	f7f5 fc90 	bl	80090c4 <wifi_obj_get>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2200      	movs	r2, #0
 80137a8:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
    (void)memcpy(wifi_obj_get()->NetSettings.IP6_Mask, &pnetif->static_netmask.u_addr.ip6, 16);
    (void)memcpy(wifi_obj_get()->NetSettings.Gateway6_Addr, &pnetif->static_gateway.u_addr.ip6, 16);

#else
    /* IPv4 */
    (void)memcpy(wifi_obj_get()->NetSettings.IP_Addr, &pnetif->static_ipaddr, 4);
 80137ac:	f7f5 fc8a 	bl	80090c4 <wifi_obj_get>
 80137b0:	4603      	mov	r3, r0
 80137b2:	33dd      	adds	r3, #221	@ 0xdd
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	3210      	adds	r2, #16
 80137b8:	6812      	ldr	r2, [r2, #0]
 80137ba:	601a      	str	r2, [r3, #0]
    (void)memcpy(wifi_obj_get()->NetSettings.IP_Mask, &pnetif->static_netmask, 4);
 80137bc:	f7f5 fc82 	bl	80090c4 <wifi_obj_get>
 80137c0:	4603      	mov	r3, r0
 80137c2:	33e1      	adds	r3, #225	@ 0xe1
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	3218      	adds	r2, #24
 80137c8:	6812      	ldr	r2, [r2, #0]
 80137ca:	601a      	str	r2, [r3, #0]
    (void)memcpy(wifi_obj_get()->NetSettings.Gateway_Addr, &pnetif->static_gateway, 4);
 80137cc:	f7f5 fc7a 	bl	80090c4 <wifi_obj_get>
 80137d0:	4603      	mov	r3, r0
 80137d2:	33e5      	adds	r3, #229	@ 0xe5
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	3214      	adds	r2, #20
 80137d8:	6812      	ldr	r2, [r2, #0]
 80137da:	601a      	str	r2, [r3, #0]
 80137dc:	e005      	b.n	80137ea <mx_wifi_if_start_station+0x6e>
#endif /* NET_USE_IPV6 */
  }
  else
  {
    wifi_obj_get()->NetSettings.DHCP_IsEnabled = 1;
 80137de:	f7f5 fc71 	bl	80090c4 <wifi_obj_get>
 80137e2:	4603      	mov	r3, r0
 80137e4:	2201      	movs	r2, #1
 80137e6:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
  }

  (void)MX_WIFI_RegisterStatusCallback_if(wifi_obj_get(), mx_wifi_status_changed, pnetif, MC_STATION);
 80137ea:	f7f5 fc6b 	bl	80090c4 <wifi_obj_get>
 80137ee:	2301      	movs	r3, #1
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	4914      	ldr	r1, [pc, #80]	@ (8013844 <mx_wifi_if_start_station+0xc8>)
 80137f4:	f7f3 fcc4 	bl	8007180 <MX_WIFI_RegisterStatusCallback_if>

  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	689b      	ldr	r3, [r3, #8]
 80137fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013800:	d004      	beq.n	801380c <mx_wifi_if_start_station+0x90>
      ((int32_t)NET_WIFI_SM_WPS_SECURE == credentials->security_mode))
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	689b      	ldr	r3, [r3, #8]
  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8013806:	4a10      	ldr	r2, [pc, #64]	@ (8013848 <mx_wifi_if_start_station+0xcc>)
 8013808:	4293      	cmp	r3, r2
 801380a:	d108      	bne.n	801381e <mx_wifi_if_start_station+0xa2>
  {
    ret = MX_WIFI_WPS_Connect(wifi_obj_get());
 801380c:	f7f5 fc5a 	bl	80090c4 <wifi_obj_get>
 8013810:	4603      	mov	r3, r0
 8013812:	4618      	mov	r0, r3
 8013814:	f7f3 fe33 	bl	800747e <MX_WIFI_WPS_Connect>
 8013818:	4603      	mov	r3, r0
 801381a:	617b      	str	r3, [r7, #20]
 801381c:	e00c      	b.n	8013838 <mx_wifi_if_start_station+0xbc>
  }
  else
  {
    /* NOTE: secure type is auto for Mxchip WiFi */
    const MX_WIFI_SecurityType_t secure_type = MX_WIFI_SEC_AUTO;
 801381e:	2307      	movs	r3, #7
 8013820:	73fb      	strb	r3, [r7, #15]
    ret = MX_WIFI_Connect(wifi_obj_get(), credentials->ssid, credentials->psk, secure_type);
 8013822:	f7f5 fc4f 	bl	80090c4 <wifi_obj_get>
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	6819      	ldr	r1, [r3, #0]
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	685a      	ldr	r2, [r3, #4]
 801382e:	7bfb      	ldrb	r3, [r7, #15]
 8013830:	f7f3 fcd1 	bl	80071d6 <MX_WIFI_Connect>
 8013834:	4603      	mov	r3, r0
 8013836:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8013838:	697b      	ldr	r3, [r7, #20]
}
 801383a:	4618      	mov	r0, r3
 801383c:	3718      	adds	r7, #24
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	080135fb 	.word	0x080135fb
 8013848:	10000004 	.word	0x10000004

0801384c <mx_wifi_if_start_softap>:
  * @brief                   Mxchip WiFi start AP mode
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_softap(net_if_handle_t *pnetif)
{
 801384c:	b590      	push	{r4, r7, lr}
 801384e:	b0b3      	sub	sp, #204	@ 0xcc
 8013850:	af04      	add	r7, sp, #16
 8013852:	6078      	str	r0, [r7, #4]
  (void)pnetif;
  /* This is independent of what is supported by IP stack IPv6 or Ipv4 */
  return NET_ERROR_UNSUPPORTED;

#else
  int32_t ret = NET_ERROR_GENERIC;
 8013854:	f06f 031c 	mvn.w	r3, #28
 8013858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  MX_WIFI_APSettings_t ap_cfg = {0};
 801385c:	f107 030c 	add.w	r3, r7, #12
 8013860:	22a3      	movs	r2, #163	@ 0xa3
 8013862:	2100      	movs	r1, #0
 8013864:	4618      	mov	r0, r3
 8013866:	f001 fe87 	bl	8015578 <memset>
  const net_wifi_credentials_t *const credentials = pnetif->pdrv->extension.wifi->credentials;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  if (credentials != NULL)
 8013878:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d012      	beq.n	80138a6 <mx_wifi_if_start_softap+0x5a>
  {
    (void)strncpy(ap_cfg.SSID, credentials->ssid, sizeof(ap_cfg.SSID));
 8013880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013884:	6819      	ldr	r1, [r3, #0]
 8013886:	f107 030c 	add.w	r3, r7, #12
 801388a:	2221      	movs	r2, #33	@ 0x21
 801388c:	4618      	mov	r0, r3
 801388e:	f001 fe9c 	bl	80155ca <strncpy>
    (void)strncpy(ap_cfg.pswd, credentials->psk, sizeof(ap_cfg.pswd));
 8013892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013896:	6859      	ldr	r1, [r3, #4]
 8013898:	f107 030c 	add.w	r3, r7, #12
 801389c:	3321      	adds	r3, #33	@ 0x21
 801389e:	2241      	movs	r2, #65	@ 0x41
 80138a0:	4618      	mov	r0, r3
 80138a2:	f001 fe92 	bl	80155ca <strncpy>
  }

  ap_cfg.channel = pnetif->pdrv->extension.wifi->access_channel;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80138ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138ae:	7f5b      	ldrb	r3, [r3, #29]
 80138b0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_dnserver.u_addr.ip4.addr));

#else
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_ipaddr.addr));
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	691b      	ldr	r3, [r3, #16]
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138b8:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_ipaddr.addr));
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	691b      	ldr	r3, [r3, #16]
 80138be:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138c0:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_ipaddr.addr));
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	6912      	ldr	r2, [r2, #16]
 80138c6:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138c8:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_ipaddr.addr));
 80138ca:	6879      	ldr	r1, [r7, #4]
 80138cc:	6909      	ldr	r1, [r1, #16]
 80138ce:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.localip, sizeof(ap_cfg.ip.localip), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138d0:	f107 000c 	add.w	r0, r7, #12
 80138d4:	3063      	adds	r0, #99	@ 0x63
 80138d6:	9102      	str	r1, [sp, #8]
 80138d8:	9201      	str	r2, [sp, #4]
 80138da:	9300      	str	r3, [sp, #0]
 80138dc:	4623      	mov	r3, r4
 80138de:	4a3a      	ldr	r2, [pc, #232]	@ (80139c8 <mx_wifi_if_start_softap+0x17c>)
 80138e0:	2110      	movs	r1, #16
 80138e2:	f001 fcc7 	bl	8015274 <sniprintf>
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_gateway.addr));
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	695b      	ldr	r3, [r3, #20]
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138ea:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_gateway.addr));
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	695b      	ldr	r3, [r3, #20]
 80138f0:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138f2:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_gateway.addr));
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	6952      	ldr	r2, [r2, #20]
 80138f8:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 80138fa:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_gateway.addr));
 80138fc:	6879      	ldr	r1, [r7, #4]
 80138fe:	6949      	ldr	r1, [r1, #20]
 8013900:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.gateway, sizeof(ap_cfg.ip.gateway), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8013902:	f107 000c 	add.w	r0, r7, #12
 8013906:	3083      	adds	r0, #131	@ 0x83
 8013908:	9102      	str	r1, [sp, #8]
 801390a:	9201      	str	r2, [sp, #4]
 801390c:	9300      	str	r3, [sp, #0]
 801390e:	4623      	mov	r3, r4
 8013910:	4a2d      	ldr	r2, [pc, #180]	@ (80139c8 <mx_wifi_if_start_softap+0x17c>)
 8013912:	2110      	movs	r1, #16
 8013914:	f001 fcae 	bl	8015274 <sniprintf>
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_netmask.addr));
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	699b      	ldr	r3, [r3, #24]
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801391c:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_netmask.addr));
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	699b      	ldr	r3, [r3, #24]
 8013922:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8013924:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_netmask.addr));
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	6992      	ldr	r2, [r2, #24]
 801392a:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801392c:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_netmask.addr));
 801392e:	6879      	ldr	r1, [r7, #4]
 8013930:	6989      	ldr	r1, [r1, #24]
 8013932:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.netmask, sizeof(ap_cfg.ip.netmask), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8013934:	f107 000c 	add.w	r0, r7, #12
 8013938:	3073      	adds	r0, #115	@ 0x73
 801393a:	9102      	str	r1, [sp, #8]
 801393c:	9201      	str	r2, [sp, #4]
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	4623      	mov	r3, r4
 8013942:	4a21      	ldr	r2, [pc, #132]	@ (80139c8 <mx_wifi_if_start_softap+0x17c>)
 8013944:	2110      	movs	r1, #16
 8013946:	f001 fc95 	bl	8015274 <sniprintf>
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
                 ADDR(pnetif->static_dnserver.addr));
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	69db      	ldr	r3, [r3, #28]
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801394e:	b2dc      	uxtb	r4, r3
                 ADDR(pnetif->static_dnserver.addr));
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	0a1b      	lsrs	r3, r3, #8
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8013956:	b2db      	uxtb	r3, r3
                 ADDR(pnetif->static_dnserver.addr));
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	69d2      	ldr	r2, [r2, #28]
 801395c:	0c12      	lsrs	r2, r2, #16
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 801395e:	b2d2      	uxtb	r2, r2
                 ADDR(pnetif->static_dnserver.addr));
 8013960:	6879      	ldr	r1, [r7, #4]
 8013962:	69c9      	ldr	r1, [r1, #28]
 8013964:	0e09      	lsrs	r1, r1, #24
  (void)snprintf(ap_cfg.ip.dnserver, sizeof(ap_cfg.ip.dnserver), "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"",
 8013966:	f107 000c 	add.w	r0, r7, #12
 801396a:	3093      	adds	r0, #147	@ 0x93
 801396c:	9102      	str	r1, [sp, #8]
 801396e:	9201      	str	r2, [sp, #4]
 8013970:	9300      	str	r3, [sp, #0]
 8013972:	4623      	mov	r3, r4
 8013974:	4a14      	ldr	r2, [pc, #80]	@ (80139c8 <mx_wifi_if_start_softap+0x17c>)
 8013976:	2110      	movs	r1, #16
 8013978:	f001 fc7c 	bl	8015274 <sniprintf>
#endif /* NET_USE_LWIP_DEFINITIONS */

  (void)MX_WIFI_RegisterStatusCallback_if(wifi_obj_get(), mx_wifi_status_changed, pnetif, MC_SOFTAP);
 801397c:	f7f5 fba2 	bl	80090c4 <wifi_obj_get>
 8013980:	2300      	movs	r3, #0
 8013982:	687a      	ldr	r2, [r7, #4]
 8013984:	4911      	ldr	r1, [pc, #68]	@ (80139cc <mx_wifi_if_start_softap+0x180>)
 8013986:	f7f3 fbfb 	bl	8007180 <MX_WIFI_RegisterStatusCallback_if>

  if (MX_WIFI_STATUS_OK == MX_WIFI_StartAP(wifi_obj_get(), &ap_cfg))
 801398a:	f7f5 fb9b 	bl	80090c4 <wifi_obj_get>
 801398e:	4602      	mov	r2, r0
 8013990:	f107 030c 	add.w	r3, r7, #12
 8013994:	4619      	mov	r1, r3
 8013996:	4610      	mov	r0, r2
 8013998:	f7f3 fe42 	bl	8007620 <MX_WIFI_StartAP>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d10b      	bne.n	80139ba <mx_wifi_if_start_softap+0x16e>
  {
    /* Soft AP MAC must get after Soft AP up, call this one to update SysInfo.apMAC. */
    (void)MX_WIFI_GetsoftapMACAddress(wifi_obj_get(), pnetif->macaddr.mac);
 80139a2:	f7f5 fb8f 	bl	80090c4 <wifi_obj_get>
 80139a6:	4602      	mov	r2, r0
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	33e5      	adds	r3, #229	@ 0xe5
 80139ac:	4619      	mov	r1, r3
 80139ae:	4610      	mov	r0, r2
 80139b0:	f7f3 fb12 	bl	8006fd8 <MX_WIFI_GetsoftapMACAddress>

    ret = NET_OK;
 80139b4:	2300      	movs	r3, #0
 80139b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  return ret;
 80139ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
#endif /* NET_USE_IPV6 */
}
 80139be:	4618      	mov	r0, r3
 80139c0:	37bc      	adds	r7, #188	@ 0xbc
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd90      	pop	{r4, r7, pc}
 80139c6:	bf00      	nop
 80139c8:	0801ab94 	.word	0x0801ab94
 80139cc:	080135fb 	.word	0x080135fb

080139d0 <mx_wifi_if_disconnect>:
  * @brief                   Mxchip WiFi disconnect from AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_disconnect(net_if_handle_t *pnetif)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
      (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
    }
  }

#else
  ret = NET_OK;
 80139d8:	2300      	movs	r3, #0
 80139da:	60fb      	str	r3, [r7, #12]
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 80139dc:	2107      	movs	r1, #7
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f7ff fba0 	bl	8013124 <net_state_manage_event>
#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return ret;
 80139e4:	68fb      	ldr	r3, [r7, #12]
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3710      	adds	r7, #16
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}

080139ee <mx_wifi_if_connect>:
  * @brief                   Mxchip WiFi start IP services
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_connect(net_if_handle_t *pnetif)
{
 80139ee:	b590      	push	{r4, r7, lr}
 80139f0:	b087      	sub	sp, #28
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
    NET_DBG_ERROR("Can't add interface (netif)\n");
  }

#else
  mwifi_if_t wifi_mode;
  bool ip_got_flag = false;
 80139f6:	2300      	movs	r3, #0
 80139f8:	74bb      	strb	r3, [r7, #18]

  ret = NET_OK;
 80139fa:	2300      	movs	r3, #0
 80139fc:	617b      	str	r3, [r7, #20]

  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_AP)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a06:	7f1b      	ldrb	r3, [r3, #28]
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d102      	bne.n	8013a12 <mx_wifi_if_connect+0x24>
  {
    wifi_mode = MC_SOFTAP;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	74fb      	strb	r3, [r7, #19]
 8013a10:	e001      	b.n	8013a16 <mx_wifi_if_connect+0x28>
  }
  else
  {
    wifi_mode = MC_STATION;
 8013a12:	2301      	movs	r3, #1
 8013a14:	74fb      	strb	r3, [r7, #19]
    }
  }

#else
  {
    uint8_t ip[4] = {0};
 8013a16:	2300      	movs	r3, #0
 8013a18:	60bb      	str	r3, [r7, #8]
    int32_t retry = 3;
 8013a1a:	2303      	movs	r3, #3
 8013a1c:	60fb      	str	r3, [r7, #12]
    while (retry > 0)
 8013a1e:	e070      	b.n	8013b02 <mx_wifi_if_connect+0x114>
    {
      retry--;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	3b01      	subs	r3, #1
 8013a24:	60fb      	str	r3, [r7, #12]
      if (MX_WIFI_STATUS_OK == MX_WIFI_GetIPAddress(wifi_obj_get(), &ip[0], wifi_mode))
 8013a26:	f7f5 fb4d 	bl	80090c4 <wifi_obj_get>
 8013a2a:	7cfa      	ldrb	r2, [r7, #19]
 8013a2c:	f107 0308 	add.w	r3, r7, #8
 8013a30:	4619      	mov	r1, r3
 8013a32:	f7f3 fd7a 	bl	800752a <MX_WIFI_GetIPAddress>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d15b      	bne.n	8013af4 <mx_wifi_if_connect+0x106>
        pnetif->ipaddr.type = (u8_t)IPADDR_TYPE_V4;
        pnetif->ipaddr.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
        pnetif->netmask.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
        pnetif->gateway.u_addr.ip4.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
#else
        pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 8013a3c:	f7f5 fb42 	bl	80090c4 <wifi_obj_get>
 8013a40:	4603      	mov	r3, r0
 8013a42:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8013a46:	061c      	lsls	r4, r3, #24
 8013a48:	f7f5 fb3c 	bl	80090c4 <wifi_obj_get>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8013a52:	041b      	lsls	r3, r3, #16
 8013a54:	431c      	orrs	r4, r3
 8013a56:	f7f5 fb35 	bl	80090c4 <wifi_obj_get>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8013a60:	021b      	lsls	r3, r3, #8
 8013a62:	431c      	orrs	r4, r3
 8013a64:	f7f5 fb2e 	bl	80090c4 <wifi_obj_get>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8013a6e:	ea44 0203 	orr.w	r2, r4, r3
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 8013a76:	f7f5 fb25 	bl	80090c4 <wifi_obj_get>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8013a80:	061c      	lsls	r4, r3, #24
 8013a82:	f7f5 fb1f 	bl	80090c4 <wifi_obj_get>
 8013a86:	4603      	mov	r3, r0
 8013a88:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 8013a8c:	041b      	lsls	r3, r3, #16
 8013a8e:	431c      	orrs	r4, r3
 8013a90:	f7f5 fb18 	bl	80090c4 <wifi_obj_get>
 8013a94:	4603      	mov	r3, r0
 8013a96:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8013a9a:	021b      	lsls	r3, r3, #8
 8013a9c:	431c      	orrs	r4, r3
 8013a9e:	f7f5 fb11 	bl	80090c4 <wifi_obj_get>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8013aa8:	ea44 0203 	orr.w	r2, r4, r3
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 8013ab0:	f7f5 fb08 	bl	80090c4 <wifi_obj_get>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8013aba:	061c      	lsls	r4, r3, #24
 8013abc:	f7f5 fb02 	bl	80090c4 <wifi_obj_get>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8013ac6:	041b      	lsls	r3, r3, #16
 8013ac8:	431c      	orrs	r4, r3
 8013aca:	f7f5 fafb 	bl	80090c4 <wifi_obj_get>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8013ad4:	021b      	lsls	r3, r3, #8
 8013ad6:	431c      	orrs	r4, r3
 8013ad8:	f7f5 faf4 	bl	80090c4 <wifi_obj_get>
 8013adc:	4603      	mov	r3, r0
 8013ade:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8013ae2:	ea44 0203 	orr.w	r2, r4, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	609a      	str	r2, [r3, #8]
#endif /* NET_USE_LWIP_DEFINITIONS */

        ip_got_flag = true;
 8013aea:	2301      	movs	r3, #1
 8013aec:	74bb      	strb	r3, [r7, #18]
        ret = NET_OK;
 8013aee:	2300      	movs	r3, #0
 8013af0:	617b      	str	r3, [r7, #20]
        break;
 8013af2:	e009      	b.n	8013b08 <mx_wifi_if_connect+0x11a>
      }
      else
      {
        ret = NET_ERROR_NO_ADDRESS;
 8013af4:	f06f 0306 	mvn.w	r3, #6
 8013af8:	617b      	str	r3, [r7, #20]
        DELAY_MS(1000);
 8013afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013afe:	f7f5 fbe1 	bl	80092c4 <HAL_Delay>
    while (retry > 0)
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	dc8b      	bgt.n	8013a20 <mx_wifi_if_connect+0x32>
    }
  }
#endif  /* NET_USE_IPV6 */


  if (ip_got_flag)
 8013b08:	7cbb      	ldrb	r3, [r7, #18]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d003      	beq.n	8013b16 <mx_wifi_if_connect+0x128>
  {
    (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8013b0e:	210a      	movs	r1, #10
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7ff fb07 	bl	8013124 <net_state_manage_event>
  }

#endif /* (MX_WIFI_NETWORK_BYPASS_MODE == 1) */

  return ret;
 8013b16:	697b      	ldr	r3, [r7, #20]
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	371c      	adds	r7, #28
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd90      	pop	{r4, r7, pc}

08013b20 <mx_wifi_scan>:
  * @param  mode             scan mode
  * @param  ssid             SSID to scan in active mode
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b086      	sub	sp, #24
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	607a      	str	r2, [r7, #4]
 8013b2c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;
  uint32_t len = 0u;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	617b      	str	r3, [r7, #20]

  (void) pnetif;

  if (ssid != NULL)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d003      	beq.n	8013b40 <mx_wifi_scan+0x20>
  {
    len = strlen(ssid);
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f7ec fba7 	bl	800028c <strlen>
 8013b3e:	6178      	str	r0, [r7, #20]
  }
  ret = MX_WIFI_Scan(wifi_obj_get(), (uint8_t)mode, ssid, (int32_t) len);
 8013b40:	f7f5 fac0 	bl	80090c4 <wifi_obj_get>
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	7af9      	ldrb	r1, [r7, #11]
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	f7f3 fa7d 	bl	8007048 <MX_WIFI_Scan>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	613b      	str	r3, [r7, #16]
  return ret;
 8013b52:	693b      	ldr	r3, [r7, #16]
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3718      	adds	r7, #24
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <mx_wifi_get_scan_result>:
  * @param  scan_bss_count       BSS count
  * @return int32_t              The number of BSS obtained
  */
static int32_t mx_wifi_get_scan_result(net_if_handle_t *pnetif, net_wifi_scan_results_t *scan_bss_array,
                                       uint8_t scan_bss_count)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08a      	sub	sp, #40	@ 0x28
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	4613      	mov	r3, r2
 8013b68:	71fb      	strb	r3, [r7, #7]
  int32_t ret = NET_ERROR_PARAMETER;
 8013b6a:	f06f 0303 	mvn.w	r3, #3
 8013b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    NET_WIFI_SM_WPA2_MIXED_PSK  /**< WPA2 /w AES or TKIP */
  };

  (void)pnetif;

  if ((NULL != scan_bss_array) && (0u != scan_bss_count))
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d074      	beq.n	8013c60 <mx_wifi_get_scan_result+0x104>
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d071      	beq.n	8013c60 <mx_wifi_get_scan_result+0x104>
  {
    /* Create buffer for results. */
    mwifi_ap_info_t *ap_infos_tmp = (mwifi_ap_info_t *)NET_CALLOC(scan_bss_count, sizeof(*ap_infos_tmp));
 8013b7c:	79fb      	ldrb	r3, [r7, #7]
 8013b7e:	2130      	movs	r1, #48	@ 0x30
 8013b80:	4618      	mov	r0, r3
 8013b82:	f000 fa3b 	bl	8013ffc <calloc>
 8013b86:	4603      	mov	r3, r0
 8013b88:	617b      	str	r3, [r7, #20]

    if (NULL == ap_infos_tmp)
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d103      	bne.n	8013b98 <mx_wifi_get_scan_result+0x3c>
    {
      ret = NET_ERROR_NO_MEMORY;
 8013b90:	f06f 0307 	mvn.w	r3, #7
 8013b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b96:	e063      	b.n	8013c60 <mx_wifi_get_scan_result+0x104>
    }
    else
    {
      /* Get real mx_wifi scan results data. */
      const int8_t number = MX_WIFI_Get_scan_result(wifi_obj_get(), (uint8_t *) ap_infos_tmp, scan_bss_count);
 8013b98:	f7f5 fa94 	bl	80090c4 <wifi_obj_get>
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	6979      	ldr	r1, [r7, #20]
 8013ba2:	f7f3 fac1 	bl	8007128 <MX_WIFI_Get_scan_result>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	74fb      	strb	r3, [r7, #19]

      /* transfer to ST bss info */
      {
        mwifi_ap_info_t *ap_info = ap_infos_tmp;
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	623b      	str	r3, [r7, #32]
        net_wifi_scan_bss_t *scan_bss = scan_bss_array;
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	61fb      	str	r3, [r7, #28]

        for (int8_t i = 0U; i < number; i++)
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	76fb      	strb	r3, [r7, #27]
 8013bb6:	e047      	b.n	8013c48 <mx_wifi_get_scan_result+0xec>
        {
          (void) memset(scan_bss, 0, sizeof(*scan_bss));
 8013bb8:	2234      	movs	r2, #52	@ 0x34
 8013bba:	2100      	movs	r1, #0
 8013bbc:	69f8      	ldr	r0, [r7, #28]
 8013bbe:	f001 fcdb 	bl	8015578 <memset>
          (void) memcpy(scan_bss->ssid.value, ap_info->ssid, NET_WIFI_MAX_SSID_SIZE);
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	1c58      	adds	r0, r3, #1
 8013bc6:	6a3b      	ldr	r3, [r7, #32]
 8013bc8:	3304      	adds	r3, #4
 8013bca:	2220      	movs	r2, #32
 8013bcc:	4619      	mov	r1, r3
 8013bce:	f001 fdac 	bl	801572a <memcpy>
          scan_bss->ssid.length = (uint8_t) strlen(ap_info->ssid);
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ec fb58 	bl	800028c <strlen>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	b2da      	uxtb	r2, r3
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	701a      	strb	r2, [r3, #0]
          scan_bss->security = mxsec[ap_info->security];
 8013be4:	6a3b      	ldr	r3, [r7, #32]
 8013be6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013bea:	461a      	mov	r2, r3
 8013bec:	4b1f      	ldr	r3, [pc, #124]	@ (8013c6c <mx_wifi_get_scan_result+0x110>)
 8013bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	629a      	str	r2, [r3, #40]	@ 0x28
          (void) memcpy(&scan_bss->bssid, ap_info->bssid, NET_WIFI_MAC_ADDRESS_SIZE);
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	f103 0021 	add.w	r0, r3, #33	@ 0x21
 8013bfc:	6a3b      	ldr	r3, [r7, #32]
 8013bfe:	3325      	adds	r3, #37	@ 0x25
 8013c00:	2206      	movs	r2, #6
 8013c02:	4619      	mov	r1, r3
 8013c04:	f001 fd91 	bl	801572a <memcpy>
          scan_bss->rssi = (int8_t)ap_info->rssi;
 8013c08:	6a3b      	ldr	r3, [r7, #32]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	b25a      	sxtb	r2, r3
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
          scan_bss->channel = (uint8_t) ap_info->channel;
 8013c14:	6a3b      	ldr	r3, [r7, #32]
 8013c16:	f8d3 302b 	ldr.w	r3, [r3, #43]	@ 0x2b
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
          (void) memcpy(scan_bss->country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	332d      	adds	r3, #45	@ 0x2d
 8013c26:	2204      	movs	r2, #4
 8013c28:	4911      	ldr	r1, [pc, #68]	@ (8013c70 <mx_wifi_get_scan_result+0x114>)
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f001 fd7d 	bl	801572a <memcpy>

          scan_bss++;
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	3334      	adds	r3, #52	@ 0x34
 8013c34:	61fb      	str	r3, [r7, #28]
          ap_info++;
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	3330      	adds	r3, #48	@ 0x30
 8013c3a:	623b      	str	r3, [r7, #32]
        for (int8_t i = 0U; i < number; i++)
 8013c3c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013c40:	b2db      	uxtb	r3, r3
 8013c42:	3301      	adds	r3, #1
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	76fb      	strb	r3, [r7, #27]
 8013c48:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8013c4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	dbb1      	blt.n	8013bb8 <mx_wifi_get_scan_result+0x5c>
        }
      }
      ret = (int32_t) number;
 8013c54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c58:	627b      	str	r3, [r7, #36]	@ 0x24
      NET_FREE(ap_infos_tmp);
 8013c5a:	6978      	ldr	r0, [r7, #20]
 8013c5c:	f000 f9f2 	bl	8014044 <free>
    }
  }
  return ret;
 8013c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3728      	adds	r7, #40	@ 0x28
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
 8013c6a:	bf00      	nop
 8013c6c:	0818ca4c 	.word	0x0818ca4c
 8013c70:	0801aba4 	.word	0x0801aba4

08013c74 <mx_wifi_socket>:
  * @param  type             socket type
  * @param  protocol         socket protocol
  * @return int32_t          socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_socket(int32_t domain, int32_t type, int32_t protocol)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_create(wifi_obj_get(), domain, type, protocol);
 8013c80:	f7f5 fa20 	bl	80090c4 <wifi_obj_get>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	68ba      	ldr	r2, [r7, #8]
 8013c88:	68f9      	ldr	r1, [r7, #12]
 8013c8a:	f7f3 fd6a 	bl	8007762 <MX_WIFI_Socket_create>
 8013c8e:	6178      	str	r0, [r7, #20]
  return ret;
 8013c90:	697b      	ldr	r3, [r7, #20]
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3718      	adds	r7, #24
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}

08013c9a <mx_wifi_setsockopt>:
  * @param  optvalue         socket option value to set
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed, return error code(< 0)
  */
static int32_t mx_wifi_setsockopt(int32_t sock, int32_t level, int32_t optname, const void *optvalue, uint32_t optlen)
{
 8013c9a:	b580      	push	{r7, lr}
 8013c9c:	b088      	sub	sp, #32
 8013c9e:	af02      	add	r7, sp, #8
 8013ca0:	60f8      	str	r0, [r7, #12]
 8013ca2:	60b9      	str	r1, [r7, #8]
 8013ca4:	607a      	str	r2, [r7, #4]
 8013ca6:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_OK;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	617b      	str	r3, [r7, #20]
  /* Handle setsockopt forwarded by ST NetworkLibrary API. */
  /**
    * Note: bind device option is not used for the mxchip WiFi module,
    *       the module select the net interface by the socket address internally.
    */
  if (NET_SO_BINDTODEVICE != optname)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b03      	cmp	r3, #3
 8013cb0:	d00b      	beq.n	8013cca <mx_wifi_setsockopt+0x30>
  {
    ret = MX_WIFI_Socket_setsockopt(wifi_obj_get(), sock, level, optname, optvalue, (int32_t)optlen);
 8013cb2:	f7f5 fa07 	bl	80090c4 <wifi_obj_get>
 8013cb6:	6a3b      	ldr	r3, [r7, #32]
 8013cb8:	9301      	str	r3, [sp, #4]
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	9300      	str	r3, [sp, #0]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	68ba      	ldr	r2, [r7, #8]
 8013cc2:	68f9      	ldr	r1, [r7, #12]
 8013cc4:	f7f3 fd86 	bl	80077d4 <MX_WIFI_Socket_setsockopt>
 8013cc8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8013cca:	697b      	ldr	r3, [r7, #20]
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3718      	adds	r7, #24
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <mx_wifi_getsockopt>:
  * @param  optvalue         socket option value
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_getsockopt(int32_t sock, int32_t level, int32_t optname, void *optvalue, uint32_t *optlen)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b088      	sub	sp, #32
 8013cd8:	af02      	add	r7, sp, #8
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	60b9      	str	r1, [r7, #8]
 8013cde:	607a      	str	r2, [r7, #4]
 8013ce0:	603b      	str	r3, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_getsockopt(wifi_obj_get(), sock, level, optname, optvalue, optlen);
 8013ce2:	f7f5 f9ef 	bl	80090c4 <wifi_obj_get>
 8013ce6:	6a3b      	ldr	r3, [r7, #32]
 8013ce8:	9301      	str	r3, [sp, #4]
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	68ba      	ldr	r2, [r7, #8]
 8013cf2:	68f9      	ldr	r1, [r7, #12]
 8013cf4:	f7f3 fdc6 	bl	8007884 <MX_WIFI_Socket_getsockopt>
 8013cf8:	6178      	str	r0, [r7, #20]

  return ret;
 8013cfa:	697b      	ldr	r3, [r7, #20]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <mx_wifi_bind>:
  * @param  addr             address to bind
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed, return error code(<0)
  */
static int32_t mx_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	607a      	str	r2, [r7, #4]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8013d10:	f04f 33ff 	mov.w	r3, #4294967295
 8013d14:	617b      	str	r3, [r7, #20]

  if (NULL != addr)
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00d      	beq.n	8013d38 <mx_wifi_bind+0x34>
  {
    if ((addrlen == sizeof(struct mx_sockaddr_in6)) || (addrlen == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b1c      	cmp	r3, #28
 8013d20:	d002      	beq.n	8013d28 <mx_wifi_bind+0x24>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2b10      	cmp	r3, #16
 8013d26:	d107      	bne.n	8013d38 <mx_wifi_bind+0x34>
    {
      ret = MX_WIFI_Socket_bind(wifi_obj_get(), sock, (const struct mx_sockaddr *)addr, (int32_t)addrlen);
 8013d28:	f7f5 f9cc 	bl	80090c4 <wifi_obj_get>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	68f9      	ldr	r1, [r7, #12]
 8013d32:	f7f3 fe09 	bl	8007948 <MX_WIFI_Socket_bind>
 8013d36:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8013d38:	697b      	ldr	r3, [r7, #20]
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3718      	adds	r7, #24
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <mx_wifi_listen>:
  * @param  sock             socket value
  * @param  backlog          max socket to accept
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_listen(int32_t sock, int32_t backlog)
{
 8013d42:	b580      	push	{r7, lr}
 8013d44:	b084      	sub	sp, #16
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
 8013d4a:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_listen(wifi_obj_get(), sock, backlog);
 8013d4c:	f7f5 f9ba 	bl	80090c4 <wifi_obj_get>
 8013d50:	4603      	mov	r3, r0
 8013d52:	683a      	ldr	r2, [r7, #0]
 8013d54:	6879      	ldr	r1, [r7, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f3 fe81 	bl	8007a5e <MX_WIFI_Socket_listen>
 8013d5c:	60f8      	str	r0, [r7, #12]

  return ret;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <mx_wifi_accept>:
  * @param  addr             address buffer to accept new socket
  * @param  addrlen          address buffer length
  * @return int32_t          accepted socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	60b9      	str	r1, [r7, #8]
 8013d72:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_accept(wifi_obj_get(), sock, (struct mx_sockaddr *)addr, addrlen);
 8013d74:	f7f5 f9a6 	bl	80090c4 <wifi_obj_get>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68ba      	ldr	r2, [r7, #8]
 8013d7c:	68f9      	ldr	r1, [r7, #12]
 8013d7e:	f7f3 feb2 	bl	8007ae6 <MX_WIFI_Socket_accept>
 8013d82:	6178      	str	r0, [r7, #20]

  return ret;
 8013d84:	697b      	ldr	r3, [r7, #20]
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3718      	adds	r7, #24
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <mx_wifi_connect>:
  * @param  addr             address to connect
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_connect(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b086      	sub	sp, #24
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	60f8      	str	r0, [r7, #12]
 8013d96:	60b9      	str	r1, [r7, #8]
 8013d98:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_connect(wifi_obj_get(), sock, (const struct mx_sockaddr *)addr, (int32_t)addrlen);
 8013d9a:	f7f5 f993 	bl	80090c4 <wifi_obj_get>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	68ba      	ldr	r2, [r7, #8]
 8013da2:	68f9      	ldr	r1, [r7, #12]
 8013da4:	f7f3 ff27 	bl	8007bf6 <MX_WIFI_Socket_connect>
 8013da8:	6178      	str	r0, [r7, #20]

  return ret;
 8013daa:	697b      	ldr	r3, [r7, #20]
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3718      	adds	r7, #24
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <mx_wifi_shutdown>:
  * @param  sock             socket value
  * @param  mode             shutdown mode (0: stop receiving, 1: stop sending, 2: stop send and receive)
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_shutdown(int32_t sock, int32_t mode)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_shutdown(wifi_obj_get(), sock, mode);
 8013dbe:	f7f5 f981 	bl	80090c4 <wifi_obj_get>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	6879      	ldr	r1, [r7, #4]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7f3 ff9c 	bl	8007d06 <MX_WIFI_Socket_shutdown>
 8013dce:	60f8      	str	r0, [r7, #12]

  return ret;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <mx_wifi_close>:
  * @param  sock             socket value
  * @param  isaclone         not supported, just compliant for ST connect lib
  * @return int32_t          0 if success, if failed return error code (<0)
  */
static int32_t mx_wifi_close(int32_t sock, bool isaclone)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b084      	sub	sp, #16
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	460b      	mov	r3, r1
 8013de4:	70fb      	strb	r3, [r7, #3]
  const int32_t ret = MX_WIFI_Socket_close(wifi_obj_get(), sock);
 8013de6:	f7f5 f96d 	bl	80090c4 <wifi_obj_get>
 8013dea:	4603      	mov	r3, r0
 8013dec:	6879      	ldr	r1, [r7, #4]
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7f3 ffc9 	bl	8007d86 <MX_WIFI_Socket_close>
 8013df4:	60f8      	str	r0, [r7, #12]

  (void)isaclone;

  return ret;
 8013df6:	68fb      	ldr	r3, [r7, #12]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3710      	adds	r7, #16
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <mx_wifi_send>:
  * @param  len              data length
  * @param  flags            socket flag
  * @return int32_t          bytes sent, if failed return error code(<0)
  */
static int32_t mx_wifi_send(int32_t sock, const uint8_t *buf, int32_t len, int32_t flags)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b088      	sub	sp, #32
 8013e04:	af02      	add	r7, sp, #8
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
 8013e0c:	603b      	str	r3, [r7, #0]
  const int32_t ret = MX_WIFI_Socket_send(wifi_obj_get(), sock, buf, len, flags);
 8013e0e:	f7f5 f959 	bl	80090c4 <wifi_obj_get>
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	68ba      	ldr	r2, [r7, #8]
 8013e1a:	68f9      	ldr	r1, [r7, #12]
 8013e1c:	f7f3 ffeb 	bl	8007df6 <MX_WIFI_Socket_send>
 8013e20:	6178      	str	r0, [r7, #20]

  return ret;
 8013e22:	697b      	ldr	r3, [r7, #20]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3718      	adds	r7, #24
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <mx_wifi_recv>:
  * @param  len              buffer size
  * @param  flags            socket flag
  * @return int32_t          bytes received, if failed return error code(<0)
  */
static int32_t mx_wifi_recv(int32_t sock, uint8_t *buf, int32_t len, int32_t flags)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b088      	sub	sp, #32
 8013e30:	af02      	add	r7, sp, #8
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_Socket_recv(wifi_obj_get(), sock, buf, len, flags);
 8013e3a:	f7f5 f943 	bl	80090c4 <wifi_obj_get>
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	68ba      	ldr	r2, [r7, #8]
 8013e46:	68f9      	ldr	r1, [r7, #12]
 8013e48:	f7f4 f8f2 	bl	8008030 <MX_WIFI_Socket_recv>
 8013e4c:	6178      	str	r0, [r7, #20]

  if (MX_WIFI_STATUS_OK != ret)
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d006      	beq.n	8013e62 <mx_wifi_recv+0x36>
  {
    if (MX_WIFI_STATUS_TIMEOUT == ret)
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	f113 0f02 	cmn.w	r3, #2
 8013e5a:	d102      	bne.n	8013e62 <mx_wifi_recv+0x36>
    {
      ret = NET_TIMEOUT;
 8013e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e60:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8013e62:	697b      	ldr	r3, [r7, #20]
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3718      	adds	r7, #24
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <mx_wifi_sendto>:
  * @param  to_len           size of address to send to
  * @return int32_t          bytes sent. If failed return error code(<0)
  */
static int32_t mx_wifi_sendto(int32_t sock, const uint8_t *buf, int32_t len, int32_t flags,
                              net_sockaddr_t *to, uint32_t to_len)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b08a      	sub	sp, #40	@ 0x28
 8013e70:	af04      	add	r7, sp, #16
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	607a      	str	r2, [r7, #4]
 8013e78:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8013e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e7e:	617b      	str	r3, [r7, #20]

  if (NULL != to)
 8013e80:	6a3b      	ldr	r3, [r7, #32]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d013      	beq.n	8013eae <mx_wifi_sendto+0x42>
  {
    if ((to_len == sizeof(struct mx_sockaddr_in6)) || (to_len == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8013e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e88:	2b1c      	cmp	r3, #28
 8013e8a:	d002      	beq.n	8013e92 <mx_wifi_sendto+0x26>
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e8e:	2b10      	cmp	r3, #16
 8013e90:	d10d      	bne.n	8013eae <mx_wifi_sendto+0x42>
    {
      ret = MX_WIFI_Socket_sendto(wifi_obj_get(), sock, buf, len, flags, (struct mx_sockaddr *)to, (int32_t)to_len);
 8013e92:	f7f5 f917 	bl	80090c4 <wifi_obj_get>
 8013e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e98:	9302      	str	r3, [sp, #8]
 8013e9a:	6a3b      	ldr	r3, [r7, #32]
 8013e9c:	9301      	str	r3, [sp, #4]
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	68ba      	ldr	r2, [r7, #8]
 8013ea6:	68f9      	ldr	r1, [r7, #12]
 8013ea8:	f7f4 f808 	bl	8007ebc <MX_WIFI_Socket_sendto>
 8013eac:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8013eae:	697b      	ldr	r3, [r7, #20]
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3718      	adds	r7, #24
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <mx_wifi_recvfrom>:
  * @param  from_len         size of address
  * @return int32_t          bytes received, if failed, return error code(<0)
  */
static int32_t mx_wifi_recvfrom(int32_t sock, uint8_t *buf, int32_t len, int32_t flags,
                                net_sockaddr_t *from, uint32_t *from_len)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b08a      	sub	sp, #40	@ 0x28
 8013ebc:	af04      	add	r7, sp, #16
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8013ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8013eca:	617b      	str	r3, [r7, #20]

  if ((NULL != from) && (NULL != from_len))
 8013ecc:	6a3b      	ldr	r3, [r7, #32]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d018      	beq.n	8013f04 <mx_wifi_recvfrom+0x4c>
 8013ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d015      	beq.n	8013f04 <mx_wifi_recvfrom+0x4c>
  {
    if ((*from_len == sizeof(struct mx_sockaddr_in6)) || (*from_len == sizeof(struct mx_sockaddr_in /*mx_sockaddr*/)))
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2b1c      	cmp	r3, #28
 8013ede:	d003      	beq.n	8013ee8 <mx_wifi_recvfrom+0x30>
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b10      	cmp	r3, #16
 8013ee6:	d10d      	bne.n	8013f04 <mx_wifi_recvfrom+0x4c>
    {
      ret = MX_WIFI_Socket_recvfrom(wifi_obj_get(), sock, buf, len, flags, (struct mx_sockaddr *)from, from_len);
 8013ee8:	f7f5 f8ec 	bl	80090c4 <wifi_obj_get>
 8013eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eee:	9302      	str	r3, [sp, #8]
 8013ef0:	6a3b      	ldr	r3, [r7, #32]
 8013ef2:	9301      	str	r3, [sp, #4]
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	9300      	str	r3, [sp, #0]
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	68f9      	ldr	r1, [r7, #12]
 8013efe:	f7f4 f910 	bl	8008122 <MX_WIFI_Socket_recvfrom>
 8013f02:	6178      	str	r0, [r7, #20]
    }
  }

  return ret;
 8013f04:	697b      	ldr	r3, [r7, #20]
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3718      	adds	r7, #24
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <mx_wifi_gethostbyname>:
  * @param  addr             address of the host
  * @param  name             host name
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_gethostbyname(net_if_handle_t *pnetif, net_sockaddr_t *addr, char_t *name)
{
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b086      	sub	sp, #24
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	60f8      	str	r0, [r7, #12]
 8013f16:	60b9      	str	r1, [r7, #8]
 8013f18:	607a      	str	r2, [r7, #4]
  }
  else
#endif /* NET_USE_IPV6 */
  {
    /* IPv4 */
    ret = MX_WIFI_Socket_gethostbyname(wifi_obj_get(), (struct mx_sockaddr *)addr, (mx_char_t *)name);
 8013f1a:	f7f5 f8d3 	bl	80090c4 <wifi_obj_get>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	687a      	ldr	r2, [r7, #4]
 8013f22:	68b9      	ldr	r1, [r7, #8]
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7f4 f9d5 	bl	80082d4 <MX_WIFI_Socket_gethostbyname>
 8013f2a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8013f2c:	697b      	ldr	r3, [r7, #20]
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3718      	adds	r7, #24
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <mx_wifi_ping>:
  * @param  response         response array, size is count
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_ping(net_if_handle_t *pnetif, net_sockaddr_t *addr, int32_t count, int32_t delay,
                            int32_t response[])
{
 8013f36:	b590      	push	{r4, r7, lr}
 8013f38:	b08b      	sub	sp, #44	@ 0x2c
 8013f3a:	af02      	add	r7, sp, #8
 8013f3c:	60f8      	str	r0, [r7, #12]
 8013f3e:	60b9      	str	r1, [r7, #8]
 8013f40:	607a      	str	r2, [r7, #4]
 8013f42:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 8013f44:	f04f 33ff 	mov.w	r3, #4294967295
 8013f48:	61fb      	str	r3, [r7, #28]
  net_ip_addr_t ip_addr = {0};
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	617b      	str	r3, [r7, #20]
    ip_addr.type = (u8_t)IPADDR_TYPE_V6;
  }
  else
#endif /* NET_USE_IPV6 */
  {
    const net_sockaddr_in_t * const p_s_addr_in = (net_sockaddr_in_t *)addr;
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	61bb      	str	r3, [r7, #24]

#ifdef NET_USE_LWIP_DEFINITIONS
    ip_addr.u_addr.ip4.addr = p_s_addr_in->sin_addr.s_addr;
#else
    ip_addr.addr = p_s_addr_in->sin_addr.s_addr;
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	617b      	str	r3, [r7, #20]
#endif /* NET_USE_LWIP_DEFINITIONS */
  }

  if (addr->sa_family == NET_AF_INET6)
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	785b      	ldrb	r3, [r3, #1]
 8013f5c:	2b0a      	cmp	r3, #10
 8013f5e:	d111      	bne.n	8013f84 <mx_wifi_ping+0x4e>
  {
    ret = MX_WIFI_Socket_ping6(wifi_obj_get(), (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 8013f60:	f7f5 f8b0 	bl	80090c4 <wifi_obj_get>
 8013f64:	4604      	mov	r4, r0
 8013f66:	f107 0314 	add.w	r3, r7, #20
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fd fcd6 	bl	801191c <net_ntoa>
 8013f70:	4601      	mov	r1, r0
 8013f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f74:	9300      	str	r3, [sp, #0]
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	687a      	ldr	r2, [r7, #4]
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f7f4 fb11 	bl	80085a2 <MX_WIFI_Socket_ping6>
 8013f80:	61f8      	str	r0, [r7, #28]
 8013f82:	e010      	b.n	8013fa6 <mx_wifi_ping+0x70>
  }
  else
  {
    ret = MX_WIFI_Socket_ping(wifi_obj_get(), (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 8013f84:	f7f5 f89e 	bl	80090c4 <wifi_obj_get>
 8013f88:	4604      	mov	r4, r0
 8013f8a:	f107 0314 	add.w	r3, r7, #20
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fd fcc4 	bl	801191c <net_ntoa>
 8013f94:	4601      	mov	r1, r0
 8013f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f98:	9300      	str	r3, [sp, #0]
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f7f4 fa48 	bl	8008434 <MX_WIFI_Socket_ping>
 8013fa4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8013fa6:	69fb      	ldr	r3, [r7, #28]
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3724      	adds	r7, #36	@ 0x24
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd90      	pop	{r4, r7, pc}

08013fb0 <mx_wifi_getsockname>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getsockname(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b086      	sub	sp, #24
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60f8      	str	r0, [r7, #12]
 8013fb8:	60b9      	str	r1, [r7, #8]
 8013fba:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_getsockname(wifi_obj_get(), sock, (struct mx_sockaddr *) name, namelen);
 8013fbc:	f7f5 f882 	bl	80090c4 <wifi_obj_get>
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	68ba      	ldr	r2, [r7, #8]
 8013fc4:	68f9      	ldr	r1, [r7, #12]
 8013fc6:	f7f4 fc02 	bl	80087ce <MX_WIFI_Socket_getsockname>
 8013fca:	6178      	str	r0, [r7, #20]

  return ret;
 8013fcc:	697b      	ldr	r3, [r7, #20]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <mx_wifi_getpeername>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getpeername(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b086      	sub	sp, #24
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	60f8      	str	r0, [r7, #12]
 8013fde:	60b9      	str	r1, [r7, #8]
 8013fe0:	607a      	str	r2, [r7, #4]
  const int32_t ret = MX_WIFI_Socket_getpeername(wifi_obj_get(), sock, (struct mx_sockaddr *) name, namelen);
 8013fe2:	f7f5 f86f 	bl	80090c4 <wifi_obj_get>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	68ba      	ldr	r2, [r7, #8]
 8013fea:	68f9      	ldr	r1, [r7, #12]
 8013fec:	f7f4 fb90 	bl	8008710 <MX_WIFI_Socket_getpeername>
 8013ff0:	6178      	str	r0, [r7, #20]

  return ret;
 8013ff2:	697b      	ldr	r3, [r7, #20]
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3718      	adds	r7, #24
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <calloc>:
 8013ffc:	4b02      	ldr	r3, [pc, #8]	@ (8014008 <calloc+0xc>)
 8013ffe:	460a      	mov	r2, r1
 8014000:	4601      	mov	r1, r0
 8014002:	6818      	ldr	r0, [r3, #0]
 8014004:	f000 b802 	b.w	801400c <_calloc_r>
 8014008:	200000f0 	.word	0x200000f0

0801400c <_calloc_r>:
 801400c:	b570      	push	{r4, r5, r6, lr}
 801400e:	fba1 5402 	umull	r5, r4, r1, r2
 8014012:	b93c      	cbnz	r4, 8014024 <_calloc_r+0x18>
 8014014:	4629      	mov	r1, r5
 8014016:	f000 f83f 	bl	8014098 <_malloc_r>
 801401a:	4606      	mov	r6, r0
 801401c:	b928      	cbnz	r0, 801402a <_calloc_r+0x1e>
 801401e:	2600      	movs	r6, #0
 8014020:	4630      	mov	r0, r6
 8014022:	bd70      	pop	{r4, r5, r6, pc}
 8014024:	220c      	movs	r2, #12
 8014026:	6002      	str	r2, [r0, #0]
 8014028:	e7f9      	b.n	801401e <_calloc_r+0x12>
 801402a:	462a      	mov	r2, r5
 801402c:	4621      	mov	r1, r4
 801402e:	f001 faa3 	bl	8015578 <memset>
 8014032:	e7f5      	b.n	8014020 <_calloc_r+0x14>

08014034 <malloc>:
 8014034:	4b02      	ldr	r3, [pc, #8]	@ (8014040 <malloc+0xc>)
 8014036:	4601      	mov	r1, r0
 8014038:	6818      	ldr	r0, [r3, #0]
 801403a:	f000 b82d 	b.w	8014098 <_malloc_r>
 801403e:	bf00      	nop
 8014040:	200000f0 	.word	0x200000f0

08014044 <free>:
 8014044:	4b02      	ldr	r3, [pc, #8]	@ (8014050 <free+0xc>)
 8014046:	4601      	mov	r1, r0
 8014048:	6818      	ldr	r0, [r3, #0]
 801404a:	f002 b9d5 	b.w	80163f8 <_free_r>
 801404e:	bf00      	nop
 8014050:	200000f0 	.word	0x200000f0

08014054 <sbrk_aligned>:
 8014054:	b570      	push	{r4, r5, r6, lr}
 8014056:	4e0f      	ldr	r6, [pc, #60]	@ (8014094 <sbrk_aligned+0x40>)
 8014058:	460c      	mov	r4, r1
 801405a:	4605      	mov	r5, r0
 801405c:	6831      	ldr	r1, [r6, #0]
 801405e:	b911      	cbnz	r1, 8014066 <sbrk_aligned+0x12>
 8014060:	f001 fafe 	bl	8015660 <_sbrk_r>
 8014064:	6030      	str	r0, [r6, #0]
 8014066:	4621      	mov	r1, r4
 8014068:	4628      	mov	r0, r5
 801406a:	f001 faf9 	bl	8015660 <_sbrk_r>
 801406e:	1c43      	adds	r3, r0, #1
 8014070:	d103      	bne.n	801407a <sbrk_aligned+0x26>
 8014072:	f04f 34ff 	mov.w	r4, #4294967295
 8014076:	4620      	mov	r0, r4
 8014078:	bd70      	pop	{r4, r5, r6, pc}
 801407a:	1cc4      	adds	r4, r0, #3
 801407c:	f024 0403 	bic.w	r4, r4, #3
 8014080:	42a0      	cmp	r0, r4
 8014082:	d0f8      	beq.n	8014076 <sbrk_aligned+0x22>
 8014084:	1a21      	subs	r1, r4, r0
 8014086:	4628      	mov	r0, r5
 8014088:	f001 faea 	bl	8015660 <_sbrk_r>
 801408c:	3001      	adds	r0, #1
 801408e:	d1f2      	bne.n	8014076 <sbrk_aligned+0x22>
 8014090:	e7ef      	b.n	8014072 <sbrk_aligned+0x1e>
 8014092:	bf00      	nop
 8014094:	2000336c 	.word	0x2000336c

08014098 <_malloc_r>:
 8014098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801409c:	1ccd      	adds	r5, r1, #3
 801409e:	4606      	mov	r6, r0
 80140a0:	f025 0503 	bic.w	r5, r5, #3
 80140a4:	3508      	adds	r5, #8
 80140a6:	2d0c      	cmp	r5, #12
 80140a8:	bf38      	it	cc
 80140aa:	250c      	movcc	r5, #12
 80140ac:	2d00      	cmp	r5, #0
 80140ae:	db01      	blt.n	80140b4 <_malloc_r+0x1c>
 80140b0:	42a9      	cmp	r1, r5
 80140b2:	d904      	bls.n	80140be <_malloc_r+0x26>
 80140b4:	230c      	movs	r3, #12
 80140b6:	6033      	str	r3, [r6, #0]
 80140b8:	2000      	movs	r0, #0
 80140ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014194 <_malloc_r+0xfc>
 80140c2:	f000 f869 	bl	8014198 <__malloc_lock>
 80140c6:	f8d8 3000 	ldr.w	r3, [r8]
 80140ca:	461c      	mov	r4, r3
 80140cc:	bb44      	cbnz	r4, 8014120 <_malloc_r+0x88>
 80140ce:	4629      	mov	r1, r5
 80140d0:	4630      	mov	r0, r6
 80140d2:	f7ff ffbf 	bl	8014054 <sbrk_aligned>
 80140d6:	1c43      	adds	r3, r0, #1
 80140d8:	4604      	mov	r4, r0
 80140da:	d158      	bne.n	801418e <_malloc_r+0xf6>
 80140dc:	f8d8 4000 	ldr.w	r4, [r8]
 80140e0:	4627      	mov	r7, r4
 80140e2:	2f00      	cmp	r7, #0
 80140e4:	d143      	bne.n	801416e <_malloc_r+0xd6>
 80140e6:	2c00      	cmp	r4, #0
 80140e8:	d04b      	beq.n	8014182 <_malloc_r+0xea>
 80140ea:	6823      	ldr	r3, [r4, #0]
 80140ec:	4639      	mov	r1, r7
 80140ee:	4630      	mov	r0, r6
 80140f0:	eb04 0903 	add.w	r9, r4, r3
 80140f4:	f001 fab4 	bl	8015660 <_sbrk_r>
 80140f8:	4581      	cmp	r9, r0
 80140fa:	d142      	bne.n	8014182 <_malloc_r+0xea>
 80140fc:	6821      	ldr	r1, [r4, #0]
 80140fe:	4630      	mov	r0, r6
 8014100:	1a6d      	subs	r5, r5, r1
 8014102:	4629      	mov	r1, r5
 8014104:	f7ff ffa6 	bl	8014054 <sbrk_aligned>
 8014108:	3001      	adds	r0, #1
 801410a:	d03a      	beq.n	8014182 <_malloc_r+0xea>
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	442b      	add	r3, r5
 8014110:	6023      	str	r3, [r4, #0]
 8014112:	f8d8 3000 	ldr.w	r3, [r8]
 8014116:	685a      	ldr	r2, [r3, #4]
 8014118:	bb62      	cbnz	r2, 8014174 <_malloc_r+0xdc>
 801411a:	f8c8 7000 	str.w	r7, [r8]
 801411e:	e00f      	b.n	8014140 <_malloc_r+0xa8>
 8014120:	6822      	ldr	r2, [r4, #0]
 8014122:	1b52      	subs	r2, r2, r5
 8014124:	d420      	bmi.n	8014168 <_malloc_r+0xd0>
 8014126:	2a0b      	cmp	r2, #11
 8014128:	d917      	bls.n	801415a <_malloc_r+0xc2>
 801412a:	1961      	adds	r1, r4, r5
 801412c:	42a3      	cmp	r3, r4
 801412e:	6025      	str	r5, [r4, #0]
 8014130:	bf18      	it	ne
 8014132:	6059      	strne	r1, [r3, #4]
 8014134:	6863      	ldr	r3, [r4, #4]
 8014136:	bf08      	it	eq
 8014138:	f8c8 1000 	streq.w	r1, [r8]
 801413c:	5162      	str	r2, [r4, r5]
 801413e:	604b      	str	r3, [r1, #4]
 8014140:	4630      	mov	r0, r6
 8014142:	f000 f82f 	bl	80141a4 <__malloc_unlock>
 8014146:	f104 000b 	add.w	r0, r4, #11
 801414a:	1d23      	adds	r3, r4, #4
 801414c:	f020 0007 	bic.w	r0, r0, #7
 8014150:	1ac2      	subs	r2, r0, r3
 8014152:	bf1c      	itt	ne
 8014154:	1a1b      	subne	r3, r3, r0
 8014156:	50a3      	strne	r3, [r4, r2]
 8014158:	e7af      	b.n	80140ba <_malloc_r+0x22>
 801415a:	6862      	ldr	r2, [r4, #4]
 801415c:	42a3      	cmp	r3, r4
 801415e:	bf0c      	ite	eq
 8014160:	f8c8 2000 	streq.w	r2, [r8]
 8014164:	605a      	strne	r2, [r3, #4]
 8014166:	e7eb      	b.n	8014140 <_malloc_r+0xa8>
 8014168:	4623      	mov	r3, r4
 801416a:	6864      	ldr	r4, [r4, #4]
 801416c:	e7ae      	b.n	80140cc <_malloc_r+0x34>
 801416e:	463c      	mov	r4, r7
 8014170:	687f      	ldr	r7, [r7, #4]
 8014172:	e7b6      	b.n	80140e2 <_malloc_r+0x4a>
 8014174:	461a      	mov	r2, r3
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	42a3      	cmp	r3, r4
 801417a:	d1fb      	bne.n	8014174 <_malloc_r+0xdc>
 801417c:	2300      	movs	r3, #0
 801417e:	6053      	str	r3, [r2, #4]
 8014180:	e7de      	b.n	8014140 <_malloc_r+0xa8>
 8014182:	230c      	movs	r3, #12
 8014184:	4630      	mov	r0, r6
 8014186:	6033      	str	r3, [r6, #0]
 8014188:	f000 f80c 	bl	80141a4 <__malloc_unlock>
 801418c:	e794      	b.n	80140b8 <_malloc_r+0x20>
 801418e:	6005      	str	r5, [r0, #0]
 8014190:	e7d6      	b.n	8014140 <_malloc_r+0xa8>
 8014192:	bf00      	nop
 8014194:	20003370 	.word	0x20003370

08014198 <__malloc_lock>:
 8014198:	4801      	ldr	r0, [pc, #4]	@ (80141a0 <__malloc_lock+0x8>)
 801419a:	f001 baae 	b.w	80156fa <__retarget_lock_acquire_recursive>
 801419e:	bf00      	nop
 80141a0:	200034b4 	.word	0x200034b4

080141a4 <__malloc_unlock>:
 80141a4:	4801      	ldr	r0, [pc, #4]	@ (80141ac <__malloc_unlock+0x8>)
 80141a6:	f001 baa9 	b.w	80156fc <__retarget_lock_release_recursive>
 80141aa:	bf00      	nop
 80141ac:	200034b4 	.word	0x200034b4

080141b0 <__cvt>:
 80141b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141b4:	ec57 6b10 	vmov	r6, r7, d0
 80141b8:	2f00      	cmp	r7, #0
 80141ba:	460c      	mov	r4, r1
 80141bc:	4619      	mov	r1, r3
 80141be:	463b      	mov	r3, r7
 80141c0:	bfb4      	ite	lt
 80141c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80141c6:	2300      	movge	r3, #0
 80141c8:	4691      	mov	r9, r2
 80141ca:	bfbf      	itttt	lt
 80141cc:	4632      	movlt	r2, r6
 80141ce:	461f      	movlt	r7, r3
 80141d0:	232d      	movlt	r3, #45	@ 0x2d
 80141d2:	4616      	movlt	r6, r2
 80141d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80141d8:	700b      	strb	r3, [r1, #0]
 80141da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80141dc:	f023 0820 	bic.w	r8, r3, #32
 80141e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80141e4:	d005      	beq.n	80141f2 <__cvt+0x42>
 80141e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80141ea:	d100      	bne.n	80141ee <__cvt+0x3e>
 80141ec:	3401      	adds	r4, #1
 80141ee:	2102      	movs	r1, #2
 80141f0:	e000      	b.n	80141f4 <__cvt+0x44>
 80141f2:	2103      	movs	r1, #3
 80141f4:	ab03      	add	r3, sp, #12
 80141f6:	4622      	mov	r2, r4
 80141f8:	9301      	str	r3, [sp, #4]
 80141fa:	ab02      	add	r3, sp, #8
 80141fc:	ec47 6b10 	vmov	d0, r6, r7
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	4653      	mov	r3, sl
 8014204:	f001 fb34 	bl	8015870 <_dtoa_r>
 8014208:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801420c:	4605      	mov	r5, r0
 801420e:	d119      	bne.n	8014244 <__cvt+0x94>
 8014210:	f019 0f01 	tst.w	r9, #1
 8014214:	d00e      	beq.n	8014234 <__cvt+0x84>
 8014216:	eb00 0904 	add.w	r9, r0, r4
 801421a:	2200      	movs	r2, #0
 801421c:	2300      	movs	r3, #0
 801421e:	4630      	mov	r0, r6
 8014220:	4639      	mov	r1, r7
 8014222:	f7ec fc5f 	bl	8000ae4 <__aeabi_dcmpeq>
 8014226:	b108      	cbz	r0, 801422c <__cvt+0x7c>
 8014228:	f8cd 900c 	str.w	r9, [sp, #12]
 801422c:	2230      	movs	r2, #48	@ 0x30
 801422e:	9b03      	ldr	r3, [sp, #12]
 8014230:	454b      	cmp	r3, r9
 8014232:	d31e      	bcc.n	8014272 <__cvt+0xc2>
 8014234:	9b03      	ldr	r3, [sp, #12]
 8014236:	4628      	mov	r0, r5
 8014238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801423a:	1b5b      	subs	r3, r3, r5
 801423c:	6013      	str	r3, [r2, #0]
 801423e:	b004      	add	sp, #16
 8014240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014244:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014248:	eb00 0904 	add.w	r9, r0, r4
 801424c:	d1e5      	bne.n	801421a <__cvt+0x6a>
 801424e:	7803      	ldrb	r3, [r0, #0]
 8014250:	2b30      	cmp	r3, #48	@ 0x30
 8014252:	d10a      	bne.n	801426a <__cvt+0xba>
 8014254:	2200      	movs	r2, #0
 8014256:	2300      	movs	r3, #0
 8014258:	4630      	mov	r0, r6
 801425a:	4639      	mov	r1, r7
 801425c:	f7ec fc42 	bl	8000ae4 <__aeabi_dcmpeq>
 8014260:	b918      	cbnz	r0, 801426a <__cvt+0xba>
 8014262:	f1c4 0401 	rsb	r4, r4, #1
 8014266:	f8ca 4000 	str.w	r4, [sl]
 801426a:	f8da 3000 	ldr.w	r3, [sl]
 801426e:	4499      	add	r9, r3
 8014270:	e7d3      	b.n	801421a <__cvt+0x6a>
 8014272:	1c59      	adds	r1, r3, #1
 8014274:	9103      	str	r1, [sp, #12]
 8014276:	701a      	strb	r2, [r3, #0]
 8014278:	e7d9      	b.n	801422e <__cvt+0x7e>

0801427a <__exponent>:
 801427a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801427c:	2900      	cmp	r1, #0
 801427e:	7002      	strb	r2, [r0, #0]
 8014280:	bfba      	itte	lt
 8014282:	4249      	neglt	r1, r1
 8014284:	232d      	movlt	r3, #45	@ 0x2d
 8014286:	232b      	movge	r3, #43	@ 0x2b
 8014288:	2909      	cmp	r1, #9
 801428a:	7043      	strb	r3, [r0, #1]
 801428c:	dd28      	ble.n	80142e0 <__exponent+0x66>
 801428e:	f10d 0307 	add.w	r3, sp, #7
 8014292:	270a      	movs	r7, #10
 8014294:	461d      	mov	r5, r3
 8014296:	461a      	mov	r2, r3
 8014298:	3b01      	subs	r3, #1
 801429a:	fbb1 f6f7 	udiv	r6, r1, r7
 801429e:	fb07 1416 	mls	r4, r7, r6, r1
 80142a2:	3430      	adds	r4, #48	@ 0x30
 80142a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80142a8:	460c      	mov	r4, r1
 80142aa:	4631      	mov	r1, r6
 80142ac:	2c63      	cmp	r4, #99	@ 0x63
 80142ae:	dcf2      	bgt.n	8014296 <__exponent+0x1c>
 80142b0:	3130      	adds	r1, #48	@ 0x30
 80142b2:	1e94      	subs	r4, r2, #2
 80142b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80142b8:	1c41      	adds	r1, r0, #1
 80142ba:	4623      	mov	r3, r4
 80142bc:	42ab      	cmp	r3, r5
 80142be:	d30a      	bcc.n	80142d6 <__exponent+0x5c>
 80142c0:	f10d 0309 	add.w	r3, sp, #9
 80142c4:	1a9b      	subs	r3, r3, r2
 80142c6:	42ac      	cmp	r4, r5
 80142c8:	bf88      	it	hi
 80142ca:	2300      	movhi	r3, #0
 80142cc:	3302      	adds	r3, #2
 80142ce:	4403      	add	r3, r0
 80142d0:	1a18      	subs	r0, r3, r0
 80142d2:	b003      	add	sp, #12
 80142d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80142da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80142de:	e7ed      	b.n	80142bc <__exponent+0x42>
 80142e0:	2330      	movs	r3, #48	@ 0x30
 80142e2:	3130      	adds	r1, #48	@ 0x30
 80142e4:	7083      	strb	r3, [r0, #2]
 80142e6:	1d03      	adds	r3, r0, #4
 80142e8:	70c1      	strb	r1, [r0, #3]
 80142ea:	e7f1      	b.n	80142d0 <__exponent+0x56>

080142ec <_printf_float>:
 80142ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f0:	b08d      	sub	sp, #52	@ 0x34
 80142f2:	460c      	mov	r4, r1
 80142f4:	4616      	mov	r6, r2
 80142f6:	461f      	mov	r7, r3
 80142f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80142fc:	4605      	mov	r5, r0
 80142fe:	f001 f977 	bl	80155f0 <_localeconv_r>
 8014302:	6803      	ldr	r3, [r0, #0]
 8014304:	4618      	mov	r0, r3
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	f7eb ffc0 	bl	800028c <strlen>
 801430c:	2300      	movs	r3, #0
 801430e:	9005      	str	r0, [sp, #20]
 8014310:	930a      	str	r3, [sp, #40]	@ 0x28
 8014312:	f8d8 3000 	ldr.w	r3, [r8]
 8014316:	f894 a018 	ldrb.w	sl, [r4, #24]
 801431a:	3307      	adds	r3, #7
 801431c:	f8d4 b000 	ldr.w	fp, [r4]
 8014320:	f023 0307 	bic.w	r3, r3, #7
 8014324:	f103 0208 	add.w	r2, r3, #8
 8014328:	f8c8 2000 	str.w	r2, [r8]
 801432c:	f04f 32ff 	mov.w	r2, #4294967295
 8014330:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014334:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014338:	f8cd 8018 	str.w	r8, [sp, #24]
 801433c:	9307      	str	r3, [sp, #28]
 801433e:	4b9d      	ldr	r3, [pc, #628]	@ (80145b4 <_printf_float+0x2c8>)
 8014340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014344:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014348:	f7ec fbfe 	bl	8000b48 <__aeabi_dcmpun>
 801434c:	bb70      	cbnz	r0, 80143ac <_printf_float+0xc0>
 801434e:	f04f 32ff 	mov.w	r2, #4294967295
 8014352:	4b98      	ldr	r3, [pc, #608]	@ (80145b4 <_printf_float+0x2c8>)
 8014354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014358:	f7ec fbd8 	bl	8000b0c <__aeabi_dcmple>
 801435c:	bb30      	cbnz	r0, 80143ac <_printf_float+0xc0>
 801435e:	2200      	movs	r2, #0
 8014360:	2300      	movs	r3, #0
 8014362:	4640      	mov	r0, r8
 8014364:	4649      	mov	r1, r9
 8014366:	f7ec fbc7 	bl	8000af8 <__aeabi_dcmplt>
 801436a:	b110      	cbz	r0, 8014372 <_printf_float+0x86>
 801436c:	232d      	movs	r3, #45	@ 0x2d
 801436e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014372:	4a91      	ldr	r2, [pc, #580]	@ (80145b8 <_printf_float+0x2cc>)
 8014374:	4b91      	ldr	r3, [pc, #580]	@ (80145bc <_printf_float+0x2d0>)
 8014376:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801437a:	bf94      	ite	ls
 801437c:	4690      	movls	r8, r2
 801437e:	4698      	movhi	r8, r3
 8014380:	2303      	movs	r3, #3
 8014382:	f04f 0900 	mov.w	r9, #0
 8014386:	6123      	str	r3, [r4, #16]
 8014388:	f02b 0304 	bic.w	r3, fp, #4
 801438c:	6023      	str	r3, [r4, #0]
 801438e:	4633      	mov	r3, r6
 8014390:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014392:	4621      	mov	r1, r4
 8014394:	4628      	mov	r0, r5
 8014396:	9700      	str	r7, [sp, #0]
 8014398:	f000 f9d2 	bl	8014740 <_printf_common>
 801439c:	3001      	adds	r0, #1
 801439e:	f040 808d 	bne.w	80144bc <_printf_float+0x1d0>
 80143a2:	f04f 30ff 	mov.w	r0, #4294967295
 80143a6:	b00d      	add	sp, #52	@ 0x34
 80143a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ac:	4642      	mov	r2, r8
 80143ae:	464b      	mov	r3, r9
 80143b0:	4640      	mov	r0, r8
 80143b2:	4649      	mov	r1, r9
 80143b4:	f7ec fbc8 	bl	8000b48 <__aeabi_dcmpun>
 80143b8:	b140      	cbz	r0, 80143cc <_printf_float+0xe0>
 80143ba:	464b      	mov	r3, r9
 80143bc:	4a80      	ldr	r2, [pc, #512]	@ (80145c0 <_printf_float+0x2d4>)
 80143be:	2b00      	cmp	r3, #0
 80143c0:	bfbc      	itt	lt
 80143c2:	232d      	movlt	r3, #45	@ 0x2d
 80143c4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80143c8:	4b7e      	ldr	r3, [pc, #504]	@ (80145c4 <_printf_float+0x2d8>)
 80143ca:	e7d4      	b.n	8014376 <_printf_float+0x8a>
 80143cc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80143d0:	6863      	ldr	r3, [r4, #4]
 80143d2:	9206      	str	r2, [sp, #24]
 80143d4:	1c5a      	adds	r2, r3, #1
 80143d6:	d13b      	bne.n	8014450 <_printf_float+0x164>
 80143d8:	2306      	movs	r3, #6
 80143da:	6063      	str	r3, [r4, #4]
 80143dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80143e0:	2300      	movs	r3, #0
 80143e2:	4628      	mov	r0, r5
 80143e4:	6022      	str	r2, [r4, #0]
 80143e6:	9303      	str	r3, [sp, #12]
 80143e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80143ea:	e9cd a301 	strd	sl, r3, [sp, #4]
 80143ee:	ab09      	add	r3, sp, #36	@ 0x24
 80143f0:	ec49 8b10 	vmov	d0, r8, r9
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80143fa:	6861      	ldr	r1, [r4, #4]
 80143fc:	f7ff fed8 	bl	80141b0 <__cvt>
 8014400:	9b06      	ldr	r3, [sp, #24]
 8014402:	4680      	mov	r8, r0
 8014404:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014406:	2b47      	cmp	r3, #71	@ 0x47
 8014408:	d129      	bne.n	801445e <_printf_float+0x172>
 801440a:	1cc8      	adds	r0, r1, #3
 801440c:	db02      	blt.n	8014414 <_printf_float+0x128>
 801440e:	6863      	ldr	r3, [r4, #4]
 8014410:	4299      	cmp	r1, r3
 8014412:	dd41      	ble.n	8014498 <_printf_float+0x1ac>
 8014414:	f1aa 0a02 	sub.w	sl, sl, #2
 8014418:	fa5f fa8a 	uxtb.w	sl, sl
 801441c:	3901      	subs	r1, #1
 801441e:	4652      	mov	r2, sl
 8014420:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014424:	9109      	str	r1, [sp, #36]	@ 0x24
 8014426:	f7ff ff28 	bl	801427a <__exponent>
 801442a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801442c:	4681      	mov	r9, r0
 801442e:	1813      	adds	r3, r2, r0
 8014430:	2a01      	cmp	r2, #1
 8014432:	6123      	str	r3, [r4, #16]
 8014434:	dc02      	bgt.n	801443c <_printf_float+0x150>
 8014436:	6822      	ldr	r2, [r4, #0]
 8014438:	07d2      	lsls	r2, r2, #31
 801443a:	d501      	bpl.n	8014440 <_printf_float+0x154>
 801443c:	3301      	adds	r3, #1
 801443e:	6123      	str	r3, [r4, #16]
 8014440:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014444:	2b00      	cmp	r3, #0
 8014446:	d0a2      	beq.n	801438e <_printf_float+0xa2>
 8014448:	232d      	movs	r3, #45	@ 0x2d
 801444a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801444e:	e79e      	b.n	801438e <_printf_float+0xa2>
 8014450:	9a06      	ldr	r2, [sp, #24]
 8014452:	2a47      	cmp	r2, #71	@ 0x47
 8014454:	d1c2      	bne.n	80143dc <_printf_float+0xf0>
 8014456:	2b00      	cmp	r3, #0
 8014458:	d1c0      	bne.n	80143dc <_printf_float+0xf0>
 801445a:	2301      	movs	r3, #1
 801445c:	e7bd      	b.n	80143da <_printf_float+0xee>
 801445e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014462:	d9db      	bls.n	801441c <_printf_float+0x130>
 8014464:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014468:	d118      	bne.n	801449c <_printf_float+0x1b0>
 801446a:	2900      	cmp	r1, #0
 801446c:	6863      	ldr	r3, [r4, #4]
 801446e:	dd0b      	ble.n	8014488 <_printf_float+0x19c>
 8014470:	6121      	str	r1, [r4, #16]
 8014472:	b913      	cbnz	r3, 801447a <_printf_float+0x18e>
 8014474:	6822      	ldr	r2, [r4, #0]
 8014476:	07d0      	lsls	r0, r2, #31
 8014478:	d502      	bpl.n	8014480 <_printf_float+0x194>
 801447a:	3301      	adds	r3, #1
 801447c:	440b      	add	r3, r1
 801447e:	6123      	str	r3, [r4, #16]
 8014480:	f04f 0900 	mov.w	r9, #0
 8014484:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014486:	e7db      	b.n	8014440 <_printf_float+0x154>
 8014488:	b913      	cbnz	r3, 8014490 <_printf_float+0x1a4>
 801448a:	6822      	ldr	r2, [r4, #0]
 801448c:	07d2      	lsls	r2, r2, #31
 801448e:	d501      	bpl.n	8014494 <_printf_float+0x1a8>
 8014490:	3302      	adds	r3, #2
 8014492:	e7f4      	b.n	801447e <_printf_float+0x192>
 8014494:	2301      	movs	r3, #1
 8014496:	e7f2      	b.n	801447e <_printf_float+0x192>
 8014498:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801449c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801449e:	4299      	cmp	r1, r3
 80144a0:	db05      	blt.n	80144ae <_printf_float+0x1c2>
 80144a2:	6823      	ldr	r3, [r4, #0]
 80144a4:	6121      	str	r1, [r4, #16]
 80144a6:	07d8      	lsls	r0, r3, #31
 80144a8:	d5ea      	bpl.n	8014480 <_printf_float+0x194>
 80144aa:	1c4b      	adds	r3, r1, #1
 80144ac:	e7e7      	b.n	801447e <_printf_float+0x192>
 80144ae:	2900      	cmp	r1, #0
 80144b0:	bfd4      	ite	le
 80144b2:	f1c1 0202 	rsble	r2, r1, #2
 80144b6:	2201      	movgt	r2, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	e7e0      	b.n	801447e <_printf_float+0x192>
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	055a      	lsls	r2, r3, #21
 80144c0:	d407      	bmi.n	80144d2 <_printf_float+0x1e6>
 80144c2:	6923      	ldr	r3, [r4, #16]
 80144c4:	4642      	mov	r2, r8
 80144c6:	4631      	mov	r1, r6
 80144c8:	4628      	mov	r0, r5
 80144ca:	47b8      	blx	r7
 80144cc:	3001      	adds	r0, #1
 80144ce:	d12b      	bne.n	8014528 <_printf_float+0x23c>
 80144d0:	e767      	b.n	80143a2 <_printf_float+0xb6>
 80144d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80144d6:	f240 80dd 	bls.w	8014694 <_printf_float+0x3a8>
 80144da:	2200      	movs	r2, #0
 80144dc:	2300      	movs	r3, #0
 80144de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80144e2:	f7ec faff 	bl	8000ae4 <__aeabi_dcmpeq>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d033      	beq.n	8014552 <_printf_float+0x266>
 80144ea:	2301      	movs	r3, #1
 80144ec:	4a36      	ldr	r2, [pc, #216]	@ (80145c8 <_printf_float+0x2dc>)
 80144ee:	4631      	mov	r1, r6
 80144f0:	4628      	mov	r0, r5
 80144f2:	47b8      	blx	r7
 80144f4:	3001      	adds	r0, #1
 80144f6:	f43f af54 	beq.w	80143a2 <_printf_float+0xb6>
 80144fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80144fe:	4543      	cmp	r3, r8
 8014500:	db02      	blt.n	8014508 <_printf_float+0x21c>
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	07d8      	lsls	r0, r3, #31
 8014506:	d50f      	bpl.n	8014528 <_printf_float+0x23c>
 8014508:	4631      	mov	r1, r6
 801450a:	4628      	mov	r0, r5
 801450c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014510:	47b8      	blx	r7
 8014512:	3001      	adds	r0, #1
 8014514:	f43f af45 	beq.w	80143a2 <_printf_float+0xb6>
 8014518:	f04f 0900 	mov.w	r9, #0
 801451c:	f108 38ff 	add.w	r8, r8, #4294967295
 8014520:	f104 0a1a 	add.w	sl, r4, #26
 8014524:	45c8      	cmp	r8, r9
 8014526:	dc09      	bgt.n	801453c <_printf_float+0x250>
 8014528:	6823      	ldr	r3, [r4, #0]
 801452a:	079b      	lsls	r3, r3, #30
 801452c:	f100 8103 	bmi.w	8014736 <_printf_float+0x44a>
 8014530:	68e0      	ldr	r0, [r4, #12]
 8014532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014534:	4298      	cmp	r0, r3
 8014536:	bfb8      	it	lt
 8014538:	4618      	movlt	r0, r3
 801453a:	e734      	b.n	80143a6 <_printf_float+0xba>
 801453c:	2301      	movs	r3, #1
 801453e:	4652      	mov	r2, sl
 8014540:	4631      	mov	r1, r6
 8014542:	4628      	mov	r0, r5
 8014544:	47b8      	blx	r7
 8014546:	3001      	adds	r0, #1
 8014548:	f43f af2b 	beq.w	80143a2 <_printf_float+0xb6>
 801454c:	f109 0901 	add.w	r9, r9, #1
 8014550:	e7e8      	b.n	8014524 <_printf_float+0x238>
 8014552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014554:	2b00      	cmp	r3, #0
 8014556:	dc39      	bgt.n	80145cc <_printf_float+0x2e0>
 8014558:	2301      	movs	r3, #1
 801455a:	4a1b      	ldr	r2, [pc, #108]	@ (80145c8 <_printf_float+0x2dc>)
 801455c:	4631      	mov	r1, r6
 801455e:	4628      	mov	r0, r5
 8014560:	47b8      	blx	r7
 8014562:	3001      	adds	r0, #1
 8014564:	f43f af1d 	beq.w	80143a2 <_printf_float+0xb6>
 8014568:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801456c:	ea59 0303 	orrs.w	r3, r9, r3
 8014570:	d102      	bne.n	8014578 <_printf_float+0x28c>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	07d9      	lsls	r1, r3, #31
 8014576:	d5d7      	bpl.n	8014528 <_printf_float+0x23c>
 8014578:	4631      	mov	r1, r6
 801457a:	4628      	mov	r0, r5
 801457c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014580:	47b8      	blx	r7
 8014582:	3001      	adds	r0, #1
 8014584:	f43f af0d 	beq.w	80143a2 <_printf_float+0xb6>
 8014588:	f04f 0a00 	mov.w	sl, #0
 801458c:	f104 0b1a 	add.w	fp, r4, #26
 8014590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014592:	425b      	negs	r3, r3
 8014594:	4553      	cmp	r3, sl
 8014596:	dc01      	bgt.n	801459c <_printf_float+0x2b0>
 8014598:	464b      	mov	r3, r9
 801459a:	e793      	b.n	80144c4 <_printf_float+0x1d8>
 801459c:	2301      	movs	r3, #1
 801459e:	465a      	mov	r2, fp
 80145a0:	4631      	mov	r1, r6
 80145a2:	4628      	mov	r0, r5
 80145a4:	47b8      	blx	r7
 80145a6:	3001      	adds	r0, #1
 80145a8:	f43f aefb 	beq.w	80143a2 <_printf_float+0xb6>
 80145ac:	f10a 0a01 	add.w	sl, sl, #1
 80145b0:	e7ee      	b.n	8014590 <_printf_float+0x2a4>
 80145b2:	bf00      	nop
 80145b4:	7fefffff 	.word	0x7fefffff
 80145b8:	0818ca68 	.word	0x0818ca68
 80145bc:	0818ca6c 	.word	0x0818ca6c
 80145c0:	0818ca70 	.word	0x0818ca70
 80145c4:	0818ca74 	.word	0x0818ca74
 80145c8:	0818ce08 	.word	0x0818ce08
 80145cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80145ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80145d2:	4553      	cmp	r3, sl
 80145d4:	bfa8      	it	ge
 80145d6:	4653      	movge	r3, sl
 80145d8:	2b00      	cmp	r3, #0
 80145da:	4699      	mov	r9, r3
 80145dc:	dc36      	bgt.n	801464c <_printf_float+0x360>
 80145de:	f04f 0b00 	mov.w	fp, #0
 80145e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145e6:	f104 021a 	add.w	r2, r4, #26
 80145ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80145ec:	9306      	str	r3, [sp, #24]
 80145ee:	eba3 0309 	sub.w	r3, r3, r9
 80145f2:	455b      	cmp	r3, fp
 80145f4:	dc31      	bgt.n	801465a <_printf_float+0x36e>
 80145f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145f8:	459a      	cmp	sl, r3
 80145fa:	dc3a      	bgt.n	8014672 <_printf_float+0x386>
 80145fc:	6823      	ldr	r3, [r4, #0]
 80145fe:	07da      	lsls	r2, r3, #31
 8014600:	d437      	bmi.n	8014672 <_printf_float+0x386>
 8014602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014604:	ebaa 0903 	sub.w	r9, sl, r3
 8014608:	9b06      	ldr	r3, [sp, #24]
 801460a:	ebaa 0303 	sub.w	r3, sl, r3
 801460e:	4599      	cmp	r9, r3
 8014610:	bfa8      	it	ge
 8014612:	4699      	movge	r9, r3
 8014614:	f1b9 0f00 	cmp.w	r9, #0
 8014618:	dc33      	bgt.n	8014682 <_printf_float+0x396>
 801461a:	f04f 0800 	mov.w	r8, #0
 801461e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014622:	f104 0b1a 	add.w	fp, r4, #26
 8014626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014628:	ebaa 0303 	sub.w	r3, sl, r3
 801462c:	eba3 0309 	sub.w	r3, r3, r9
 8014630:	4543      	cmp	r3, r8
 8014632:	f77f af79 	ble.w	8014528 <_printf_float+0x23c>
 8014636:	2301      	movs	r3, #1
 8014638:	465a      	mov	r2, fp
 801463a:	4631      	mov	r1, r6
 801463c:	4628      	mov	r0, r5
 801463e:	47b8      	blx	r7
 8014640:	3001      	adds	r0, #1
 8014642:	f43f aeae 	beq.w	80143a2 <_printf_float+0xb6>
 8014646:	f108 0801 	add.w	r8, r8, #1
 801464a:	e7ec      	b.n	8014626 <_printf_float+0x33a>
 801464c:	4642      	mov	r2, r8
 801464e:	4631      	mov	r1, r6
 8014650:	4628      	mov	r0, r5
 8014652:	47b8      	blx	r7
 8014654:	3001      	adds	r0, #1
 8014656:	d1c2      	bne.n	80145de <_printf_float+0x2f2>
 8014658:	e6a3      	b.n	80143a2 <_printf_float+0xb6>
 801465a:	2301      	movs	r3, #1
 801465c:	4631      	mov	r1, r6
 801465e:	4628      	mov	r0, r5
 8014660:	9206      	str	r2, [sp, #24]
 8014662:	47b8      	blx	r7
 8014664:	3001      	adds	r0, #1
 8014666:	f43f ae9c 	beq.w	80143a2 <_printf_float+0xb6>
 801466a:	f10b 0b01 	add.w	fp, fp, #1
 801466e:	9a06      	ldr	r2, [sp, #24]
 8014670:	e7bb      	b.n	80145ea <_printf_float+0x2fe>
 8014672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014676:	4631      	mov	r1, r6
 8014678:	4628      	mov	r0, r5
 801467a:	47b8      	blx	r7
 801467c:	3001      	adds	r0, #1
 801467e:	d1c0      	bne.n	8014602 <_printf_float+0x316>
 8014680:	e68f      	b.n	80143a2 <_printf_float+0xb6>
 8014682:	9a06      	ldr	r2, [sp, #24]
 8014684:	464b      	mov	r3, r9
 8014686:	4631      	mov	r1, r6
 8014688:	4628      	mov	r0, r5
 801468a:	4442      	add	r2, r8
 801468c:	47b8      	blx	r7
 801468e:	3001      	adds	r0, #1
 8014690:	d1c3      	bne.n	801461a <_printf_float+0x32e>
 8014692:	e686      	b.n	80143a2 <_printf_float+0xb6>
 8014694:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014698:	f1ba 0f01 	cmp.w	sl, #1
 801469c:	dc01      	bgt.n	80146a2 <_printf_float+0x3b6>
 801469e:	07db      	lsls	r3, r3, #31
 80146a0:	d536      	bpl.n	8014710 <_printf_float+0x424>
 80146a2:	2301      	movs	r3, #1
 80146a4:	4642      	mov	r2, r8
 80146a6:	4631      	mov	r1, r6
 80146a8:	4628      	mov	r0, r5
 80146aa:	47b8      	blx	r7
 80146ac:	3001      	adds	r0, #1
 80146ae:	f43f ae78 	beq.w	80143a2 <_printf_float+0xb6>
 80146b2:	4631      	mov	r1, r6
 80146b4:	4628      	mov	r0, r5
 80146b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146ba:	47b8      	blx	r7
 80146bc:	3001      	adds	r0, #1
 80146be:	f43f ae70 	beq.w	80143a2 <_printf_float+0xb6>
 80146c2:	2200      	movs	r2, #0
 80146c4:	2300      	movs	r3, #0
 80146c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80146ce:	f7ec fa09 	bl	8000ae4 <__aeabi_dcmpeq>
 80146d2:	b9c0      	cbnz	r0, 8014706 <_printf_float+0x41a>
 80146d4:	4653      	mov	r3, sl
 80146d6:	f108 0201 	add.w	r2, r8, #1
 80146da:	4631      	mov	r1, r6
 80146dc:	4628      	mov	r0, r5
 80146de:	47b8      	blx	r7
 80146e0:	3001      	adds	r0, #1
 80146e2:	d10c      	bne.n	80146fe <_printf_float+0x412>
 80146e4:	e65d      	b.n	80143a2 <_printf_float+0xb6>
 80146e6:	2301      	movs	r3, #1
 80146e8:	465a      	mov	r2, fp
 80146ea:	4631      	mov	r1, r6
 80146ec:	4628      	mov	r0, r5
 80146ee:	47b8      	blx	r7
 80146f0:	3001      	adds	r0, #1
 80146f2:	f43f ae56 	beq.w	80143a2 <_printf_float+0xb6>
 80146f6:	f108 0801 	add.w	r8, r8, #1
 80146fa:	45d0      	cmp	r8, sl
 80146fc:	dbf3      	blt.n	80146e6 <_printf_float+0x3fa>
 80146fe:	464b      	mov	r3, r9
 8014700:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014704:	e6df      	b.n	80144c6 <_printf_float+0x1da>
 8014706:	f04f 0800 	mov.w	r8, #0
 801470a:	f104 0b1a 	add.w	fp, r4, #26
 801470e:	e7f4      	b.n	80146fa <_printf_float+0x40e>
 8014710:	2301      	movs	r3, #1
 8014712:	4642      	mov	r2, r8
 8014714:	e7e1      	b.n	80146da <_printf_float+0x3ee>
 8014716:	2301      	movs	r3, #1
 8014718:	464a      	mov	r2, r9
 801471a:	4631      	mov	r1, r6
 801471c:	4628      	mov	r0, r5
 801471e:	47b8      	blx	r7
 8014720:	3001      	adds	r0, #1
 8014722:	f43f ae3e 	beq.w	80143a2 <_printf_float+0xb6>
 8014726:	f108 0801 	add.w	r8, r8, #1
 801472a:	68e3      	ldr	r3, [r4, #12]
 801472c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801472e:	1a5b      	subs	r3, r3, r1
 8014730:	4543      	cmp	r3, r8
 8014732:	dcf0      	bgt.n	8014716 <_printf_float+0x42a>
 8014734:	e6fc      	b.n	8014530 <_printf_float+0x244>
 8014736:	f04f 0800 	mov.w	r8, #0
 801473a:	f104 0919 	add.w	r9, r4, #25
 801473e:	e7f4      	b.n	801472a <_printf_float+0x43e>

08014740 <_printf_common>:
 8014740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014744:	4616      	mov	r6, r2
 8014746:	4698      	mov	r8, r3
 8014748:	688a      	ldr	r2, [r1, #8]
 801474a:	4607      	mov	r7, r0
 801474c:	690b      	ldr	r3, [r1, #16]
 801474e:	460c      	mov	r4, r1
 8014750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014754:	4293      	cmp	r3, r2
 8014756:	bfb8      	it	lt
 8014758:	4613      	movlt	r3, r2
 801475a:	6033      	str	r3, [r6, #0]
 801475c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014760:	b10a      	cbz	r2, 8014766 <_printf_common+0x26>
 8014762:	3301      	adds	r3, #1
 8014764:	6033      	str	r3, [r6, #0]
 8014766:	6823      	ldr	r3, [r4, #0]
 8014768:	0699      	lsls	r1, r3, #26
 801476a:	bf42      	ittt	mi
 801476c:	6833      	ldrmi	r3, [r6, #0]
 801476e:	3302      	addmi	r3, #2
 8014770:	6033      	strmi	r3, [r6, #0]
 8014772:	6825      	ldr	r5, [r4, #0]
 8014774:	f015 0506 	ands.w	r5, r5, #6
 8014778:	d106      	bne.n	8014788 <_printf_common+0x48>
 801477a:	f104 0a19 	add.w	sl, r4, #25
 801477e:	68e3      	ldr	r3, [r4, #12]
 8014780:	6832      	ldr	r2, [r6, #0]
 8014782:	1a9b      	subs	r3, r3, r2
 8014784:	42ab      	cmp	r3, r5
 8014786:	dc2b      	bgt.n	80147e0 <_printf_common+0xa0>
 8014788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801478c:	6822      	ldr	r2, [r4, #0]
 801478e:	3b00      	subs	r3, #0
 8014790:	bf18      	it	ne
 8014792:	2301      	movne	r3, #1
 8014794:	0692      	lsls	r2, r2, #26
 8014796:	d430      	bmi.n	80147fa <_printf_common+0xba>
 8014798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801479c:	4641      	mov	r1, r8
 801479e:	4638      	mov	r0, r7
 80147a0:	47c8      	blx	r9
 80147a2:	3001      	adds	r0, #1
 80147a4:	d023      	beq.n	80147ee <_printf_common+0xae>
 80147a6:	6823      	ldr	r3, [r4, #0]
 80147a8:	341a      	adds	r4, #26
 80147aa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80147ae:	f003 0306 	and.w	r3, r3, #6
 80147b2:	2b04      	cmp	r3, #4
 80147b4:	bf0a      	itet	eq
 80147b6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80147ba:	2500      	movne	r5, #0
 80147bc:	6833      	ldreq	r3, [r6, #0]
 80147be:	f04f 0600 	mov.w	r6, #0
 80147c2:	bf08      	it	eq
 80147c4:	1aed      	subeq	r5, r5, r3
 80147c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80147ca:	bf08      	it	eq
 80147cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147d0:	4293      	cmp	r3, r2
 80147d2:	bfc4      	itt	gt
 80147d4:	1a9b      	subgt	r3, r3, r2
 80147d6:	18ed      	addgt	r5, r5, r3
 80147d8:	42b5      	cmp	r5, r6
 80147da:	d11a      	bne.n	8014812 <_printf_common+0xd2>
 80147dc:	2000      	movs	r0, #0
 80147de:	e008      	b.n	80147f2 <_printf_common+0xb2>
 80147e0:	2301      	movs	r3, #1
 80147e2:	4652      	mov	r2, sl
 80147e4:	4641      	mov	r1, r8
 80147e6:	4638      	mov	r0, r7
 80147e8:	47c8      	blx	r9
 80147ea:	3001      	adds	r0, #1
 80147ec:	d103      	bne.n	80147f6 <_printf_common+0xb6>
 80147ee:	f04f 30ff 	mov.w	r0, #4294967295
 80147f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147f6:	3501      	adds	r5, #1
 80147f8:	e7c1      	b.n	801477e <_printf_common+0x3e>
 80147fa:	18e1      	adds	r1, r4, r3
 80147fc:	1c5a      	adds	r2, r3, #1
 80147fe:	2030      	movs	r0, #48	@ 0x30
 8014800:	3302      	adds	r3, #2
 8014802:	4422      	add	r2, r4
 8014804:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801480c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014810:	e7c2      	b.n	8014798 <_printf_common+0x58>
 8014812:	2301      	movs	r3, #1
 8014814:	4622      	mov	r2, r4
 8014816:	4641      	mov	r1, r8
 8014818:	4638      	mov	r0, r7
 801481a:	47c8      	blx	r9
 801481c:	3001      	adds	r0, #1
 801481e:	d0e6      	beq.n	80147ee <_printf_common+0xae>
 8014820:	3601      	adds	r6, #1
 8014822:	e7d9      	b.n	80147d8 <_printf_common+0x98>

08014824 <_printf_i>:
 8014824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014828:	7e0f      	ldrb	r7, [r1, #24]
 801482a:	4691      	mov	r9, r2
 801482c:	4680      	mov	r8, r0
 801482e:	460c      	mov	r4, r1
 8014830:	2f78      	cmp	r7, #120	@ 0x78
 8014832:	469a      	mov	sl, r3
 8014834:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801483a:	d807      	bhi.n	801484c <_printf_i+0x28>
 801483c:	2f62      	cmp	r7, #98	@ 0x62
 801483e:	d80a      	bhi.n	8014856 <_printf_i+0x32>
 8014840:	2f00      	cmp	r7, #0
 8014842:	f000 80d2 	beq.w	80149ea <_printf_i+0x1c6>
 8014846:	2f58      	cmp	r7, #88	@ 0x58
 8014848:	f000 80b9 	beq.w	80149be <_printf_i+0x19a>
 801484c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014854:	e03a      	b.n	80148cc <_printf_i+0xa8>
 8014856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801485a:	2b15      	cmp	r3, #21
 801485c:	d8f6      	bhi.n	801484c <_printf_i+0x28>
 801485e:	a101      	add	r1, pc, #4	@ (adr r1, 8014864 <_printf_i+0x40>)
 8014860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014864:	080148bd 	.word	0x080148bd
 8014868:	080148d1 	.word	0x080148d1
 801486c:	0801484d 	.word	0x0801484d
 8014870:	0801484d 	.word	0x0801484d
 8014874:	0801484d 	.word	0x0801484d
 8014878:	0801484d 	.word	0x0801484d
 801487c:	080148d1 	.word	0x080148d1
 8014880:	0801484d 	.word	0x0801484d
 8014884:	0801484d 	.word	0x0801484d
 8014888:	0801484d 	.word	0x0801484d
 801488c:	0801484d 	.word	0x0801484d
 8014890:	080149d1 	.word	0x080149d1
 8014894:	080148fb 	.word	0x080148fb
 8014898:	0801498b 	.word	0x0801498b
 801489c:	0801484d 	.word	0x0801484d
 80148a0:	0801484d 	.word	0x0801484d
 80148a4:	080149f3 	.word	0x080149f3
 80148a8:	0801484d 	.word	0x0801484d
 80148ac:	080148fb 	.word	0x080148fb
 80148b0:	0801484d 	.word	0x0801484d
 80148b4:	0801484d 	.word	0x0801484d
 80148b8:	08014993 	.word	0x08014993
 80148bc:	6833      	ldr	r3, [r6, #0]
 80148be:	1d1a      	adds	r2, r3, #4
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	6032      	str	r2, [r6, #0]
 80148c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80148c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80148cc:	2301      	movs	r3, #1
 80148ce:	e09d      	b.n	8014a0c <_printf_i+0x1e8>
 80148d0:	6833      	ldr	r3, [r6, #0]
 80148d2:	6820      	ldr	r0, [r4, #0]
 80148d4:	1d19      	adds	r1, r3, #4
 80148d6:	6031      	str	r1, [r6, #0]
 80148d8:	0606      	lsls	r6, r0, #24
 80148da:	d501      	bpl.n	80148e0 <_printf_i+0xbc>
 80148dc:	681d      	ldr	r5, [r3, #0]
 80148de:	e003      	b.n	80148e8 <_printf_i+0xc4>
 80148e0:	0645      	lsls	r5, r0, #25
 80148e2:	d5fb      	bpl.n	80148dc <_printf_i+0xb8>
 80148e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80148e8:	2d00      	cmp	r5, #0
 80148ea:	da03      	bge.n	80148f4 <_printf_i+0xd0>
 80148ec:	232d      	movs	r3, #45	@ 0x2d
 80148ee:	426d      	negs	r5, r5
 80148f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148f4:	4859      	ldr	r0, [pc, #356]	@ (8014a5c <_printf_i+0x238>)
 80148f6:	230a      	movs	r3, #10
 80148f8:	e011      	b.n	801491e <_printf_i+0xfa>
 80148fa:	6821      	ldr	r1, [r4, #0]
 80148fc:	6833      	ldr	r3, [r6, #0]
 80148fe:	0608      	lsls	r0, r1, #24
 8014900:	f853 5b04 	ldr.w	r5, [r3], #4
 8014904:	d402      	bmi.n	801490c <_printf_i+0xe8>
 8014906:	0649      	lsls	r1, r1, #25
 8014908:	bf48      	it	mi
 801490a:	b2ad      	uxthmi	r5, r5
 801490c:	2f6f      	cmp	r7, #111	@ 0x6f
 801490e:	6033      	str	r3, [r6, #0]
 8014910:	4852      	ldr	r0, [pc, #328]	@ (8014a5c <_printf_i+0x238>)
 8014912:	bf14      	ite	ne
 8014914:	230a      	movne	r3, #10
 8014916:	2308      	moveq	r3, #8
 8014918:	2100      	movs	r1, #0
 801491a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801491e:	6866      	ldr	r6, [r4, #4]
 8014920:	2e00      	cmp	r6, #0
 8014922:	60a6      	str	r6, [r4, #8]
 8014924:	bfa2      	ittt	ge
 8014926:	6821      	ldrge	r1, [r4, #0]
 8014928:	f021 0104 	bicge.w	r1, r1, #4
 801492c:	6021      	strge	r1, [r4, #0]
 801492e:	b90d      	cbnz	r5, 8014934 <_printf_i+0x110>
 8014930:	2e00      	cmp	r6, #0
 8014932:	d04b      	beq.n	80149cc <_printf_i+0x1a8>
 8014934:	4616      	mov	r6, r2
 8014936:	fbb5 f1f3 	udiv	r1, r5, r3
 801493a:	fb03 5711 	mls	r7, r3, r1, r5
 801493e:	5dc7      	ldrb	r7, [r0, r7]
 8014940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014944:	462f      	mov	r7, r5
 8014946:	460d      	mov	r5, r1
 8014948:	42bb      	cmp	r3, r7
 801494a:	d9f4      	bls.n	8014936 <_printf_i+0x112>
 801494c:	2b08      	cmp	r3, #8
 801494e:	d10b      	bne.n	8014968 <_printf_i+0x144>
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	07df      	lsls	r7, r3, #31
 8014954:	d508      	bpl.n	8014968 <_printf_i+0x144>
 8014956:	6923      	ldr	r3, [r4, #16]
 8014958:	6861      	ldr	r1, [r4, #4]
 801495a:	4299      	cmp	r1, r3
 801495c:	bfde      	ittt	le
 801495e:	2330      	movle	r3, #48	@ 0x30
 8014960:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014964:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014968:	1b92      	subs	r2, r2, r6
 801496a:	6122      	str	r2, [r4, #16]
 801496c:	464b      	mov	r3, r9
 801496e:	aa03      	add	r2, sp, #12
 8014970:	4621      	mov	r1, r4
 8014972:	4640      	mov	r0, r8
 8014974:	f8cd a000 	str.w	sl, [sp]
 8014978:	f7ff fee2 	bl	8014740 <_printf_common>
 801497c:	3001      	adds	r0, #1
 801497e:	d14a      	bne.n	8014a16 <_printf_i+0x1f2>
 8014980:	f04f 30ff 	mov.w	r0, #4294967295
 8014984:	b004      	add	sp, #16
 8014986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801498a:	6823      	ldr	r3, [r4, #0]
 801498c:	f043 0320 	orr.w	r3, r3, #32
 8014990:	6023      	str	r3, [r4, #0]
 8014992:	2778      	movs	r7, #120	@ 0x78
 8014994:	4832      	ldr	r0, [pc, #200]	@ (8014a60 <_printf_i+0x23c>)
 8014996:	6823      	ldr	r3, [r4, #0]
 8014998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801499c:	061f      	lsls	r7, r3, #24
 801499e:	6831      	ldr	r1, [r6, #0]
 80149a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80149a4:	d402      	bmi.n	80149ac <_printf_i+0x188>
 80149a6:	065f      	lsls	r7, r3, #25
 80149a8:	bf48      	it	mi
 80149aa:	b2ad      	uxthmi	r5, r5
 80149ac:	6031      	str	r1, [r6, #0]
 80149ae:	07d9      	lsls	r1, r3, #31
 80149b0:	bf44      	itt	mi
 80149b2:	f043 0320 	orrmi.w	r3, r3, #32
 80149b6:	6023      	strmi	r3, [r4, #0]
 80149b8:	b11d      	cbz	r5, 80149c2 <_printf_i+0x19e>
 80149ba:	2310      	movs	r3, #16
 80149bc:	e7ac      	b.n	8014918 <_printf_i+0xf4>
 80149be:	4827      	ldr	r0, [pc, #156]	@ (8014a5c <_printf_i+0x238>)
 80149c0:	e7e9      	b.n	8014996 <_printf_i+0x172>
 80149c2:	6823      	ldr	r3, [r4, #0]
 80149c4:	f023 0320 	bic.w	r3, r3, #32
 80149c8:	6023      	str	r3, [r4, #0]
 80149ca:	e7f6      	b.n	80149ba <_printf_i+0x196>
 80149cc:	4616      	mov	r6, r2
 80149ce:	e7bd      	b.n	801494c <_printf_i+0x128>
 80149d0:	6833      	ldr	r3, [r6, #0]
 80149d2:	6825      	ldr	r5, [r4, #0]
 80149d4:	1d18      	adds	r0, r3, #4
 80149d6:	6961      	ldr	r1, [r4, #20]
 80149d8:	6030      	str	r0, [r6, #0]
 80149da:	062e      	lsls	r6, r5, #24
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	d501      	bpl.n	80149e4 <_printf_i+0x1c0>
 80149e0:	6019      	str	r1, [r3, #0]
 80149e2:	e002      	b.n	80149ea <_printf_i+0x1c6>
 80149e4:	0668      	lsls	r0, r5, #25
 80149e6:	d5fb      	bpl.n	80149e0 <_printf_i+0x1bc>
 80149e8:	8019      	strh	r1, [r3, #0]
 80149ea:	2300      	movs	r3, #0
 80149ec:	4616      	mov	r6, r2
 80149ee:	6123      	str	r3, [r4, #16]
 80149f0:	e7bc      	b.n	801496c <_printf_i+0x148>
 80149f2:	6833      	ldr	r3, [r6, #0]
 80149f4:	2100      	movs	r1, #0
 80149f6:	1d1a      	adds	r2, r3, #4
 80149f8:	6032      	str	r2, [r6, #0]
 80149fa:	681e      	ldr	r6, [r3, #0]
 80149fc:	6862      	ldr	r2, [r4, #4]
 80149fe:	4630      	mov	r0, r6
 8014a00:	f000 fe85 	bl	801570e <memchr>
 8014a04:	b108      	cbz	r0, 8014a0a <_printf_i+0x1e6>
 8014a06:	1b80      	subs	r0, r0, r6
 8014a08:	6060      	str	r0, [r4, #4]
 8014a0a:	6863      	ldr	r3, [r4, #4]
 8014a0c:	6123      	str	r3, [r4, #16]
 8014a0e:	2300      	movs	r3, #0
 8014a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a14:	e7aa      	b.n	801496c <_printf_i+0x148>
 8014a16:	6923      	ldr	r3, [r4, #16]
 8014a18:	4632      	mov	r2, r6
 8014a1a:	4649      	mov	r1, r9
 8014a1c:	4640      	mov	r0, r8
 8014a1e:	47d0      	blx	sl
 8014a20:	3001      	adds	r0, #1
 8014a22:	d0ad      	beq.n	8014980 <_printf_i+0x15c>
 8014a24:	6823      	ldr	r3, [r4, #0]
 8014a26:	079b      	lsls	r3, r3, #30
 8014a28:	d413      	bmi.n	8014a52 <_printf_i+0x22e>
 8014a2a:	68e0      	ldr	r0, [r4, #12]
 8014a2c:	9b03      	ldr	r3, [sp, #12]
 8014a2e:	4298      	cmp	r0, r3
 8014a30:	bfb8      	it	lt
 8014a32:	4618      	movlt	r0, r3
 8014a34:	e7a6      	b.n	8014984 <_printf_i+0x160>
 8014a36:	2301      	movs	r3, #1
 8014a38:	4632      	mov	r2, r6
 8014a3a:	4649      	mov	r1, r9
 8014a3c:	4640      	mov	r0, r8
 8014a3e:	47d0      	blx	sl
 8014a40:	3001      	adds	r0, #1
 8014a42:	d09d      	beq.n	8014980 <_printf_i+0x15c>
 8014a44:	3501      	adds	r5, #1
 8014a46:	68e3      	ldr	r3, [r4, #12]
 8014a48:	9903      	ldr	r1, [sp, #12]
 8014a4a:	1a5b      	subs	r3, r3, r1
 8014a4c:	42ab      	cmp	r3, r5
 8014a4e:	dcf2      	bgt.n	8014a36 <_printf_i+0x212>
 8014a50:	e7eb      	b.n	8014a2a <_printf_i+0x206>
 8014a52:	2500      	movs	r5, #0
 8014a54:	f104 0619 	add.w	r6, r4, #25
 8014a58:	e7f5      	b.n	8014a46 <_printf_i+0x222>
 8014a5a:	bf00      	nop
 8014a5c:	0818ca78 	.word	0x0818ca78
 8014a60:	0818ca89 	.word	0x0818ca89

08014a64 <_scanf_float>:
 8014a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a68:	b087      	sub	sp, #28
 8014a6a:	4617      	mov	r7, r2
 8014a6c:	4680      	mov	r8, r0
 8014a6e:	460c      	mov	r4, r1
 8014a70:	9303      	str	r3, [sp, #12]
 8014a72:	688b      	ldr	r3, [r1, #8]
 8014a74:	1e5a      	subs	r2, r3, #1
 8014a76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014a7a:	460a      	mov	r2, r1
 8014a7c:	bf89      	itett	hi
 8014a7e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014a82:	f04f 0b00 	movls.w	fp, #0
 8014a86:	eb03 0b05 	addhi.w	fp, r3, r5
 8014a8a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014a8e:	f04f 0500 	mov.w	r5, #0
 8014a92:	bf88      	it	hi
 8014a94:	608b      	strhi	r3, [r1, #8]
 8014a96:	680b      	ldr	r3, [r1, #0]
 8014a98:	46aa      	mov	sl, r5
 8014a9a:	46a9      	mov	r9, r5
 8014a9c:	9502      	str	r5, [sp, #8]
 8014a9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014aa2:	f842 3b1c 	str.w	r3, [r2], #28
 8014aa6:	4616      	mov	r6, r2
 8014aa8:	9201      	str	r2, [sp, #4]
 8014aaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014aae:	68a2      	ldr	r2, [r4, #8]
 8014ab0:	b152      	cbz	r2, 8014ac8 <_scanf_float+0x64>
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	2b4e      	cmp	r3, #78	@ 0x4e
 8014ab8:	d864      	bhi.n	8014b84 <_scanf_float+0x120>
 8014aba:	2b40      	cmp	r3, #64	@ 0x40
 8014abc:	d83c      	bhi.n	8014b38 <_scanf_float+0xd4>
 8014abe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014ac2:	b2c8      	uxtb	r0, r1
 8014ac4:	280e      	cmp	r0, #14
 8014ac6:	d93a      	bls.n	8014b3e <_scanf_float+0xda>
 8014ac8:	f1b9 0f00 	cmp.w	r9, #0
 8014acc:	d003      	beq.n	8014ad6 <_scanf_float+0x72>
 8014ace:	6823      	ldr	r3, [r4, #0]
 8014ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ada:	f1ba 0f01 	cmp.w	sl, #1
 8014ade:	f200 8117 	bhi.w	8014d10 <_scanf_float+0x2ac>
 8014ae2:	9b01      	ldr	r3, [sp, #4]
 8014ae4:	429e      	cmp	r6, r3
 8014ae6:	f200 8108 	bhi.w	8014cfa <_scanf_float+0x296>
 8014aea:	2001      	movs	r0, #1
 8014aec:	b007      	add	sp, #28
 8014aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014af6:	2a0d      	cmp	r2, #13
 8014af8:	d8e6      	bhi.n	8014ac8 <_scanf_float+0x64>
 8014afa:	a101      	add	r1, pc, #4	@ (adr r1, 8014b00 <_scanf_float+0x9c>)
 8014afc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014b00:	08014c47 	.word	0x08014c47
 8014b04:	08014ac9 	.word	0x08014ac9
 8014b08:	08014ac9 	.word	0x08014ac9
 8014b0c:	08014ac9 	.word	0x08014ac9
 8014b10:	08014ca7 	.word	0x08014ca7
 8014b14:	08014c7f 	.word	0x08014c7f
 8014b18:	08014ac9 	.word	0x08014ac9
 8014b1c:	08014ac9 	.word	0x08014ac9
 8014b20:	08014c55 	.word	0x08014c55
 8014b24:	08014ac9 	.word	0x08014ac9
 8014b28:	08014ac9 	.word	0x08014ac9
 8014b2c:	08014ac9 	.word	0x08014ac9
 8014b30:	08014ac9 	.word	0x08014ac9
 8014b34:	08014c0d 	.word	0x08014c0d
 8014b38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014b3c:	e7db      	b.n	8014af6 <_scanf_float+0x92>
 8014b3e:	290e      	cmp	r1, #14
 8014b40:	d8c2      	bhi.n	8014ac8 <_scanf_float+0x64>
 8014b42:	a001      	add	r0, pc, #4	@ (adr r0, 8014b48 <_scanf_float+0xe4>)
 8014b44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014b48:	08014bfd 	.word	0x08014bfd
 8014b4c:	08014ac9 	.word	0x08014ac9
 8014b50:	08014bfd 	.word	0x08014bfd
 8014b54:	08014c93 	.word	0x08014c93
 8014b58:	08014ac9 	.word	0x08014ac9
 8014b5c:	08014ba5 	.word	0x08014ba5
 8014b60:	08014be3 	.word	0x08014be3
 8014b64:	08014be3 	.word	0x08014be3
 8014b68:	08014be3 	.word	0x08014be3
 8014b6c:	08014be3 	.word	0x08014be3
 8014b70:	08014be3 	.word	0x08014be3
 8014b74:	08014be3 	.word	0x08014be3
 8014b78:	08014be3 	.word	0x08014be3
 8014b7c:	08014be3 	.word	0x08014be3
 8014b80:	08014be3 	.word	0x08014be3
 8014b84:	2b6e      	cmp	r3, #110	@ 0x6e
 8014b86:	d809      	bhi.n	8014b9c <_scanf_float+0x138>
 8014b88:	2b60      	cmp	r3, #96	@ 0x60
 8014b8a:	d8b2      	bhi.n	8014af2 <_scanf_float+0x8e>
 8014b8c:	2b54      	cmp	r3, #84	@ 0x54
 8014b8e:	d07b      	beq.n	8014c88 <_scanf_float+0x224>
 8014b90:	2b59      	cmp	r3, #89	@ 0x59
 8014b92:	d199      	bne.n	8014ac8 <_scanf_float+0x64>
 8014b94:	2d07      	cmp	r5, #7
 8014b96:	d197      	bne.n	8014ac8 <_scanf_float+0x64>
 8014b98:	2508      	movs	r5, #8
 8014b9a:	e02c      	b.n	8014bf6 <_scanf_float+0x192>
 8014b9c:	2b74      	cmp	r3, #116	@ 0x74
 8014b9e:	d073      	beq.n	8014c88 <_scanf_float+0x224>
 8014ba0:	2b79      	cmp	r3, #121	@ 0x79
 8014ba2:	e7f6      	b.n	8014b92 <_scanf_float+0x12e>
 8014ba4:	6821      	ldr	r1, [r4, #0]
 8014ba6:	05c8      	lsls	r0, r1, #23
 8014ba8:	d51b      	bpl.n	8014be2 <_scanf_float+0x17e>
 8014baa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014bae:	f109 0901 	add.w	r9, r9, #1
 8014bb2:	6021      	str	r1, [r4, #0]
 8014bb4:	f1bb 0f00 	cmp.w	fp, #0
 8014bb8:	d003      	beq.n	8014bc2 <_scanf_float+0x15e>
 8014bba:	3201      	adds	r2, #1
 8014bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bc0:	60a2      	str	r2, [r4, #8]
 8014bc2:	68a3      	ldr	r3, [r4, #8]
 8014bc4:	3b01      	subs	r3, #1
 8014bc6:	60a3      	str	r3, [r4, #8]
 8014bc8:	6923      	ldr	r3, [r4, #16]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	6123      	str	r3, [r4, #16]
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	607b      	str	r3, [r7, #4]
 8014bd6:	f340 8087 	ble.w	8014ce8 <_scanf_float+0x284>
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	603b      	str	r3, [r7, #0]
 8014be0:	e765      	b.n	8014aae <_scanf_float+0x4a>
 8014be2:	eb1a 0105 	adds.w	r1, sl, r5
 8014be6:	f47f af6f 	bne.w	8014ac8 <_scanf_float+0x64>
 8014bea:	6822      	ldr	r2, [r4, #0]
 8014bec:	460d      	mov	r5, r1
 8014bee:	468a      	mov	sl, r1
 8014bf0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014bf4:	6022      	str	r2, [r4, #0]
 8014bf6:	f806 3b01 	strb.w	r3, [r6], #1
 8014bfa:	e7e2      	b.n	8014bc2 <_scanf_float+0x15e>
 8014bfc:	6822      	ldr	r2, [r4, #0]
 8014bfe:	0610      	lsls	r0, r2, #24
 8014c00:	f57f af62 	bpl.w	8014ac8 <_scanf_float+0x64>
 8014c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014c08:	6022      	str	r2, [r4, #0]
 8014c0a:	e7f4      	b.n	8014bf6 <_scanf_float+0x192>
 8014c0c:	f1ba 0f00 	cmp.w	sl, #0
 8014c10:	d10e      	bne.n	8014c30 <_scanf_float+0x1cc>
 8014c12:	f1b9 0f00 	cmp.w	r9, #0
 8014c16:	d10e      	bne.n	8014c36 <_scanf_float+0x1d2>
 8014c18:	6822      	ldr	r2, [r4, #0]
 8014c1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014c1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014c22:	d108      	bne.n	8014c36 <_scanf_float+0x1d2>
 8014c24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014c28:	f04f 0a01 	mov.w	sl, #1
 8014c2c:	6022      	str	r2, [r4, #0]
 8014c2e:	e7e2      	b.n	8014bf6 <_scanf_float+0x192>
 8014c30:	f1ba 0f02 	cmp.w	sl, #2
 8014c34:	d055      	beq.n	8014ce2 <_scanf_float+0x27e>
 8014c36:	2d01      	cmp	r5, #1
 8014c38:	d002      	beq.n	8014c40 <_scanf_float+0x1dc>
 8014c3a:	2d04      	cmp	r5, #4
 8014c3c:	f47f af44 	bne.w	8014ac8 <_scanf_float+0x64>
 8014c40:	3501      	adds	r5, #1
 8014c42:	b2ed      	uxtb	r5, r5
 8014c44:	e7d7      	b.n	8014bf6 <_scanf_float+0x192>
 8014c46:	f1ba 0f01 	cmp.w	sl, #1
 8014c4a:	f47f af3d 	bne.w	8014ac8 <_scanf_float+0x64>
 8014c4e:	f04f 0a02 	mov.w	sl, #2
 8014c52:	e7d0      	b.n	8014bf6 <_scanf_float+0x192>
 8014c54:	b97d      	cbnz	r5, 8014c76 <_scanf_float+0x212>
 8014c56:	f1b9 0f00 	cmp.w	r9, #0
 8014c5a:	f47f af38 	bne.w	8014ace <_scanf_float+0x6a>
 8014c5e:	6822      	ldr	r2, [r4, #0]
 8014c60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014c64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014c68:	f040 8107 	bne.w	8014e7a <_scanf_float+0x416>
 8014c6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014c70:	2501      	movs	r5, #1
 8014c72:	6022      	str	r2, [r4, #0]
 8014c74:	e7bf      	b.n	8014bf6 <_scanf_float+0x192>
 8014c76:	2d03      	cmp	r5, #3
 8014c78:	d0e2      	beq.n	8014c40 <_scanf_float+0x1dc>
 8014c7a:	2d05      	cmp	r5, #5
 8014c7c:	e7de      	b.n	8014c3c <_scanf_float+0x1d8>
 8014c7e:	2d02      	cmp	r5, #2
 8014c80:	f47f af22 	bne.w	8014ac8 <_scanf_float+0x64>
 8014c84:	2503      	movs	r5, #3
 8014c86:	e7b6      	b.n	8014bf6 <_scanf_float+0x192>
 8014c88:	2d06      	cmp	r5, #6
 8014c8a:	f47f af1d 	bne.w	8014ac8 <_scanf_float+0x64>
 8014c8e:	2507      	movs	r5, #7
 8014c90:	e7b1      	b.n	8014bf6 <_scanf_float+0x192>
 8014c92:	6822      	ldr	r2, [r4, #0]
 8014c94:	0591      	lsls	r1, r2, #22
 8014c96:	f57f af17 	bpl.w	8014ac8 <_scanf_float+0x64>
 8014c9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014c9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ca2:	6022      	str	r2, [r4, #0]
 8014ca4:	e7a7      	b.n	8014bf6 <_scanf_float+0x192>
 8014ca6:	6822      	ldr	r2, [r4, #0]
 8014ca8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014cac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014cb0:	d006      	beq.n	8014cc0 <_scanf_float+0x25c>
 8014cb2:	0550      	lsls	r0, r2, #21
 8014cb4:	f57f af08 	bpl.w	8014ac8 <_scanf_float+0x64>
 8014cb8:	f1b9 0f00 	cmp.w	r9, #0
 8014cbc:	f000 80dd 	beq.w	8014e7a <_scanf_float+0x416>
 8014cc0:	0591      	lsls	r1, r2, #22
 8014cc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014cc6:	bf58      	it	pl
 8014cc8:	9902      	ldrpl	r1, [sp, #8]
 8014cca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014cce:	bf58      	it	pl
 8014cd0:	eba9 0101 	subpl.w	r1, r9, r1
 8014cd4:	6022      	str	r2, [r4, #0]
 8014cd6:	f04f 0900 	mov.w	r9, #0
 8014cda:	bf58      	it	pl
 8014cdc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014ce0:	e789      	b.n	8014bf6 <_scanf_float+0x192>
 8014ce2:	f04f 0a03 	mov.w	sl, #3
 8014ce6:	e786      	b.n	8014bf6 <_scanf_float+0x192>
 8014ce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014cec:	4639      	mov	r1, r7
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4798      	blx	r3
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	f43f aedb 	beq.w	8014aae <_scanf_float+0x4a>
 8014cf8:	e6e6      	b.n	8014ac8 <_scanf_float+0x64>
 8014cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014cfe:	463a      	mov	r2, r7
 8014d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d04:	4640      	mov	r0, r8
 8014d06:	4798      	blx	r3
 8014d08:	6923      	ldr	r3, [r4, #16]
 8014d0a:	3b01      	subs	r3, #1
 8014d0c:	6123      	str	r3, [r4, #16]
 8014d0e:	e6e8      	b.n	8014ae2 <_scanf_float+0x7e>
 8014d10:	1e6b      	subs	r3, r5, #1
 8014d12:	2b06      	cmp	r3, #6
 8014d14:	d824      	bhi.n	8014d60 <_scanf_float+0x2fc>
 8014d16:	2d02      	cmp	r5, #2
 8014d18:	d836      	bhi.n	8014d88 <_scanf_float+0x324>
 8014d1a:	9b01      	ldr	r3, [sp, #4]
 8014d1c:	429e      	cmp	r6, r3
 8014d1e:	f67f aee4 	bls.w	8014aea <_scanf_float+0x86>
 8014d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d26:	463a      	mov	r2, r7
 8014d28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d2c:	4640      	mov	r0, r8
 8014d2e:	4798      	blx	r3
 8014d30:	6923      	ldr	r3, [r4, #16]
 8014d32:	3b01      	subs	r3, #1
 8014d34:	6123      	str	r3, [r4, #16]
 8014d36:	e7f0      	b.n	8014d1a <_scanf_float+0x2b6>
 8014d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d3c:	463a      	mov	r2, r7
 8014d3e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014d42:	4640      	mov	r0, r8
 8014d44:	4798      	blx	r3
 8014d46:	6923      	ldr	r3, [r4, #16]
 8014d48:	3b01      	subs	r3, #1
 8014d4a:	6123      	str	r3, [r4, #16]
 8014d4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d50:	fa5f fa8a 	uxtb.w	sl, sl
 8014d54:	f1ba 0f02 	cmp.w	sl, #2
 8014d58:	d1ee      	bne.n	8014d38 <_scanf_float+0x2d4>
 8014d5a:	3d03      	subs	r5, #3
 8014d5c:	b2ed      	uxtb	r5, r5
 8014d5e:	1b76      	subs	r6, r6, r5
 8014d60:	6823      	ldr	r3, [r4, #0]
 8014d62:	05da      	lsls	r2, r3, #23
 8014d64:	d52f      	bpl.n	8014dc6 <_scanf_float+0x362>
 8014d66:	055b      	lsls	r3, r3, #21
 8014d68:	d511      	bpl.n	8014d8e <_scanf_float+0x32a>
 8014d6a:	9b01      	ldr	r3, [sp, #4]
 8014d6c:	429e      	cmp	r6, r3
 8014d6e:	f67f aebc 	bls.w	8014aea <_scanf_float+0x86>
 8014d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d76:	463a      	mov	r2, r7
 8014d78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	4798      	blx	r3
 8014d80:	6923      	ldr	r3, [r4, #16]
 8014d82:	3b01      	subs	r3, #1
 8014d84:	6123      	str	r3, [r4, #16]
 8014d86:	e7f0      	b.n	8014d6a <_scanf_float+0x306>
 8014d88:	46aa      	mov	sl, r5
 8014d8a:	46b3      	mov	fp, r6
 8014d8c:	e7de      	b.n	8014d4c <_scanf_float+0x2e8>
 8014d8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014d92:	1e75      	subs	r5, r6, #1
 8014d94:	6923      	ldr	r3, [r4, #16]
 8014d96:	2965      	cmp	r1, #101	@ 0x65
 8014d98:	f103 33ff 	add.w	r3, r3, #4294967295
 8014d9c:	6123      	str	r3, [r4, #16]
 8014d9e:	d00c      	beq.n	8014dba <_scanf_float+0x356>
 8014da0:	2945      	cmp	r1, #69	@ 0x45
 8014da2:	d00a      	beq.n	8014dba <_scanf_float+0x356>
 8014da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014da8:	463a      	mov	r2, r7
 8014daa:	4640      	mov	r0, r8
 8014dac:	1eb5      	subs	r5, r6, #2
 8014dae:	4798      	blx	r3
 8014db0:	6923      	ldr	r3, [r4, #16]
 8014db2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014db6:	3b01      	subs	r3, #1
 8014db8:	6123      	str	r3, [r4, #16]
 8014dba:	462e      	mov	r6, r5
 8014dbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014dc0:	463a      	mov	r2, r7
 8014dc2:	4640      	mov	r0, r8
 8014dc4:	4798      	blx	r3
 8014dc6:	6822      	ldr	r2, [r4, #0]
 8014dc8:	f012 0210 	ands.w	r2, r2, #16
 8014dcc:	d001      	beq.n	8014dd2 <_scanf_float+0x36e>
 8014dce:	2000      	movs	r0, #0
 8014dd0:	e68c      	b.n	8014aec <_scanf_float+0x88>
 8014dd2:	7032      	strb	r2, [r6, #0]
 8014dd4:	6823      	ldr	r3, [r4, #0]
 8014dd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014dde:	d11c      	bne.n	8014e1a <_scanf_float+0x3b6>
 8014de0:	9b02      	ldr	r3, [sp, #8]
 8014de2:	454b      	cmp	r3, r9
 8014de4:	eba3 0209 	sub.w	r2, r3, r9
 8014de8:	d123      	bne.n	8014e32 <_scanf_float+0x3ce>
 8014dea:	2200      	movs	r2, #0
 8014dec:	9901      	ldr	r1, [sp, #4]
 8014dee:	4640      	mov	r0, r8
 8014df0:	f002 fe0a 	bl	8017a08 <_strtod_r>
 8014df4:	6821      	ldr	r1, [r4, #0]
 8014df6:	9b03      	ldr	r3, [sp, #12]
 8014df8:	f011 0f02 	tst.w	r1, #2
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	ec57 6b10 	vmov	r6, r7, d0
 8014e02:	f103 0204 	add.w	r2, r3, #4
 8014e06:	d01f      	beq.n	8014e48 <_scanf_float+0x3e4>
 8014e08:	9903      	ldr	r1, [sp, #12]
 8014e0a:	600a      	str	r2, [r1, #0]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	e9c3 6700 	strd	r6, r7, [r3]
 8014e12:	68e3      	ldr	r3, [r4, #12]
 8014e14:	3301      	adds	r3, #1
 8014e16:	60e3      	str	r3, [r4, #12]
 8014e18:	e7d9      	b.n	8014dce <_scanf_float+0x36a>
 8014e1a:	9b04      	ldr	r3, [sp, #16]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d0e4      	beq.n	8014dea <_scanf_float+0x386>
 8014e20:	9905      	ldr	r1, [sp, #20]
 8014e22:	230a      	movs	r3, #10
 8014e24:	4640      	mov	r0, r8
 8014e26:	3101      	adds	r1, #1
 8014e28:	f002 fe6e 	bl	8017b08 <_strtol_r>
 8014e2c:	9b04      	ldr	r3, [sp, #16]
 8014e2e:	9e05      	ldr	r6, [sp, #20]
 8014e30:	1ac2      	subs	r2, r0, r3
 8014e32:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014e36:	4912      	ldr	r1, [pc, #72]	@ (8014e80 <_scanf_float+0x41c>)
 8014e38:	429e      	cmp	r6, r3
 8014e3a:	bf28      	it	cs
 8014e3c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014e40:	4630      	mov	r0, r6
 8014e42:	f000 fa4b 	bl	80152dc <siprintf>
 8014e46:	e7d0      	b.n	8014dea <_scanf_float+0x386>
 8014e48:	f011 0f04 	tst.w	r1, #4
 8014e4c:	9903      	ldr	r1, [sp, #12]
 8014e4e:	600a      	str	r2, [r1, #0]
 8014e50:	d1dc      	bne.n	8014e0c <_scanf_float+0x3a8>
 8014e52:	681d      	ldr	r5, [r3, #0]
 8014e54:	4632      	mov	r2, r6
 8014e56:	463b      	mov	r3, r7
 8014e58:	4630      	mov	r0, r6
 8014e5a:	4639      	mov	r1, r7
 8014e5c:	f7eb fe74 	bl	8000b48 <__aeabi_dcmpun>
 8014e60:	b128      	cbz	r0, 8014e6e <_scanf_float+0x40a>
 8014e62:	4808      	ldr	r0, [pc, #32]	@ (8014e84 <_scanf_float+0x420>)
 8014e64:	f000 fc6e 	bl	8015744 <nanf>
 8014e68:	ed85 0a00 	vstr	s0, [r5]
 8014e6c:	e7d1      	b.n	8014e12 <_scanf_float+0x3ae>
 8014e6e:	4630      	mov	r0, r6
 8014e70:	4639      	mov	r1, r7
 8014e72:	f7eb fec7 	bl	8000c04 <__aeabi_d2f>
 8014e76:	6028      	str	r0, [r5, #0]
 8014e78:	e7cb      	b.n	8014e12 <_scanf_float+0x3ae>
 8014e7a:	f04f 0900 	mov.w	r9, #0
 8014e7e:	e62a      	b.n	8014ad6 <_scanf_float+0x72>
 8014e80:	0818ca9a 	.word	0x0818ca9a
 8014e84:	0818ce50 	.word	0x0818ce50

08014e88 <std>:
 8014e88:	2300      	movs	r3, #0
 8014e8a:	b510      	push	{r4, lr}
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	6083      	str	r3, [r0, #8]
 8014e90:	8181      	strh	r1, [r0, #12]
 8014e92:	4619      	mov	r1, r3
 8014e94:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e96:	81c2      	strh	r2, [r0, #14]
 8014e98:	2208      	movs	r2, #8
 8014e9a:	6183      	str	r3, [r0, #24]
 8014e9c:	e9c0 3300 	strd	r3, r3, [r0]
 8014ea0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ea4:	305c      	adds	r0, #92	@ 0x5c
 8014ea6:	f000 fb67 	bl	8015578 <memset>
 8014eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee0 <std+0x58>)
 8014eac:	6224      	str	r4, [r4, #32]
 8014eae:	6263      	str	r3, [r4, #36]	@ 0x24
 8014eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8014ee4 <std+0x5c>)
 8014eb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8014ee8 <std+0x60>)
 8014eb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8014eec <std+0x64>)
 8014eba:	6323      	str	r3, [r4, #48]	@ 0x30
 8014ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8014ef0 <std+0x68>)
 8014ebe:	429c      	cmp	r4, r3
 8014ec0:	d006      	beq.n	8014ed0 <std+0x48>
 8014ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014ec6:	4294      	cmp	r4, r2
 8014ec8:	d002      	beq.n	8014ed0 <std+0x48>
 8014eca:	33d0      	adds	r3, #208	@ 0xd0
 8014ecc:	429c      	cmp	r4, r3
 8014ece:	d105      	bne.n	8014edc <std+0x54>
 8014ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed8:	f000 bc0e 	b.w	80156f8 <__retarget_lock_init_recursive>
 8014edc:	bd10      	pop	{r4, pc}
 8014ede:	bf00      	nop
 8014ee0:	08015371 	.word	0x08015371
 8014ee4:	08015397 	.word	0x08015397
 8014ee8:	080153cf 	.word	0x080153cf
 8014eec:	080153f3 	.word	0x080153f3
 8014ef0:	20003374 	.word	0x20003374

08014ef4 <stdio_exit_handler>:
 8014ef4:	4a02      	ldr	r2, [pc, #8]	@ (8014f00 <stdio_exit_handler+0xc>)
 8014ef6:	4903      	ldr	r1, [pc, #12]	@ (8014f04 <stdio_exit_handler+0x10>)
 8014ef8:	4803      	ldr	r0, [pc, #12]	@ (8014f08 <stdio_exit_handler+0x14>)
 8014efa:	f000 b869 	b.w	8014fd0 <_fwalk_sglue>
 8014efe:	bf00      	nop
 8014f00:	200000e4 	.word	0x200000e4
 8014f04:	08018779 	.word	0x08018779
 8014f08:	200000f4 	.word	0x200000f4

08014f0c <cleanup_stdio>:
 8014f0c:	6841      	ldr	r1, [r0, #4]
 8014f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8014f40 <cleanup_stdio+0x34>)
 8014f10:	4299      	cmp	r1, r3
 8014f12:	b510      	push	{r4, lr}
 8014f14:	4604      	mov	r4, r0
 8014f16:	d001      	beq.n	8014f1c <cleanup_stdio+0x10>
 8014f18:	f003 fc2e 	bl	8018778 <_fflush_r>
 8014f1c:	68a1      	ldr	r1, [r4, #8]
 8014f1e:	4b09      	ldr	r3, [pc, #36]	@ (8014f44 <cleanup_stdio+0x38>)
 8014f20:	4299      	cmp	r1, r3
 8014f22:	d002      	beq.n	8014f2a <cleanup_stdio+0x1e>
 8014f24:	4620      	mov	r0, r4
 8014f26:	f003 fc27 	bl	8018778 <_fflush_r>
 8014f2a:	68e1      	ldr	r1, [r4, #12]
 8014f2c:	4b06      	ldr	r3, [pc, #24]	@ (8014f48 <cleanup_stdio+0x3c>)
 8014f2e:	4299      	cmp	r1, r3
 8014f30:	d004      	beq.n	8014f3c <cleanup_stdio+0x30>
 8014f32:	4620      	mov	r0, r4
 8014f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f38:	f003 bc1e 	b.w	8018778 <_fflush_r>
 8014f3c:	bd10      	pop	{r4, pc}
 8014f3e:	bf00      	nop
 8014f40:	20003374 	.word	0x20003374
 8014f44:	200033dc 	.word	0x200033dc
 8014f48:	20003444 	.word	0x20003444

08014f4c <global_stdio_init.part.0>:
 8014f4c:	b510      	push	{r4, lr}
 8014f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8014f7c <global_stdio_init.part.0+0x30>)
 8014f50:	2104      	movs	r1, #4
 8014f52:	4c0b      	ldr	r4, [pc, #44]	@ (8014f80 <global_stdio_init.part.0+0x34>)
 8014f54:	4a0b      	ldr	r2, [pc, #44]	@ (8014f84 <global_stdio_init.part.0+0x38>)
 8014f56:	4620      	mov	r0, r4
 8014f58:	601a      	str	r2, [r3, #0]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f7ff ff94 	bl	8014e88 <std>
 8014f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f64:	2201      	movs	r2, #1
 8014f66:	2109      	movs	r1, #9
 8014f68:	f7ff ff8e 	bl	8014e88 <std>
 8014f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f70:	2202      	movs	r2, #2
 8014f72:	2112      	movs	r1, #18
 8014f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f78:	f7ff bf86 	b.w	8014e88 <std>
 8014f7c:	200034ac 	.word	0x200034ac
 8014f80:	20003374 	.word	0x20003374
 8014f84:	08014ef5 	.word	0x08014ef5

08014f88 <__sfp_lock_acquire>:
 8014f88:	4801      	ldr	r0, [pc, #4]	@ (8014f90 <__sfp_lock_acquire+0x8>)
 8014f8a:	f000 bbb6 	b.w	80156fa <__retarget_lock_acquire_recursive>
 8014f8e:	bf00      	nop
 8014f90:	200034b5 	.word	0x200034b5

08014f94 <__sfp_lock_release>:
 8014f94:	4801      	ldr	r0, [pc, #4]	@ (8014f9c <__sfp_lock_release+0x8>)
 8014f96:	f000 bbb1 	b.w	80156fc <__retarget_lock_release_recursive>
 8014f9a:	bf00      	nop
 8014f9c:	200034b5 	.word	0x200034b5

08014fa0 <__sinit>:
 8014fa0:	b510      	push	{r4, lr}
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	f7ff fff0 	bl	8014f88 <__sfp_lock_acquire>
 8014fa8:	6a23      	ldr	r3, [r4, #32]
 8014faa:	b11b      	cbz	r3, 8014fb4 <__sinit+0x14>
 8014fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fb0:	f7ff bff0 	b.w	8014f94 <__sfp_lock_release>
 8014fb4:	4b04      	ldr	r3, [pc, #16]	@ (8014fc8 <__sinit+0x28>)
 8014fb6:	6223      	str	r3, [r4, #32]
 8014fb8:	4b04      	ldr	r3, [pc, #16]	@ (8014fcc <__sinit+0x2c>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d1f5      	bne.n	8014fac <__sinit+0xc>
 8014fc0:	f7ff ffc4 	bl	8014f4c <global_stdio_init.part.0>
 8014fc4:	e7f2      	b.n	8014fac <__sinit+0xc>
 8014fc6:	bf00      	nop
 8014fc8:	08014f0d 	.word	0x08014f0d
 8014fcc:	200034ac 	.word	0x200034ac

08014fd0 <_fwalk_sglue>:
 8014fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fd4:	4607      	mov	r7, r0
 8014fd6:	4688      	mov	r8, r1
 8014fd8:	4614      	mov	r4, r2
 8014fda:	2600      	movs	r6, #0
 8014fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8014fe4:	d505      	bpl.n	8014ff2 <_fwalk_sglue+0x22>
 8014fe6:	6824      	ldr	r4, [r4, #0]
 8014fe8:	2c00      	cmp	r4, #0
 8014fea:	d1f7      	bne.n	8014fdc <_fwalk_sglue+0xc>
 8014fec:	4630      	mov	r0, r6
 8014fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ff2:	89ab      	ldrh	r3, [r5, #12]
 8014ff4:	2b01      	cmp	r3, #1
 8014ff6:	d907      	bls.n	8015008 <_fwalk_sglue+0x38>
 8014ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	d003      	beq.n	8015008 <_fwalk_sglue+0x38>
 8015000:	4629      	mov	r1, r5
 8015002:	4638      	mov	r0, r7
 8015004:	47c0      	blx	r8
 8015006:	4306      	orrs	r6, r0
 8015008:	3568      	adds	r5, #104	@ 0x68
 801500a:	e7e9      	b.n	8014fe0 <_fwalk_sglue+0x10>

0801500c <iprintf>:
 801500c:	b40f      	push	{r0, r1, r2, r3}
 801500e:	b507      	push	{r0, r1, r2, lr}
 8015010:	4906      	ldr	r1, [pc, #24]	@ (801502c <iprintf+0x20>)
 8015012:	ab04      	add	r3, sp, #16
 8015014:	6808      	ldr	r0, [r1, #0]
 8015016:	f853 2b04 	ldr.w	r2, [r3], #4
 801501a:	6881      	ldr	r1, [r0, #8]
 801501c:	9301      	str	r3, [sp, #4]
 801501e:	f003 f8c3 	bl	80181a8 <_vfiprintf_r>
 8015022:	b003      	add	sp, #12
 8015024:	f85d eb04 	ldr.w	lr, [sp], #4
 8015028:	b004      	add	sp, #16
 801502a:	4770      	bx	lr
 801502c:	200000f0 	.word	0x200000f0

08015030 <putchar>:
 8015030:	4b02      	ldr	r3, [pc, #8]	@ (801503c <putchar+0xc>)
 8015032:	4601      	mov	r1, r0
 8015034:	6818      	ldr	r0, [r3, #0]
 8015036:	6882      	ldr	r2, [r0, #8]
 8015038:	f003 bc27 	b.w	801888a <_putc_r>
 801503c:	200000f0 	.word	0x200000f0

08015040 <_puts_r>:
 8015040:	6a03      	ldr	r3, [r0, #32]
 8015042:	b570      	push	{r4, r5, r6, lr}
 8015044:	4605      	mov	r5, r0
 8015046:	460e      	mov	r6, r1
 8015048:	6884      	ldr	r4, [r0, #8]
 801504a:	b90b      	cbnz	r3, 8015050 <_puts_r+0x10>
 801504c:	f7ff ffa8 	bl	8014fa0 <__sinit>
 8015050:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015052:	07db      	lsls	r3, r3, #31
 8015054:	d405      	bmi.n	8015062 <_puts_r+0x22>
 8015056:	89a3      	ldrh	r3, [r4, #12]
 8015058:	0598      	lsls	r0, r3, #22
 801505a:	d402      	bmi.n	8015062 <_puts_r+0x22>
 801505c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801505e:	f000 fb4c 	bl	80156fa <__retarget_lock_acquire_recursive>
 8015062:	89a3      	ldrh	r3, [r4, #12]
 8015064:	0719      	lsls	r1, r3, #28
 8015066:	d502      	bpl.n	801506e <_puts_r+0x2e>
 8015068:	6923      	ldr	r3, [r4, #16]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d135      	bne.n	80150da <_puts_r+0x9a>
 801506e:	4621      	mov	r1, r4
 8015070:	4628      	mov	r0, r5
 8015072:	f000 fa01 	bl	8015478 <__swsetup_r>
 8015076:	b380      	cbz	r0, 80150da <_puts_r+0x9a>
 8015078:	f04f 35ff 	mov.w	r5, #4294967295
 801507c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801507e:	07da      	lsls	r2, r3, #31
 8015080:	d405      	bmi.n	801508e <_puts_r+0x4e>
 8015082:	89a3      	ldrh	r3, [r4, #12]
 8015084:	059b      	lsls	r3, r3, #22
 8015086:	d402      	bmi.n	801508e <_puts_r+0x4e>
 8015088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801508a:	f000 fb37 	bl	80156fc <__retarget_lock_release_recursive>
 801508e:	4628      	mov	r0, r5
 8015090:	bd70      	pop	{r4, r5, r6, pc}
 8015092:	2b00      	cmp	r3, #0
 8015094:	da04      	bge.n	80150a0 <_puts_r+0x60>
 8015096:	69a2      	ldr	r2, [r4, #24]
 8015098:	429a      	cmp	r2, r3
 801509a:	dc17      	bgt.n	80150cc <_puts_r+0x8c>
 801509c:	290a      	cmp	r1, #10
 801509e:	d015      	beq.n	80150cc <_puts_r+0x8c>
 80150a0:	6823      	ldr	r3, [r4, #0]
 80150a2:	1c5a      	adds	r2, r3, #1
 80150a4:	6022      	str	r2, [r4, #0]
 80150a6:	7019      	strb	r1, [r3, #0]
 80150a8:	68a3      	ldr	r3, [r4, #8]
 80150aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80150ae:	3b01      	subs	r3, #1
 80150b0:	60a3      	str	r3, [r4, #8]
 80150b2:	2900      	cmp	r1, #0
 80150b4:	d1ed      	bne.n	8015092 <_puts_r+0x52>
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	da11      	bge.n	80150de <_puts_r+0x9e>
 80150ba:	4622      	mov	r2, r4
 80150bc:	210a      	movs	r1, #10
 80150be:	4628      	mov	r0, r5
 80150c0:	f000 f99b 	bl	80153fa <__swbuf_r>
 80150c4:	3001      	adds	r0, #1
 80150c6:	d0d7      	beq.n	8015078 <_puts_r+0x38>
 80150c8:	250a      	movs	r5, #10
 80150ca:	e7d7      	b.n	801507c <_puts_r+0x3c>
 80150cc:	4622      	mov	r2, r4
 80150ce:	4628      	mov	r0, r5
 80150d0:	f000 f993 	bl	80153fa <__swbuf_r>
 80150d4:	3001      	adds	r0, #1
 80150d6:	d1e7      	bne.n	80150a8 <_puts_r+0x68>
 80150d8:	e7ce      	b.n	8015078 <_puts_r+0x38>
 80150da:	3e01      	subs	r6, #1
 80150dc:	e7e4      	b.n	80150a8 <_puts_r+0x68>
 80150de:	6823      	ldr	r3, [r4, #0]
 80150e0:	1c5a      	adds	r2, r3, #1
 80150e2:	6022      	str	r2, [r4, #0]
 80150e4:	220a      	movs	r2, #10
 80150e6:	701a      	strb	r2, [r3, #0]
 80150e8:	e7ee      	b.n	80150c8 <_puts_r+0x88>
	...

080150ec <puts>:
 80150ec:	4b02      	ldr	r3, [pc, #8]	@ (80150f8 <puts+0xc>)
 80150ee:	4601      	mov	r1, r0
 80150f0:	6818      	ldr	r0, [r3, #0]
 80150f2:	f7ff bfa5 	b.w	8015040 <_puts_r>
 80150f6:	bf00      	nop
 80150f8:	200000f0 	.word	0x200000f0

080150fc <setbuf>:
 80150fc:	fab1 f281 	clz	r2, r1
 8015100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015104:	0952      	lsrs	r2, r2, #5
 8015106:	0052      	lsls	r2, r2, #1
 8015108:	f000 b800 	b.w	801510c <setvbuf>

0801510c <setvbuf>:
 801510c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015110:	461d      	mov	r5, r3
 8015112:	4b57      	ldr	r3, [pc, #348]	@ (8015270 <setvbuf+0x164>)
 8015114:	4604      	mov	r4, r0
 8015116:	460e      	mov	r6, r1
 8015118:	681f      	ldr	r7, [r3, #0]
 801511a:	4690      	mov	r8, r2
 801511c:	b127      	cbz	r7, 8015128 <setvbuf+0x1c>
 801511e:	6a3b      	ldr	r3, [r7, #32]
 8015120:	b913      	cbnz	r3, 8015128 <setvbuf+0x1c>
 8015122:	4638      	mov	r0, r7
 8015124:	f7ff ff3c 	bl	8014fa0 <__sinit>
 8015128:	f1b8 0f02 	cmp.w	r8, #2
 801512c:	d006      	beq.n	801513c <setvbuf+0x30>
 801512e:	f1b8 0f01 	cmp.w	r8, #1
 8015132:	f200 8099 	bhi.w	8015268 <setvbuf+0x15c>
 8015136:	2d00      	cmp	r5, #0
 8015138:	f2c0 8096 	blt.w	8015268 <setvbuf+0x15c>
 801513c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801513e:	07d9      	lsls	r1, r3, #31
 8015140:	d405      	bmi.n	801514e <setvbuf+0x42>
 8015142:	89a3      	ldrh	r3, [r4, #12]
 8015144:	059a      	lsls	r2, r3, #22
 8015146:	d402      	bmi.n	801514e <setvbuf+0x42>
 8015148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801514a:	f000 fad6 	bl	80156fa <__retarget_lock_acquire_recursive>
 801514e:	4621      	mov	r1, r4
 8015150:	4638      	mov	r0, r7
 8015152:	f003 fb11 	bl	8018778 <_fflush_r>
 8015156:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015158:	b141      	cbz	r1, 801516c <setvbuf+0x60>
 801515a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801515e:	4299      	cmp	r1, r3
 8015160:	d002      	beq.n	8015168 <setvbuf+0x5c>
 8015162:	4638      	mov	r0, r7
 8015164:	f001 f948 	bl	80163f8 <_free_r>
 8015168:	2300      	movs	r3, #0
 801516a:	6363      	str	r3, [r4, #52]	@ 0x34
 801516c:	2300      	movs	r3, #0
 801516e:	61a3      	str	r3, [r4, #24]
 8015170:	6063      	str	r3, [r4, #4]
 8015172:	89a3      	ldrh	r3, [r4, #12]
 8015174:	061b      	lsls	r3, r3, #24
 8015176:	d503      	bpl.n	8015180 <setvbuf+0x74>
 8015178:	6921      	ldr	r1, [r4, #16]
 801517a:	4638      	mov	r0, r7
 801517c:	f001 f93c 	bl	80163f8 <_free_r>
 8015180:	89a3      	ldrh	r3, [r4, #12]
 8015182:	f1b8 0f02 	cmp.w	r8, #2
 8015186:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801518a:	f023 0303 	bic.w	r3, r3, #3
 801518e:	81a3      	strh	r3, [r4, #12]
 8015190:	d060      	beq.n	8015254 <setvbuf+0x148>
 8015192:	ab01      	add	r3, sp, #4
 8015194:	466a      	mov	r2, sp
 8015196:	4621      	mov	r1, r4
 8015198:	4638      	mov	r0, r7
 801519a:	f003 fb15 	bl	80187c8 <__swhatbuf_r>
 801519e:	89a3      	ldrh	r3, [r4, #12]
 80151a0:	4318      	orrs	r0, r3
 80151a2:	81a0      	strh	r0, [r4, #12]
 80151a4:	bb2d      	cbnz	r5, 80151f2 <setvbuf+0xe6>
 80151a6:	9d00      	ldr	r5, [sp, #0]
 80151a8:	4628      	mov	r0, r5
 80151aa:	f7fe ff43 	bl	8014034 <malloc>
 80151ae:	4606      	mov	r6, r0
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d151      	bne.n	8015258 <setvbuf+0x14c>
 80151b4:	f8dd 9000 	ldr.w	r9, [sp]
 80151b8:	45a9      	cmp	r9, r5
 80151ba:	d13f      	bne.n	801523c <setvbuf+0x130>
 80151bc:	f04f 35ff 	mov.w	r5, #4294967295
 80151c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151c4:	f043 0202 	orr.w	r2, r3, #2
 80151c8:	81a2      	strh	r2, [r4, #12]
 80151ca:	2200      	movs	r2, #0
 80151cc:	60a2      	str	r2, [r4, #8]
 80151ce:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80151d2:	6022      	str	r2, [r4, #0]
 80151d4:	6122      	str	r2, [r4, #16]
 80151d6:	2201      	movs	r2, #1
 80151d8:	6162      	str	r2, [r4, #20]
 80151da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80151dc:	07d6      	lsls	r6, r2, #31
 80151de:	d404      	bmi.n	80151ea <setvbuf+0xde>
 80151e0:	0598      	lsls	r0, r3, #22
 80151e2:	d402      	bmi.n	80151ea <setvbuf+0xde>
 80151e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80151e6:	f000 fa89 	bl	80156fc <__retarget_lock_release_recursive>
 80151ea:	4628      	mov	r0, r5
 80151ec:	b003      	add	sp, #12
 80151ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151f2:	2e00      	cmp	r6, #0
 80151f4:	d0d8      	beq.n	80151a8 <setvbuf+0x9c>
 80151f6:	6a3b      	ldr	r3, [r7, #32]
 80151f8:	b913      	cbnz	r3, 8015200 <setvbuf+0xf4>
 80151fa:	4638      	mov	r0, r7
 80151fc:	f7ff fed0 	bl	8014fa0 <__sinit>
 8015200:	f1b8 0f01 	cmp.w	r8, #1
 8015204:	6026      	str	r6, [r4, #0]
 8015206:	bf02      	ittt	eq
 8015208:	89a3      	ldrheq	r3, [r4, #12]
 801520a:	f043 0301 	orreq.w	r3, r3, #1
 801520e:	81a3      	strheq	r3, [r4, #12]
 8015210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015214:	f013 0208 	ands.w	r2, r3, #8
 8015218:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801521c:	d01e      	beq.n	801525c <setvbuf+0x150>
 801521e:	07d9      	lsls	r1, r3, #31
 8015220:	bf45      	ittet	mi
 8015222:	2200      	movmi	r2, #0
 8015224:	426d      	negmi	r5, r5
 8015226:	60a5      	strpl	r5, [r4, #8]
 8015228:	60a2      	strmi	r2, [r4, #8]
 801522a:	bf48      	it	mi
 801522c:	61a5      	strmi	r5, [r4, #24]
 801522e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015230:	07d2      	lsls	r2, r2, #31
 8015232:	d401      	bmi.n	8015238 <setvbuf+0x12c>
 8015234:	059b      	lsls	r3, r3, #22
 8015236:	d513      	bpl.n	8015260 <setvbuf+0x154>
 8015238:	2500      	movs	r5, #0
 801523a:	e7d6      	b.n	80151ea <setvbuf+0xde>
 801523c:	4648      	mov	r0, r9
 801523e:	f7fe fef9 	bl	8014034 <malloc>
 8015242:	4606      	mov	r6, r0
 8015244:	2800      	cmp	r0, #0
 8015246:	d0b9      	beq.n	80151bc <setvbuf+0xb0>
 8015248:	89a3      	ldrh	r3, [r4, #12]
 801524a:	464d      	mov	r5, r9
 801524c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015250:	81a3      	strh	r3, [r4, #12]
 8015252:	e7d0      	b.n	80151f6 <setvbuf+0xea>
 8015254:	2500      	movs	r5, #0
 8015256:	e7b3      	b.n	80151c0 <setvbuf+0xb4>
 8015258:	46a9      	mov	r9, r5
 801525a:	e7f5      	b.n	8015248 <setvbuf+0x13c>
 801525c:	60a2      	str	r2, [r4, #8]
 801525e:	e7e6      	b.n	801522e <setvbuf+0x122>
 8015260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015262:	f000 fa4b 	bl	80156fc <__retarget_lock_release_recursive>
 8015266:	e7e7      	b.n	8015238 <setvbuf+0x12c>
 8015268:	f04f 35ff 	mov.w	r5, #4294967295
 801526c:	e7bd      	b.n	80151ea <setvbuf+0xde>
 801526e:	bf00      	nop
 8015270:	200000f0 	.word	0x200000f0

08015274 <sniprintf>:
 8015274:	b40c      	push	{r2, r3}
 8015276:	4b18      	ldr	r3, [pc, #96]	@ (80152d8 <sniprintf+0x64>)
 8015278:	b530      	push	{r4, r5, lr}
 801527a:	1e0c      	subs	r4, r1, #0
 801527c:	b09d      	sub	sp, #116	@ 0x74
 801527e:	681d      	ldr	r5, [r3, #0]
 8015280:	da08      	bge.n	8015294 <sniprintf+0x20>
 8015282:	238b      	movs	r3, #139	@ 0x8b
 8015284:	f04f 30ff 	mov.w	r0, #4294967295
 8015288:	602b      	str	r3, [r5, #0]
 801528a:	b01d      	add	sp, #116	@ 0x74
 801528c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015290:	b002      	add	sp, #8
 8015292:	4770      	bx	lr
 8015294:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015298:	9002      	str	r0, [sp, #8]
 801529a:	9006      	str	r0, [sp, #24]
 801529c:	a902      	add	r1, sp, #8
 801529e:	f8ad 3014 	strh.w	r3, [sp, #20]
 80152a2:	bf14      	ite	ne
 80152a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80152a8:	4623      	moveq	r3, r4
 80152aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80152ac:	4628      	mov	r0, r5
 80152ae:	9304      	str	r3, [sp, #16]
 80152b0:	9307      	str	r3, [sp, #28]
 80152b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152ba:	ab21      	add	r3, sp, #132	@ 0x84
 80152bc:	9301      	str	r3, [sp, #4]
 80152be:	f002 fc81 	bl	8017bc4 <_svfiprintf_r>
 80152c2:	1c43      	adds	r3, r0, #1
 80152c4:	bfbc      	itt	lt
 80152c6:	238b      	movlt	r3, #139	@ 0x8b
 80152c8:	602b      	strlt	r3, [r5, #0]
 80152ca:	2c00      	cmp	r4, #0
 80152cc:	d0dd      	beq.n	801528a <sniprintf+0x16>
 80152ce:	9b02      	ldr	r3, [sp, #8]
 80152d0:	2200      	movs	r2, #0
 80152d2:	701a      	strb	r2, [r3, #0]
 80152d4:	e7d9      	b.n	801528a <sniprintf+0x16>
 80152d6:	bf00      	nop
 80152d8:	200000f0 	.word	0x200000f0

080152dc <siprintf>:
 80152dc:	b40e      	push	{r1, r2, r3}
 80152de:	b500      	push	{lr}
 80152e0:	b09c      	sub	sp, #112	@ 0x70
 80152e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80152e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80152e8:	9002      	str	r0, [sp, #8]
 80152ea:	9006      	str	r0, [sp, #24]
 80152ec:	9107      	str	r1, [sp, #28]
 80152ee:	9104      	str	r1, [sp, #16]
 80152f0:	4808      	ldr	r0, [pc, #32]	@ (8015314 <siprintf+0x38>)
 80152f2:	4909      	ldr	r1, [pc, #36]	@ (8015318 <siprintf+0x3c>)
 80152f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80152f8:	9105      	str	r1, [sp, #20]
 80152fa:	a902      	add	r1, sp, #8
 80152fc:	6800      	ldr	r0, [r0, #0]
 80152fe:	9301      	str	r3, [sp, #4]
 8015300:	f002 fc60 	bl	8017bc4 <_svfiprintf_r>
 8015304:	9b02      	ldr	r3, [sp, #8]
 8015306:	2200      	movs	r2, #0
 8015308:	701a      	strb	r2, [r3, #0]
 801530a:	b01c      	add	sp, #112	@ 0x70
 801530c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015310:	b003      	add	sp, #12
 8015312:	4770      	bx	lr
 8015314:	200000f0 	.word	0x200000f0
 8015318:	ffff0208 	.word	0xffff0208

0801531c <siscanf>:
 801531c:	b40e      	push	{r1, r2, r3}
 801531e:	b530      	push	{r4, r5, lr}
 8015320:	b09c      	sub	sp, #112	@ 0x70
 8015322:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015326:	ac1f      	add	r4, sp, #124	@ 0x7c
 8015328:	f8ad 2014 	strh.w	r2, [sp, #20]
 801532c:	9002      	str	r0, [sp, #8]
 801532e:	f854 5b04 	ldr.w	r5, [r4], #4
 8015332:	9006      	str	r0, [sp, #24]
 8015334:	f7ea ffaa 	bl	800028c <strlen>
 8015338:	4b0b      	ldr	r3, [pc, #44]	@ (8015368 <siscanf+0x4c>)
 801533a:	462a      	mov	r2, r5
 801533c:	9003      	str	r0, [sp, #12]
 801533e:	a902      	add	r1, sp, #8
 8015340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015342:	2300      	movs	r3, #0
 8015344:	9007      	str	r0, [sp, #28]
 8015346:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015348:	9314      	str	r3, [sp, #80]	@ 0x50
 801534a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801534e:	4807      	ldr	r0, [pc, #28]	@ (801536c <siscanf+0x50>)
 8015350:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015354:	4623      	mov	r3, r4
 8015356:	6800      	ldr	r0, [r0, #0]
 8015358:	9401      	str	r4, [sp, #4]
 801535a:	f002 fd87 	bl	8017e6c <__ssvfiscanf_r>
 801535e:	b01c      	add	sp, #112	@ 0x70
 8015360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015364:	b003      	add	sp, #12
 8015366:	4770      	bx	lr
 8015368:	08015393 	.word	0x08015393
 801536c:	200000f0 	.word	0x200000f0

08015370 <__sread>:
 8015370:	b510      	push	{r4, lr}
 8015372:	460c      	mov	r4, r1
 8015374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015378:	f000 f960 	bl	801563c <_read_r>
 801537c:	2800      	cmp	r0, #0
 801537e:	bfab      	itete	ge
 8015380:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015382:	89a3      	ldrhlt	r3, [r4, #12]
 8015384:	181b      	addge	r3, r3, r0
 8015386:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801538a:	bfac      	ite	ge
 801538c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801538e:	81a3      	strhlt	r3, [r4, #12]
 8015390:	bd10      	pop	{r4, pc}

08015392 <__seofread>:
 8015392:	2000      	movs	r0, #0
 8015394:	4770      	bx	lr

08015396 <__swrite>:
 8015396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801539a:	461f      	mov	r7, r3
 801539c:	898b      	ldrh	r3, [r1, #12]
 801539e:	4605      	mov	r5, r0
 80153a0:	460c      	mov	r4, r1
 80153a2:	05db      	lsls	r3, r3, #23
 80153a4:	4616      	mov	r6, r2
 80153a6:	d505      	bpl.n	80153b4 <__swrite+0x1e>
 80153a8:	2302      	movs	r3, #2
 80153aa:	2200      	movs	r2, #0
 80153ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b0:	f000 f932 	bl	8015618 <_lseek_r>
 80153b4:	89a3      	ldrh	r3, [r4, #12]
 80153b6:	4632      	mov	r2, r6
 80153b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153bc:	4628      	mov	r0, r5
 80153be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80153c2:	81a3      	strh	r3, [r4, #12]
 80153c4:	463b      	mov	r3, r7
 80153c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153ca:	f000 b959 	b.w	8015680 <_write_r>

080153ce <__sseek>:
 80153ce:	b510      	push	{r4, lr}
 80153d0:	460c      	mov	r4, r1
 80153d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153d6:	f000 f91f 	bl	8015618 <_lseek_r>
 80153da:	1c43      	adds	r3, r0, #1
 80153dc:	89a3      	ldrh	r3, [r4, #12]
 80153de:	bf15      	itete	ne
 80153e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80153e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80153e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80153ea:	81a3      	strheq	r3, [r4, #12]
 80153ec:	bf18      	it	ne
 80153ee:	81a3      	strhne	r3, [r4, #12]
 80153f0:	bd10      	pop	{r4, pc}

080153f2 <__sclose>:
 80153f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153f6:	f000 b8ff 	b.w	80155f8 <_close_r>

080153fa <__swbuf_r>:
 80153fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153fc:	460e      	mov	r6, r1
 80153fe:	4614      	mov	r4, r2
 8015400:	4605      	mov	r5, r0
 8015402:	b118      	cbz	r0, 801540c <__swbuf_r+0x12>
 8015404:	6a03      	ldr	r3, [r0, #32]
 8015406:	b90b      	cbnz	r3, 801540c <__swbuf_r+0x12>
 8015408:	f7ff fdca 	bl	8014fa0 <__sinit>
 801540c:	69a3      	ldr	r3, [r4, #24]
 801540e:	60a3      	str	r3, [r4, #8]
 8015410:	89a3      	ldrh	r3, [r4, #12]
 8015412:	071a      	lsls	r2, r3, #28
 8015414:	d501      	bpl.n	801541a <__swbuf_r+0x20>
 8015416:	6923      	ldr	r3, [r4, #16]
 8015418:	b943      	cbnz	r3, 801542c <__swbuf_r+0x32>
 801541a:	4621      	mov	r1, r4
 801541c:	4628      	mov	r0, r5
 801541e:	f000 f82b 	bl	8015478 <__swsetup_r>
 8015422:	b118      	cbz	r0, 801542c <__swbuf_r+0x32>
 8015424:	f04f 37ff 	mov.w	r7, #4294967295
 8015428:	4638      	mov	r0, r7
 801542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801542c:	6823      	ldr	r3, [r4, #0]
 801542e:	b2f6      	uxtb	r6, r6
 8015430:	6922      	ldr	r2, [r4, #16]
 8015432:	4637      	mov	r7, r6
 8015434:	1a98      	subs	r0, r3, r2
 8015436:	6963      	ldr	r3, [r4, #20]
 8015438:	4283      	cmp	r3, r0
 801543a:	dc05      	bgt.n	8015448 <__swbuf_r+0x4e>
 801543c:	4621      	mov	r1, r4
 801543e:	4628      	mov	r0, r5
 8015440:	f003 f99a 	bl	8018778 <_fflush_r>
 8015444:	2800      	cmp	r0, #0
 8015446:	d1ed      	bne.n	8015424 <__swbuf_r+0x2a>
 8015448:	68a3      	ldr	r3, [r4, #8]
 801544a:	3b01      	subs	r3, #1
 801544c:	60a3      	str	r3, [r4, #8]
 801544e:	6823      	ldr	r3, [r4, #0]
 8015450:	1c5a      	adds	r2, r3, #1
 8015452:	6022      	str	r2, [r4, #0]
 8015454:	701e      	strb	r6, [r3, #0]
 8015456:	1c43      	adds	r3, r0, #1
 8015458:	6962      	ldr	r2, [r4, #20]
 801545a:	429a      	cmp	r2, r3
 801545c:	d004      	beq.n	8015468 <__swbuf_r+0x6e>
 801545e:	89a3      	ldrh	r3, [r4, #12]
 8015460:	07db      	lsls	r3, r3, #31
 8015462:	d5e1      	bpl.n	8015428 <__swbuf_r+0x2e>
 8015464:	2e0a      	cmp	r6, #10
 8015466:	d1df      	bne.n	8015428 <__swbuf_r+0x2e>
 8015468:	4621      	mov	r1, r4
 801546a:	4628      	mov	r0, r5
 801546c:	f003 f984 	bl	8018778 <_fflush_r>
 8015470:	2800      	cmp	r0, #0
 8015472:	d0d9      	beq.n	8015428 <__swbuf_r+0x2e>
 8015474:	e7d6      	b.n	8015424 <__swbuf_r+0x2a>
	...

08015478 <__swsetup_r>:
 8015478:	b538      	push	{r3, r4, r5, lr}
 801547a:	4b29      	ldr	r3, [pc, #164]	@ (8015520 <__swsetup_r+0xa8>)
 801547c:	4605      	mov	r5, r0
 801547e:	460c      	mov	r4, r1
 8015480:	6818      	ldr	r0, [r3, #0]
 8015482:	b118      	cbz	r0, 801548c <__swsetup_r+0x14>
 8015484:	6a03      	ldr	r3, [r0, #32]
 8015486:	b90b      	cbnz	r3, 801548c <__swsetup_r+0x14>
 8015488:	f7ff fd8a 	bl	8014fa0 <__sinit>
 801548c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015490:	0719      	lsls	r1, r3, #28
 8015492:	d422      	bmi.n	80154da <__swsetup_r+0x62>
 8015494:	06da      	lsls	r2, r3, #27
 8015496:	d407      	bmi.n	80154a8 <__swsetup_r+0x30>
 8015498:	2209      	movs	r2, #9
 801549a:	602a      	str	r2, [r5, #0]
 801549c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154a0:	f04f 30ff 	mov.w	r0, #4294967295
 80154a4:	81a3      	strh	r3, [r4, #12]
 80154a6:	e033      	b.n	8015510 <__swsetup_r+0x98>
 80154a8:	0758      	lsls	r0, r3, #29
 80154aa:	d512      	bpl.n	80154d2 <__swsetup_r+0x5a>
 80154ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80154ae:	b141      	cbz	r1, 80154c2 <__swsetup_r+0x4a>
 80154b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80154b4:	4299      	cmp	r1, r3
 80154b6:	d002      	beq.n	80154be <__swsetup_r+0x46>
 80154b8:	4628      	mov	r0, r5
 80154ba:	f000 ff9d 	bl	80163f8 <_free_r>
 80154be:	2300      	movs	r3, #0
 80154c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80154c2:	89a3      	ldrh	r3, [r4, #12]
 80154c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80154c8:	81a3      	strh	r3, [r4, #12]
 80154ca:	2300      	movs	r3, #0
 80154cc:	6063      	str	r3, [r4, #4]
 80154ce:	6923      	ldr	r3, [r4, #16]
 80154d0:	6023      	str	r3, [r4, #0]
 80154d2:	89a3      	ldrh	r3, [r4, #12]
 80154d4:	f043 0308 	orr.w	r3, r3, #8
 80154d8:	81a3      	strh	r3, [r4, #12]
 80154da:	6923      	ldr	r3, [r4, #16]
 80154dc:	b94b      	cbnz	r3, 80154f2 <__swsetup_r+0x7a>
 80154de:	89a3      	ldrh	r3, [r4, #12]
 80154e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80154e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80154e8:	d003      	beq.n	80154f2 <__swsetup_r+0x7a>
 80154ea:	4621      	mov	r1, r4
 80154ec:	4628      	mov	r0, r5
 80154ee:	f003 f990 	bl	8018812 <__smakebuf_r>
 80154f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154f6:	f013 0201 	ands.w	r2, r3, #1
 80154fa:	d00a      	beq.n	8015512 <__swsetup_r+0x9a>
 80154fc:	2200      	movs	r2, #0
 80154fe:	60a2      	str	r2, [r4, #8]
 8015500:	6962      	ldr	r2, [r4, #20]
 8015502:	4252      	negs	r2, r2
 8015504:	61a2      	str	r2, [r4, #24]
 8015506:	6922      	ldr	r2, [r4, #16]
 8015508:	b942      	cbnz	r2, 801551c <__swsetup_r+0xa4>
 801550a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801550e:	d1c5      	bne.n	801549c <__swsetup_r+0x24>
 8015510:	bd38      	pop	{r3, r4, r5, pc}
 8015512:	0799      	lsls	r1, r3, #30
 8015514:	bf58      	it	pl
 8015516:	6962      	ldrpl	r2, [r4, #20]
 8015518:	60a2      	str	r2, [r4, #8]
 801551a:	e7f4      	b.n	8015506 <__swsetup_r+0x8e>
 801551c:	2000      	movs	r0, #0
 801551e:	e7f7      	b.n	8015510 <__swsetup_r+0x98>
 8015520:	200000f0 	.word	0x200000f0

08015524 <memcmp>:
 8015524:	3901      	subs	r1, #1
 8015526:	4402      	add	r2, r0
 8015528:	b510      	push	{r4, lr}
 801552a:	4290      	cmp	r0, r2
 801552c:	d101      	bne.n	8015532 <memcmp+0xe>
 801552e:	2000      	movs	r0, #0
 8015530:	e005      	b.n	801553e <memcmp+0x1a>
 8015532:	7803      	ldrb	r3, [r0, #0]
 8015534:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015538:	42a3      	cmp	r3, r4
 801553a:	d001      	beq.n	8015540 <memcmp+0x1c>
 801553c:	1b18      	subs	r0, r3, r4
 801553e:	bd10      	pop	{r4, pc}
 8015540:	3001      	adds	r0, #1
 8015542:	e7f2      	b.n	801552a <memcmp+0x6>

08015544 <memmove>:
 8015544:	4288      	cmp	r0, r1
 8015546:	b510      	push	{r4, lr}
 8015548:	eb01 0402 	add.w	r4, r1, r2
 801554c:	d902      	bls.n	8015554 <memmove+0x10>
 801554e:	4284      	cmp	r4, r0
 8015550:	4623      	mov	r3, r4
 8015552:	d807      	bhi.n	8015564 <memmove+0x20>
 8015554:	1e43      	subs	r3, r0, #1
 8015556:	42a1      	cmp	r1, r4
 8015558:	d008      	beq.n	801556c <memmove+0x28>
 801555a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801555e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015562:	e7f8      	b.n	8015556 <memmove+0x12>
 8015564:	4402      	add	r2, r0
 8015566:	4601      	mov	r1, r0
 8015568:	428a      	cmp	r2, r1
 801556a:	d100      	bne.n	801556e <memmove+0x2a>
 801556c:	bd10      	pop	{r4, pc}
 801556e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015576:	e7f7      	b.n	8015568 <memmove+0x24>

08015578 <memset>:
 8015578:	4402      	add	r2, r0
 801557a:	4603      	mov	r3, r0
 801557c:	4293      	cmp	r3, r2
 801557e:	d100      	bne.n	8015582 <memset+0xa>
 8015580:	4770      	bx	lr
 8015582:	f803 1b01 	strb.w	r1, [r3], #1
 8015586:	e7f9      	b.n	801557c <memset+0x4>

08015588 <strcat>:
 8015588:	4602      	mov	r2, r0
 801558a:	b510      	push	{r4, lr}
 801558c:	7814      	ldrb	r4, [r2, #0]
 801558e:	4613      	mov	r3, r2
 8015590:	3201      	adds	r2, #1
 8015592:	2c00      	cmp	r4, #0
 8015594:	d1fa      	bne.n	801558c <strcat+0x4>
 8015596:	3b01      	subs	r3, #1
 8015598:	f811 2b01 	ldrb.w	r2, [r1], #1
 801559c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155a0:	2a00      	cmp	r2, #0
 80155a2:	d1f9      	bne.n	8015598 <strcat+0x10>
 80155a4:	bd10      	pop	{r4, pc}

080155a6 <strncmp>:
 80155a6:	b510      	push	{r4, lr}
 80155a8:	b16a      	cbz	r2, 80155c6 <strncmp+0x20>
 80155aa:	3901      	subs	r1, #1
 80155ac:	1884      	adds	r4, r0, r2
 80155ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d103      	bne.n	80155c2 <strncmp+0x1c>
 80155ba:	42a0      	cmp	r0, r4
 80155bc:	d001      	beq.n	80155c2 <strncmp+0x1c>
 80155be:	2a00      	cmp	r2, #0
 80155c0:	d1f5      	bne.n	80155ae <strncmp+0x8>
 80155c2:	1ad0      	subs	r0, r2, r3
 80155c4:	bd10      	pop	{r4, pc}
 80155c6:	4610      	mov	r0, r2
 80155c8:	e7fc      	b.n	80155c4 <strncmp+0x1e>

080155ca <strncpy>:
 80155ca:	3901      	subs	r1, #1
 80155cc:	4603      	mov	r3, r0
 80155ce:	b510      	push	{r4, lr}
 80155d0:	b132      	cbz	r2, 80155e0 <strncpy+0x16>
 80155d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80155d6:	3a01      	subs	r2, #1
 80155d8:	f803 4b01 	strb.w	r4, [r3], #1
 80155dc:	2c00      	cmp	r4, #0
 80155de:	d1f7      	bne.n	80155d0 <strncpy+0x6>
 80155e0:	441a      	add	r2, r3
 80155e2:	2100      	movs	r1, #0
 80155e4:	4293      	cmp	r3, r2
 80155e6:	d100      	bne.n	80155ea <strncpy+0x20>
 80155e8:	bd10      	pop	{r4, pc}
 80155ea:	f803 1b01 	strb.w	r1, [r3], #1
 80155ee:	e7f9      	b.n	80155e4 <strncpy+0x1a>

080155f0 <_localeconv_r>:
 80155f0:	4800      	ldr	r0, [pc, #0]	@ (80155f4 <_localeconv_r+0x4>)
 80155f2:	4770      	bx	lr
 80155f4:	20000230 	.word	0x20000230

080155f8 <_close_r>:
 80155f8:	b538      	push	{r3, r4, r5, lr}
 80155fa:	2300      	movs	r3, #0
 80155fc:	4d05      	ldr	r5, [pc, #20]	@ (8015614 <_close_r+0x1c>)
 80155fe:	4604      	mov	r4, r0
 8015600:	4608      	mov	r0, r1
 8015602:	602b      	str	r3, [r5, #0]
 8015604:	f7ec f8c2 	bl	800178c <_close>
 8015608:	1c43      	adds	r3, r0, #1
 801560a:	d102      	bne.n	8015612 <_close_r+0x1a>
 801560c:	682b      	ldr	r3, [r5, #0]
 801560e:	b103      	cbz	r3, 8015612 <_close_r+0x1a>
 8015610:	6023      	str	r3, [r4, #0]
 8015612:	bd38      	pop	{r3, r4, r5, pc}
 8015614:	200034b0 	.word	0x200034b0

08015618 <_lseek_r>:
 8015618:	b538      	push	{r3, r4, r5, lr}
 801561a:	4604      	mov	r4, r0
 801561c:	4d06      	ldr	r5, [pc, #24]	@ (8015638 <_lseek_r+0x20>)
 801561e:	4608      	mov	r0, r1
 8015620:	4611      	mov	r1, r2
 8015622:	2200      	movs	r2, #0
 8015624:	602a      	str	r2, [r5, #0]
 8015626:	461a      	mov	r2, r3
 8015628:	f7ec f8d7 	bl	80017da <_lseek>
 801562c:	1c43      	adds	r3, r0, #1
 801562e:	d102      	bne.n	8015636 <_lseek_r+0x1e>
 8015630:	682b      	ldr	r3, [r5, #0]
 8015632:	b103      	cbz	r3, 8015636 <_lseek_r+0x1e>
 8015634:	6023      	str	r3, [r4, #0]
 8015636:	bd38      	pop	{r3, r4, r5, pc}
 8015638:	200034b0 	.word	0x200034b0

0801563c <_read_r>:
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	4604      	mov	r4, r0
 8015640:	4d06      	ldr	r5, [pc, #24]	@ (801565c <_read_r+0x20>)
 8015642:	4608      	mov	r0, r1
 8015644:	4611      	mov	r1, r2
 8015646:	2200      	movs	r2, #0
 8015648:	602a      	str	r2, [r5, #0]
 801564a:	461a      	mov	r2, r3
 801564c:	f7ec f865 	bl	800171a <_read>
 8015650:	1c43      	adds	r3, r0, #1
 8015652:	d102      	bne.n	801565a <_read_r+0x1e>
 8015654:	682b      	ldr	r3, [r5, #0]
 8015656:	b103      	cbz	r3, 801565a <_read_r+0x1e>
 8015658:	6023      	str	r3, [r4, #0]
 801565a:	bd38      	pop	{r3, r4, r5, pc}
 801565c:	200034b0 	.word	0x200034b0

08015660 <_sbrk_r>:
 8015660:	b538      	push	{r3, r4, r5, lr}
 8015662:	2300      	movs	r3, #0
 8015664:	4d05      	ldr	r5, [pc, #20]	@ (801567c <_sbrk_r+0x1c>)
 8015666:	4604      	mov	r4, r0
 8015668:	4608      	mov	r0, r1
 801566a:	602b      	str	r3, [r5, #0]
 801566c:	f7ec f8c2 	bl	80017f4 <_sbrk>
 8015670:	1c43      	adds	r3, r0, #1
 8015672:	d102      	bne.n	801567a <_sbrk_r+0x1a>
 8015674:	682b      	ldr	r3, [r5, #0]
 8015676:	b103      	cbz	r3, 801567a <_sbrk_r+0x1a>
 8015678:	6023      	str	r3, [r4, #0]
 801567a:	bd38      	pop	{r3, r4, r5, pc}
 801567c:	200034b0 	.word	0x200034b0

08015680 <_write_r>:
 8015680:	b538      	push	{r3, r4, r5, lr}
 8015682:	4604      	mov	r4, r0
 8015684:	4d06      	ldr	r5, [pc, #24]	@ (80156a0 <_write_r+0x20>)
 8015686:	4608      	mov	r0, r1
 8015688:	4611      	mov	r1, r2
 801568a:	2200      	movs	r2, #0
 801568c:	602a      	str	r2, [r5, #0]
 801568e:	461a      	mov	r2, r3
 8015690:	f7ec f860 	bl	8001754 <_write>
 8015694:	1c43      	adds	r3, r0, #1
 8015696:	d102      	bne.n	801569e <_write_r+0x1e>
 8015698:	682b      	ldr	r3, [r5, #0]
 801569a:	b103      	cbz	r3, 801569e <_write_r+0x1e>
 801569c:	6023      	str	r3, [r4, #0]
 801569e:	bd38      	pop	{r3, r4, r5, pc}
 80156a0:	200034b0 	.word	0x200034b0

080156a4 <__errno>:
 80156a4:	4b01      	ldr	r3, [pc, #4]	@ (80156ac <__errno+0x8>)
 80156a6:	6818      	ldr	r0, [r3, #0]
 80156a8:	4770      	bx	lr
 80156aa:	bf00      	nop
 80156ac:	200000f0 	.word	0x200000f0

080156b0 <__libc_init_array>:
 80156b0:	b570      	push	{r4, r5, r6, lr}
 80156b2:	4d0d      	ldr	r5, [pc, #52]	@ (80156e8 <__libc_init_array+0x38>)
 80156b4:	2600      	movs	r6, #0
 80156b6:	4c0d      	ldr	r4, [pc, #52]	@ (80156ec <__libc_init_array+0x3c>)
 80156b8:	1b64      	subs	r4, r4, r5
 80156ba:	10a4      	asrs	r4, r4, #2
 80156bc:	42a6      	cmp	r6, r4
 80156be:	d109      	bne.n	80156d4 <__libc_init_array+0x24>
 80156c0:	4d0b      	ldr	r5, [pc, #44]	@ (80156f0 <__libc_init_array+0x40>)
 80156c2:	2600      	movs	r6, #0
 80156c4:	4c0b      	ldr	r4, [pc, #44]	@ (80156f4 <__libc_init_array+0x44>)
 80156c6:	f003 fe27 	bl	8019318 <_init>
 80156ca:	1b64      	subs	r4, r4, r5
 80156cc:	10a4      	asrs	r4, r4, #2
 80156ce:	42a6      	cmp	r6, r4
 80156d0:	d105      	bne.n	80156de <__libc_init_array+0x2e>
 80156d2:	bd70      	pop	{r4, r5, r6, pc}
 80156d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80156d8:	3601      	adds	r6, #1
 80156da:	4798      	blx	r3
 80156dc:	e7ee      	b.n	80156bc <__libc_init_array+0xc>
 80156de:	f855 3b04 	ldr.w	r3, [r5], #4
 80156e2:	3601      	adds	r6, #1
 80156e4:	4798      	blx	r3
 80156e6:	e7f2      	b.n	80156ce <__libc_init_array+0x1e>
 80156e8:	0818cec0 	.word	0x0818cec0
 80156ec:	0818cec0 	.word	0x0818cec0
 80156f0:	0818cec0 	.word	0x0818cec0
 80156f4:	0818cec4 	.word	0x0818cec4

080156f8 <__retarget_lock_init_recursive>:
 80156f8:	4770      	bx	lr

080156fa <__retarget_lock_acquire_recursive>:
 80156fa:	4770      	bx	lr

080156fc <__retarget_lock_release_recursive>:
 80156fc:	4770      	bx	lr

080156fe <strcpy>:
 80156fe:	4603      	mov	r3, r0
 8015700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015704:	f803 2b01 	strb.w	r2, [r3], #1
 8015708:	2a00      	cmp	r2, #0
 801570a:	d1f9      	bne.n	8015700 <strcpy+0x2>
 801570c:	4770      	bx	lr

0801570e <memchr>:
 801570e:	b2c9      	uxtb	r1, r1
 8015710:	4603      	mov	r3, r0
 8015712:	4402      	add	r2, r0
 8015714:	b510      	push	{r4, lr}
 8015716:	4293      	cmp	r3, r2
 8015718:	4618      	mov	r0, r3
 801571a:	d101      	bne.n	8015720 <memchr+0x12>
 801571c:	2000      	movs	r0, #0
 801571e:	e003      	b.n	8015728 <memchr+0x1a>
 8015720:	7804      	ldrb	r4, [r0, #0]
 8015722:	3301      	adds	r3, #1
 8015724:	428c      	cmp	r4, r1
 8015726:	d1f6      	bne.n	8015716 <memchr+0x8>
 8015728:	bd10      	pop	{r4, pc}

0801572a <memcpy>:
 801572a:	440a      	add	r2, r1
 801572c:	1e43      	subs	r3, r0, #1
 801572e:	4291      	cmp	r1, r2
 8015730:	d100      	bne.n	8015734 <memcpy+0xa>
 8015732:	4770      	bx	lr
 8015734:	b510      	push	{r4, lr}
 8015736:	f811 4b01 	ldrb.w	r4, [r1], #1
 801573a:	4291      	cmp	r1, r2
 801573c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015740:	d1f9      	bne.n	8015736 <memcpy+0xc>
 8015742:	bd10      	pop	{r4, pc}

08015744 <nanf>:
 8015744:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801574c <nanf+0x8>
 8015748:	4770      	bx	lr
 801574a:	bf00      	nop
 801574c:	7fc00000 	.word	0x7fc00000

08015750 <quorem>:
 8015750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015754:	6903      	ldr	r3, [r0, #16]
 8015756:	4607      	mov	r7, r0
 8015758:	690c      	ldr	r4, [r1, #16]
 801575a:	42a3      	cmp	r3, r4
 801575c:	f2c0 8083 	blt.w	8015866 <quorem+0x116>
 8015760:	3c01      	subs	r4, #1
 8015762:	f100 0514 	add.w	r5, r0, #20
 8015766:	f101 0814 	add.w	r8, r1, #20
 801576a:	00a3      	lsls	r3, r4, #2
 801576c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015774:	9300      	str	r3, [sp, #0]
 8015776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801577a:	9301      	str	r3, [sp, #4]
 801577c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015780:	3301      	adds	r3, #1
 8015782:	429a      	cmp	r2, r3
 8015784:	fbb2 f6f3 	udiv	r6, r2, r3
 8015788:	d331      	bcc.n	80157ee <quorem+0x9e>
 801578a:	f04f 0a00 	mov.w	sl, #0
 801578e:	46c4      	mov	ip, r8
 8015790:	46ae      	mov	lr, r5
 8015792:	46d3      	mov	fp, sl
 8015794:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015798:	b298      	uxth	r0, r3
 801579a:	45e1      	cmp	r9, ip
 801579c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80157a0:	fb06 a000 	mla	r0, r6, r0, sl
 80157a4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80157a8:	b280      	uxth	r0, r0
 80157aa:	fb06 2303 	mla	r3, r6, r3, r2
 80157ae:	f8de 2000 	ldr.w	r2, [lr]
 80157b2:	b292      	uxth	r2, r2
 80157b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80157b8:	eba2 0200 	sub.w	r2, r2, r0
 80157bc:	b29b      	uxth	r3, r3
 80157be:	f8de 0000 	ldr.w	r0, [lr]
 80157c2:	445a      	add	r2, fp
 80157c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80157c8:	b292      	uxth	r2, r2
 80157ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80157ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80157d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80157d6:	f84e 2b04 	str.w	r2, [lr], #4
 80157da:	d2db      	bcs.n	8015794 <quorem+0x44>
 80157dc:	9b00      	ldr	r3, [sp, #0]
 80157de:	58eb      	ldr	r3, [r5, r3]
 80157e0:	b92b      	cbnz	r3, 80157ee <quorem+0x9e>
 80157e2:	9b01      	ldr	r3, [sp, #4]
 80157e4:	3b04      	subs	r3, #4
 80157e6:	429d      	cmp	r5, r3
 80157e8:	461a      	mov	r2, r3
 80157ea:	d330      	bcc.n	801584e <quorem+0xfe>
 80157ec:	613c      	str	r4, [r7, #16]
 80157ee:	4638      	mov	r0, r7
 80157f0:	f001 f912 	bl	8016a18 <__mcmp>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	db26      	blt.n	8015846 <quorem+0xf6>
 80157f8:	4629      	mov	r1, r5
 80157fa:	2000      	movs	r0, #0
 80157fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8015800:	f8d1 c000 	ldr.w	ip, [r1]
 8015804:	fa1f fe82 	uxth.w	lr, r2
 8015808:	45c1      	cmp	r9, r8
 801580a:	fa1f f38c 	uxth.w	r3, ip
 801580e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015812:	eba3 030e 	sub.w	r3, r3, lr
 8015816:	4403      	add	r3, r0
 8015818:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801581c:	b29b      	uxth	r3, r3
 801581e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015826:	ea4f 4022 	mov.w	r0, r2, asr #16
 801582a:	f841 3b04 	str.w	r3, [r1], #4
 801582e:	d2e5      	bcs.n	80157fc <quorem+0xac>
 8015830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015834:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015838:	b922      	cbnz	r2, 8015844 <quorem+0xf4>
 801583a:	3b04      	subs	r3, #4
 801583c:	429d      	cmp	r5, r3
 801583e:	461a      	mov	r2, r3
 8015840:	d30b      	bcc.n	801585a <quorem+0x10a>
 8015842:	613c      	str	r4, [r7, #16]
 8015844:	3601      	adds	r6, #1
 8015846:	4630      	mov	r0, r6
 8015848:	b003      	add	sp, #12
 801584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801584e:	6812      	ldr	r2, [r2, #0]
 8015850:	3b04      	subs	r3, #4
 8015852:	2a00      	cmp	r2, #0
 8015854:	d1ca      	bne.n	80157ec <quorem+0x9c>
 8015856:	3c01      	subs	r4, #1
 8015858:	e7c5      	b.n	80157e6 <quorem+0x96>
 801585a:	6812      	ldr	r2, [r2, #0]
 801585c:	3b04      	subs	r3, #4
 801585e:	2a00      	cmp	r2, #0
 8015860:	d1ef      	bne.n	8015842 <quorem+0xf2>
 8015862:	3c01      	subs	r4, #1
 8015864:	e7ea      	b.n	801583c <quorem+0xec>
 8015866:	2000      	movs	r0, #0
 8015868:	e7ee      	b.n	8015848 <quorem+0xf8>
 801586a:	0000      	movs	r0, r0
 801586c:	0000      	movs	r0, r0
	...

08015870 <_dtoa_r>:
 8015870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015874:	69c7      	ldr	r7, [r0, #28]
 8015876:	b099      	sub	sp, #100	@ 0x64
 8015878:	4683      	mov	fp, r0
 801587a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801587c:	9109      	str	r1, [sp, #36]	@ 0x24
 801587e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015880:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015882:	ec55 4b10 	vmov	r4, r5, d0
 8015886:	ed8d 0b02 	vstr	d0, [sp, #8]
 801588a:	b97f      	cbnz	r7, 80158ac <_dtoa_r+0x3c>
 801588c:	2010      	movs	r0, #16
 801588e:	f7fe fbd1 	bl	8014034 <malloc>
 8015892:	4602      	mov	r2, r0
 8015894:	f8cb 001c 	str.w	r0, [fp, #28]
 8015898:	b920      	cbnz	r0, 80158a4 <_dtoa_r+0x34>
 801589a:	4ba7      	ldr	r3, [pc, #668]	@ (8015b38 <_dtoa_r+0x2c8>)
 801589c:	21ef      	movs	r1, #239	@ 0xef
 801589e:	48a7      	ldr	r0, [pc, #668]	@ (8015b3c <_dtoa_r+0x2cc>)
 80158a0:	f003 f8c2 	bl	8018a28 <__assert_func>
 80158a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80158a8:	6007      	str	r7, [r0, #0]
 80158aa:	60c7      	str	r7, [r0, #12]
 80158ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80158b0:	6819      	ldr	r1, [r3, #0]
 80158b2:	b159      	cbz	r1, 80158cc <_dtoa_r+0x5c>
 80158b4:	685a      	ldr	r2, [r3, #4]
 80158b6:	2301      	movs	r3, #1
 80158b8:	4658      	mov	r0, fp
 80158ba:	4093      	lsls	r3, r2
 80158bc:	604a      	str	r2, [r1, #4]
 80158be:	608b      	str	r3, [r1, #8]
 80158c0:	f000 fe24 	bl	801650c <_Bfree>
 80158c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80158c8:	2200      	movs	r2, #0
 80158ca:	601a      	str	r2, [r3, #0]
 80158cc:	1e2b      	subs	r3, r5, #0
 80158ce:	bfb7      	itett	lt
 80158d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80158d4:	2300      	movge	r3, #0
 80158d6:	2201      	movlt	r2, #1
 80158d8:	9303      	strlt	r3, [sp, #12]
 80158da:	bfa8      	it	ge
 80158dc:	6033      	strge	r3, [r6, #0]
 80158de:	9f03      	ldr	r7, [sp, #12]
 80158e0:	4b97      	ldr	r3, [pc, #604]	@ (8015b40 <_dtoa_r+0x2d0>)
 80158e2:	bfb8      	it	lt
 80158e4:	6032      	strlt	r2, [r6, #0]
 80158e6:	43bb      	bics	r3, r7
 80158e8:	d112      	bne.n	8015910 <_dtoa_r+0xa0>
 80158ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80158ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80158f0:	6013      	str	r3, [r2, #0]
 80158f2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80158f6:	4323      	orrs	r3, r4
 80158f8:	f000 854c 	beq.w	8016394 <_dtoa_r+0xb24>
 80158fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80158fe:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015b54 <_dtoa_r+0x2e4>
 8015902:	2b00      	cmp	r3, #0
 8015904:	f000 854e 	beq.w	80163a4 <_dtoa_r+0xb34>
 8015908:	f10a 0303 	add.w	r3, sl, #3
 801590c:	f000 bd48 	b.w	80163a0 <_dtoa_r+0xb30>
 8015910:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015914:	2200      	movs	r2, #0
 8015916:	2300      	movs	r3, #0
 8015918:	ec51 0b17 	vmov	r0, r1, d7
 801591c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015920:	f7eb f8e0 	bl	8000ae4 <__aeabi_dcmpeq>
 8015924:	4680      	mov	r8, r0
 8015926:	b158      	cbz	r0, 8015940 <_dtoa_r+0xd0>
 8015928:	2301      	movs	r3, #1
 801592a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801592c:	6013      	str	r3, [r2, #0]
 801592e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015930:	b113      	cbz	r3, 8015938 <_dtoa_r+0xc8>
 8015932:	4b84      	ldr	r3, [pc, #528]	@ (8015b44 <_dtoa_r+0x2d4>)
 8015934:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015936:	6013      	str	r3, [r2, #0]
 8015938:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8015b58 <_dtoa_r+0x2e8>
 801593c:	f000 bd32 	b.w	80163a4 <_dtoa_r+0xb34>
 8015940:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015944:	aa16      	add	r2, sp, #88	@ 0x58
 8015946:	a917      	add	r1, sp, #92	@ 0x5c
 8015948:	4658      	mov	r0, fp
 801594a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801594e:	f001 f98b 	bl	8016c68 <__d2b>
 8015952:	4681      	mov	r9, r0
 8015954:	2e00      	cmp	r6, #0
 8015956:	d075      	beq.n	8015a44 <_dtoa_r+0x1d4>
 8015958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801595a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801595e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015966:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801596a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801596e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015972:	4619      	mov	r1, r3
 8015974:	2200      	movs	r2, #0
 8015976:	4b74      	ldr	r3, [pc, #464]	@ (8015b48 <_dtoa_r+0x2d8>)
 8015978:	f7ea fc94 	bl	80002a4 <__aeabi_dsub>
 801597c:	a368      	add	r3, pc, #416	@ (adr r3, 8015b20 <_dtoa_r+0x2b0>)
 801597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015982:	f7ea fe47 	bl	8000614 <__aeabi_dmul>
 8015986:	a368      	add	r3, pc, #416	@ (adr r3, 8015b28 <_dtoa_r+0x2b8>)
 8015988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598c:	f7ea fc8c 	bl	80002a8 <__adddf3>
 8015990:	4604      	mov	r4, r0
 8015992:	460d      	mov	r5, r1
 8015994:	4630      	mov	r0, r6
 8015996:	f7ea fdd3 	bl	8000540 <__aeabi_i2d>
 801599a:	a365      	add	r3, pc, #404	@ (adr r3, 8015b30 <_dtoa_r+0x2c0>)
 801599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a0:	f7ea fe38 	bl	8000614 <__aeabi_dmul>
 80159a4:	4602      	mov	r2, r0
 80159a6:	460b      	mov	r3, r1
 80159a8:	4620      	mov	r0, r4
 80159aa:	4629      	mov	r1, r5
 80159ac:	f7ea fc7c 	bl	80002a8 <__adddf3>
 80159b0:	4604      	mov	r4, r0
 80159b2:	460d      	mov	r5, r1
 80159b4:	f7eb f8de 	bl	8000b74 <__aeabi_d2iz>
 80159b8:	2200      	movs	r2, #0
 80159ba:	4607      	mov	r7, r0
 80159bc:	2300      	movs	r3, #0
 80159be:	4620      	mov	r0, r4
 80159c0:	4629      	mov	r1, r5
 80159c2:	f7eb f899 	bl	8000af8 <__aeabi_dcmplt>
 80159c6:	b140      	cbz	r0, 80159da <_dtoa_r+0x16a>
 80159c8:	4638      	mov	r0, r7
 80159ca:	f7ea fdb9 	bl	8000540 <__aeabi_i2d>
 80159ce:	4622      	mov	r2, r4
 80159d0:	462b      	mov	r3, r5
 80159d2:	f7eb f887 	bl	8000ae4 <__aeabi_dcmpeq>
 80159d6:	b900      	cbnz	r0, 80159da <_dtoa_r+0x16a>
 80159d8:	3f01      	subs	r7, #1
 80159da:	2f16      	cmp	r7, #22
 80159dc:	d851      	bhi.n	8015a82 <_dtoa_r+0x212>
 80159de:	4b5b      	ldr	r3, [pc, #364]	@ (8015b4c <_dtoa_r+0x2dc>)
 80159e0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80159e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80159e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ec:	f7eb f884 	bl	8000af8 <__aeabi_dcmplt>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d048      	beq.n	8015a86 <_dtoa_r+0x216>
 80159f4:	3f01      	subs	r7, #1
 80159f6:	2300      	movs	r3, #0
 80159f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80159fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80159fc:	1b9b      	subs	r3, r3, r6
 80159fe:	1e5a      	subs	r2, r3, #1
 8015a00:	bf46      	itte	mi
 8015a02:	f1c3 0801 	rsbmi	r8, r3, #1
 8015a06:	2300      	movmi	r3, #0
 8015a08:	f04f 0800 	movpl.w	r8, #0
 8015a0c:	9208      	str	r2, [sp, #32]
 8015a0e:	bf48      	it	mi
 8015a10:	9308      	strmi	r3, [sp, #32]
 8015a12:	2f00      	cmp	r7, #0
 8015a14:	db39      	blt.n	8015a8a <_dtoa_r+0x21a>
 8015a16:	9b08      	ldr	r3, [sp, #32]
 8015a18:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015a1a:	443b      	add	r3, r7
 8015a1c:	9308      	str	r3, [sp, #32]
 8015a1e:	2300      	movs	r3, #0
 8015a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a24:	2b09      	cmp	r3, #9
 8015a26:	d864      	bhi.n	8015af2 <_dtoa_r+0x282>
 8015a28:	2b05      	cmp	r3, #5
 8015a2a:	bfc5      	ittet	gt
 8015a2c:	3b04      	subgt	r3, #4
 8015a2e:	2400      	movgt	r4, #0
 8015a30:	2401      	movle	r4, #1
 8015a32:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8015a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a36:	3b02      	subs	r3, #2
 8015a38:	2b03      	cmp	r3, #3
 8015a3a:	d865      	bhi.n	8015b08 <_dtoa_r+0x298>
 8015a3c:	e8df f003 	tbb	[pc, r3]
 8015a40:	5737392c 	.word	0x5737392c
 8015a44:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015a48:	441e      	add	r6, r3
 8015a4a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015a4e:	2b20      	cmp	r3, #32
 8015a50:	bfc9      	itett	gt
 8015a52:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015a56:	f1c3 0320 	rsble	r3, r3, #32
 8015a5a:	409f      	lslgt	r7, r3
 8015a5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015a60:	bfd8      	it	le
 8015a62:	fa04 f003 	lslle.w	r0, r4, r3
 8015a66:	f106 36ff 	add.w	r6, r6, #4294967295
 8015a6a:	bfc4      	itt	gt
 8015a6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015a70:	ea47 0003 	orrgt.w	r0, r7, r3
 8015a74:	f7ea fd54 	bl	8000520 <__aeabi_ui2d>
 8015a78:	2201      	movs	r2, #1
 8015a7a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015a7e:	9214      	str	r2, [sp, #80]	@ 0x50
 8015a80:	e777      	b.n	8015972 <_dtoa_r+0x102>
 8015a82:	2301      	movs	r3, #1
 8015a84:	e7b8      	b.n	80159f8 <_dtoa_r+0x188>
 8015a86:	9012      	str	r0, [sp, #72]	@ 0x48
 8015a88:	e7b7      	b.n	80159fa <_dtoa_r+0x18a>
 8015a8a:	427b      	negs	r3, r7
 8015a8c:	eba8 0807 	sub.w	r8, r8, r7
 8015a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a92:	2300      	movs	r3, #0
 8015a94:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015a96:	e7c4      	b.n	8015a22 <_dtoa_r+0x1b2>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	dc35      	bgt.n	8015b0e <_dtoa_r+0x29e>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	9307      	str	r3, [sp, #28]
 8015aaa:	920e      	str	r2, [sp, #56]	@ 0x38
 8015aac:	e00b      	b.n	8015ac6 <_dtoa_r+0x256>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e7f3      	b.n	8015a9a <_dtoa_r+0x22a>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ab8:	18fb      	adds	r3, r7, r3
 8015aba:	9300      	str	r3, [sp, #0]
 8015abc:	3301      	adds	r3, #1
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	9307      	str	r3, [sp, #28]
 8015ac2:	bfb8      	it	lt
 8015ac4:	2301      	movlt	r3, #1
 8015ac6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015aca:	2100      	movs	r1, #0
 8015acc:	2204      	movs	r2, #4
 8015ace:	f102 0514 	add.w	r5, r2, #20
 8015ad2:	429d      	cmp	r5, r3
 8015ad4:	d91f      	bls.n	8015b16 <_dtoa_r+0x2a6>
 8015ad6:	6041      	str	r1, [r0, #4]
 8015ad8:	4658      	mov	r0, fp
 8015ada:	f000 fcd7 	bl	801648c <_Balloc>
 8015ade:	4682      	mov	sl, r0
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	d13b      	bne.n	8015b5c <_dtoa_r+0x2ec>
 8015ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8015b50 <_dtoa_r+0x2e0>)
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	f240 11af 	movw	r1, #431	@ 0x1af
 8015aec:	e6d7      	b.n	801589e <_dtoa_r+0x2e>
 8015aee:	2301      	movs	r3, #1
 8015af0:	e7e0      	b.n	8015ab4 <_dtoa_r+0x244>
 8015af2:	2401      	movs	r4, #1
 8015af4:	2300      	movs	r3, #0
 8015af6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015afa:	f04f 33ff 	mov.w	r3, #4294967295
 8015afe:	2200      	movs	r2, #0
 8015b00:	9300      	str	r3, [sp, #0]
 8015b02:	9307      	str	r3, [sp, #28]
 8015b04:	2312      	movs	r3, #18
 8015b06:	e7d0      	b.n	8015aaa <_dtoa_r+0x23a>
 8015b08:	2301      	movs	r3, #1
 8015b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015b0c:	e7f5      	b.n	8015afa <_dtoa_r+0x28a>
 8015b0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b10:	9300      	str	r3, [sp, #0]
 8015b12:	9307      	str	r3, [sp, #28]
 8015b14:	e7d7      	b.n	8015ac6 <_dtoa_r+0x256>
 8015b16:	3101      	adds	r1, #1
 8015b18:	0052      	lsls	r2, r2, #1
 8015b1a:	e7d8      	b.n	8015ace <_dtoa_r+0x25e>
 8015b1c:	f3af 8000 	nop.w
 8015b20:	636f4361 	.word	0x636f4361
 8015b24:	3fd287a7 	.word	0x3fd287a7
 8015b28:	8b60c8b3 	.word	0x8b60c8b3
 8015b2c:	3fc68a28 	.word	0x3fc68a28
 8015b30:	509f79fb 	.word	0x509f79fb
 8015b34:	3fd34413 	.word	0x3fd34413
 8015b38:	0818caac 	.word	0x0818caac
 8015b3c:	0818cac3 	.word	0x0818cac3
 8015b40:	7ff00000 	.word	0x7ff00000
 8015b44:	0818ce09 	.word	0x0818ce09
 8015b48:	3ff80000 	.word	0x3ff80000
 8015b4c:	0818cbc0 	.word	0x0818cbc0
 8015b50:	0818cb1b 	.word	0x0818cb1b
 8015b54:	0818caa8 	.word	0x0818caa8
 8015b58:	0818ce08 	.word	0x0818ce08
 8015b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015b60:	6018      	str	r0, [r3, #0]
 8015b62:	9b07      	ldr	r3, [sp, #28]
 8015b64:	2b0e      	cmp	r3, #14
 8015b66:	f200 80a4 	bhi.w	8015cb2 <_dtoa_r+0x442>
 8015b6a:	2c00      	cmp	r4, #0
 8015b6c:	f000 80a1 	beq.w	8015cb2 <_dtoa_r+0x442>
 8015b70:	2f00      	cmp	r7, #0
 8015b72:	dd33      	ble.n	8015bdc <_dtoa_r+0x36c>
 8015b74:	f007 020f 	and.w	r2, r7, #15
 8015b78:	4bac      	ldr	r3, [pc, #688]	@ (8015e2c <_dtoa_r+0x5bc>)
 8015b7a:	05f8      	lsls	r0, r7, #23
 8015b7c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b84:	ed93 7b00 	vldr	d7, [r3]
 8015b88:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015b8c:	d516      	bpl.n	8015bbc <_dtoa_r+0x34c>
 8015b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8015e30 <_dtoa_r+0x5c0>)
 8015b90:	f004 040f 	and.w	r4, r4, #15
 8015b94:	2603      	movs	r6, #3
 8015b96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b9e:	f7ea fe63 	bl	8000868 <__aeabi_ddiv>
 8015ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ba6:	4da2      	ldr	r5, [pc, #648]	@ (8015e30 <_dtoa_r+0x5c0>)
 8015ba8:	b954      	cbnz	r4, 8015bc0 <_dtoa_r+0x350>
 8015baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bb2:	f7ea fe59 	bl	8000868 <__aeabi_ddiv>
 8015bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bba:	e028      	b.n	8015c0e <_dtoa_r+0x39e>
 8015bbc:	2602      	movs	r6, #2
 8015bbe:	e7f2      	b.n	8015ba6 <_dtoa_r+0x336>
 8015bc0:	07e1      	lsls	r1, r4, #31
 8015bc2:	d508      	bpl.n	8015bd6 <_dtoa_r+0x366>
 8015bc4:	3601      	adds	r6, #1
 8015bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015bca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015bce:	f7ea fd21 	bl	8000614 <__aeabi_dmul>
 8015bd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015bd6:	1064      	asrs	r4, r4, #1
 8015bd8:	3508      	adds	r5, #8
 8015bda:	e7e5      	b.n	8015ba8 <_dtoa_r+0x338>
 8015bdc:	f000 80d2 	beq.w	8015d84 <_dtoa_r+0x514>
 8015be0:	427c      	negs	r4, r7
 8015be2:	4b92      	ldr	r3, [pc, #584]	@ (8015e2c <_dtoa_r+0x5bc>)
 8015be4:	4d92      	ldr	r5, [pc, #584]	@ (8015e30 <_dtoa_r+0x5c0>)
 8015be6:	2602      	movs	r6, #2
 8015be8:	f004 020f 	and.w	r2, r4, #15
 8015bec:	1124      	asrs	r4, r4, #4
 8015bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfa:	f7ea fd0b 	bl	8000614 <__aeabi_dmul>
 8015bfe:	2300      	movs	r3, #0
 8015c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c04:	2c00      	cmp	r4, #0
 8015c06:	f040 80b2 	bne.w	8015d6e <_dtoa_r+0x4fe>
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d1d3      	bne.n	8015bb6 <_dtoa_r+0x346>
 8015c0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015c10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 80b7 	beq.w	8015d88 <_dtoa_r+0x518>
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	4b85      	ldr	r3, [pc, #532]	@ (8015e34 <_dtoa_r+0x5c4>)
 8015c1e:	4620      	mov	r0, r4
 8015c20:	4629      	mov	r1, r5
 8015c22:	f7ea ff69 	bl	8000af8 <__aeabi_dcmplt>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	f000 80ae 	beq.w	8015d88 <_dtoa_r+0x518>
 8015c2c:	9b07      	ldr	r3, [sp, #28]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	f000 80aa 	beq.w	8015d88 <_dtoa_r+0x518>
 8015c34:	9b00      	ldr	r3, [sp, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	dd37      	ble.n	8015caa <_dtoa_r+0x43a>
 8015c3a:	1e7b      	subs	r3, r7, #1
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	2200      	movs	r2, #0
 8015c40:	4629      	mov	r1, r5
 8015c42:	9304      	str	r3, [sp, #16]
 8015c44:	3601      	adds	r6, #1
 8015c46:	4b7c      	ldr	r3, [pc, #496]	@ (8015e38 <_dtoa_r+0x5c8>)
 8015c48:	f7ea fce4 	bl	8000614 <__aeabi_dmul>
 8015c4c:	9c00      	ldr	r4, [sp, #0]
 8015c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c52:	4630      	mov	r0, r6
 8015c54:	f7ea fc74 	bl	8000540 <__aeabi_i2d>
 8015c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c5c:	f7ea fcda 	bl	8000614 <__aeabi_dmul>
 8015c60:	2200      	movs	r2, #0
 8015c62:	4b76      	ldr	r3, [pc, #472]	@ (8015e3c <_dtoa_r+0x5cc>)
 8015c64:	f7ea fb20 	bl	80002a8 <__adddf3>
 8015c68:	4605      	mov	r5, r0
 8015c6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015c6e:	2c00      	cmp	r4, #0
 8015c70:	f040 808d 	bne.w	8015d8e <_dtoa_r+0x51e>
 8015c74:	2200      	movs	r2, #0
 8015c76:	4b72      	ldr	r3, [pc, #456]	@ (8015e40 <_dtoa_r+0x5d0>)
 8015c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c7c:	f7ea fb12 	bl	80002a4 <__aeabi_dsub>
 8015c80:	4602      	mov	r2, r0
 8015c82:	460b      	mov	r3, r1
 8015c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015c88:	462a      	mov	r2, r5
 8015c8a:	4633      	mov	r3, r6
 8015c8c:	f7ea ff52 	bl	8000b34 <__aeabi_dcmpgt>
 8015c90:	2800      	cmp	r0, #0
 8015c92:	f040 828b 	bne.w	80161ac <_dtoa_r+0x93c>
 8015c96:	462a      	mov	r2, r5
 8015c98:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ca0:	f7ea ff2a 	bl	8000af8 <__aeabi_dcmplt>
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	f040 8128 	bne.w	8015efa <_dtoa_r+0x68a>
 8015caa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015cb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	f2c0 815a 	blt.w	8015f6e <_dtoa_r+0x6fe>
 8015cba:	2f0e      	cmp	r7, #14
 8015cbc:	f300 8157 	bgt.w	8015f6e <_dtoa_r+0x6fe>
 8015cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8015e2c <_dtoa_r+0x5bc>)
 8015cc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015cc6:	ed93 7b00 	vldr	d7, [r3]
 8015cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	ed8d 7b00 	vstr	d7, [sp]
 8015cd2:	da03      	bge.n	8015cdc <_dtoa_r+0x46c>
 8015cd4:	9b07      	ldr	r3, [sp, #28]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	f340 8101 	ble.w	8015ede <_dtoa_r+0x66e>
 8015cdc:	4656      	mov	r6, sl
 8015cde:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	4629      	mov	r1, r5
 8015cea:	f7ea fdbd 	bl	8000868 <__aeabi_ddiv>
 8015cee:	f7ea ff41 	bl	8000b74 <__aeabi_d2iz>
 8015cf2:	4680      	mov	r8, r0
 8015cf4:	f7ea fc24 	bl	8000540 <__aeabi_i2d>
 8015cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cfc:	f7ea fc8a 	bl	8000614 <__aeabi_dmul>
 8015d00:	4602      	mov	r2, r0
 8015d02:	4620      	mov	r0, r4
 8015d04:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015d08:	460b      	mov	r3, r1
 8015d0a:	4629      	mov	r1, r5
 8015d0c:	f7ea faca 	bl	80002a4 <__aeabi_dsub>
 8015d10:	9d07      	ldr	r5, [sp, #28]
 8015d12:	f806 4b01 	strb.w	r4, [r6], #1
 8015d16:	eba6 040a 	sub.w	r4, r6, sl
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	42a5      	cmp	r5, r4
 8015d20:	f040 8117 	bne.w	8015f52 <_dtoa_r+0x6e2>
 8015d24:	f7ea fac0 	bl	80002a8 <__adddf3>
 8015d28:	4604      	mov	r4, r0
 8015d2a:	460d      	mov	r5, r1
 8015d2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d30:	f7ea ff00 	bl	8000b34 <__aeabi_dcmpgt>
 8015d34:	2800      	cmp	r0, #0
 8015d36:	f040 80f9 	bne.w	8015f2c <_dtoa_r+0x6bc>
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	4629      	mov	r1, r5
 8015d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d42:	f7ea fecf 	bl	8000ae4 <__aeabi_dcmpeq>
 8015d46:	b118      	cbz	r0, 8015d50 <_dtoa_r+0x4e0>
 8015d48:	f018 0f01 	tst.w	r8, #1
 8015d4c:	f040 80ee 	bne.w	8015f2c <_dtoa_r+0x6bc>
 8015d50:	4649      	mov	r1, r9
 8015d52:	4658      	mov	r0, fp
 8015d54:	f000 fbda 	bl	801650c <_Bfree>
 8015d58:	2300      	movs	r3, #0
 8015d5a:	3701      	adds	r7, #1
 8015d5c:	7033      	strb	r3, [r6, #0]
 8015d5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015d60:	601f      	str	r7, [r3, #0]
 8015d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	f000 831d 	beq.w	80163a4 <_dtoa_r+0xb34>
 8015d6a:	601e      	str	r6, [r3, #0]
 8015d6c:	e31a      	b.n	80163a4 <_dtoa_r+0xb34>
 8015d6e:	07e2      	lsls	r2, r4, #31
 8015d70:	d505      	bpl.n	8015d7e <_dtoa_r+0x50e>
 8015d72:	3601      	adds	r6, #1
 8015d74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d78:	f7ea fc4c 	bl	8000614 <__aeabi_dmul>
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	1064      	asrs	r4, r4, #1
 8015d80:	3508      	adds	r5, #8
 8015d82:	e73f      	b.n	8015c04 <_dtoa_r+0x394>
 8015d84:	2602      	movs	r6, #2
 8015d86:	e742      	b.n	8015c0e <_dtoa_r+0x39e>
 8015d88:	9c07      	ldr	r4, [sp, #28]
 8015d8a:	9704      	str	r7, [sp, #16]
 8015d8c:	e761      	b.n	8015c52 <_dtoa_r+0x3e2>
 8015d8e:	4b27      	ldr	r3, [pc, #156]	@ (8015e2c <_dtoa_r+0x5bc>)
 8015d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d96:	4454      	add	r4, sl
 8015d98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015d9c:	2900      	cmp	r1, #0
 8015d9e:	d053      	beq.n	8015e48 <_dtoa_r+0x5d8>
 8015da0:	2000      	movs	r0, #0
 8015da2:	4928      	ldr	r1, [pc, #160]	@ (8015e44 <_dtoa_r+0x5d4>)
 8015da4:	f7ea fd60 	bl	8000868 <__aeabi_ddiv>
 8015da8:	4633      	mov	r3, r6
 8015daa:	4656      	mov	r6, sl
 8015dac:	462a      	mov	r2, r5
 8015dae:	f7ea fa79 	bl	80002a4 <__aeabi_dsub>
 8015db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015dba:	f7ea fedb 	bl	8000b74 <__aeabi_d2iz>
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	f7ea fbbe 	bl	8000540 <__aeabi_i2d>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	3530      	adds	r5, #48	@ 0x30
 8015dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015dce:	f7ea fa69 	bl	80002a4 <__aeabi_dsub>
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	f806 5b01 	strb.w	r5, [r6], #1
 8015dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015de2:	f7ea fe89 	bl	8000af8 <__aeabi_dcmplt>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d171      	bne.n	8015ece <_dtoa_r+0x65e>
 8015dea:	2000      	movs	r0, #0
 8015dec:	4911      	ldr	r1, [pc, #68]	@ (8015e34 <_dtoa_r+0x5c4>)
 8015dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015df2:	f7ea fa57 	bl	80002a4 <__aeabi_dsub>
 8015df6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015dfa:	f7ea fe7d 	bl	8000af8 <__aeabi_dcmplt>
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	f040 8095 	bne.w	8015f2e <_dtoa_r+0x6be>
 8015e04:	42a6      	cmp	r6, r4
 8015e06:	f43f af50 	beq.w	8015caa <_dtoa_r+0x43a>
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8015e38 <_dtoa_r+0x5c8>)
 8015e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015e12:	f7ea fbff 	bl	8000614 <__aeabi_dmul>
 8015e16:	2200      	movs	r2, #0
 8015e18:	4b07      	ldr	r3, [pc, #28]	@ (8015e38 <_dtoa_r+0x5c8>)
 8015e1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e22:	f7ea fbf7 	bl	8000614 <__aeabi_dmul>
 8015e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e2a:	e7c4      	b.n	8015db6 <_dtoa_r+0x546>
 8015e2c:	0818cbc0 	.word	0x0818cbc0
 8015e30:	0818cb98 	.word	0x0818cb98
 8015e34:	3ff00000 	.word	0x3ff00000
 8015e38:	40240000 	.word	0x40240000
 8015e3c:	401c0000 	.word	0x401c0000
 8015e40:	40140000 	.word	0x40140000
 8015e44:	3fe00000 	.word	0x3fe00000
 8015e48:	4631      	mov	r1, r6
 8015e4a:	4656      	mov	r6, sl
 8015e4c:	4628      	mov	r0, r5
 8015e4e:	f7ea fbe1 	bl	8000614 <__aeabi_dmul>
 8015e52:	9415      	str	r4, [sp, #84]	@ 0x54
 8015e54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e5c:	f7ea fe8a 	bl	8000b74 <__aeabi_d2iz>
 8015e60:	4605      	mov	r5, r0
 8015e62:	f7ea fb6d 	bl	8000540 <__aeabi_i2d>
 8015e66:	4602      	mov	r2, r0
 8015e68:	3530      	adds	r5, #48	@ 0x30
 8015e6a:	460b      	mov	r3, r1
 8015e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e70:	f7ea fa18 	bl	80002a4 <__aeabi_dsub>
 8015e74:	f806 5b01 	strb.w	r5, [r6], #1
 8015e78:	4602      	mov	r2, r0
 8015e7a:	460b      	mov	r3, r1
 8015e7c:	42a6      	cmp	r6, r4
 8015e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015e82:	f04f 0200 	mov.w	r2, #0
 8015e86:	d124      	bne.n	8015ed2 <_dtoa_r+0x662>
 8015e88:	4bac      	ldr	r3, [pc, #688]	@ (801613c <_dtoa_r+0x8cc>)
 8015e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015e8e:	f7ea fa0b 	bl	80002a8 <__adddf3>
 8015e92:	4602      	mov	r2, r0
 8015e94:	460b      	mov	r3, r1
 8015e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e9a:	f7ea fe4b 	bl	8000b34 <__aeabi_dcmpgt>
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d145      	bne.n	8015f2e <_dtoa_r+0x6be>
 8015ea2:	2000      	movs	r0, #0
 8015ea4:	49a5      	ldr	r1, [pc, #660]	@ (801613c <_dtoa_r+0x8cc>)
 8015ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015eaa:	f7ea f9fb 	bl	80002a4 <__aeabi_dsub>
 8015eae:	4602      	mov	r2, r0
 8015eb0:	460b      	mov	r3, r1
 8015eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015eb6:	f7ea fe1f 	bl	8000af8 <__aeabi_dcmplt>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	f43f aef5 	beq.w	8015caa <_dtoa_r+0x43a>
 8015ec0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015ec2:	1e73      	subs	r3, r6, #1
 8015ec4:	9315      	str	r3, [sp, #84]	@ 0x54
 8015ec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015eca:	2b30      	cmp	r3, #48	@ 0x30
 8015ecc:	d0f8      	beq.n	8015ec0 <_dtoa_r+0x650>
 8015ece:	9f04      	ldr	r7, [sp, #16]
 8015ed0:	e73e      	b.n	8015d50 <_dtoa_r+0x4e0>
 8015ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8016140 <_dtoa_r+0x8d0>)
 8015ed4:	f7ea fb9e 	bl	8000614 <__aeabi_dmul>
 8015ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015edc:	e7bc      	b.n	8015e58 <_dtoa_r+0x5e8>
 8015ede:	d10c      	bne.n	8015efa <_dtoa_r+0x68a>
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	4b98      	ldr	r3, [pc, #608]	@ (8016144 <_dtoa_r+0x8d4>)
 8015ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ee8:	f7ea fb94 	bl	8000614 <__aeabi_dmul>
 8015eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ef0:	f7ea fe16 	bl	8000b20 <__aeabi_dcmpge>
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	f000 8157 	beq.w	80161a8 <_dtoa_r+0x938>
 8015efa:	2400      	movs	r4, #0
 8015efc:	4625      	mov	r5, r4
 8015efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f00:	4656      	mov	r6, sl
 8015f02:	43db      	mvns	r3, r3
 8015f04:	9304      	str	r3, [sp, #16]
 8015f06:	2700      	movs	r7, #0
 8015f08:	4621      	mov	r1, r4
 8015f0a:	4658      	mov	r0, fp
 8015f0c:	f000 fafe 	bl	801650c <_Bfree>
 8015f10:	2d00      	cmp	r5, #0
 8015f12:	d0dc      	beq.n	8015ece <_dtoa_r+0x65e>
 8015f14:	b12f      	cbz	r7, 8015f22 <_dtoa_r+0x6b2>
 8015f16:	42af      	cmp	r7, r5
 8015f18:	d003      	beq.n	8015f22 <_dtoa_r+0x6b2>
 8015f1a:	4639      	mov	r1, r7
 8015f1c:	4658      	mov	r0, fp
 8015f1e:	f000 faf5 	bl	801650c <_Bfree>
 8015f22:	4629      	mov	r1, r5
 8015f24:	4658      	mov	r0, fp
 8015f26:	f000 faf1 	bl	801650c <_Bfree>
 8015f2a:	e7d0      	b.n	8015ece <_dtoa_r+0x65e>
 8015f2c:	9704      	str	r7, [sp, #16]
 8015f2e:	4633      	mov	r3, r6
 8015f30:	461e      	mov	r6, r3
 8015f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f36:	2a39      	cmp	r2, #57	@ 0x39
 8015f38:	d107      	bne.n	8015f4a <_dtoa_r+0x6da>
 8015f3a:	459a      	cmp	sl, r3
 8015f3c:	d1f8      	bne.n	8015f30 <_dtoa_r+0x6c0>
 8015f3e:	9a04      	ldr	r2, [sp, #16]
 8015f40:	3201      	adds	r2, #1
 8015f42:	9204      	str	r2, [sp, #16]
 8015f44:	2230      	movs	r2, #48	@ 0x30
 8015f46:	f88a 2000 	strb.w	r2, [sl]
 8015f4a:	781a      	ldrb	r2, [r3, #0]
 8015f4c:	3201      	adds	r2, #1
 8015f4e:	701a      	strb	r2, [r3, #0]
 8015f50:	e7bd      	b.n	8015ece <_dtoa_r+0x65e>
 8015f52:	2200      	movs	r2, #0
 8015f54:	4b7a      	ldr	r3, [pc, #488]	@ (8016140 <_dtoa_r+0x8d0>)
 8015f56:	f7ea fb5d 	bl	8000614 <__aeabi_dmul>
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4604      	mov	r4, r0
 8015f60:	460d      	mov	r5, r1
 8015f62:	f7ea fdbf 	bl	8000ae4 <__aeabi_dcmpeq>
 8015f66:	2800      	cmp	r0, #0
 8015f68:	f43f aebb 	beq.w	8015ce2 <_dtoa_r+0x472>
 8015f6c:	e6f0      	b.n	8015d50 <_dtoa_r+0x4e0>
 8015f6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015f70:	2a00      	cmp	r2, #0
 8015f72:	f000 80db 	beq.w	801612c <_dtoa_r+0x8bc>
 8015f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f78:	2a01      	cmp	r2, #1
 8015f7a:	f300 80bf 	bgt.w	80160fc <_dtoa_r+0x88c>
 8015f7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015f80:	2a00      	cmp	r2, #0
 8015f82:	f000 80b7 	beq.w	80160f4 <_dtoa_r+0x884>
 8015f86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015f8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015f8c:	4646      	mov	r6, r8
 8015f8e:	9a08      	ldr	r2, [sp, #32]
 8015f90:	2101      	movs	r1, #1
 8015f92:	4658      	mov	r0, fp
 8015f94:	4498      	add	r8, r3
 8015f96:	441a      	add	r2, r3
 8015f98:	9208      	str	r2, [sp, #32]
 8015f9a:	f000 fbb7 	bl	801670c <__i2b>
 8015f9e:	4605      	mov	r5, r0
 8015fa0:	b15e      	cbz	r6, 8015fba <_dtoa_r+0x74a>
 8015fa2:	9b08      	ldr	r3, [sp, #32]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	dd08      	ble.n	8015fba <_dtoa_r+0x74a>
 8015fa8:	42b3      	cmp	r3, r6
 8015faa:	9a08      	ldr	r2, [sp, #32]
 8015fac:	bfa8      	it	ge
 8015fae:	4633      	movge	r3, r6
 8015fb0:	eba8 0803 	sub.w	r8, r8, r3
 8015fb4:	1af6      	subs	r6, r6, r3
 8015fb6:	1ad3      	subs	r3, r2, r3
 8015fb8:	9308      	str	r3, [sp, #32]
 8015fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015fbc:	b1f3      	cbz	r3, 8015ffc <_dtoa_r+0x78c>
 8015fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	f000 80b7 	beq.w	8016134 <_dtoa_r+0x8c4>
 8015fc6:	b18c      	cbz	r4, 8015fec <_dtoa_r+0x77c>
 8015fc8:	4629      	mov	r1, r5
 8015fca:	4622      	mov	r2, r4
 8015fcc:	4658      	mov	r0, fp
 8015fce:	f000 fc5d 	bl	801688c <__pow5mult>
 8015fd2:	464a      	mov	r2, r9
 8015fd4:	4601      	mov	r1, r0
 8015fd6:	4605      	mov	r5, r0
 8015fd8:	4658      	mov	r0, fp
 8015fda:	f000 fbad 	bl	8016738 <__multiply>
 8015fde:	4649      	mov	r1, r9
 8015fe0:	9004      	str	r0, [sp, #16]
 8015fe2:	4658      	mov	r0, fp
 8015fe4:	f000 fa92 	bl	801650c <_Bfree>
 8015fe8:	9b04      	ldr	r3, [sp, #16]
 8015fea:	4699      	mov	r9, r3
 8015fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015fee:	1b1a      	subs	r2, r3, r4
 8015ff0:	d004      	beq.n	8015ffc <_dtoa_r+0x78c>
 8015ff2:	4649      	mov	r1, r9
 8015ff4:	4658      	mov	r0, fp
 8015ff6:	f000 fc49 	bl	801688c <__pow5mult>
 8015ffa:	4681      	mov	r9, r0
 8015ffc:	2101      	movs	r1, #1
 8015ffe:	4658      	mov	r0, fp
 8016000:	f000 fb84 	bl	801670c <__i2b>
 8016004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016006:	4604      	mov	r4, r0
 8016008:	2b00      	cmp	r3, #0
 801600a:	f000 81cf 	beq.w	80163ac <_dtoa_r+0xb3c>
 801600e:	461a      	mov	r2, r3
 8016010:	4601      	mov	r1, r0
 8016012:	4658      	mov	r0, fp
 8016014:	f000 fc3a 	bl	801688c <__pow5mult>
 8016018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801601a:	4604      	mov	r4, r0
 801601c:	2b01      	cmp	r3, #1
 801601e:	f300 8095 	bgt.w	801614c <_dtoa_r+0x8dc>
 8016022:	9b02      	ldr	r3, [sp, #8]
 8016024:	2b00      	cmp	r3, #0
 8016026:	f040 8087 	bne.w	8016138 <_dtoa_r+0x8c8>
 801602a:	9b03      	ldr	r3, [sp, #12]
 801602c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016030:	2b00      	cmp	r3, #0
 8016032:	f040 8089 	bne.w	8016148 <_dtoa_r+0x8d8>
 8016036:	9b03      	ldr	r3, [sp, #12]
 8016038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801603c:	0d1b      	lsrs	r3, r3, #20
 801603e:	051b      	lsls	r3, r3, #20
 8016040:	b12b      	cbz	r3, 801604e <_dtoa_r+0x7de>
 8016042:	9b08      	ldr	r3, [sp, #32]
 8016044:	f108 0801 	add.w	r8, r8, #1
 8016048:	3301      	adds	r3, #1
 801604a:	9308      	str	r3, [sp, #32]
 801604c:	2301      	movs	r3, #1
 801604e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016052:	2b00      	cmp	r3, #0
 8016054:	f000 81b0 	beq.w	80163b8 <_dtoa_r+0xb48>
 8016058:	6923      	ldr	r3, [r4, #16]
 801605a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801605e:	6918      	ldr	r0, [r3, #16]
 8016060:	f000 fb08 	bl	8016674 <__hi0bits>
 8016064:	f1c0 0020 	rsb	r0, r0, #32
 8016068:	9b08      	ldr	r3, [sp, #32]
 801606a:	4418      	add	r0, r3
 801606c:	f010 001f 	ands.w	r0, r0, #31
 8016070:	d077      	beq.n	8016162 <_dtoa_r+0x8f2>
 8016072:	f1c0 0320 	rsb	r3, r0, #32
 8016076:	2b04      	cmp	r3, #4
 8016078:	dd6b      	ble.n	8016152 <_dtoa_r+0x8e2>
 801607a:	f1c0 001c 	rsb	r0, r0, #28
 801607e:	9b08      	ldr	r3, [sp, #32]
 8016080:	4480      	add	r8, r0
 8016082:	4403      	add	r3, r0
 8016084:	4406      	add	r6, r0
 8016086:	9308      	str	r3, [sp, #32]
 8016088:	f1b8 0f00 	cmp.w	r8, #0
 801608c:	dd05      	ble.n	801609a <_dtoa_r+0x82a>
 801608e:	4649      	mov	r1, r9
 8016090:	4642      	mov	r2, r8
 8016092:	4658      	mov	r0, fp
 8016094:	f000 fc54 	bl	8016940 <__lshift>
 8016098:	4681      	mov	r9, r0
 801609a:	9b08      	ldr	r3, [sp, #32]
 801609c:	2b00      	cmp	r3, #0
 801609e:	dd05      	ble.n	80160ac <_dtoa_r+0x83c>
 80160a0:	4621      	mov	r1, r4
 80160a2:	461a      	mov	r2, r3
 80160a4:	4658      	mov	r0, fp
 80160a6:	f000 fc4b 	bl	8016940 <__lshift>
 80160aa:	4604      	mov	r4, r0
 80160ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d059      	beq.n	8016166 <_dtoa_r+0x8f6>
 80160b2:	4621      	mov	r1, r4
 80160b4:	4648      	mov	r0, r9
 80160b6:	f000 fcaf 	bl	8016a18 <__mcmp>
 80160ba:	2800      	cmp	r0, #0
 80160bc:	da53      	bge.n	8016166 <_dtoa_r+0x8f6>
 80160be:	1e7b      	subs	r3, r7, #1
 80160c0:	4649      	mov	r1, r9
 80160c2:	220a      	movs	r2, #10
 80160c4:	4658      	mov	r0, fp
 80160c6:	9304      	str	r3, [sp, #16]
 80160c8:	2300      	movs	r3, #0
 80160ca:	f000 fa41 	bl	8016550 <__multadd>
 80160ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80160d0:	4681      	mov	r9, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	f000 8172 	beq.w	80163bc <_dtoa_r+0xb4c>
 80160d8:	2300      	movs	r3, #0
 80160da:	4629      	mov	r1, r5
 80160dc:	220a      	movs	r2, #10
 80160de:	4658      	mov	r0, fp
 80160e0:	f000 fa36 	bl	8016550 <__multadd>
 80160e4:	9b00      	ldr	r3, [sp, #0]
 80160e6:	4605      	mov	r5, r0
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	dc67      	bgt.n	80161bc <_dtoa_r+0x94c>
 80160ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ee:	2b02      	cmp	r3, #2
 80160f0:	dc41      	bgt.n	8016176 <_dtoa_r+0x906>
 80160f2:	e063      	b.n	80161bc <_dtoa_r+0x94c>
 80160f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80160f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80160fa:	e746      	b.n	8015f8a <_dtoa_r+0x71a>
 80160fc:	9b07      	ldr	r3, [sp, #28]
 80160fe:	1e5c      	subs	r4, r3, #1
 8016100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016102:	42a3      	cmp	r3, r4
 8016104:	bfb7      	itett	lt
 8016106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016108:	1b1c      	subge	r4, r3, r4
 801610a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801610c:	1ae3      	sublt	r3, r4, r3
 801610e:	bfbe      	ittt	lt
 8016110:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8016112:	2400      	movlt	r4, #0
 8016114:	18d2      	addlt	r2, r2, r3
 8016116:	9b07      	ldr	r3, [sp, #28]
 8016118:	bfb8      	it	lt
 801611a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801611c:	2b00      	cmp	r3, #0
 801611e:	bfb5      	itete	lt
 8016120:	eba8 0603 	sublt.w	r6, r8, r3
 8016124:	4646      	movge	r6, r8
 8016126:	2300      	movlt	r3, #0
 8016128:	9b07      	ldrge	r3, [sp, #28]
 801612a:	e730      	b.n	8015f8e <_dtoa_r+0x71e>
 801612c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801612e:	4646      	mov	r6, r8
 8016130:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016132:	e735      	b.n	8015fa0 <_dtoa_r+0x730>
 8016134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016136:	e75c      	b.n	8015ff2 <_dtoa_r+0x782>
 8016138:	2300      	movs	r3, #0
 801613a:	e788      	b.n	801604e <_dtoa_r+0x7de>
 801613c:	3fe00000 	.word	0x3fe00000
 8016140:	40240000 	.word	0x40240000
 8016144:	40140000 	.word	0x40140000
 8016148:	9b02      	ldr	r3, [sp, #8]
 801614a:	e780      	b.n	801604e <_dtoa_r+0x7de>
 801614c:	2300      	movs	r3, #0
 801614e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016150:	e782      	b.n	8016058 <_dtoa_r+0x7e8>
 8016152:	d099      	beq.n	8016088 <_dtoa_r+0x818>
 8016154:	331c      	adds	r3, #28
 8016156:	9a08      	ldr	r2, [sp, #32]
 8016158:	441a      	add	r2, r3
 801615a:	4498      	add	r8, r3
 801615c:	441e      	add	r6, r3
 801615e:	9208      	str	r2, [sp, #32]
 8016160:	e792      	b.n	8016088 <_dtoa_r+0x818>
 8016162:	4603      	mov	r3, r0
 8016164:	e7f6      	b.n	8016154 <_dtoa_r+0x8e4>
 8016166:	9b07      	ldr	r3, [sp, #28]
 8016168:	9704      	str	r7, [sp, #16]
 801616a:	2b00      	cmp	r3, #0
 801616c:	dc20      	bgt.n	80161b0 <_dtoa_r+0x940>
 801616e:	9300      	str	r3, [sp, #0]
 8016170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016172:	2b02      	cmp	r3, #2
 8016174:	dd1e      	ble.n	80161b4 <_dtoa_r+0x944>
 8016176:	9b00      	ldr	r3, [sp, #0]
 8016178:	2b00      	cmp	r3, #0
 801617a:	f47f aec0 	bne.w	8015efe <_dtoa_r+0x68e>
 801617e:	4621      	mov	r1, r4
 8016180:	2205      	movs	r2, #5
 8016182:	4658      	mov	r0, fp
 8016184:	f000 f9e4 	bl	8016550 <__multadd>
 8016188:	4601      	mov	r1, r0
 801618a:	4604      	mov	r4, r0
 801618c:	4648      	mov	r0, r9
 801618e:	f000 fc43 	bl	8016a18 <__mcmp>
 8016192:	2800      	cmp	r0, #0
 8016194:	f77f aeb3 	ble.w	8015efe <_dtoa_r+0x68e>
 8016198:	2331      	movs	r3, #49	@ 0x31
 801619a:	4656      	mov	r6, sl
 801619c:	f806 3b01 	strb.w	r3, [r6], #1
 80161a0:	9b04      	ldr	r3, [sp, #16]
 80161a2:	3301      	adds	r3, #1
 80161a4:	9304      	str	r3, [sp, #16]
 80161a6:	e6ae      	b.n	8015f06 <_dtoa_r+0x696>
 80161a8:	9c07      	ldr	r4, [sp, #28]
 80161aa:	9704      	str	r7, [sp, #16]
 80161ac:	4625      	mov	r5, r4
 80161ae:	e7f3      	b.n	8016198 <_dtoa_r+0x928>
 80161b0:	9b07      	ldr	r3, [sp, #28]
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	f000 8104 	beq.w	80163c4 <_dtoa_r+0xb54>
 80161bc:	2e00      	cmp	r6, #0
 80161be:	dd05      	ble.n	80161cc <_dtoa_r+0x95c>
 80161c0:	4629      	mov	r1, r5
 80161c2:	4632      	mov	r2, r6
 80161c4:	4658      	mov	r0, fp
 80161c6:	f000 fbbb 	bl	8016940 <__lshift>
 80161ca:	4605      	mov	r5, r0
 80161cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d05a      	beq.n	8016288 <_dtoa_r+0xa18>
 80161d2:	6869      	ldr	r1, [r5, #4]
 80161d4:	4658      	mov	r0, fp
 80161d6:	f000 f959 	bl	801648c <_Balloc>
 80161da:	4606      	mov	r6, r0
 80161dc:	b928      	cbnz	r0, 80161ea <_dtoa_r+0x97a>
 80161de:	4b84      	ldr	r3, [pc, #528]	@ (80163f0 <_dtoa_r+0xb80>)
 80161e0:	4602      	mov	r2, r0
 80161e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80161e6:	f7ff bb5a 	b.w	801589e <_dtoa_r+0x2e>
 80161ea:	692a      	ldr	r2, [r5, #16]
 80161ec:	f105 010c 	add.w	r1, r5, #12
 80161f0:	300c      	adds	r0, #12
 80161f2:	3202      	adds	r2, #2
 80161f4:	0092      	lsls	r2, r2, #2
 80161f6:	f7ff fa98 	bl	801572a <memcpy>
 80161fa:	2201      	movs	r2, #1
 80161fc:	4631      	mov	r1, r6
 80161fe:	4658      	mov	r0, fp
 8016200:	f000 fb9e 	bl	8016940 <__lshift>
 8016204:	f10a 0301 	add.w	r3, sl, #1
 8016208:	462f      	mov	r7, r5
 801620a:	4605      	mov	r5, r0
 801620c:	9307      	str	r3, [sp, #28]
 801620e:	9b00      	ldr	r3, [sp, #0]
 8016210:	4453      	add	r3, sl
 8016212:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016214:	9b02      	ldr	r3, [sp, #8]
 8016216:	f003 0301 	and.w	r3, r3, #1
 801621a:	930a      	str	r3, [sp, #40]	@ 0x28
 801621c:	9b07      	ldr	r3, [sp, #28]
 801621e:	4621      	mov	r1, r4
 8016220:	4648      	mov	r0, r9
 8016222:	3b01      	subs	r3, #1
 8016224:	9300      	str	r3, [sp, #0]
 8016226:	f7ff fa93 	bl	8015750 <quorem>
 801622a:	4639      	mov	r1, r7
 801622c:	9002      	str	r0, [sp, #8]
 801622e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016232:	4648      	mov	r0, r9
 8016234:	f000 fbf0 	bl	8016a18 <__mcmp>
 8016238:	462a      	mov	r2, r5
 801623a:	9008      	str	r0, [sp, #32]
 801623c:	4621      	mov	r1, r4
 801623e:	4658      	mov	r0, fp
 8016240:	f000 fc06 	bl	8016a50 <__mdiff>
 8016244:	68c2      	ldr	r2, [r0, #12]
 8016246:	4606      	mov	r6, r0
 8016248:	bb02      	cbnz	r2, 801628c <_dtoa_r+0xa1c>
 801624a:	4601      	mov	r1, r0
 801624c:	4648      	mov	r0, r9
 801624e:	f000 fbe3 	bl	8016a18 <__mcmp>
 8016252:	4602      	mov	r2, r0
 8016254:	4631      	mov	r1, r6
 8016256:	4658      	mov	r0, fp
 8016258:	920e      	str	r2, [sp, #56]	@ 0x38
 801625a:	f000 f957 	bl	801650c <_Bfree>
 801625e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016262:	9e07      	ldr	r6, [sp, #28]
 8016264:	ea43 0102 	orr.w	r1, r3, r2
 8016268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801626a:	4319      	orrs	r1, r3
 801626c:	d110      	bne.n	8016290 <_dtoa_r+0xa20>
 801626e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016272:	d029      	beq.n	80162c8 <_dtoa_r+0xa58>
 8016274:	9b08      	ldr	r3, [sp, #32]
 8016276:	2b00      	cmp	r3, #0
 8016278:	dd02      	ble.n	8016280 <_dtoa_r+0xa10>
 801627a:	9b02      	ldr	r3, [sp, #8]
 801627c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016280:	9b00      	ldr	r3, [sp, #0]
 8016282:	f883 8000 	strb.w	r8, [r3]
 8016286:	e63f      	b.n	8015f08 <_dtoa_r+0x698>
 8016288:	4628      	mov	r0, r5
 801628a:	e7bb      	b.n	8016204 <_dtoa_r+0x994>
 801628c:	2201      	movs	r2, #1
 801628e:	e7e1      	b.n	8016254 <_dtoa_r+0x9e4>
 8016290:	9b08      	ldr	r3, [sp, #32]
 8016292:	2b00      	cmp	r3, #0
 8016294:	db04      	blt.n	80162a0 <_dtoa_r+0xa30>
 8016296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016298:	430b      	orrs	r3, r1
 801629a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801629c:	430b      	orrs	r3, r1
 801629e:	d120      	bne.n	80162e2 <_dtoa_r+0xa72>
 80162a0:	2a00      	cmp	r2, #0
 80162a2:	dded      	ble.n	8016280 <_dtoa_r+0xa10>
 80162a4:	4649      	mov	r1, r9
 80162a6:	2201      	movs	r2, #1
 80162a8:	4658      	mov	r0, fp
 80162aa:	f000 fb49 	bl	8016940 <__lshift>
 80162ae:	4621      	mov	r1, r4
 80162b0:	4681      	mov	r9, r0
 80162b2:	f000 fbb1 	bl	8016a18 <__mcmp>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	dc03      	bgt.n	80162c2 <_dtoa_r+0xa52>
 80162ba:	d1e1      	bne.n	8016280 <_dtoa_r+0xa10>
 80162bc:	f018 0f01 	tst.w	r8, #1
 80162c0:	d0de      	beq.n	8016280 <_dtoa_r+0xa10>
 80162c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80162c6:	d1d8      	bne.n	801627a <_dtoa_r+0xa0a>
 80162c8:	2339      	movs	r3, #57	@ 0x39
 80162ca:	9a00      	ldr	r2, [sp, #0]
 80162cc:	7013      	strb	r3, [r2, #0]
 80162ce:	4633      	mov	r3, r6
 80162d0:	461e      	mov	r6, r3
 80162d2:	3b01      	subs	r3, #1
 80162d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80162d8:	2a39      	cmp	r2, #57	@ 0x39
 80162da:	d052      	beq.n	8016382 <_dtoa_r+0xb12>
 80162dc:	3201      	adds	r2, #1
 80162de:	701a      	strb	r2, [r3, #0]
 80162e0:	e612      	b.n	8015f08 <_dtoa_r+0x698>
 80162e2:	2a00      	cmp	r2, #0
 80162e4:	dd07      	ble.n	80162f6 <_dtoa_r+0xa86>
 80162e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80162ea:	d0ed      	beq.n	80162c8 <_dtoa_r+0xa58>
 80162ec:	f108 0301 	add.w	r3, r8, #1
 80162f0:	9a00      	ldr	r2, [sp, #0]
 80162f2:	7013      	strb	r3, [r2, #0]
 80162f4:	e608      	b.n	8015f08 <_dtoa_r+0x698>
 80162f6:	9b07      	ldr	r3, [sp, #28]
 80162f8:	9a07      	ldr	r2, [sp, #28]
 80162fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80162fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016300:	4293      	cmp	r3, r2
 8016302:	d028      	beq.n	8016356 <_dtoa_r+0xae6>
 8016304:	4649      	mov	r1, r9
 8016306:	2300      	movs	r3, #0
 8016308:	220a      	movs	r2, #10
 801630a:	4658      	mov	r0, fp
 801630c:	f000 f920 	bl	8016550 <__multadd>
 8016310:	42af      	cmp	r7, r5
 8016312:	4681      	mov	r9, r0
 8016314:	f04f 0300 	mov.w	r3, #0
 8016318:	f04f 020a 	mov.w	r2, #10
 801631c:	4639      	mov	r1, r7
 801631e:	4658      	mov	r0, fp
 8016320:	d107      	bne.n	8016332 <_dtoa_r+0xac2>
 8016322:	f000 f915 	bl	8016550 <__multadd>
 8016326:	4607      	mov	r7, r0
 8016328:	4605      	mov	r5, r0
 801632a:	9b07      	ldr	r3, [sp, #28]
 801632c:	3301      	adds	r3, #1
 801632e:	9307      	str	r3, [sp, #28]
 8016330:	e774      	b.n	801621c <_dtoa_r+0x9ac>
 8016332:	f000 f90d 	bl	8016550 <__multadd>
 8016336:	4629      	mov	r1, r5
 8016338:	4607      	mov	r7, r0
 801633a:	2300      	movs	r3, #0
 801633c:	220a      	movs	r2, #10
 801633e:	4658      	mov	r0, fp
 8016340:	f000 f906 	bl	8016550 <__multadd>
 8016344:	4605      	mov	r5, r0
 8016346:	e7f0      	b.n	801632a <_dtoa_r+0xaba>
 8016348:	9b00      	ldr	r3, [sp, #0]
 801634a:	2700      	movs	r7, #0
 801634c:	2b00      	cmp	r3, #0
 801634e:	bfcc      	ite	gt
 8016350:	461e      	movgt	r6, r3
 8016352:	2601      	movle	r6, #1
 8016354:	4456      	add	r6, sl
 8016356:	4649      	mov	r1, r9
 8016358:	2201      	movs	r2, #1
 801635a:	4658      	mov	r0, fp
 801635c:	f000 faf0 	bl	8016940 <__lshift>
 8016360:	4621      	mov	r1, r4
 8016362:	4681      	mov	r9, r0
 8016364:	f000 fb58 	bl	8016a18 <__mcmp>
 8016368:	2800      	cmp	r0, #0
 801636a:	dcb0      	bgt.n	80162ce <_dtoa_r+0xa5e>
 801636c:	d102      	bne.n	8016374 <_dtoa_r+0xb04>
 801636e:	f018 0f01 	tst.w	r8, #1
 8016372:	d1ac      	bne.n	80162ce <_dtoa_r+0xa5e>
 8016374:	4633      	mov	r3, r6
 8016376:	461e      	mov	r6, r3
 8016378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801637c:	2a30      	cmp	r2, #48	@ 0x30
 801637e:	d0fa      	beq.n	8016376 <_dtoa_r+0xb06>
 8016380:	e5c2      	b.n	8015f08 <_dtoa_r+0x698>
 8016382:	459a      	cmp	sl, r3
 8016384:	d1a4      	bne.n	80162d0 <_dtoa_r+0xa60>
 8016386:	9b04      	ldr	r3, [sp, #16]
 8016388:	3301      	adds	r3, #1
 801638a:	9304      	str	r3, [sp, #16]
 801638c:	2331      	movs	r3, #49	@ 0x31
 801638e:	f88a 3000 	strb.w	r3, [sl]
 8016392:	e5b9      	b.n	8015f08 <_dtoa_r+0x698>
 8016394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016396:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80163f4 <_dtoa_r+0xb84>
 801639a:	b11b      	cbz	r3, 80163a4 <_dtoa_r+0xb34>
 801639c:	f10a 0308 	add.w	r3, sl, #8
 80163a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80163a2:	6013      	str	r3, [r2, #0]
 80163a4:	4650      	mov	r0, sl
 80163a6:	b019      	add	sp, #100	@ 0x64
 80163a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	f77f ae37 	ble.w	8016022 <_dtoa_r+0x7b2>
 80163b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80163b8:	2001      	movs	r0, #1
 80163ba:	e655      	b.n	8016068 <_dtoa_r+0x7f8>
 80163bc:	9b00      	ldr	r3, [sp, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	f77f aed6 	ble.w	8016170 <_dtoa_r+0x900>
 80163c4:	4656      	mov	r6, sl
 80163c6:	4621      	mov	r1, r4
 80163c8:	4648      	mov	r0, r9
 80163ca:	f7ff f9c1 	bl	8015750 <quorem>
 80163ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80163d2:	9b00      	ldr	r3, [sp, #0]
 80163d4:	f806 8b01 	strb.w	r8, [r6], #1
 80163d8:	eba6 020a 	sub.w	r2, r6, sl
 80163dc:	4293      	cmp	r3, r2
 80163de:	ddb3      	ble.n	8016348 <_dtoa_r+0xad8>
 80163e0:	4649      	mov	r1, r9
 80163e2:	2300      	movs	r3, #0
 80163e4:	220a      	movs	r2, #10
 80163e6:	4658      	mov	r0, fp
 80163e8:	f000 f8b2 	bl	8016550 <__multadd>
 80163ec:	4681      	mov	r9, r0
 80163ee:	e7ea      	b.n	80163c6 <_dtoa_r+0xb56>
 80163f0:	0818cb1b 	.word	0x0818cb1b
 80163f4:	0818ca9f 	.word	0x0818ca9f

080163f8 <_free_r>:
 80163f8:	b538      	push	{r3, r4, r5, lr}
 80163fa:	4605      	mov	r5, r0
 80163fc:	2900      	cmp	r1, #0
 80163fe:	d041      	beq.n	8016484 <_free_r+0x8c>
 8016400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016404:	1f0c      	subs	r4, r1, #4
 8016406:	2b00      	cmp	r3, #0
 8016408:	bfb8      	it	lt
 801640a:	18e4      	addlt	r4, r4, r3
 801640c:	f7fd fec4 	bl	8014198 <__malloc_lock>
 8016410:	4a1d      	ldr	r2, [pc, #116]	@ (8016488 <_free_r+0x90>)
 8016412:	6813      	ldr	r3, [r2, #0]
 8016414:	b933      	cbnz	r3, 8016424 <_free_r+0x2c>
 8016416:	6063      	str	r3, [r4, #4]
 8016418:	6014      	str	r4, [r2, #0]
 801641a:	4628      	mov	r0, r5
 801641c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016420:	f7fd bec0 	b.w	80141a4 <__malloc_unlock>
 8016424:	42a3      	cmp	r3, r4
 8016426:	d908      	bls.n	801643a <_free_r+0x42>
 8016428:	6820      	ldr	r0, [r4, #0]
 801642a:	1821      	adds	r1, r4, r0
 801642c:	428b      	cmp	r3, r1
 801642e:	bf01      	itttt	eq
 8016430:	6819      	ldreq	r1, [r3, #0]
 8016432:	685b      	ldreq	r3, [r3, #4]
 8016434:	1809      	addeq	r1, r1, r0
 8016436:	6021      	streq	r1, [r4, #0]
 8016438:	e7ed      	b.n	8016416 <_free_r+0x1e>
 801643a:	461a      	mov	r2, r3
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	b10b      	cbz	r3, 8016444 <_free_r+0x4c>
 8016440:	42a3      	cmp	r3, r4
 8016442:	d9fa      	bls.n	801643a <_free_r+0x42>
 8016444:	6811      	ldr	r1, [r2, #0]
 8016446:	1850      	adds	r0, r2, r1
 8016448:	42a0      	cmp	r0, r4
 801644a:	d10b      	bne.n	8016464 <_free_r+0x6c>
 801644c:	6820      	ldr	r0, [r4, #0]
 801644e:	4401      	add	r1, r0
 8016450:	1850      	adds	r0, r2, r1
 8016452:	6011      	str	r1, [r2, #0]
 8016454:	4283      	cmp	r3, r0
 8016456:	d1e0      	bne.n	801641a <_free_r+0x22>
 8016458:	6818      	ldr	r0, [r3, #0]
 801645a:	685b      	ldr	r3, [r3, #4]
 801645c:	4408      	add	r0, r1
 801645e:	6053      	str	r3, [r2, #4]
 8016460:	6010      	str	r0, [r2, #0]
 8016462:	e7da      	b.n	801641a <_free_r+0x22>
 8016464:	d902      	bls.n	801646c <_free_r+0x74>
 8016466:	230c      	movs	r3, #12
 8016468:	602b      	str	r3, [r5, #0]
 801646a:	e7d6      	b.n	801641a <_free_r+0x22>
 801646c:	6820      	ldr	r0, [r4, #0]
 801646e:	1821      	adds	r1, r4, r0
 8016470:	428b      	cmp	r3, r1
 8016472:	bf02      	ittt	eq
 8016474:	6819      	ldreq	r1, [r3, #0]
 8016476:	685b      	ldreq	r3, [r3, #4]
 8016478:	1809      	addeq	r1, r1, r0
 801647a:	6063      	str	r3, [r4, #4]
 801647c:	bf08      	it	eq
 801647e:	6021      	streq	r1, [r4, #0]
 8016480:	6054      	str	r4, [r2, #4]
 8016482:	e7ca      	b.n	801641a <_free_r+0x22>
 8016484:	bd38      	pop	{r3, r4, r5, pc}
 8016486:	bf00      	nop
 8016488:	20003370 	.word	0x20003370

0801648c <_Balloc>:
 801648c:	b570      	push	{r4, r5, r6, lr}
 801648e:	69c6      	ldr	r6, [r0, #28]
 8016490:	4604      	mov	r4, r0
 8016492:	460d      	mov	r5, r1
 8016494:	b976      	cbnz	r6, 80164b4 <_Balloc+0x28>
 8016496:	2010      	movs	r0, #16
 8016498:	f7fd fdcc 	bl	8014034 <malloc>
 801649c:	4602      	mov	r2, r0
 801649e:	61e0      	str	r0, [r4, #28]
 80164a0:	b920      	cbnz	r0, 80164ac <_Balloc+0x20>
 80164a2:	4b18      	ldr	r3, [pc, #96]	@ (8016504 <_Balloc+0x78>)
 80164a4:	216b      	movs	r1, #107	@ 0x6b
 80164a6:	4818      	ldr	r0, [pc, #96]	@ (8016508 <_Balloc+0x7c>)
 80164a8:	f002 fabe 	bl	8018a28 <__assert_func>
 80164ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164b0:	6006      	str	r6, [r0, #0]
 80164b2:	60c6      	str	r6, [r0, #12]
 80164b4:	69e6      	ldr	r6, [r4, #28]
 80164b6:	68f3      	ldr	r3, [r6, #12]
 80164b8:	b183      	cbz	r3, 80164dc <_Balloc+0x50>
 80164ba:	69e3      	ldr	r3, [r4, #28]
 80164bc:	68db      	ldr	r3, [r3, #12]
 80164be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80164c2:	b9b8      	cbnz	r0, 80164f4 <_Balloc+0x68>
 80164c4:	2101      	movs	r1, #1
 80164c6:	4620      	mov	r0, r4
 80164c8:	fa01 f605 	lsl.w	r6, r1, r5
 80164cc:	1d72      	adds	r2, r6, #5
 80164ce:	0092      	lsls	r2, r2, #2
 80164d0:	f7fd fd9c 	bl	801400c <_calloc_r>
 80164d4:	b160      	cbz	r0, 80164f0 <_Balloc+0x64>
 80164d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80164da:	e00e      	b.n	80164fa <_Balloc+0x6e>
 80164dc:	2221      	movs	r2, #33	@ 0x21
 80164de:	2104      	movs	r1, #4
 80164e0:	4620      	mov	r0, r4
 80164e2:	f7fd fd93 	bl	801400c <_calloc_r>
 80164e6:	69e3      	ldr	r3, [r4, #28]
 80164e8:	60f0      	str	r0, [r6, #12]
 80164ea:	68db      	ldr	r3, [r3, #12]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d1e4      	bne.n	80164ba <_Balloc+0x2e>
 80164f0:	2000      	movs	r0, #0
 80164f2:	bd70      	pop	{r4, r5, r6, pc}
 80164f4:	6802      	ldr	r2, [r0, #0]
 80164f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164fa:	2300      	movs	r3, #0
 80164fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016500:	e7f7      	b.n	80164f2 <_Balloc+0x66>
 8016502:	bf00      	nop
 8016504:	0818caac 	.word	0x0818caac
 8016508:	0818cb2c 	.word	0x0818cb2c

0801650c <_Bfree>:
 801650c:	b570      	push	{r4, r5, r6, lr}
 801650e:	69c6      	ldr	r6, [r0, #28]
 8016510:	4605      	mov	r5, r0
 8016512:	460c      	mov	r4, r1
 8016514:	b976      	cbnz	r6, 8016534 <_Bfree+0x28>
 8016516:	2010      	movs	r0, #16
 8016518:	f7fd fd8c 	bl	8014034 <malloc>
 801651c:	4602      	mov	r2, r0
 801651e:	61e8      	str	r0, [r5, #28]
 8016520:	b920      	cbnz	r0, 801652c <_Bfree+0x20>
 8016522:	4b09      	ldr	r3, [pc, #36]	@ (8016548 <_Bfree+0x3c>)
 8016524:	218f      	movs	r1, #143	@ 0x8f
 8016526:	4809      	ldr	r0, [pc, #36]	@ (801654c <_Bfree+0x40>)
 8016528:	f002 fa7e 	bl	8018a28 <__assert_func>
 801652c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016530:	6006      	str	r6, [r0, #0]
 8016532:	60c6      	str	r6, [r0, #12]
 8016534:	b13c      	cbz	r4, 8016546 <_Bfree+0x3a>
 8016536:	69eb      	ldr	r3, [r5, #28]
 8016538:	6862      	ldr	r2, [r4, #4]
 801653a:	68db      	ldr	r3, [r3, #12]
 801653c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016540:	6021      	str	r1, [r4, #0]
 8016542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016546:	bd70      	pop	{r4, r5, r6, pc}
 8016548:	0818caac 	.word	0x0818caac
 801654c:	0818cb2c 	.word	0x0818cb2c

08016550 <__multadd>:
 8016550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016554:	f101 0c14 	add.w	ip, r1, #20
 8016558:	4607      	mov	r7, r0
 801655a:	460c      	mov	r4, r1
 801655c:	461e      	mov	r6, r3
 801655e:	690d      	ldr	r5, [r1, #16]
 8016560:	2000      	movs	r0, #0
 8016562:	f8dc 3000 	ldr.w	r3, [ip]
 8016566:	3001      	adds	r0, #1
 8016568:	b299      	uxth	r1, r3
 801656a:	4285      	cmp	r5, r0
 801656c:	fb02 6101 	mla	r1, r2, r1, r6
 8016570:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016574:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8016578:	b289      	uxth	r1, r1
 801657a:	fb02 3306 	mla	r3, r2, r6, r3
 801657e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016586:	f84c 1b04 	str.w	r1, [ip], #4
 801658a:	dcea      	bgt.n	8016562 <__multadd+0x12>
 801658c:	b30e      	cbz	r6, 80165d2 <__multadd+0x82>
 801658e:	68a3      	ldr	r3, [r4, #8]
 8016590:	42ab      	cmp	r3, r5
 8016592:	dc19      	bgt.n	80165c8 <__multadd+0x78>
 8016594:	6861      	ldr	r1, [r4, #4]
 8016596:	4638      	mov	r0, r7
 8016598:	3101      	adds	r1, #1
 801659a:	f7ff ff77 	bl	801648c <_Balloc>
 801659e:	4680      	mov	r8, r0
 80165a0:	b928      	cbnz	r0, 80165ae <__multadd+0x5e>
 80165a2:	4602      	mov	r2, r0
 80165a4:	4b0c      	ldr	r3, [pc, #48]	@ (80165d8 <__multadd+0x88>)
 80165a6:	21ba      	movs	r1, #186	@ 0xba
 80165a8:	480c      	ldr	r0, [pc, #48]	@ (80165dc <__multadd+0x8c>)
 80165aa:	f002 fa3d 	bl	8018a28 <__assert_func>
 80165ae:	6922      	ldr	r2, [r4, #16]
 80165b0:	f104 010c 	add.w	r1, r4, #12
 80165b4:	300c      	adds	r0, #12
 80165b6:	3202      	adds	r2, #2
 80165b8:	0092      	lsls	r2, r2, #2
 80165ba:	f7ff f8b6 	bl	801572a <memcpy>
 80165be:	4621      	mov	r1, r4
 80165c0:	4644      	mov	r4, r8
 80165c2:	4638      	mov	r0, r7
 80165c4:	f7ff ffa2 	bl	801650c <_Bfree>
 80165c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80165cc:	3501      	adds	r5, #1
 80165ce:	615e      	str	r6, [r3, #20]
 80165d0:	6125      	str	r5, [r4, #16]
 80165d2:	4620      	mov	r0, r4
 80165d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165d8:	0818cb1b 	.word	0x0818cb1b
 80165dc:	0818cb2c 	.word	0x0818cb2c

080165e0 <__s2b>:
 80165e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165e4:	4615      	mov	r5, r2
 80165e6:	461f      	mov	r7, r3
 80165e8:	2209      	movs	r2, #9
 80165ea:	3308      	adds	r3, #8
 80165ec:	460c      	mov	r4, r1
 80165ee:	4606      	mov	r6, r0
 80165f0:	2100      	movs	r1, #0
 80165f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80165f6:	2201      	movs	r2, #1
 80165f8:	429a      	cmp	r2, r3
 80165fa:	db09      	blt.n	8016610 <__s2b+0x30>
 80165fc:	4630      	mov	r0, r6
 80165fe:	f7ff ff45 	bl	801648c <_Balloc>
 8016602:	b940      	cbnz	r0, 8016616 <__s2b+0x36>
 8016604:	4602      	mov	r2, r0
 8016606:	4b19      	ldr	r3, [pc, #100]	@ (801666c <__s2b+0x8c>)
 8016608:	21d3      	movs	r1, #211	@ 0xd3
 801660a:	4819      	ldr	r0, [pc, #100]	@ (8016670 <__s2b+0x90>)
 801660c:	f002 fa0c 	bl	8018a28 <__assert_func>
 8016610:	0052      	lsls	r2, r2, #1
 8016612:	3101      	adds	r1, #1
 8016614:	e7f0      	b.n	80165f8 <__s2b+0x18>
 8016616:	9b08      	ldr	r3, [sp, #32]
 8016618:	2d09      	cmp	r5, #9
 801661a:	6143      	str	r3, [r0, #20]
 801661c:	f04f 0301 	mov.w	r3, #1
 8016620:	6103      	str	r3, [r0, #16]
 8016622:	dd16      	ble.n	8016652 <__s2b+0x72>
 8016624:	f104 0909 	add.w	r9, r4, #9
 8016628:	442c      	add	r4, r5
 801662a:	46c8      	mov	r8, r9
 801662c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016630:	4601      	mov	r1, r0
 8016632:	220a      	movs	r2, #10
 8016634:	4630      	mov	r0, r6
 8016636:	3b30      	subs	r3, #48	@ 0x30
 8016638:	f7ff ff8a 	bl	8016550 <__multadd>
 801663c:	45a0      	cmp	r8, r4
 801663e:	d1f5      	bne.n	801662c <__s2b+0x4c>
 8016640:	f1a5 0408 	sub.w	r4, r5, #8
 8016644:	444c      	add	r4, r9
 8016646:	1b2d      	subs	r5, r5, r4
 8016648:	1963      	adds	r3, r4, r5
 801664a:	42bb      	cmp	r3, r7
 801664c:	db04      	blt.n	8016658 <__s2b+0x78>
 801664e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016652:	340a      	adds	r4, #10
 8016654:	2509      	movs	r5, #9
 8016656:	e7f6      	b.n	8016646 <__s2b+0x66>
 8016658:	f814 3b01 	ldrb.w	r3, [r4], #1
 801665c:	4601      	mov	r1, r0
 801665e:	220a      	movs	r2, #10
 8016660:	4630      	mov	r0, r6
 8016662:	3b30      	subs	r3, #48	@ 0x30
 8016664:	f7ff ff74 	bl	8016550 <__multadd>
 8016668:	e7ee      	b.n	8016648 <__s2b+0x68>
 801666a:	bf00      	nop
 801666c:	0818cb1b 	.word	0x0818cb1b
 8016670:	0818cb2c 	.word	0x0818cb2c

08016674 <__hi0bits>:
 8016674:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016678:	4603      	mov	r3, r0
 801667a:	bf36      	itet	cc
 801667c:	0403      	lslcc	r3, r0, #16
 801667e:	2000      	movcs	r0, #0
 8016680:	2010      	movcc	r0, #16
 8016682:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016686:	bf3c      	itt	cc
 8016688:	021b      	lslcc	r3, r3, #8
 801668a:	3008      	addcc	r0, #8
 801668c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016690:	bf3c      	itt	cc
 8016692:	011b      	lslcc	r3, r3, #4
 8016694:	3004      	addcc	r0, #4
 8016696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801669a:	bf3c      	itt	cc
 801669c:	009b      	lslcc	r3, r3, #2
 801669e:	3002      	addcc	r0, #2
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	db05      	blt.n	80166b0 <__hi0bits+0x3c>
 80166a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80166a8:	f100 0001 	add.w	r0, r0, #1
 80166ac:	bf08      	it	eq
 80166ae:	2020      	moveq	r0, #32
 80166b0:	4770      	bx	lr

080166b2 <__lo0bits>:
 80166b2:	6803      	ldr	r3, [r0, #0]
 80166b4:	4602      	mov	r2, r0
 80166b6:	f013 0007 	ands.w	r0, r3, #7
 80166ba:	d00b      	beq.n	80166d4 <__lo0bits+0x22>
 80166bc:	07d9      	lsls	r1, r3, #31
 80166be:	d421      	bmi.n	8016704 <__lo0bits+0x52>
 80166c0:	0798      	lsls	r0, r3, #30
 80166c2:	bf47      	ittee	mi
 80166c4:	085b      	lsrmi	r3, r3, #1
 80166c6:	2001      	movmi	r0, #1
 80166c8:	089b      	lsrpl	r3, r3, #2
 80166ca:	2002      	movpl	r0, #2
 80166cc:	bf4c      	ite	mi
 80166ce:	6013      	strmi	r3, [r2, #0]
 80166d0:	6013      	strpl	r3, [r2, #0]
 80166d2:	4770      	bx	lr
 80166d4:	b299      	uxth	r1, r3
 80166d6:	b909      	cbnz	r1, 80166dc <__lo0bits+0x2a>
 80166d8:	0c1b      	lsrs	r3, r3, #16
 80166da:	2010      	movs	r0, #16
 80166dc:	b2d9      	uxtb	r1, r3
 80166de:	b909      	cbnz	r1, 80166e4 <__lo0bits+0x32>
 80166e0:	3008      	adds	r0, #8
 80166e2:	0a1b      	lsrs	r3, r3, #8
 80166e4:	0719      	lsls	r1, r3, #28
 80166e6:	bf04      	itt	eq
 80166e8:	091b      	lsreq	r3, r3, #4
 80166ea:	3004      	addeq	r0, #4
 80166ec:	0799      	lsls	r1, r3, #30
 80166ee:	bf04      	itt	eq
 80166f0:	089b      	lsreq	r3, r3, #2
 80166f2:	3002      	addeq	r0, #2
 80166f4:	07d9      	lsls	r1, r3, #31
 80166f6:	d403      	bmi.n	8016700 <__lo0bits+0x4e>
 80166f8:	085b      	lsrs	r3, r3, #1
 80166fa:	f100 0001 	add.w	r0, r0, #1
 80166fe:	d003      	beq.n	8016708 <__lo0bits+0x56>
 8016700:	6013      	str	r3, [r2, #0]
 8016702:	4770      	bx	lr
 8016704:	2000      	movs	r0, #0
 8016706:	4770      	bx	lr
 8016708:	2020      	movs	r0, #32
 801670a:	4770      	bx	lr

0801670c <__i2b>:
 801670c:	b510      	push	{r4, lr}
 801670e:	460c      	mov	r4, r1
 8016710:	2101      	movs	r1, #1
 8016712:	f7ff febb 	bl	801648c <_Balloc>
 8016716:	4602      	mov	r2, r0
 8016718:	b928      	cbnz	r0, 8016726 <__i2b+0x1a>
 801671a:	4b05      	ldr	r3, [pc, #20]	@ (8016730 <__i2b+0x24>)
 801671c:	f240 1145 	movw	r1, #325	@ 0x145
 8016720:	4804      	ldr	r0, [pc, #16]	@ (8016734 <__i2b+0x28>)
 8016722:	f002 f981 	bl	8018a28 <__assert_func>
 8016726:	2301      	movs	r3, #1
 8016728:	6144      	str	r4, [r0, #20]
 801672a:	6103      	str	r3, [r0, #16]
 801672c:	bd10      	pop	{r4, pc}
 801672e:	bf00      	nop
 8016730:	0818cb1b 	.word	0x0818cb1b
 8016734:	0818cb2c 	.word	0x0818cb2c

08016738 <__multiply>:
 8016738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801673c:	4614      	mov	r4, r2
 801673e:	690a      	ldr	r2, [r1, #16]
 8016740:	460f      	mov	r7, r1
 8016742:	b085      	sub	sp, #20
 8016744:	6923      	ldr	r3, [r4, #16]
 8016746:	429a      	cmp	r2, r3
 8016748:	bfa2      	ittt	ge
 801674a:	4623      	movge	r3, r4
 801674c:	460c      	movge	r4, r1
 801674e:	461f      	movge	r7, r3
 8016750:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016754:	68a3      	ldr	r3, [r4, #8]
 8016756:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801675a:	6861      	ldr	r1, [r4, #4]
 801675c:	eb0a 0609 	add.w	r6, sl, r9
 8016760:	42b3      	cmp	r3, r6
 8016762:	bfb8      	it	lt
 8016764:	3101      	addlt	r1, #1
 8016766:	f7ff fe91 	bl	801648c <_Balloc>
 801676a:	b930      	cbnz	r0, 801677a <__multiply+0x42>
 801676c:	4602      	mov	r2, r0
 801676e:	4b45      	ldr	r3, [pc, #276]	@ (8016884 <__multiply+0x14c>)
 8016770:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016774:	4844      	ldr	r0, [pc, #272]	@ (8016888 <__multiply+0x150>)
 8016776:	f002 f957 	bl	8018a28 <__assert_func>
 801677a:	f100 0514 	add.w	r5, r0, #20
 801677e:	2200      	movs	r2, #0
 8016780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016784:	462b      	mov	r3, r5
 8016786:	4543      	cmp	r3, r8
 8016788:	d321      	bcc.n	80167ce <__multiply+0x96>
 801678a:	f107 0114 	add.w	r1, r7, #20
 801678e:	f104 0214 	add.w	r2, r4, #20
 8016792:	f104 0715 	add.w	r7, r4, #21
 8016796:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801679a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801679e:	9302      	str	r3, [sp, #8]
 80167a0:	1b13      	subs	r3, r2, r4
 80167a2:	3b15      	subs	r3, #21
 80167a4:	f023 0303 	bic.w	r3, r3, #3
 80167a8:	3304      	adds	r3, #4
 80167aa:	42ba      	cmp	r2, r7
 80167ac:	bf38      	it	cc
 80167ae:	2304      	movcc	r3, #4
 80167b0:	9301      	str	r3, [sp, #4]
 80167b2:	9b02      	ldr	r3, [sp, #8]
 80167b4:	9103      	str	r1, [sp, #12]
 80167b6:	428b      	cmp	r3, r1
 80167b8:	d80c      	bhi.n	80167d4 <__multiply+0x9c>
 80167ba:	2e00      	cmp	r6, #0
 80167bc:	dd03      	ble.n	80167c6 <__multiply+0x8e>
 80167be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d05b      	beq.n	801687e <__multiply+0x146>
 80167c6:	6106      	str	r6, [r0, #16]
 80167c8:	b005      	add	sp, #20
 80167ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ce:	f843 2b04 	str.w	r2, [r3], #4
 80167d2:	e7d8      	b.n	8016786 <__multiply+0x4e>
 80167d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80167d8:	f1ba 0f00 	cmp.w	sl, #0
 80167dc:	d024      	beq.n	8016828 <__multiply+0xf0>
 80167de:	f104 0e14 	add.w	lr, r4, #20
 80167e2:	46a9      	mov	r9, r5
 80167e4:	f04f 0c00 	mov.w	ip, #0
 80167e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80167ec:	f8d9 3000 	ldr.w	r3, [r9]
 80167f0:	fa1f fb87 	uxth.w	fp, r7
 80167f4:	4572      	cmp	r2, lr
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80167fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016800:	f8d9 7000 	ldr.w	r7, [r9]
 8016804:	4463      	add	r3, ip
 8016806:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801680a:	fb0a c70b 	mla	r7, sl, fp, ip
 801680e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016812:	b29b      	uxth	r3, r3
 8016814:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016818:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801681c:	f849 3b04 	str.w	r3, [r9], #4
 8016820:	d8e2      	bhi.n	80167e8 <__multiply+0xb0>
 8016822:	9b01      	ldr	r3, [sp, #4]
 8016824:	f845 c003 	str.w	ip, [r5, r3]
 8016828:	9b03      	ldr	r3, [sp, #12]
 801682a:	3104      	adds	r1, #4
 801682c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016830:	f1b9 0f00 	cmp.w	r9, #0
 8016834:	d021      	beq.n	801687a <__multiply+0x142>
 8016836:	682b      	ldr	r3, [r5, #0]
 8016838:	f104 0c14 	add.w	ip, r4, #20
 801683c:	46ae      	mov	lr, r5
 801683e:	f04f 0a00 	mov.w	sl, #0
 8016842:	f8bc b000 	ldrh.w	fp, [ip]
 8016846:	b29b      	uxth	r3, r3
 8016848:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801684c:	fb09 770b 	mla	r7, r9, fp, r7
 8016850:	4457      	add	r7, sl
 8016852:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016856:	f84e 3b04 	str.w	r3, [lr], #4
 801685a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801685e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016862:	f8be 3000 	ldrh.w	r3, [lr]
 8016866:	4562      	cmp	r2, ip
 8016868:	fb09 330a 	mla	r3, r9, sl, r3
 801686c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016874:	d8e5      	bhi.n	8016842 <__multiply+0x10a>
 8016876:	9f01      	ldr	r7, [sp, #4]
 8016878:	51eb      	str	r3, [r5, r7]
 801687a:	3504      	adds	r5, #4
 801687c:	e799      	b.n	80167b2 <__multiply+0x7a>
 801687e:	3e01      	subs	r6, #1
 8016880:	e79b      	b.n	80167ba <__multiply+0x82>
 8016882:	bf00      	nop
 8016884:	0818cb1b 	.word	0x0818cb1b
 8016888:	0818cb2c 	.word	0x0818cb2c

0801688c <__pow5mult>:
 801688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016890:	4615      	mov	r5, r2
 8016892:	f012 0203 	ands.w	r2, r2, #3
 8016896:	4607      	mov	r7, r0
 8016898:	460e      	mov	r6, r1
 801689a:	d007      	beq.n	80168ac <__pow5mult+0x20>
 801689c:	3a01      	subs	r2, #1
 801689e:	4c25      	ldr	r4, [pc, #148]	@ (8016934 <__pow5mult+0xa8>)
 80168a0:	2300      	movs	r3, #0
 80168a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80168a6:	f7ff fe53 	bl	8016550 <__multadd>
 80168aa:	4606      	mov	r6, r0
 80168ac:	10ad      	asrs	r5, r5, #2
 80168ae:	d03d      	beq.n	801692c <__pow5mult+0xa0>
 80168b0:	69fc      	ldr	r4, [r7, #28]
 80168b2:	b97c      	cbnz	r4, 80168d4 <__pow5mult+0x48>
 80168b4:	2010      	movs	r0, #16
 80168b6:	f7fd fbbd 	bl	8014034 <malloc>
 80168ba:	4602      	mov	r2, r0
 80168bc:	61f8      	str	r0, [r7, #28]
 80168be:	b928      	cbnz	r0, 80168cc <__pow5mult+0x40>
 80168c0:	4b1d      	ldr	r3, [pc, #116]	@ (8016938 <__pow5mult+0xac>)
 80168c2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80168c6:	481d      	ldr	r0, [pc, #116]	@ (801693c <__pow5mult+0xb0>)
 80168c8:	f002 f8ae 	bl	8018a28 <__assert_func>
 80168cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168d0:	6004      	str	r4, [r0, #0]
 80168d2:	60c4      	str	r4, [r0, #12]
 80168d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80168d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80168dc:	b94c      	cbnz	r4, 80168f2 <__pow5mult+0x66>
 80168de:	f240 2171 	movw	r1, #625	@ 0x271
 80168e2:	4638      	mov	r0, r7
 80168e4:	f7ff ff12 	bl	801670c <__i2b>
 80168e8:	2300      	movs	r3, #0
 80168ea:	4604      	mov	r4, r0
 80168ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80168f0:	6003      	str	r3, [r0, #0]
 80168f2:	f04f 0900 	mov.w	r9, #0
 80168f6:	07eb      	lsls	r3, r5, #31
 80168f8:	d50a      	bpl.n	8016910 <__pow5mult+0x84>
 80168fa:	4631      	mov	r1, r6
 80168fc:	4622      	mov	r2, r4
 80168fe:	4638      	mov	r0, r7
 8016900:	f7ff ff1a 	bl	8016738 <__multiply>
 8016904:	4680      	mov	r8, r0
 8016906:	4631      	mov	r1, r6
 8016908:	4638      	mov	r0, r7
 801690a:	4646      	mov	r6, r8
 801690c:	f7ff fdfe 	bl	801650c <_Bfree>
 8016910:	106d      	asrs	r5, r5, #1
 8016912:	d00b      	beq.n	801692c <__pow5mult+0xa0>
 8016914:	6820      	ldr	r0, [r4, #0]
 8016916:	b938      	cbnz	r0, 8016928 <__pow5mult+0x9c>
 8016918:	4622      	mov	r2, r4
 801691a:	4621      	mov	r1, r4
 801691c:	4638      	mov	r0, r7
 801691e:	f7ff ff0b 	bl	8016738 <__multiply>
 8016922:	6020      	str	r0, [r4, #0]
 8016924:	f8c0 9000 	str.w	r9, [r0]
 8016928:	4604      	mov	r4, r0
 801692a:	e7e4      	b.n	80168f6 <__pow5mult+0x6a>
 801692c:	4630      	mov	r0, r6
 801692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016932:	bf00      	nop
 8016934:	0818cb88 	.word	0x0818cb88
 8016938:	0818caac 	.word	0x0818caac
 801693c:	0818cb2c 	.word	0x0818cb2c

08016940 <__lshift>:
 8016940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016944:	460c      	mov	r4, r1
 8016946:	4607      	mov	r7, r0
 8016948:	4691      	mov	r9, r2
 801694a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801694e:	6923      	ldr	r3, [r4, #16]
 8016950:	6849      	ldr	r1, [r1, #4]
 8016952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016956:	68a3      	ldr	r3, [r4, #8]
 8016958:	f108 0601 	add.w	r6, r8, #1
 801695c:	42b3      	cmp	r3, r6
 801695e:	db0b      	blt.n	8016978 <__lshift+0x38>
 8016960:	4638      	mov	r0, r7
 8016962:	f7ff fd93 	bl	801648c <_Balloc>
 8016966:	4605      	mov	r5, r0
 8016968:	b948      	cbnz	r0, 801697e <__lshift+0x3e>
 801696a:	4602      	mov	r2, r0
 801696c:	4b28      	ldr	r3, [pc, #160]	@ (8016a10 <__lshift+0xd0>)
 801696e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016972:	4828      	ldr	r0, [pc, #160]	@ (8016a14 <__lshift+0xd4>)
 8016974:	f002 f858 	bl	8018a28 <__assert_func>
 8016978:	3101      	adds	r1, #1
 801697a:	005b      	lsls	r3, r3, #1
 801697c:	e7ee      	b.n	801695c <__lshift+0x1c>
 801697e:	2300      	movs	r3, #0
 8016980:	f100 0114 	add.w	r1, r0, #20
 8016984:	f100 0210 	add.w	r2, r0, #16
 8016988:	4618      	mov	r0, r3
 801698a:	4553      	cmp	r3, sl
 801698c:	db33      	blt.n	80169f6 <__lshift+0xb6>
 801698e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016992:	f104 0314 	add.w	r3, r4, #20
 8016996:	6920      	ldr	r0, [r4, #16]
 8016998:	f019 091f 	ands.w	r9, r9, #31
 801699c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80169a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80169a4:	d02b      	beq.n	80169fe <__lshift+0xbe>
 80169a6:	f1c9 0e20 	rsb	lr, r9, #32
 80169aa:	468a      	mov	sl, r1
 80169ac:	2200      	movs	r2, #0
 80169ae:	6818      	ldr	r0, [r3, #0]
 80169b0:	fa00 f009 	lsl.w	r0, r0, r9
 80169b4:	4310      	orrs	r0, r2
 80169b6:	f84a 0b04 	str.w	r0, [sl], #4
 80169ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80169be:	459c      	cmp	ip, r3
 80169c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80169c4:	d8f3      	bhi.n	80169ae <__lshift+0x6e>
 80169c6:	ebac 0304 	sub.w	r3, ip, r4
 80169ca:	f104 0015 	add.w	r0, r4, #21
 80169ce:	3b15      	subs	r3, #21
 80169d0:	f023 0303 	bic.w	r3, r3, #3
 80169d4:	3304      	adds	r3, #4
 80169d6:	4584      	cmp	ip, r0
 80169d8:	bf38      	it	cc
 80169da:	2304      	movcc	r3, #4
 80169dc:	50ca      	str	r2, [r1, r3]
 80169de:	b10a      	cbz	r2, 80169e4 <__lshift+0xa4>
 80169e0:	f108 0602 	add.w	r6, r8, #2
 80169e4:	3e01      	subs	r6, #1
 80169e6:	4638      	mov	r0, r7
 80169e8:	4621      	mov	r1, r4
 80169ea:	612e      	str	r6, [r5, #16]
 80169ec:	f7ff fd8e 	bl	801650c <_Bfree>
 80169f0:	4628      	mov	r0, r5
 80169f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169f6:	3301      	adds	r3, #1
 80169f8:	f842 0f04 	str.w	r0, [r2, #4]!
 80169fc:	e7c5      	b.n	801698a <__lshift+0x4a>
 80169fe:	3904      	subs	r1, #4
 8016a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a04:	459c      	cmp	ip, r3
 8016a06:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a0a:	d8f9      	bhi.n	8016a00 <__lshift+0xc0>
 8016a0c:	e7ea      	b.n	80169e4 <__lshift+0xa4>
 8016a0e:	bf00      	nop
 8016a10:	0818cb1b 	.word	0x0818cb1b
 8016a14:	0818cb2c 	.word	0x0818cb2c

08016a18 <__mcmp>:
 8016a18:	4603      	mov	r3, r0
 8016a1a:	690a      	ldr	r2, [r1, #16]
 8016a1c:	6900      	ldr	r0, [r0, #16]
 8016a1e:	1a80      	subs	r0, r0, r2
 8016a20:	b530      	push	{r4, r5, lr}
 8016a22:	d10e      	bne.n	8016a42 <__mcmp+0x2a>
 8016a24:	3314      	adds	r3, #20
 8016a26:	3114      	adds	r1, #20
 8016a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016a38:	4295      	cmp	r5, r2
 8016a3a:	d003      	beq.n	8016a44 <__mcmp+0x2c>
 8016a3c:	d205      	bcs.n	8016a4a <__mcmp+0x32>
 8016a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a42:	bd30      	pop	{r4, r5, pc}
 8016a44:	42a3      	cmp	r3, r4
 8016a46:	d3f3      	bcc.n	8016a30 <__mcmp+0x18>
 8016a48:	e7fb      	b.n	8016a42 <__mcmp+0x2a>
 8016a4a:	2001      	movs	r0, #1
 8016a4c:	e7f9      	b.n	8016a42 <__mcmp+0x2a>
	...

08016a50 <__mdiff>:
 8016a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a54:	4689      	mov	r9, r1
 8016a56:	4606      	mov	r6, r0
 8016a58:	4611      	mov	r1, r2
 8016a5a:	4614      	mov	r4, r2
 8016a5c:	4648      	mov	r0, r9
 8016a5e:	f7ff ffdb 	bl	8016a18 <__mcmp>
 8016a62:	1e05      	subs	r5, r0, #0
 8016a64:	d112      	bne.n	8016a8c <__mdiff+0x3c>
 8016a66:	4629      	mov	r1, r5
 8016a68:	4630      	mov	r0, r6
 8016a6a:	f7ff fd0f 	bl	801648c <_Balloc>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	b928      	cbnz	r0, 8016a7e <__mdiff+0x2e>
 8016a72:	4b41      	ldr	r3, [pc, #260]	@ (8016b78 <__mdiff+0x128>)
 8016a74:	f240 2137 	movw	r1, #567	@ 0x237
 8016a78:	4840      	ldr	r0, [pc, #256]	@ (8016b7c <__mdiff+0x12c>)
 8016a7a:	f001 ffd5 	bl	8018a28 <__assert_func>
 8016a7e:	2301      	movs	r3, #1
 8016a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a84:	4610      	mov	r0, r2
 8016a86:	b003      	add	sp, #12
 8016a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a8c:	bfbc      	itt	lt
 8016a8e:	464b      	movlt	r3, r9
 8016a90:	46a1      	movlt	r9, r4
 8016a92:	4630      	mov	r0, r6
 8016a94:	bfb8      	it	lt
 8016a96:	2501      	movlt	r5, #1
 8016a98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016a9c:	bfb4      	ite	lt
 8016a9e:	461c      	movlt	r4, r3
 8016aa0:	2500      	movge	r5, #0
 8016aa2:	f7ff fcf3 	bl	801648c <_Balloc>
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	b918      	cbnz	r0, 8016ab2 <__mdiff+0x62>
 8016aaa:	4b33      	ldr	r3, [pc, #204]	@ (8016b78 <__mdiff+0x128>)
 8016aac:	f240 2145 	movw	r1, #581	@ 0x245
 8016ab0:	e7e2      	b.n	8016a78 <__mdiff+0x28>
 8016ab2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016ab6:	f104 0e14 	add.w	lr, r4, #20
 8016aba:	6926      	ldr	r6, [r4, #16]
 8016abc:	f100 0b14 	add.w	fp, r0, #20
 8016ac0:	60c5      	str	r5, [r0, #12]
 8016ac2:	f109 0514 	add.w	r5, r9, #20
 8016ac6:	f109 0310 	add.w	r3, r9, #16
 8016aca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016ace:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016ad2:	46d9      	mov	r9, fp
 8016ad4:	f04f 0c00 	mov.w	ip, #0
 8016ad8:	9301      	str	r3, [sp, #4]
 8016ada:	9b01      	ldr	r3, [sp, #4]
 8016adc:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016ae0:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016ae4:	4576      	cmp	r6, lr
 8016ae6:	9301      	str	r3, [sp, #4]
 8016ae8:	fa1f f38a 	uxth.w	r3, sl
 8016aec:	4619      	mov	r1, r3
 8016aee:	b283      	uxth	r3, r0
 8016af0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8016af4:	eba1 0303 	sub.w	r3, r1, r3
 8016af8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016afc:	4463      	add	r3, ip
 8016afe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016b02:	b29b      	uxth	r3, r3
 8016b04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016b0c:	f849 3b04 	str.w	r3, [r9], #4
 8016b10:	d8e3      	bhi.n	8016ada <__mdiff+0x8a>
 8016b12:	1b33      	subs	r3, r6, r4
 8016b14:	3415      	adds	r4, #21
 8016b16:	3b15      	subs	r3, #21
 8016b18:	f023 0303 	bic.w	r3, r3, #3
 8016b1c:	3304      	adds	r3, #4
 8016b1e:	42a6      	cmp	r6, r4
 8016b20:	bf38      	it	cc
 8016b22:	2304      	movcc	r3, #4
 8016b24:	441d      	add	r5, r3
 8016b26:	445b      	add	r3, fp
 8016b28:	462c      	mov	r4, r5
 8016b2a:	461e      	mov	r6, r3
 8016b2c:	4544      	cmp	r4, r8
 8016b2e:	d30e      	bcc.n	8016b4e <__mdiff+0xfe>
 8016b30:	f108 0103 	add.w	r1, r8, #3
 8016b34:	1b49      	subs	r1, r1, r5
 8016b36:	3d03      	subs	r5, #3
 8016b38:	f021 0103 	bic.w	r1, r1, #3
 8016b3c:	45a8      	cmp	r8, r5
 8016b3e:	bf38      	it	cc
 8016b40:	2100      	movcc	r1, #0
 8016b42:	440b      	add	r3, r1
 8016b44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b48:	b199      	cbz	r1, 8016b72 <__mdiff+0x122>
 8016b4a:	6117      	str	r7, [r2, #16]
 8016b4c:	e79a      	b.n	8016a84 <__mdiff+0x34>
 8016b4e:	f854 1b04 	ldr.w	r1, [r4], #4
 8016b52:	46e6      	mov	lr, ip
 8016b54:	fa1f fc81 	uxth.w	ip, r1
 8016b58:	0c08      	lsrs	r0, r1, #16
 8016b5a:	4471      	add	r1, lr
 8016b5c:	44f4      	add	ip, lr
 8016b5e:	b289      	uxth	r1, r1
 8016b60:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016b68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b6c:	f846 1b04 	str.w	r1, [r6], #4
 8016b70:	e7dc      	b.n	8016b2c <__mdiff+0xdc>
 8016b72:	3f01      	subs	r7, #1
 8016b74:	e7e6      	b.n	8016b44 <__mdiff+0xf4>
 8016b76:	bf00      	nop
 8016b78:	0818cb1b 	.word	0x0818cb1b
 8016b7c:	0818cb2c 	.word	0x0818cb2c

08016b80 <__ulp>:
 8016b80:	b082      	sub	sp, #8
 8016b82:	4b11      	ldr	r3, [pc, #68]	@ (8016bc8 <__ulp+0x48>)
 8016b84:	ed8d 0b00 	vstr	d0, [sp]
 8016b88:	9a01      	ldr	r2, [sp, #4]
 8016b8a:	4013      	ands	r3, r2
 8016b8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	dc08      	bgt.n	8016ba6 <__ulp+0x26>
 8016b94:	425b      	negs	r3, r3
 8016b96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016b9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016b9e:	da04      	bge.n	8016baa <__ulp+0x2a>
 8016ba0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016ba4:	4113      	asrs	r3, r2
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	e008      	b.n	8016bbc <__ulp+0x3c>
 8016baa:	f1a2 0314 	sub.w	r3, r2, #20
 8016bae:	2b1e      	cmp	r3, #30
 8016bb0:	bfd6      	itet	le
 8016bb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016bb6:	2201      	movgt	r2, #1
 8016bb8:	40da      	lsrle	r2, r3
 8016bba:	2300      	movs	r3, #0
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	4610      	mov	r0, r2
 8016bc0:	ec41 0b10 	vmov	d0, r0, r1
 8016bc4:	b002      	add	sp, #8
 8016bc6:	4770      	bx	lr
 8016bc8:	7ff00000 	.word	0x7ff00000

08016bcc <__b2d>:
 8016bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd0:	6906      	ldr	r6, [r0, #16]
 8016bd2:	f100 0814 	add.w	r8, r0, #20
 8016bd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016bda:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016bde:	1f37      	subs	r7, r6, #4
 8016be0:	4610      	mov	r0, r2
 8016be2:	f7ff fd47 	bl	8016674 <__hi0bits>
 8016be6:	f1c0 0320 	rsb	r3, r0, #32
 8016bea:	280a      	cmp	r0, #10
 8016bec:	600b      	str	r3, [r1, #0]
 8016bee:	491d      	ldr	r1, [pc, #116]	@ (8016c64 <__b2d+0x98>)
 8016bf0:	dc16      	bgt.n	8016c20 <__b2d+0x54>
 8016bf2:	f1c0 0c0b 	rsb	ip, r0, #11
 8016bf6:	45b8      	cmp	r8, r7
 8016bf8:	f100 0015 	add.w	r0, r0, #21
 8016bfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8016c00:	fa02 f000 	lsl.w	r0, r2, r0
 8016c04:	ea43 0501 	orr.w	r5, r3, r1
 8016c08:	bf34      	ite	cc
 8016c0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c0e:	2300      	movcs	r3, #0
 8016c10:	fa23 f30c 	lsr.w	r3, r3, ip
 8016c14:	4303      	orrs	r3, r0
 8016c16:	461c      	mov	r4, r3
 8016c18:	ec45 4b10 	vmov	d0, r4, r5
 8016c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c20:	45b8      	cmp	r8, r7
 8016c22:	bf3a      	itte	cc
 8016c24:	f1a6 0708 	subcc.w	r7, r6, #8
 8016c28:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c2c:	2300      	movcs	r3, #0
 8016c2e:	380b      	subs	r0, #11
 8016c30:	d014      	beq.n	8016c5c <__b2d+0x90>
 8016c32:	f1c0 0120 	rsb	r1, r0, #32
 8016c36:	4082      	lsls	r2, r0
 8016c38:	4547      	cmp	r7, r8
 8016c3a:	fa23 f401 	lsr.w	r4, r3, r1
 8016c3e:	fa03 f300 	lsl.w	r3, r3, r0
 8016c42:	ea42 0204 	orr.w	r2, r2, r4
 8016c46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016c4a:	bf8c      	ite	hi
 8016c4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016c50:	2200      	movls	r2, #0
 8016c52:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016c56:	40ca      	lsrs	r2, r1
 8016c58:	4313      	orrs	r3, r2
 8016c5a:	e7dc      	b.n	8016c16 <__b2d+0x4a>
 8016c5c:	ea42 0501 	orr.w	r5, r2, r1
 8016c60:	e7d9      	b.n	8016c16 <__b2d+0x4a>
 8016c62:	bf00      	nop
 8016c64:	3ff00000 	.word	0x3ff00000

08016c68 <__d2b>:
 8016c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c6c:	460f      	mov	r7, r1
 8016c6e:	2101      	movs	r1, #1
 8016c70:	4616      	mov	r6, r2
 8016c72:	ec59 8b10 	vmov	r8, r9, d0
 8016c76:	f7ff fc09 	bl	801648c <_Balloc>
 8016c7a:	4604      	mov	r4, r0
 8016c7c:	b930      	cbnz	r0, 8016c8c <__d2b+0x24>
 8016c7e:	4602      	mov	r2, r0
 8016c80:	4b23      	ldr	r3, [pc, #140]	@ (8016d10 <__d2b+0xa8>)
 8016c82:	f240 310f 	movw	r1, #783	@ 0x30f
 8016c86:	4823      	ldr	r0, [pc, #140]	@ (8016d14 <__d2b+0xac>)
 8016c88:	f001 fece 	bl	8018a28 <__assert_func>
 8016c8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c94:	b10d      	cbz	r5, 8016c9a <__d2b+0x32>
 8016c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016c9a:	9301      	str	r3, [sp, #4]
 8016c9c:	f1b8 0300 	subs.w	r3, r8, #0
 8016ca0:	d023      	beq.n	8016cea <__d2b+0x82>
 8016ca2:	4668      	mov	r0, sp
 8016ca4:	9300      	str	r3, [sp, #0]
 8016ca6:	f7ff fd04 	bl	80166b2 <__lo0bits>
 8016caa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016cae:	b1d0      	cbz	r0, 8016ce6 <__d2b+0x7e>
 8016cb0:	f1c0 0320 	rsb	r3, r0, #32
 8016cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8016cb8:	40c2      	lsrs	r2, r0
 8016cba:	430b      	orrs	r3, r1
 8016cbc:	9201      	str	r2, [sp, #4]
 8016cbe:	6163      	str	r3, [r4, #20]
 8016cc0:	9b01      	ldr	r3, [sp, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	61a3      	str	r3, [r4, #24]
 8016cc6:	bf0c      	ite	eq
 8016cc8:	2201      	moveq	r2, #1
 8016cca:	2202      	movne	r2, #2
 8016ccc:	6122      	str	r2, [r4, #16]
 8016cce:	b1a5      	cbz	r5, 8016cfa <__d2b+0x92>
 8016cd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016cd4:	4405      	add	r5, r0
 8016cd6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016cda:	603d      	str	r5, [r7, #0]
 8016cdc:	6030      	str	r0, [r6, #0]
 8016cde:	4620      	mov	r0, r4
 8016ce0:	b003      	add	sp, #12
 8016ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce6:	6161      	str	r1, [r4, #20]
 8016ce8:	e7ea      	b.n	8016cc0 <__d2b+0x58>
 8016cea:	a801      	add	r0, sp, #4
 8016cec:	f7ff fce1 	bl	80166b2 <__lo0bits>
 8016cf0:	9b01      	ldr	r3, [sp, #4]
 8016cf2:	3020      	adds	r0, #32
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	6163      	str	r3, [r4, #20]
 8016cf8:	e7e8      	b.n	8016ccc <__d2b+0x64>
 8016cfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016cfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016d02:	6038      	str	r0, [r7, #0]
 8016d04:	6918      	ldr	r0, [r3, #16]
 8016d06:	f7ff fcb5 	bl	8016674 <__hi0bits>
 8016d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016d0e:	e7e5      	b.n	8016cdc <__d2b+0x74>
 8016d10:	0818cb1b 	.word	0x0818cb1b
 8016d14:	0818cb2c 	.word	0x0818cb2c

08016d18 <__ratio>:
 8016d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d1c:	b085      	sub	sp, #20
 8016d1e:	e9cd 1000 	strd	r1, r0, [sp]
 8016d22:	a902      	add	r1, sp, #8
 8016d24:	f7ff ff52 	bl	8016bcc <__b2d>
 8016d28:	a903      	add	r1, sp, #12
 8016d2a:	9800      	ldr	r0, [sp, #0]
 8016d2c:	ec55 4b10 	vmov	r4, r5, d0
 8016d30:	f7ff ff4c 	bl	8016bcc <__b2d>
 8016d34:	9b01      	ldr	r3, [sp, #4]
 8016d36:	462f      	mov	r7, r5
 8016d38:	4620      	mov	r0, r4
 8016d3a:	6919      	ldr	r1, [r3, #16]
 8016d3c:	9b00      	ldr	r3, [sp, #0]
 8016d3e:	691b      	ldr	r3, [r3, #16]
 8016d40:	1ac9      	subs	r1, r1, r3
 8016d42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016d46:	ec5b ab10 	vmov	sl, fp, d0
 8016d4a:	1a9b      	subs	r3, r3, r2
 8016d4c:	46d9      	mov	r9, fp
 8016d4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	bfcd      	iteet	gt
 8016d56:	462a      	movgt	r2, r5
 8016d58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016d5c:	465a      	movle	r2, fp
 8016d5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016d62:	bfd8      	it	le
 8016d64:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016d68:	4652      	mov	r2, sl
 8016d6a:	4639      	mov	r1, r7
 8016d6c:	464b      	mov	r3, r9
 8016d6e:	f7e9 fd7b 	bl	8000868 <__aeabi_ddiv>
 8016d72:	ec41 0b10 	vmov	d0, r0, r1
 8016d76:	b005      	add	sp, #20
 8016d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d7c <__copybits>:
 8016d7c:	3901      	subs	r1, #1
 8016d7e:	f102 0314 	add.w	r3, r2, #20
 8016d82:	1149      	asrs	r1, r1, #5
 8016d84:	b570      	push	{r4, r5, r6, lr}
 8016d86:	3101      	adds	r1, #1
 8016d88:	6914      	ldr	r4, [r2, #16]
 8016d8a:	1f05      	subs	r5, r0, #4
 8016d8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016d90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016d94:	42a3      	cmp	r3, r4
 8016d96:	d30c      	bcc.n	8016db2 <__copybits+0x36>
 8016d98:	1aa3      	subs	r3, r4, r2
 8016d9a:	3211      	adds	r2, #17
 8016d9c:	3b11      	subs	r3, #17
 8016d9e:	f023 0303 	bic.w	r3, r3, #3
 8016da2:	42a2      	cmp	r2, r4
 8016da4:	bf88      	it	hi
 8016da6:	2300      	movhi	r3, #0
 8016da8:	4418      	add	r0, r3
 8016daa:	2300      	movs	r3, #0
 8016dac:	4288      	cmp	r0, r1
 8016dae:	d305      	bcc.n	8016dbc <__copybits+0x40>
 8016db0:	bd70      	pop	{r4, r5, r6, pc}
 8016db2:	f853 6b04 	ldr.w	r6, [r3], #4
 8016db6:	f845 6f04 	str.w	r6, [r5, #4]!
 8016dba:	e7eb      	b.n	8016d94 <__copybits+0x18>
 8016dbc:	f840 3b04 	str.w	r3, [r0], #4
 8016dc0:	e7f4      	b.n	8016dac <__copybits+0x30>

08016dc2 <__any_on>:
 8016dc2:	f100 0214 	add.w	r2, r0, #20
 8016dc6:	114b      	asrs	r3, r1, #5
 8016dc8:	6900      	ldr	r0, [r0, #16]
 8016dca:	4298      	cmp	r0, r3
 8016dcc:	b510      	push	{r4, lr}
 8016dce:	db11      	blt.n	8016df4 <__any_on+0x32>
 8016dd0:	dd0a      	ble.n	8016de8 <__any_on+0x26>
 8016dd2:	f011 011f 	ands.w	r1, r1, #31
 8016dd6:	d007      	beq.n	8016de8 <__any_on+0x26>
 8016dd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016ddc:	fa24 f001 	lsr.w	r0, r4, r1
 8016de0:	fa00 f101 	lsl.w	r1, r0, r1
 8016de4:	428c      	cmp	r4, r1
 8016de6:	d10b      	bne.n	8016e00 <__any_on+0x3e>
 8016de8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016dec:	4293      	cmp	r3, r2
 8016dee:	d803      	bhi.n	8016df8 <__any_on+0x36>
 8016df0:	2000      	movs	r0, #0
 8016df2:	bd10      	pop	{r4, pc}
 8016df4:	4603      	mov	r3, r0
 8016df6:	e7f7      	b.n	8016de8 <__any_on+0x26>
 8016df8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016dfc:	2900      	cmp	r1, #0
 8016dfe:	d0f5      	beq.n	8016dec <__any_on+0x2a>
 8016e00:	2001      	movs	r0, #1
 8016e02:	e7f6      	b.n	8016df2 <__any_on+0x30>

08016e04 <sulp>:
 8016e04:	b570      	push	{r4, r5, r6, lr}
 8016e06:	4604      	mov	r4, r0
 8016e08:	460d      	mov	r5, r1
 8016e0a:	4616      	mov	r6, r2
 8016e0c:	ec45 4b10 	vmov	d0, r4, r5
 8016e10:	f7ff feb6 	bl	8016b80 <__ulp>
 8016e14:	ec51 0b10 	vmov	r0, r1, d0
 8016e18:	b17e      	cbz	r6, 8016e3a <sulp+0x36>
 8016e1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	dd09      	ble.n	8016e3a <sulp+0x36>
 8016e26:	051b      	lsls	r3, r3, #20
 8016e28:	2400      	movs	r4, #0
 8016e2a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016e2e:	4622      	mov	r2, r4
 8016e30:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016e34:	462b      	mov	r3, r5
 8016e36:	f7e9 fbed 	bl	8000614 <__aeabi_dmul>
 8016e3a:	ec41 0b10 	vmov	d0, r0, r1
 8016e3e:	bd70      	pop	{r4, r5, r6, pc}

08016e40 <_strtod_l>:
 8016e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e44:	b09f      	sub	sp, #124	@ 0x7c
 8016e46:	460c      	mov	r4, r1
 8016e48:	f04f 0a00 	mov.w	sl, #0
 8016e4c:	f04f 0b00 	mov.w	fp, #0
 8016e50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016e52:	2200      	movs	r2, #0
 8016e54:	9005      	str	r0, [sp, #20]
 8016e56:	921a      	str	r2, [sp, #104]	@ 0x68
 8016e58:	460a      	mov	r2, r1
 8016e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e5c:	7811      	ldrb	r1, [r2, #0]
 8016e5e:	292b      	cmp	r1, #43	@ 0x2b
 8016e60:	d04a      	beq.n	8016ef8 <_strtod_l+0xb8>
 8016e62:	d838      	bhi.n	8016ed6 <_strtod_l+0x96>
 8016e64:	290d      	cmp	r1, #13
 8016e66:	d832      	bhi.n	8016ece <_strtod_l+0x8e>
 8016e68:	2908      	cmp	r1, #8
 8016e6a:	d832      	bhi.n	8016ed2 <_strtod_l+0x92>
 8016e6c:	2900      	cmp	r1, #0
 8016e6e:	d03b      	beq.n	8016ee8 <_strtod_l+0xa8>
 8016e70:	2200      	movs	r2, #0
 8016e72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016e74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016e76:	782a      	ldrb	r2, [r5, #0]
 8016e78:	2a30      	cmp	r2, #48	@ 0x30
 8016e7a:	f040 80b3 	bne.w	8016fe4 <_strtod_l+0x1a4>
 8016e7e:	786a      	ldrb	r2, [r5, #1]
 8016e80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016e84:	2a58      	cmp	r2, #88	@ 0x58
 8016e86:	d16e      	bne.n	8016f66 <_strtod_l+0x126>
 8016e88:	9302      	str	r3, [sp, #8]
 8016e8a:	a919      	add	r1, sp, #100	@ 0x64
 8016e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016e8e:	4a90      	ldr	r2, [pc, #576]	@ (80170d0 <_strtod_l+0x290>)
 8016e90:	9301      	str	r3, [sp, #4]
 8016e92:	ab1a      	add	r3, sp, #104	@ 0x68
 8016e94:	9805      	ldr	r0, [sp, #20]
 8016e96:	9300      	str	r3, [sp, #0]
 8016e98:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016e9a:	f001 fe49 	bl	8018b30 <__gethex>
 8016e9e:	f010 060f 	ands.w	r6, r0, #15
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	d005      	beq.n	8016eb2 <_strtod_l+0x72>
 8016ea6:	2e06      	cmp	r6, #6
 8016ea8:	d128      	bne.n	8016efc <_strtod_l+0xbc>
 8016eaa:	3501      	adds	r5, #1
 8016eac:	2300      	movs	r3, #0
 8016eae:	9519      	str	r5, [sp, #100]	@ 0x64
 8016eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016eb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f040 858e 	bne.w	80179d6 <_strtod_l+0xb96>
 8016eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ebc:	b1cb      	cbz	r3, 8016ef2 <_strtod_l+0xb2>
 8016ebe:	4652      	mov	r2, sl
 8016ec0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016ec4:	ec43 2b10 	vmov	d0, r2, r3
 8016ec8:	b01f      	add	sp, #124	@ 0x7c
 8016eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ece:	2920      	cmp	r1, #32
 8016ed0:	d1ce      	bne.n	8016e70 <_strtod_l+0x30>
 8016ed2:	3201      	adds	r2, #1
 8016ed4:	e7c1      	b.n	8016e5a <_strtod_l+0x1a>
 8016ed6:	292d      	cmp	r1, #45	@ 0x2d
 8016ed8:	d1ca      	bne.n	8016e70 <_strtod_l+0x30>
 8016eda:	2101      	movs	r1, #1
 8016edc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016ede:	1c51      	adds	r1, r2, #1
 8016ee0:	9119      	str	r1, [sp, #100]	@ 0x64
 8016ee2:	7852      	ldrb	r2, [r2, #1]
 8016ee4:	2a00      	cmp	r2, #0
 8016ee6:	d1c5      	bne.n	8016e74 <_strtod_l+0x34>
 8016ee8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016eea:	9419      	str	r4, [sp, #100]	@ 0x64
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	f040 8570 	bne.w	80179d2 <_strtod_l+0xb92>
 8016ef2:	4652      	mov	r2, sl
 8016ef4:	465b      	mov	r3, fp
 8016ef6:	e7e5      	b.n	8016ec4 <_strtod_l+0x84>
 8016ef8:	2100      	movs	r1, #0
 8016efa:	e7ef      	b.n	8016edc <_strtod_l+0x9c>
 8016efc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016efe:	b13a      	cbz	r2, 8016f10 <_strtod_l+0xd0>
 8016f00:	2135      	movs	r1, #53	@ 0x35
 8016f02:	a81c      	add	r0, sp, #112	@ 0x70
 8016f04:	f7ff ff3a 	bl	8016d7c <__copybits>
 8016f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f0a:	9805      	ldr	r0, [sp, #20]
 8016f0c:	f7ff fafe 	bl	801650c <_Bfree>
 8016f10:	3e01      	subs	r6, #1
 8016f12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016f14:	2e04      	cmp	r6, #4
 8016f16:	d806      	bhi.n	8016f26 <_strtod_l+0xe6>
 8016f18:	e8df f006 	tbb	[pc, r6]
 8016f1c:	201d0314 	.word	0x201d0314
 8016f20:	14          	.byte	0x14
 8016f21:	00          	.byte	0x00
 8016f22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016f26:	05e1      	lsls	r1, r4, #23
 8016f28:	bf48      	it	mi
 8016f2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016f2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016f32:	0d1b      	lsrs	r3, r3, #20
 8016f34:	051b      	lsls	r3, r3, #20
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d1bb      	bne.n	8016eb2 <_strtod_l+0x72>
 8016f3a:	f7fe fbb3 	bl	80156a4 <__errno>
 8016f3e:	2322      	movs	r3, #34	@ 0x22
 8016f40:	6003      	str	r3, [r0, #0]
 8016f42:	e7b6      	b.n	8016eb2 <_strtod_l+0x72>
 8016f44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016f48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016f4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016f50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016f54:	e7e7      	b.n	8016f26 <_strtod_l+0xe6>
 8016f56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80170d8 <_strtod_l+0x298>
 8016f5a:	e7e4      	b.n	8016f26 <_strtod_l+0xe6>
 8016f5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016f60:	f04f 3aff 	mov.w	sl, #4294967295
 8016f64:	e7df      	b.n	8016f26 <_strtod_l+0xe6>
 8016f66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f68:	1c5a      	adds	r2, r3, #1
 8016f6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016f6c:	785b      	ldrb	r3, [r3, #1]
 8016f6e:	2b30      	cmp	r3, #48	@ 0x30
 8016f70:	d0f9      	beq.n	8016f66 <_strtod_l+0x126>
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d09d      	beq.n	8016eb2 <_strtod_l+0x72>
 8016f76:	2301      	movs	r3, #1
 8016f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f7a:	220a      	movs	r2, #10
 8016f7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f80:	2300      	movs	r3, #0
 8016f82:	461f      	mov	r7, r3
 8016f84:	9308      	str	r3, [sp, #32]
 8016f86:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016f8a:	7805      	ldrb	r5, [r0, #0]
 8016f8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016f90:	b2d9      	uxtb	r1, r3
 8016f92:	2909      	cmp	r1, #9
 8016f94:	d928      	bls.n	8016fe8 <_strtod_l+0x1a8>
 8016f96:	2201      	movs	r2, #1
 8016f98:	494e      	ldr	r1, [pc, #312]	@ (80170d4 <_strtod_l+0x294>)
 8016f9a:	f7fe fb04 	bl	80155a6 <strncmp>
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	d033      	beq.n	801700a <_strtod_l+0x1ca>
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	462a      	mov	r2, r5
 8016fa6:	463d      	mov	r5, r7
 8016fa8:	4681      	mov	r9, r0
 8016faa:	4603      	mov	r3, r0
 8016fac:	2a65      	cmp	r2, #101	@ 0x65
 8016fae:	d001      	beq.n	8016fb4 <_strtod_l+0x174>
 8016fb0:	2a45      	cmp	r2, #69	@ 0x45
 8016fb2:	d114      	bne.n	8016fde <_strtod_l+0x19e>
 8016fb4:	b91d      	cbnz	r5, 8016fbe <_strtod_l+0x17e>
 8016fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016fb8:	4302      	orrs	r2, r0
 8016fba:	d095      	beq.n	8016ee8 <_strtod_l+0xa8>
 8016fbc:	2500      	movs	r5, #0
 8016fbe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016fc0:	1c62      	adds	r2, r4, #1
 8016fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016fc4:	7862      	ldrb	r2, [r4, #1]
 8016fc6:	2a2b      	cmp	r2, #43	@ 0x2b
 8016fc8:	d078      	beq.n	80170bc <_strtod_l+0x27c>
 8016fca:	2a2d      	cmp	r2, #45	@ 0x2d
 8016fcc:	d07c      	beq.n	80170c8 <_strtod_l+0x288>
 8016fce:	f04f 0c00 	mov.w	ip, #0
 8016fd2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016fd6:	2909      	cmp	r1, #9
 8016fd8:	f240 8084 	bls.w	80170e4 <_strtod_l+0x2a4>
 8016fdc:	9419      	str	r4, [sp, #100]	@ 0x64
 8016fde:	f04f 0800 	mov.w	r8, #0
 8016fe2:	e0a4      	b.n	801712e <_strtod_l+0x2ee>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	e7c7      	b.n	8016f78 <_strtod_l+0x138>
 8016fe8:	2f08      	cmp	r7, #8
 8016fea:	f100 0001 	add.w	r0, r0, #1
 8016fee:	f107 0701 	add.w	r7, r7, #1
 8016ff2:	bfd5      	itete	le
 8016ff4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8016ff6:	9908      	ldrgt	r1, [sp, #32]
 8016ff8:	fb02 3301 	mlale	r3, r2, r1, r3
 8016ffc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017000:	bfd4      	ite	le
 8017002:	930a      	strle	r3, [sp, #40]	@ 0x28
 8017004:	9308      	strgt	r3, [sp, #32]
 8017006:	9019      	str	r0, [sp, #100]	@ 0x64
 8017008:	e7be      	b.n	8016f88 <_strtod_l+0x148>
 801700a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801700c:	1c5a      	adds	r2, r3, #1
 801700e:	9219      	str	r2, [sp, #100]	@ 0x64
 8017010:	785a      	ldrb	r2, [r3, #1]
 8017012:	b37f      	cbz	r7, 8017074 <_strtod_l+0x234>
 8017014:	4681      	mov	r9, r0
 8017016:	463d      	mov	r5, r7
 8017018:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801701c:	2b09      	cmp	r3, #9
 801701e:	d912      	bls.n	8017046 <_strtod_l+0x206>
 8017020:	2301      	movs	r3, #1
 8017022:	e7c3      	b.n	8016fac <_strtod_l+0x16c>
 8017024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017026:	3001      	adds	r0, #1
 8017028:	1c5a      	adds	r2, r3, #1
 801702a:	9219      	str	r2, [sp, #100]	@ 0x64
 801702c:	785a      	ldrb	r2, [r3, #1]
 801702e:	2a30      	cmp	r2, #48	@ 0x30
 8017030:	d0f8      	beq.n	8017024 <_strtod_l+0x1e4>
 8017032:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017036:	2b08      	cmp	r3, #8
 8017038:	f200 84d2 	bhi.w	80179e0 <_strtod_l+0xba0>
 801703c:	4681      	mov	r9, r0
 801703e:	2000      	movs	r0, #0
 8017040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017042:	4605      	mov	r5, r0
 8017044:	930c      	str	r3, [sp, #48]	@ 0x30
 8017046:	3a30      	subs	r2, #48	@ 0x30
 8017048:	f100 0301 	add.w	r3, r0, #1
 801704c:	d02a      	beq.n	80170a4 <_strtod_l+0x264>
 801704e:	4499      	add	r9, r3
 8017050:	eb00 0c05 	add.w	ip, r0, r5
 8017054:	462b      	mov	r3, r5
 8017056:	210a      	movs	r1, #10
 8017058:	4563      	cmp	r3, ip
 801705a:	d10d      	bne.n	8017078 <_strtod_l+0x238>
 801705c:	1c69      	adds	r1, r5, #1
 801705e:	4401      	add	r1, r0
 8017060:	4428      	add	r0, r5
 8017062:	2808      	cmp	r0, #8
 8017064:	dc16      	bgt.n	8017094 <_strtod_l+0x254>
 8017066:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017068:	230a      	movs	r3, #10
 801706a:	fb03 2300 	mla	r3, r3, r0, r2
 801706e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017070:	2300      	movs	r3, #0
 8017072:	e018      	b.n	80170a6 <_strtod_l+0x266>
 8017074:	4638      	mov	r0, r7
 8017076:	e7da      	b.n	801702e <_strtod_l+0x1ee>
 8017078:	2b08      	cmp	r3, #8
 801707a:	f103 0301 	add.w	r3, r3, #1
 801707e:	dc03      	bgt.n	8017088 <_strtod_l+0x248>
 8017080:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017082:	434e      	muls	r6, r1
 8017084:	960a      	str	r6, [sp, #40]	@ 0x28
 8017086:	e7e7      	b.n	8017058 <_strtod_l+0x218>
 8017088:	2b10      	cmp	r3, #16
 801708a:	bfde      	ittt	le
 801708c:	9e08      	ldrle	r6, [sp, #32]
 801708e:	434e      	mulle	r6, r1
 8017090:	9608      	strle	r6, [sp, #32]
 8017092:	e7e1      	b.n	8017058 <_strtod_l+0x218>
 8017094:	280f      	cmp	r0, #15
 8017096:	dceb      	bgt.n	8017070 <_strtod_l+0x230>
 8017098:	9808      	ldr	r0, [sp, #32]
 801709a:	230a      	movs	r3, #10
 801709c:	fb03 2300 	mla	r3, r3, r0, r2
 80170a0:	9308      	str	r3, [sp, #32]
 80170a2:	e7e5      	b.n	8017070 <_strtod_l+0x230>
 80170a4:	4629      	mov	r1, r5
 80170a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80170a8:	460d      	mov	r5, r1
 80170aa:	1c50      	adds	r0, r2, #1
 80170ac:	9019      	str	r0, [sp, #100]	@ 0x64
 80170ae:	4618      	mov	r0, r3
 80170b0:	7852      	ldrb	r2, [r2, #1]
 80170b2:	e7b1      	b.n	8017018 <_strtod_l+0x1d8>
 80170b4:	f04f 0900 	mov.w	r9, #0
 80170b8:	2301      	movs	r3, #1
 80170ba:	e77c      	b.n	8016fb6 <_strtod_l+0x176>
 80170bc:	f04f 0c00 	mov.w	ip, #0
 80170c0:	1ca2      	adds	r2, r4, #2
 80170c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80170c4:	78a2      	ldrb	r2, [r4, #2]
 80170c6:	e784      	b.n	8016fd2 <_strtod_l+0x192>
 80170c8:	f04f 0c01 	mov.w	ip, #1
 80170cc:	e7f8      	b.n	80170c0 <_strtod_l+0x280>
 80170ce:	bf00      	nop
 80170d0:	0818cca0 	.word	0x0818cca0
 80170d4:	0818cc88 	.word	0x0818cc88
 80170d8:	7ff00000 	.word	0x7ff00000
 80170dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80170de:	1c51      	adds	r1, r2, #1
 80170e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80170e2:	7852      	ldrb	r2, [r2, #1]
 80170e4:	2a30      	cmp	r2, #48	@ 0x30
 80170e6:	d0f9      	beq.n	80170dc <_strtod_l+0x29c>
 80170e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80170ec:	2908      	cmp	r1, #8
 80170ee:	f63f af76 	bhi.w	8016fde <_strtod_l+0x19e>
 80170f2:	3a30      	subs	r2, #48	@ 0x30
 80170f4:	f04f 080a 	mov.w	r8, #10
 80170f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80170fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80170fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80170fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017100:	1c56      	adds	r6, r2, #1
 8017102:	9619      	str	r6, [sp, #100]	@ 0x64
 8017104:	7852      	ldrb	r2, [r2, #1]
 8017106:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801710a:	f1be 0f09 	cmp.w	lr, #9
 801710e:	d939      	bls.n	8017184 <_strtod_l+0x344>
 8017110:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017112:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8017116:	1a76      	subs	r6, r6, r1
 8017118:	2e08      	cmp	r6, #8
 801711a:	dc03      	bgt.n	8017124 <_strtod_l+0x2e4>
 801711c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801711e:	4588      	cmp	r8, r1
 8017120:	bfa8      	it	ge
 8017122:	4688      	movge	r8, r1
 8017124:	f1bc 0f00 	cmp.w	ip, #0
 8017128:	d001      	beq.n	801712e <_strtod_l+0x2ee>
 801712a:	f1c8 0800 	rsb	r8, r8, #0
 801712e:	2d00      	cmp	r5, #0
 8017130:	d14e      	bne.n	80171d0 <_strtod_l+0x390>
 8017132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017134:	4308      	orrs	r0, r1
 8017136:	f47f aebc 	bne.w	8016eb2 <_strtod_l+0x72>
 801713a:	2b00      	cmp	r3, #0
 801713c:	f47f aed4 	bne.w	8016ee8 <_strtod_l+0xa8>
 8017140:	2a69      	cmp	r2, #105	@ 0x69
 8017142:	d028      	beq.n	8017196 <_strtod_l+0x356>
 8017144:	dc25      	bgt.n	8017192 <_strtod_l+0x352>
 8017146:	2a49      	cmp	r2, #73	@ 0x49
 8017148:	d025      	beq.n	8017196 <_strtod_l+0x356>
 801714a:	2a4e      	cmp	r2, #78	@ 0x4e
 801714c:	f47f aecc 	bne.w	8016ee8 <_strtod_l+0xa8>
 8017150:	499b      	ldr	r1, [pc, #620]	@ (80173c0 <_strtod_l+0x580>)
 8017152:	a819      	add	r0, sp, #100	@ 0x64
 8017154:	f001 ff0c 	bl	8018f70 <__match>
 8017158:	2800      	cmp	r0, #0
 801715a:	f43f aec5 	beq.w	8016ee8 <_strtod_l+0xa8>
 801715e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	2b28      	cmp	r3, #40	@ 0x28
 8017164:	d12e      	bne.n	80171c4 <_strtod_l+0x384>
 8017166:	aa1c      	add	r2, sp, #112	@ 0x70
 8017168:	4996      	ldr	r1, [pc, #600]	@ (80173c4 <_strtod_l+0x584>)
 801716a:	a819      	add	r0, sp, #100	@ 0x64
 801716c:	f001 ff14 	bl	8018f98 <__hexnan>
 8017170:	2805      	cmp	r0, #5
 8017172:	d127      	bne.n	80171c4 <_strtod_l+0x384>
 8017174:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017176:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801717a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801717e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017182:	e696      	b.n	8016eb2 <_strtod_l+0x72>
 8017184:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017186:	fb08 2101 	mla	r1, r8, r1, r2
 801718a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801718e:	920e      	str	r2, [sp, #56]	@ 0x38
 8017190:	e7b5      	b.n	80170fe <_strtod_l+0x2be>
 8017192:	2a6e      	cmp	r2, #110	@ 0x6e
 8017194:	e7da      	b.n	801714c <_strtod_l+0x30c>
 8017196:	498c      	ldr	r1, [pc, #560]	@ (80173c8 <_strtod_l+0x588>)
 8017198:	a819      	add	r0, sp, #100	@ 0x64
 801719a:	f001 fee9 	bl	8018f70 <__match>
 801719e:	2800      	cmp	r0, #0
 80171a0:	f43f aea2 	beq.w	8016ee8 <_strtod_l+0xa8>
 80171a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171a6:	a819      	add	r0, sp, #100	@ 0x64
 80171a8:	4988      	ldr	r1, [pc, #544]	@ (80173cc <_strtod_l+0x58c>)
 80171aa:	3b01      	subs	r3, #1
 80171ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80171ae:	f001 fedf 	bl	8018f70 <__match>
 80171b2:	b910      	cbnz	r0, 80171ba <_strtod_l+0x37a>
 80171b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171b6:	3301      	adds	r3, #1
 80171b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80171ba:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80173dc <_strtod_l+0x59c>
 80171be:	f04f 0a00 	mov.w	sl, #0
 80171c2:	e676      	b.n	8016eb2 <_strtod_l+0x72>
 80171c4:	4882      	ldr	r0, [pc, #520]	@ (80173d0 <_strtod_l+0x590>)
 80171c6:	f001 fc27 	bl	8018a18 <nan>
 80171ca:	ec5b ab10 	vmov	sl, fp, d0
 80171ce:	e670      	b.n	8016eb2 <_strtod_l+0x72>
 80171d0:	eba8 0309 	sub.w	r3, r8, r9
 80171d4:	2f00      	cmp	r7, #0
 80171d6:	bf08      	it	eq
 80171d8:	462f      	moveq	r7, r5
 80171da:	2d10      	cmp	r5, #16
 80171dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80171de:	462c      	mov	r4, r5
 80171e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80171e2:	bfa8      	it	ge
 80171e4:	2410      	movge	r4, #16
 80171e6:	f7e9 f99b 	bl	8000520 <__aeabi_ui2d>
 80171ea:	2d09      	cmp	r5, #9
 80171ec:	4682      	mov	sl, r0
 80171ee:	468b      	mov	fp, r1
 80171f0:	dc13      	bgt.n	801721a <_strtod_l+0x3da>
 80171f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	f43f ae5c 	beq.w	8016eb2 <_strtod_l+0x72>
 80171fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171fc:	dd78      	ble.n	80172f0 <_strtod_l+0x4b0>
 80171fe:	2b16      	cmp	r3, #22
 8017200:	dc5f      	bgt.n	80172c2 <_strtod_l+0x482>
 8017202:	4974      	ldr	r1, [pc, #464]	@ (80173d4 <_strtod_l+0x594>)
 8017204:	4652      	mov	r2, sl
 8017206:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801720a:	465b      	mov	r3, fp
 801720c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017210:	f7e9 fa00 	bl	8000614 <__aeabi_dmul>
 8017214:	4682      	mov	sl, r0
 8017216:	468b      	mov	fp, r1
 8017218:	e64b      	b.n	8016eb2 <_strtod_l+0x72>
 801721a:	4b6e      	ldr	r3, [pc, #440]	@ (80173d4 <_strtod_l+0x594>)
 801721c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017220:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017224:	f7e9 f9f6 	bl	8000614 <__aeabi_dmul>
 8017228:	4682      	mov	sl, r0
 801722a:	468b      	mov	fp, r1
 801722c:	9808      	ldr	r0, [sp, #32]
 801722e:	f7e9 f977 	bl	8000520 <__aeabi_ui2d>
 8017232:	4602      	mov	r2, r0
 8017234:	460b      	mov	r3, r1
 8017236:	4650      	mov	r0, sl
 8017238:	4659      	mov	r1, fp
 801723a:	f7e9 f835 	bl	80002a8 <__adddf3>
 801723e:	2d0f      	cmp	r5, #15
 8017240:	4682      	mov	sl, r0
 8017242:	468b      	mov	fp, r1
 8017244:	ddd5      	ble.n	80171f2 <_strtod_l+0x3b2>
 8017246:	1b2c      	subs	r4, r5, r4
 8017248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801724a:	441c      	add	r4, r3
 801724c:	2c00      	cmp	r4, #0
 801724e:	f340 8096 	ble.w	801737e <_strtod_l+0x53e>
 8017252:	f014 030f 	ands.w	r3, r4, #15
 8017256:	d00a      	beq.n	801726e <_strtod_l+0x42e>
 8017258:	495e      	ldr	r1, [pc, #376]	@ (80173d4 <_strtod_l+0x594>)
 801725a:	4652      	mov	r2, sl
 801725c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017260:	465b      	mov	r3, fp
 8017262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017266:	f7e9 f9d5 	bl	8000614 <__aeabi_dmul>
 801726a:	4682      	mov	sl, r0
 801726c:	468b      	mov	fp, r1
 801726e:	f034 040f 	bics.w	r4, r4, #15
 8017272:	d073      	beq.n	801735c <_strtod_l+0x51c>
 8017274:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8017278:	dd48      	ble.n	801730c <_strtod_l+0x4cc>
 801727a:	2400      	movs	r4, #0
 801727c:	46a0      	mov	r8, r4
 801727e:	46a1      	mov	r9, r4
 8017280:	940a      	str	r4, [sp, #40]	@ 0x28
 8017282:	2322      	movs	r3, #34	@ 0x22
 8017284:	9a05      	ldr	r2, [sp, #20]
 8017286:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80173dc <_strtod_l+0x59c>
 801728a:	f04f 0a00 	mov.w	sl, #0
 801728e:	6013      	str	r3, [r2, #0]
 8017290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017292:	2b00      	cmp	r3, #0
 8017294:	f43f ae0d 	beq.w	8016eb2 <_strtod_l+0x72>
 8017298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801729a:	9805      	ldr	r0, [sp, #20]
 801729c:	f7ff f936 	bl	801650c <_Bfree>
 80172a0:	4649      	mov	r1, r9
 80172a2:	9805      	ldr	r0, [sp, #20]
 80172a4:	f7ff f932 	bl	801650c <_Bfree>
 80172a8:	4641      	mov	r1, r8
 80172aa:	9805      	ldr	r0, [sp, #20]
 80172ac:	f7ff f92e 	bl	801650c <_Bfree>
 80172b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80172b2:	9805      	ldr	r0, [sp, #20]
 80172b4:	f7ff f92a 	bl	801650c <_Bfree>
 80172b8:	4621      	mov	r1, r4
 80172ba:	9805      	ldr	r0, [sp, #20]
 80172bc:	f7ff f926 	bl	801650c <_Bfree>
 80172c0:	e5f7      	b.n	8016eb2 <_strtod_l+0x72>
 80172c2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80172c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172c8:	4293      	cmp	r3, r2
 80172ca:	dbbc      	blt.n	8017246 <_strtod_l+0x406>
 80172cc:	f1c5 050f 	rsb	r5, r5, #15
 80172d0:	4c40      	ldr	r4, [pc, #256]	@ (80173d4 <_strtod_l+0x594>)
 80172d2:	4652      	mov	r2, sl
 80172d4:	465b      	mov	r3, fp
 80172d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80172da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172de:	f7e9 f999 	bl	8000614 <__aeabi_dmul>
 80172e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172e4:	1b5d      	subs	r5, r3, r5
 80172e6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80172ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80172ee:	e78f      	b.n	8017210 <_strtod_l+0x3d0>
 80172f0:	3316      	adds	r3, #22
 80172f2:	dba8      	blt.n	8017246 <_strtod_l+0x406>
 80172f4:	eba9 0808 	sub.w	r8, r9, r8
 80172f8:	4b36      	ldr	r3, [pc, #216]	@ (80173d4 <_strtod_l+0x594>)
 80172fa:	4650      	mov	r0, sl
 80172fc:	4659      	mov	r1, fp
 80172fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017302:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017306:	f7e9 faaf 	bl	8000868 <__aeabi_ddiv>
 801730a:	e783      	b.n	8017214 <_strtod_l+0x3d4>
 801730c:	4b32      	ldr	r3, [pc, #200]	@ (80173d8 <_strtod_l+0x598>)
 801730e:	1124      	asrs	r4, r4, #4
 8017310:	4650      	mov	r0, sl
 8017312:	4659      	mov	r1, fp
 8017314:	9308      	str	r3, [sp, #32]
 8017316:	2300      	movs	r3, #0
 8017318:	461e      	mov	r6, r3
 801731a:	2c01      	cmp	r4, #1
 801731c:	dc21      	bgt.n	8017362 <_strtod_l+0x522>
 801731e:	b10b      	cbz	r3, 8017324 <_strtod_l+0x4e4>
 8017320:	4682      	mov	sl, r0
 8017322:	468b      	mov	fp, r1
 8017324:	492c      	ldr	r1, [pc, #176]	@ (80173d8 <_strtod_l+0x598>)
 8017326:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801732a:	4652      	mov	r2, sl
 801732c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017330:	465b      	mov	r3, fp
 8017332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017336:	f7e9 f96d 	bl	8000614 <__aeabi_dmul>
 801733a:	4b28      	ldr	r3, [pc, #160]	@ (80173dc <_strtod_l+0x59c>)
 801733c:	460a      	mov	r2, r1
 801733e:	4682      	mov	sl, r0
 8017340:	400b      	ands	r3, r1
 8017342:	4927      	ldr	r1, [pc, #156]	@ (80173e0 <_strtod_l+0x5a0>)
 8017344:	428b      	cmp	r3, r1
 8017346:	d898      	bhi.n	801727a <_strtod_l+0x43a>
 8017348:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801734c:	428b      	cmp	r3, r1
 801734e:	bf86      	itte	hi
 8017350:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80173e4 <_strtod_l+0x5a4>
 8017354:	f04f 3aff 	movhi.w	sl, #4294967295
 8017358:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801735c:	2300      	movs	r3, #0
 801735e:	9308      	str	r3, [sp, #32]
 8017360:	e07a      	b.n	8017458 <_strtod_l+0x618>
 8017362:	07e2      	lsls	r2, r4, #31
 8017364:	d505      	bpl.n	8017372 <_strtod_l+0x532>
 8017366:	9b08      	ldr	r3, [sp, #32]
 8017368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736c:	f7e9 f952 	bl	8000614 <__aeabi_dmul>
 8017370:	2301      	movs	r3, #1
 8017372:	9a08      	ldr	r2, [sp, #32]
 8017374:	3601      	adds	r6, #1
 8017376:	1064      	asrs	r4, r4, #1
 8017378:	3208      	adds	r2, #8
 801737a:	9208      	str	r2, [sp, #32]
 801737c:	e7cd      	b.n	801731a <_strtod_l+0x4da>
 801737e:	d0ed      	beq.n	801735c <_strtod_l+0x51c>
 8017380:	4264      	negs	r4, r4
 8017382:	f014 020f 	ands.w	r2, r4, #15
 8017386:	d00a      	beq.n	801739e <_strtod_l+0x55e>
 8017388:	4b12      	ldr	r3, [pc, #72]	@ (80173d4 <_strtod_l+0x594>)
 801738a:	4650      	mov	r0, sl
 801738c:	4659      	mov	r1, fp
 801738e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017396:	f7e9 fa67 	bl	8000868 <__aeabi_ddiv>
 801739a:	4682      	mov	sl, r0
 801739c:	468b      	mov	fp, r1
 801739e:	1124      	asrs	r4, r4, #4
 80173a0:	d0dc      	beq.n	801735c <_strtod_l+0x51c>
 80173a2:	2c1f      	cmp	r4, #31
 80173a4:	dd20      	ble.n	80173e8 <_strtod_l+0x5a8>
 80173a6:	2400      	movs	r4, #0
 80173a8:	46a0      	mov	r8, r4
 80173aa:	46a1      	mov	r9, r4
 80173ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80173ae:	2322      	movs	r3, #34	@ 0x22
 80173b0:	9a05      	ldr	r2, [sp, #20]
 80173b2:	f04f 0a00 	mov.w	sl, #0
 80173b6:	f04f 0b00 	mov.w	fp, #0
 80173ba:	6013      	str	r3, [r2, #0]
 80173bc:	e768      	b.n	8017290 <_strtod_l+0x450>
 80173be:	bf00      	nop
 80173c0:	0818ca75 	.word	0x0818ca75
 80173c4:	0818cc8c 	.word	0x0818cc8c
 80173c8:	0818ca6d 	.word	0x0818ca6d
 80173cc:	0818caa2 	.word	0x0818caa2
 80173d0:	0818ce50 	.word	0x0818ce50
 80173d4:	0818cbc0 	.word	0x0818cbc0
 80173d8:	0818cb98 	.word	0x0818cb98
 80173dc:	7ff00000 	.word	0x7ff00000
 80173e0:	7ca00000 	.word	0x7ca00000
 80173e4:	7fefffff 	.word	0x7fefffff
 80173e8:	f014 0310 	ands.w	r3, r4, #16
 80173ec:	4650      	mov	r0, sl
 80173ee:	4659      	mov	r1, fp
 80173f0:	4ea9      	ldr	r6, [pc, #676]	@ (8017698 <_strtod_l+0x858>)
 80173f2:	bf18      	it	ne
 80173f4:	236a      	movne	r3, #106	@ 0x6a
 80173f6:	9308      	str	r3, [sp, #32]
 80173f8:	2300      	movs	r3, #0
 80173fa:	07e2      	lsls	r2, r4, #31
 80173fc:	d504      	bpl.n	8017408 <_strtod_l+0x5c8>
 80173fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017402:	f7e9 f907 	bl	8000614 <__aeabi_dmul>
 8017406:	2301      	movs	r3, #1
 8017408:	1064      	asrs	r4, r4, #1
 801740a:	f106 0608 	add.w	r6, r6, #8
 801740e:	d1f4      	bne.n	80173fa <_strtod_l+0x5ba>
 8017410:	b10b      	cbz	r3, 8017416 <_strtod_l+0x5d6>
 8017412:	4682      	mov	sl, r0
 8017414:	468b      	mov	fp, r1
 8017416:	9b08      	ldr	r3, [sp, #32]
 8017418:	b1b3      	cbz	r3, 8017448 <_strtod_l+0x608>
 801741a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801741e:	4659      	mov	r1, fp
 8017420:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017424:	2b00      	cmp	r3, #0
 8017426:	dd0f      	ble.n	8017448 <_strtod_l+0x608>
 8017428:	2b1f      	cmp	r3, #31
 801742a:	dd55      	ble.n	80174d8 <_strtod_l+0x698>
 801742c:	2b34      	cmp	r3, #52	@ 0x34
 801742e:	f04f 0a00 	mov.w	sl, #0
 8017432:	bfdb      	ittet	le
 8017434:	f04f 33ff 	movle.w	r3, #4294967295
 8017438:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801743c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017440:	4093      	lslle	r3, r2
 8017442:	bfd8      	it	le
 8017444:	ea03 0b01 	andle.w	fp, r3, r1
 8017448:	2200      	movs	r2, #0
 801744a:	2300      	movs	r3, #0
 801744c:	4650      	mov	r0, sl
 801744e:	4659      	mov	r1, fp
 8017450:	f7e9 fb48 	bl	8000ae4 <__aeabi_dcmpeq>
 8017454:	2800      	cmp	r0, #0
 8017456:	d1a6      	bne.n	80173a6 <_strtod_l+0x566>
 8017458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801745a:	463a      	mov	r2, r7
 801745c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	462b      	mov	r3, r5
 8017462:	9805      	ldr	r0, [sp, #20]
 8017464:	f7ff f8bc 	bl	80165e0 <__s2b>
 8017468:	900a      	str	r0, [sp, #40]	@ 0x28
 801746a:	2800      	cmp	r0, #0
 801746c:	f43f af05 	beq.w	801727a <_strtod_l+0x43a>
 8017470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017472:	eba9 0308 	sub.w	r3, r9, r8
 8017476:	2400      	movs	r4, #0
 8017478:	2a00      	cmp	r2, #0
 801747a:	46a0      	mov	r8, r4
 801747c:	bfa8      	it	ge
 801747e:	2300      	movge	r3, #0
 8017480:	9312      	str	r3, [sp, #72]	@ 0x48
 8017482:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017486:	9316      	str	r3, [sp, #88]	@ 0x58
 8017488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801748a:	9805      	ldr	r0, [sp, #20]
 801748c:	6859      	ldr	r1, [r3, #4]
 801748e:	f7fe fffd 	bl	801648c <_Balloc>
 8017492:	4681      	mov	r9, r0
 8017494:	2800      	cmp	r0, #0
 8017496:	f43f aef4 	beq.w	8017282 <_strtod_l+0x442>
 801749a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801749c:	300c      	adds	r0, #12
 801749e:	691a      	ldr	r2, [r3, #16]
 80174a0:	f103 010c 	add.w	r1, r3, #12
 80174a4:	3202      	adds	r2, #2
 80174a6:	0092      	lsls	r2, r2, #2
 80174a8:	f7fe f93f 	bl	801572a <memcpy>
 80174ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80174ae:	a91b      	add	r1, sp, #108	@ 0x6c
 80174b0:	9805      	ldr	r0, [sp, #20]
 80174b2:	ec4b ab10 	vmov	d0, sl, fp
 80174b6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80174ba:	f7ff fbd5 	bl	8016c68 <__d2b>
 80174be:	901a      	str	r0, [sp, #104]	@ 0x68
 80174c0:	2800      	cmp	r0, #0
 80174c2:	f43f aede 	beq.w	8017282 <_strtod_l+0x442>
 80174c6:	2101      	movs	r1, #1
 80174c8:	9805      	ldr	r0, [sp, #20]
 80174ca:	f7ff f91f 	bl	801670c <__i2b>
 80174ce:	4680      	mov	r8, r0
 80174d0:	b948      	cbnz	r0, 80174e6 <_strtod_l+0x6a6>
 80174d2:	f04f 0800 	mov.w	r8, #0
 80174d6:	e6d4      	b.n	8017282 <_strtod_l+0x442>
 80174d8:	f04f 32ff 	mov.w	r2, #4294967295
 80174dc:	fa02 f303 	lsl.w	r3, r2, r3
 80174e0:	ea03 0a0a 	and.w	sl, r3, sl
 80174e4:	e7b0      	b.n	8017448 <_strtod_l+0x608>
 80174e6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80174e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80174ea:	2d00      	cmp	r5, #0
 80174ec:	bfa9      	itett	ge
 80174ee:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80174f0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80174f2:	18ef      	addge	r7, r5, r3
 80174f4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80174f6:	bfb8      	it	lt
 80174f8:	1b5e      	sublt	r6, r3, r5
 80174fa:	9b08      	ldr	r3, [sp, #32]
 80174fc:	bfb8      	it	lt
 80174fe:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8017500:	1aed      	subs	r5, r5, r3
 8017502:	4b66      	ldr	r3, [pc, #408]	@ (801769c <_strtod_l+0x85c>)
 8017504:	4415      	add	r5, r2
 8017506:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801750a:	3d01      	subs	r5, #1
 801750c:	429d      	cmp	r5, r3
 801750e:	da4f      	bge.n	80175b0 <_strtod_l+0x770>
 8017510:	1b5b      	subs	r3, r3, r5
 8017512:	2101      	movs	r1, #1
 8017514:	2b1f      	cmp	r3, #31
 8017516:	eba2 0203 	sub.w	r2, r2, r3
 801751a:	dc3d      	bgt.n	8017598 <_strtod_l+0x758>
 801751c:	fa01 f303 	lsl.w	r3, r1, r3
 8017520:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017522:	2300      	movs	r3, #0
 8017524:	9310      	str	r3, [sp, #64]	@ 0x40
 8017526:	18bd      	adds	r5, r7, r2
 8017528:	9b08      	ldr	r3, [sp, #32]
 801752a:	4416      	add	r6, r2
 801752c:	42af      	cmp	r7, r5
 801752e:	441e      	add	r6, r3
 8017530:	463b      	mov	r3, r7
 8017532:	bfa8      	it	ge
 8017534:	462b      	movge	r3, r5
 8017536:	42b3      	cmp	r3, r6
 8017538:	bfa8      	it	ge
 801753a:	4633      	movge	r3, r6
 801753c:	2b00      	cmp	r3, #0
 801753e:	bfc2      	ittt	gt
 8017540:	1aed      	subgt	r5, r5, r3
 8017542:	1af6      	subgt	r6, r6, r3
 8017544:	1aff      	subgt	r7, r7, r3
 8017546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017548:	2b00      	cmp	r3, #0
 801754a:	dd16      	ble.n	801757a <_strtod_l+0x73a>
 801754c:	4641      	mov	r1, r8
 801754e:	461a      	mov	r2, r3
 8017550:	9805      	ldr	r0, [sp, #20]
 8017552:	f7ff f99b 	bl	801688c <__pow5mult>
 8017556:	4680      	mov	r8, r0
 8017558:	2800      	cmp	r0, #0
 801755a:	d0ba      	beq.n	80174d2 <_strtod_l+0x692>
 801755c:	4601      	mov	r1, r0
 801755e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017560:	9805      	ldr	r0, [sp, #20]
 8017562:	f7ff f8e9 	bl	8016738 <__multiply>
 8017566:	900e      	str	r0, [sp, #56]	@ 0x38
 8017568:	2800      	cmp	r0, #0
 801756a:	f43f ae8a 	beq.w	8017282 <_strtod_l+0x442>
 801756e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017570:	9805      	ldr	r0, [sp, #20]
 8017572:	f7fe ffcb 	bl	801650c <_Bfree>
 8017576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017578:	931a      	str	r3, [sp, #104]	@ 0x68
 801757a:	2d00      	cmp	r5, #0
 801757c:	dc1d      	bgt.n	80175ba <_strtod_l+0x77a>
 801757e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017580:	2b00      	cmp	r3, #0
 8017582:	dd23      	ble.n	80175cc <_strtod_l+0x78c>
 8017584:	4649      	mov	r1, r9
 8017586:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017588:	9805      	ldr	r0, [sp, #20]
 801758a:	f7ff f97f 	bl	801688c <__pow5mult>
 801758e:	4681      	mov	r9, r0
 8017590:	b9e0      	cbnz	r0, 80175cc <_strtod_l+0x78c>
 8017592:	f04f 0900 	mov.w	r9, #0
 8017596:	e674      	b.n	8017282 <_strtod_l+0x442>
 8017598:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801759c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801759e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80175a2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80175a6:	35e2      	adds	r5, #226	@ 0xe2
 80175a8:	fa01 f305 	lsl.w	r3, r1, r5
 80175ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80175ae:	e7ba      	b.n	8017526 <_strtod_l+0x6e6>
 80175b0:	2300      	movs	r3, #0
 80175b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80175b4:	2301      	movs	r3, #1
 80175b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80175b8:	e7b5      	b.n	8017526 <_strtod_l+0x6e6>
 80175ba:	462a      	mov	r2, r5
 80175bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80175be:	9805      	ldr	r0, [sp, #20]
 80175c0:	f7ff f9be 	bl	8016940 <__lshift>
 80175c4:	901a      	str	r0, [sp, #104]	@ 0x68
 80175c6:	2800      	cmp	r0, #0
 80175c8:	d1d9      	bne.n	801757e <_strtod_l+0x73e>
 80175ca:	e65a      	b.n	8017282 <_strtod_l+0x442>
 80175cc:	2e00      	cmp	r6, #0
 80175ce:	dd07      	ble.n	80175e0 <_strtod_l+0x7a0>
 80175d0:	4649      	mov	r1, r9
 80175d2:	4632      	mov	r2, r6
 80175d4:	9805      	ldr	r0, [sp, #20]
 80175d6:	f7ff f9b3 	bl	8016940 <__lshift>
 80175da:	4681      	mov	r9, r0
 80175dc:	2800      	cmp	r0, #0
 80175de:	d0d8      	beq.n	8017592 <_strtod_l+0x752>
 80175e0:	2f00      	cmp	r7, #0
 80175e2:	dd08      	ble.n	80175f6 <_strtod_l+0x7b6>
 80175e4:	4641      	mov	r1, r8
 80175e6:	463a      	mov	r2, r7
 80175e8:	9805      	ldr	r0, [sp, #20]
 80175ea:	f7ff f9a9 	bl	8016940 <__lshift>
 80175ee:	4680      	mov	r8, r0
 80175f0:	2800      	cmp	r0, #0
 80175f2:	f43f ae46 	beq.w	8017282 <_strtod_l+0x442>
 80175f6:	464a      	mov	r2, r9
 80175f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80175fa:	9805      	ldr	r0, [sp, #20]
 80175fc:	f7ff fa28 	bl	8016a50 <__mdiff>
 8017600:	4604      	mov	r4, r0
 8017602:	2800      	cmp	r0, #0
 8017604:	f43f ae3d 	beq.w	8017282 <_strtod_l+0x442>
 8017608:	68c3      	ldr	r3, [r0, #12]
 801760a:	4641      	mov	r1, r8
 801760c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801760e:	2300      	movs	r3, #0
 8017610:	60c3      	str	r3, [r0, #12]
 8017612:	f7ff fa01 	bl	8016a18 <__mcmp>
 8017616:	2800      	cmp	r0, #0
 8017618:	da46      	bge.n	80176a8 <_strtod_l+0x868>
 801761a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801761c:	ea53 030a 	orrs.w	r3, r3, sl
 8017620:	d16c      	bne.n	80176fc <_strtod_l+0x8bc>
 8017622:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017626:	2b00      	cmp	r3, #0
 8017628:	d168      	bne.n	80176fc <_strtod_l+0x8bc>
 801762a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801762e:	0d1b      	lsrs	r3, r3, #20
 8017630:	051b      	lsls	r3, r3, #20
 8017632:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017636:	d961      	bls.n	80176fc <_strtod_l+0x8bc>
 8017638:	6963      	ldr	r3, [r4, #20]
 801763a:	b913      	cbnz	r3, 8017642 <_strtod_l+0x802>
 801763c:	6923      	ldr	r3, [r4, #16]
 801763e:	2b01      	cmp	r3, #1
 8017640:	dd5c      	ble.n	80176fc <_strtod_l+0x8bc>
 8017642:	4621      	mov	r1, r4
 8017644:	2201      	movs	r2, #1
 8017646:	9805      	ldr	r0, [sp, #20]
 8017648:	f7ff f97a 	bl	8016940 <__lshift>
 801764c:	4641      	mov	r1, r8
 801764e:	4604      	mov	r4, r0
 8017650:	f7ff f9e2 	bl	8016a18 <__mcmp>
 8017654:	2800      	cmp	r0, #0
 8017656:	dd51      	ble.n	80176fc <_strtod_l+0x8bc>
 8017658:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801765c:	9a08      	ldr	r2, [sp, #32]
 801765e:	0d1b      	lsrs	r3, r3, #20
 8017660:	051b      	lsls	r3, r3, #20
 8017662:	2a00      	cmp	r2, #0
 8017664:	d06b      	beq.n	801773e <_strtod_l+0x8fe>
 8017666:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801766a:	d868      	bhi.n	801773e <_strtod_l+0x8fe>
 801766c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017670:	f67f ae9d 	bls.w	80173ae <_strtod_l+0x56e>
 8017674:	4b0a      	ldr	r3, [pc, #40]	@ (80176a0 <_strtod_l+0x860>)
 8017676:	4650      	mov	r0, sl
 8017678:	4659      	mov	r1, fp
 801767a:	2200      	movs	r2, #0
 801767c:	f7e8 ffca 	bl	8000614 <__aeabi_dmul>
 8017680:	4b08      	ldr	r3, [pc, #32]	@ (80176a4 <_strtod_l+0x864>)
 8017682:	4682      	mov	sl, r0
 8017684:	468b      	mov	fp, r1
 8017686:	400b      	ands	r3, r1
 8017688:	2b00      	cmp	r3, #0
 801768a:	f47f ae05 	bne.w	8017298 <_strtod_l+0x458>
 801768e:	2322      	movs	r3, #34	@ 0x22
 8017690:	9a05      	ldr	r2, [sp, #20]
 8017692:	6013      	str	r3, [r2, #0]
 8017694:	e600      	b.n	8017298 <_strtod_l+0x458>
 8017696:	bf00      	nop
 8017698:	0818ccb8 	.word	0x0818ccb8
 801769c:	fffffc02 	.word	0xfffffc02
 80176a0:	39500000 	.word	0x39500000
 80176a4:	7ff00000 	.word	0x7ff00000
 80176a8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80176ac:	d165      	bne.n	801777a <_strtod_l+0x93a>
 80176ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80176b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176b4:	b35a      	cbz	r2, 801770e <_strtod_l+0x8ce>
 80176b6:	4a9e      	ldr	r2, [pc, #632]	@ (8017930 <_strtod_l+0xaf0>)
 80176b8:	4293      	cmp	r3, r2
 80176ba:	d12b      	bne.n	8017714 <_strtod_l+0x8d4>
 80176bc:	9b08      	ldr	r3, [sp, #32]
 80176be:	4651      	mov	r1, sl
 80176c0:	b303      	cbz	r3, 8017704 <_strtod_l+0x8c4>
 80176c2:	465a      	mov	r2, fp
 80176c4:	4b9b      	ldr	r3, [pc, #620]	@ (8017934 <_strtod_l+0xaf4>)
 80176c6:	4013      	ands	r3, r2
 80176c8:	f04f 32ff 	mov.w	r2, #4294967295
 80176cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80176d0:	d81b      	bhi.n	801770a <_strtod_l+0x8ca>
 80176d2:	0d1b      	lsrs	r3, r3, #20
 80176d4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80176d8:	fa02 f303 	lsl.w	r3, r2, r3
 80176dc:	4299      	cmp	r1, r3
 80176de:	d119      	bne.n	8017714 <_strtod_l+0x8d4>
 80176e0:	4b95      	ldr	r3, [pc, #596]	@ (8017938 <_strtod_l+0xaf8>)
 80176e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d102      	bne.n	80176ee <_strtod_l+0x8ae>
 80176e8:	3101      	adds	r1, #1
 80176ea:	f43f adca 	beq.w	8017282 <_strtod_l+0x442>
 80176ee:	4b91      	ldr	r3, [pc, #580]	@ (8017934 <_strtod_l+0xaf4>)
 80176f0:	f04f 0a00 	mov.w	sl, #0
 80176f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176f6:	401a      	ands	r2, r3
 80176f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80176fc:	9b08      	ldr	r3, [sp, #32]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d1b8      	bne.n	8017674 <_strtod_l+0x834>
 8017702:	e5c9      	b.n	8017298 <_strtod_l+0x458>
 8017704:	f04f 33ff 	mov.w	r3, #4294967295
 8017708:	e7e8      	b.n	80176dc <_strtod_l+0x89c>
 801770a:	4613      	mov	r3, r2
 801770c:	e7e6      	b.n	80176dc <_strtod_l+0x89c>
 801770e:	ea53 030a 	orrs.w	r3, r3, sl
 8017712:	d0a1      	beq.n	8017658 <_strtod_l+0x818>
 8017714:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017716:	b1db      	cbz	r3, 8017750 <_strtod_l+0x910>
 8017718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801771a:	4213      	tst	r3, r2
 801771c:	d0ee      	beq.n	80176fc <_strtod_l+0x8bc>
 801771e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017720:	4650      	mov	r0, sl
 8017722:	9a08      	ldr	r2, [sp, #32]
 8017724:	4659      	mov	r1, fp
 8017726:	b1bb      	cbz	r3, 8017758 <_strtod_l+0x918>
 8017728:	f7ff fb6c 	bl	8016e04 <sulp>
 801772c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017730:	ec53 2b10 	vmov	r2, r3, d0
 8017734:	f7e8 fdb8 	bl	80002a8 <__adddf3>
 8017738:	4682      	mov	sl, r0
 801773a:	468b      	mov	fp, r1
 801773c:	e7de      	b.n	80176fc <_strtod_l+0x8bc>
 801773e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017742:	f04f 3aff 	mov.w	sl, #4294967295
 8017746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801774a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801774e:	e7d5      	b.n	80176fc <_strtod_l+0x8bc>
 8017750:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017752:	ea13 0f0a 	tst.w	r3, sl
 8017756:	e7e1      	b.n	801771c <_strtod_l+0x8dc>
 8017758:	f7ff fb54 	bl	8016e04 <sulp>
 801775c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017760:	ec53 2b10 	vmov	r2, r3, d0
 8017764:	f7e8 fd9e 	bl	80002a4 <__aeabi_dsub>
 8017768:	2200      	movs	r2, #0
 801776a:	2300      	movs	r3, #0
 801776c:	4682      	mov	sl, r0
 801776e:	468b      	mov	fp, r1
 8017770:	f7e9 f9b8 	bl	8000ae4 <__aeabi_dcmpeq>
 8017774:	2800      	cmp	r0, #0
 8017776:	d0c1      	beq.n	80176fc <_strtod_l+0x8bc>
 8017778:	e619      	b.n	80173ae <_strtod_l+0x56e>
 801777a:	4641      	mov	r1, r8
 801777c:	4620      	mov	r0, r4
 801777e:	f7ff facb 	bl	8016d18 <__ratio>
 8017782:	2200      	movs	r2, #0
 8017784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017788:	ec57 6b10 	vmov	r6, r7, d0
 801778c:	4630      	mov	r0, r6
 801778e:	4639      	mov	r1, r7
 8017790:	f7e9 f9bc 	bl	8000b0c <__aeabi_dcmple>
 8017794:	2800      	cmp	r0, #0
 8017796:	d06f      	beq.n	8017878 <_strtod_l+0xa38>
 8017798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801779a:	2b00      	cmp	r3, #0
 801779c:	d17a      	bne.n	8017894 <_strtod_l+0xa54>
 801779e:	f1ba 0f00 	cmp.w	sl, #0
 80177a2:	d158      	bne.n	8017856 <_strtod_l+0xa16>
 80177a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d15a      	bne.n	8017864 <_strtod_l+0xa24>
 80177ae:	2200      	movs	r2, #0
 80177b0:	4b62      	ldr	r3, [pc, #392]	@ (801793c <_strtod_l+0xafc>)
 80177b2:	4630      	mov	r0, r6
 80177b4:	4639      	mov	r1, r7
 80177b6:	f7e9 f99f 	bl	8000af8 <__aeabi_dcmplt>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	d159      	bne.n	8017872 <_strtod_l+0xa32>
 80177be:	4630      	mov	r0, r6
 80177c0:	4639      	mov	r1, r7
 80177c2:	2200      	movs	r2, #0
 80177c4:	4b5e      	ldr	r3, [pc, #376]	@ (8017940 <_strtod_l+0xb00>)
 80177c6:	f7e8 ff25 	bl	8000614 <__aeabi_dmul>
 80177ca:	4606      	mov	r6, r0
 80177cc:	460f      	mov	r7, r1
 80177ce:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80177d2:	9606      	str	r6, [sp, #24]
 80177d4:	9307      	str	r3, [sp, #28]
 80177d6:	4d57      	ldr	r5, [pc, #348]	@ (8017934 <_strtod_l+0xaf4>)
 80177d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80177dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80177e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177e2:	401d      	ands	r5, r3
 80177e4:	4b57      	ldr	r3, [pc, #348]	@ (8017944 <_strtod_l+0xb04>)
 80177e6:	429d      	cmp	r5, r3
 80177e8:	f040 80b0 	bne.w	801794c <_strtod_l+0xb0c>
 80177ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177ee:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80177f2:	ec4b ab10 	vmov	d0, sl, fp
 80177f6:	f7ff f9c3 	bl	8016b80 <__ulp>
 80177fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80177fe:	ec51 0b10 	vmov	r0, r1, d0
 8017802:	f7e8 ff07 	bl	8000614 <__aeabi_dmul>
 8017806:	4652      	mov	r2, sl
 8017808:	465b      	mov	r3, fp
 801780a:	f7e8 fd4d 	bl	80002a8 <__adddf3>
 801780e:	460b      	mov	r3, r1
 8017810:	4948      	ldr	r1, [pc, #288]	@ (8017934 <_strtod_l+0xaf4>)
 8017812:	4682      	mov	sl, r0
 8017814:	4a4c      	ldr	r2, [pc, #304]	@ (8017948 <_strtod_l+0xb08>)
 8017816:	4019      	ands	r1, r3
 8017818:	4291      	cmp	r1, r2
 801781a:	d942      	bls.n	80178a2 <_strtod_l+0xa62>
 801781c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801781e:	4b46      	ldr	r3, [pc, #280]	@ (8017938 <_strtod_l+0xaf8>)
 8017820:	429a      	cmp	r2, r3
 8017822:	d103      	bne.n	801782c <_strtod_l+0x9ec>
 8017824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017826:	3301      	adds	r3, #1
 8017828:	f43f ad2b 	beq.w	8017282 <_strtod_l+0x442>
 801782c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8017938 <_strtod_l+0xaf8>
 8017830:	f04f 3aff 	mov.w	sl, #4294967295
 8017834:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017836:	9805      	ldr	r0, [sp, #20]
 8017838:	f7fe fe68 	bl	801650c <_Bfree>
 801783c:	4649      	mov	r1, r9
 801783e:	9805      	ldr	r0, [sp, #20]
 8017840:	f7fe fe64 	bl	801650c <_Bfree>
 8017844:	4641      	mov	r1, r8
 8017846:	9805      	ldr	r0, [sp, #20]
 8017848:	f7fe fe60 	bl	801650c <_Bfree>
 801784c:	4621      	mov	r1, r4
 801784e:	9805      	ldr	r0, [sp, #20]
 8017850:	f7fe fe5c 	bl	801650c <_Bfree>
 8017854:	e618      	b.n	8017488 <_strtod_l+0x648>
 8017856:	f1ba 0f01 	cmp.w	sl, #1
 801785a:	d103      	bne.n	8017864 <_strtod_l+0xa24>
 801785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801785e:	2b00      	cmp	r3, #0
 8017860:	f43f ada5 	beq.w	80173ae <_strtod_l+0x56e>
 8017864:	2600      	movs	r6, #0
 8017866:	4f35      	ldr	r7, [pc, #212]	@ (801793c <_strtod_l+0xafc>)
 8017868:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8017910 <_strtod_l+0xad0>
 801786c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017870:	e7b1      	b.n	80177d6 <_strtod_l+0x996>
 8017872:	2600      	movs	r6, #0
 8017874:	4f32      	ldr	r7, [pc, #200]	@ (8017940 <_strtod_l+0xb00>)
 8017876:	e7aa      	b.n	80177ce <_strtod_l+0x98e>
 8017878:	4b31      	ldr	r3, [pc, #196]	@ (8017940 <_strtod_l+0xb00>)
 801787a:	4630      	mov	r0, r6
 801787c:	4639      	mov	r1, r7
 801787e:	2200      	movs	r2, #0
 8017880:	f7e8 fec8 	bl	8000614 <__aeabi_dmul>
 8017884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017886:	4606      	mov	r6, r0
 8017888:	460f      	mov	r7, r1
 801788a:	2b00      	cmp	r3, #0
 801788c:	d09f      	beq.n	80177ce <_strtod_l+0x98e>
 801788e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017892:	e7a0      	b.n	80177d6 <_strtod_l+0x996>
 8017894:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8017918 <_strtod_l+0xad8>
 8017898:	ec57 6b17 	vmov	r6, r7, d7
 801789c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80178a0:	e799      	b.n	80177d6 <_strtod_l+0x996>
 80178a2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80178a6:	9b08      	ldr	r3, [sp, #32]
 80178a8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d1c1      	bne.n	8017834 <_strtod_l+0x9f4>
 80178b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80178b4:	0d1b      	lsrs	r3, r3, #20
 80178b6:	051b      	lsls	r3, r3, #20
 80178b8:	429d      	cmp	r5, r3
 80178ba:	d1bb      	bne.n	8017834 <_strtod_l+0x9f4>
 80178bc:	4630      	mov	r0, r6
 80178be:	4639      	mov	r1, r7
 80178c0:	f7e9 fa08 	bl	8000cd4 <__aeabi_d2lz>
 80178c4:	f7e8 fe78 	bl	80005b8 <__aeabi_l2d>
 80178c8:	4602      	mov	r2, r0
 80178ca:	460b      	mov	r3, r1
 80178cc:	4630      	mov	r0, r6
 80178ce:	4639      	mov	r1, r7
 80178d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80178d4:	f7e8 fce6 	bl	80002a4 <__aeabi_dsub>
 80178d8:	460b      	mov	r3, r1
 80178da:	4602      	mov	r2, r0
 80178dc:	ea46 060a 	orr.w	r6, r6, sl
 80178e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80178e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80178e6:	431e      	orrs	r6, r3
 80178e8:	d06d      	beq.n	80179c6 <_strtod_l+0xb86>
 80178ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8017920 <_strtod_l+0xae0>)
 80178ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f0:	f7e9 f902 	bl	8000af8 <__aeabi_dcmplt>
 80178f4:	2800      	cmp	r0, #0
 80178f6:	f47f accf 	bne.w	8017298 <_strtod_l+0x458>
 80178fa:	a30b      	add	r3, pc, #44	@ (adr r3, 8017928 <_strtod_l+0xae8>)
 80178fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017904:	f7e9 f916 	bl	8000b34 <__aeabi_dcmpgt>
 8017908:	2800      	cmp	r0, #0
 801790a:	d093      	beq.n	8017834 <_strtod_l+0x9f4>
 801790c:	e4c4      	b.n	8017298 <_strtod_l+0x458>
 801790e:	bf00      	nop
 8017910:	00000000 	.word	0x00000000
 8017914:	bff00000 	.word	0xbff00000
 8017918:	00000000 	.word	0x00000000
 801791c:	3ff00000 	.word	0x3ff00000
 8017920:	94a03595 	.word	0x94a03595
 8017924:	3fdfffff 	.word	0x3fdfffff
 8017928:	35afe535 	.word	0x35afe535
 801792c:	3fe00000 	.word	0x3fe00000
 8017930:	000fffff 	.word	0x000fffff
 8017934:	7ff00000 	.word	0x7ff00000
 8017938:	7fefffff 	.word	0x7fefffff
 801793c:	3ff00000 	.word	0x3ff00000
 8017940:	3fe00000 	.word	0x3fe00000
 8017944:	7fe00000 	.word	0x7fe00000
 8017948:	7c9fffff 	.word	0x7c9fffff
 801794c:	9b08      	ldr	r3, [sp, #32]
 801794e:	b323      	cbz	r3, 801799a <_strtod_l+0xb5a>
 8017950:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017954:	d821      	bhi.n	801799a <_strtod_l+0xb5a>
 8017956:	4630      	mov	r0, r6
 8017958:	4639      	mov	r1, r7
 801795a:	a327      	add	r3, pc, #156	@ (adr r3, 80179f8 <_strtod_l+0xbb8>)
 801795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017960:	f7e9 f8d4 	bl	8000b0c <__aeabi_dcmple>
 8017964:	b1a0      	cbz	r0, 8017990 <_strtod_l+0xb50>
 8017966:	4639      	mov	r1, r7
 8017968:	4630      	mov	r0, r6
 801796a:	f7e9 f92b 	bl	8000bc4 <__aeabi_d2uiz>
 801796e:	2801      	cmp	r0, #1
 8017970:	bf38      	it	cc
 8017972:	2001      	movcc	r0, #1
 8017974:	f7e8 fdd4 	bl	8000520 <__aeabi_ui2d>
 8017978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801797a:	4606      	mov	r6, r0
 801797c:	460f      	mov	r7, r1
 801797e:	b9fb      	cbnz	r3, 80179c0 <_strtod_l+0xb80>
 8017980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017984:	9014      	str	r0, [sp, #80]	@ 0x50
 8017986:	9315      	str	r3, [sp, #84]	@ 0x54
 8017988:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801798c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017992:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8017996:	1b5b      	subs	r3, r3, r5
 8017998:	9311      	str	r3, [sp, #68]	@ 0x44
 801799a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801799e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80179a2:	f7ff f8ed 	bl	8016b80 <__ulp>
 80179a6:	4650      	mov	r0, sl
 80179a8:	4659      	mov	r1, fp
 80179aa:	ec53 2b10 	vmov	r2, r3, d0
 80179ae:	f7e8 fe31 	bl	8000614 <__aeabi_dmul>
 80179b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80179b6:	f7e8 fc77 	bl	80002a8 <__adddf3>
 80179ba:	4682      	mov	sl, r0
 80179bc:	468b      	mov	fp, r1
 80179be:	e772      	b.n	80178a6 <_strtod_l+0xa66>
 80179c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80179c4:	e7e0      	b.n	8017988 <_strtod_l+0xb48>
 80179c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8017a00 <_strtod_l+0xbc0>)
 80179c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179cc:	f7e9 f894 	bl	8000af8 <__aeabi_dcmplt>
 80179d0:	e79a      	b.n	8017908 <_strtod_l+0xac8>
 80179d2:	2300      	movs	r3, #0
 80179d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80179d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179d8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80179da:	6013      	str	r3, [r2, #0]
 80179dc:	f7ff ba6d 	b.w	8016eba <_strtod_l+0x7a>
 80179e0:	2a65      	cmp	r2, #101	@ 0x65
 80179e2:	f43f ab67 	beq.w	80170b4 <_strtod_l+0x274>
 80179e6:	2a45      	cmp	r2, #69	@ 0x45
 80179e8:	f43f ab64 	beq.w	80170b4 <_strtod_l+0x274>
 80179ec:	2301      	movs	r3, #1
 80179ee:	f7ff bba0 	b.w	8017132 <_strtod_l+0x2f2>
 80179f2:	bf00      	nop
 80179f4:	f3af 8000 	nop.w
 80179f8:	ffc00000 	.word	0xffc00000
 80179fc:	41dfffff 	.word	0x41dfffff
 8017a00:	94a03595 	.word	0x94a03595
 8017a04:	3fcfffff 	.word	0x3fcfffff

08017a08 <_strtod_r>:
 8017a08:	4b01      	ldr	r3, [pc, #4]	@ (8017a10 <_strtod_r+0x8>)
 8017a0a:	f7ff ba19 	b.w	8016e40 <_strtod_l>
 8017a0e:	bf00      	nop
 8017a10:	20000140 	.word	0x20000140

08017a14 <_strtol_l.constprop.0>:
 8017a14:	2b24      	cmp	r3, #36	@ 0x24
 8017a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a1a:	4686      	mov	lr, r0
 8017a1c:	4690      	mov	r8, r2
 8017a1e:	d801      	bhi.n	8017a24 <_strtol_l.constprop.0+0x10>
 8017a20:	2b01      	cmp	r3, #1
 8017a22:	d106      	bne.n	8017a32 <_strtol_l.constprop.0+0x1e>
 8017a24:	f7fd fe3e 	bl	80156a4 <__errno>
 8017a28:	2316      	movs	r3, #22
 8017a2a:	6003      	str	r3, [r0, #0]
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a32:	460d      	mov	r5, r1
 8017a34:	4833      	ldr	r0, [pc, #204]	@ (8017b04 <_strtol_l.constprop.0+0xf0>)
 8017a36:	462a      	mov	r2, r5
 8017a38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a3c:	5d06      	ldrb	r6, [r0, r4]
 8017a3e:	f016 0608 	ands.w	r6, r6, #8
 8017a42:	d1f8      	bne.n	8017a36 <_strtol_l.constprop.0+0x22>
 8017a44:	2c2d      	cmp	r4, #45	@ 0x2d
 8017a46:	d12d      	bne.n	8017aa4 <_strtol_l.constprop.0+0x90>
 8017a48:	782c      	ldrb	r4, [r5, #0]
 8017a4a:	2601      	movs	r6, #1
 8017a4c:	1c95      	adds	r5, r2, #2
 8017a4e:	f033 0210 	bics.w	r2, r3, #16
 8017a52:	d109      	bne.n	8017a68 <_strtol_l.constprop.0+0x54>
 8017a54:	2c30      	cmp	r4, #48	@ 0x30
 8017a56:	d12a      	bne.n	8017aae <_strtol_l.constprop.0+0x9a>
 8017a58:	782a      	ldrb	r2, [r5, #0]
 8017a5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017a5e:	2a58      	cmp	r2, #88	@ 0x58
 8017a60:	d125      	bne.n	8017aae <_strtol_l.constprop.0+0x9a>
 8017a62:	786c      	ldrb	r4, [r5, #1]
 8017a64:	2310      	movs	r3, #16
 8017a66:	3502      	adds	r5, #2
 8017a68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017a72:	4610      	mov	r0, r2
 8017a74:	fbbc f9f3 	udiv	r9, ip, r3
 8017a78:	fb03 ca19 	mls	sl, r3, r9, ip
 8017a7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017a80:	2f09      	cmp	r7, #9
 8017a82:	d81b      	bhi.n	8017abc <_strtol_l.constprop.0+0xa8>
 8017a84:	463c      	mov	r4, r7
 8017a86:	42a3      	cmp	r3, r4
 8017a88:	dd27      	ble.n	8017ada <_strtol_l.constprop.0+0xc6>
 8017a8a:	1c57      	adds	r7, r2, #1
 8017a8c:	d007      	beq.n	8017a9e <_strtol_l.constprop.0+0x8a>
 8017a8e:	4581      	cmp	r9, r0
 8017a90:	d320      	bcc.n	8017ad4 <_strtol_l.constprop.0+0xc0>
 8017a92:	d101      	bne.n	8017a98 <_strtol_l.constprop.0+0x84>
 8017a94:	45a2      	cmp	sl, r4
 8017a96:	db1d      	blt.n	8017ad4 <_strtol_l.constprop.0+0xc0>
 8017a98:	fb00 4003 	mla	r0, r0, r3, r4
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017aa2:	e7eb      	b.n	8017a7c <_strtol_l.constprop.0+0x68>
 8017aa4:	2c2b      	cmp	r4, #43	@ 0x2b
 8017aa6:	bf04      	itt	eq
 8017aa8:	782c      	ldrbeq	r4, [r5, #0]
 8017aaa:	1c95      	addeq	r5, r2, #2
 8017aac:	e7cf      	b.n	8017a4e <_strtol_l.constprop.0+0x3a>
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d1da      	bne.n	8017a68 <_strtol_l.constprop.0+0x54>
 8017ab2:	2c30      	cmp	r4, #48	@ 0x30
 8017ab4:	bf0c      	ite	eq
 8017ab6:	2308      	moveq	r3, #8
 8017ab8:	230a      	movne	r3, #10
 8017aba:	e7d5      	b.n	8017a68 <_strtol_l.constprop.0+0x54>
 8017abc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017ac0:	2f19      	cmp	r7, #25
 8017ac2:	d801      	bhi.n	8017ac8 <_strtol_l.constprop.0+0xb4>
 8017ac4:	3c37      	subs	r4, #55	@ 0x37
 8017ac6:	e7de      	b.n	8017a86 <_strtol_l.constprop.0+0x72>
 8017ac8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017acc:	2f19      	cmp	r7, #25
 8017ace:	d804      	bhi.n	8017ada <_strtol_l.constprop.0+0xc6>
 8017ad0:	3c57      	subs	r4, #87	@ 0x57
 8017ad2:	e7d8      	b.n	8017a86 <_strtol_l.constprop.0+0x72>
 8017ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ad8:	e7e1      	b.n	8017a9e <_strtol_l.constprop.0+0x8a>
 8017ada:	1c53      	adds	r3, r2, #1
 8017adc:	d108      	bne.n	8017af0 <_strtol_l.constprop.0+0xdc>
 8017ade:	2322      	movs	r3, #34	@ 0x22
 8017ae0:	4660      	mov	r0, ip
 8017ae2:	f8ce 3000 	str.w	r3, [lr]
 8017ae6:	f1b8 0f00 	cmp.w	r8, #0
 8017aea:	d0a0      	beq.n	8017a2e <_strtol_l.constprop.0+0x1a>
 8017aec:	1e69      	subs	r1, r5, #1
 8017aee:	e006      	b.n	8017afe <_strtol_l.constprop.0+0xea>
 8017af0:	b106      	cbz	r6, 8017af4 <_strtol_l.constprop.0+0xe0>
 8017af2:	4240      	negs	r0, r0
 8017af4:	f1b8 0f00 	cmp.w	r8, #0
 8017af8:	d099      	beq.n	8017a2e <_strtol_l.constprop.0+0x1a>
 8017afa:	2a00      	cmp	r2, #0
 8017afc:	d1f6      	bne.n	8017aec <_strtol_l.constprop.0+0xd8>
 8017afe:	f8c8 1000 	str.w	r1, [r8]
 8017b02:	e794      	b.n	8017a2e <_strtol_l.constprop.0+0x1a>
 8017b04:	0818cce1 	.word	0x0818cce1

08017b08 <_strtol_r>:
 8017b08:	f7ff bf84 	b.w	8017a14 <_strtol_l.constprop.0>

08017b0c <__ssputs_r>:
 8017b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b10:	461f      	mov	r7, r3
 8017b12:	688e      	ldr	r6, [r1, #8]
 8017b14:	4682      	mov	sl, r0
 8017b16:	460c      	mov	r4, r1
 8017b18:	42be      	cmp	r6, r7
 8017b1a:	4690      	mov	r8, r2
 8017b1c:	680b      	ldr	r3, [r1, #0]
 8017b1e:	d82d      	bhi.n	8017b7c <__ssputs_r+0x70>
 8017b20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017b24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017b28:	d026      	beq.n	8017b78 <__ssputs_r+0x6c>
 8017b2a:	6965      	ldr	r5, [r4, #20]
 8017b2c:	6909      	ldr	r1, [r1, #16]
 8017b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b32:	eba3 0901 	sub.w	r9, r3, r1
 8017b36:	1c7b      	adds	r3, r7, #1
 8017b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b3c:	444b      	add	r3, r9
 8017b3e:	106d      	asrs	r5, r5, #1
 8017b40:	429d      	cmp	r5, r3
 8017b42:	bf38      	it	cc
 8017b44:	461d      	movcc	r5, r3
 8017b46:	0553      	lsls	r3, r2, #21
 8017b48:	d527      	bpl.n	8017b9a <__ssputs_r+0x8e>
 8017b4a:	4629      	mov	r1, r5
 8017b4c:	f7fc faa4 	bl	8014098 <_malloc_r>
 8017b50:	4606      	mov	r6, r0
 8017b52:	b360      	cbz	r0, 8017bae <__ssputs_r+0xa2>
 8017b54:	464a      	mov	r2, r9
 8017b56:	6921      	ldr	r1, [r4, #16]
 8017b58:	f7fd fde7 	bl	801572a <memcpy>
 8017b5c:	89a3      	ldrh	r3, [r4, #12]
 8017b5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b66:	81a3      	strh	r3, [r4, #12]
 8017b68:	6126      	str	r6, [r4, #16]
 8017b6a:	444e      	add	r6, r9
 8017b6c:	6165      	str	r5, [r4, #20]
 8017b6e:	eba5 0509 	sub.w	r5, r5, r9
 8017b72:	6026      	str	r6, [r4, #0]
 8017b74:	463e      	mov	r6, r7
 8017b76:	60a5      	str	r5, [r4, #8]
 8017b78:	42be      	cmp	r6, r7
 8017b7a:	d900      	bls.n	8017b7e <__ssputs_r+0x72>
 8017b7c:	463e      	mov	r6, r7
 8017b7e:	4632      	mov	r2, r6
 8017b80:	4641      	mov	r1, r8
 8017b82:	6820      	ldr	r0, [r4, #0]
 8017b84:	f7fd fcde 	bl	8015544 <memmove>
 8017b88:	68a3      	ldr	r3, [r4, #8]
 8017b8a:	2000      	movs	r0, #0
 8017b8c:	1b9b      	subs	r3, r3, r6
 8017b8e:	60a3      	str	r3, [r4, #8]
 8017b90:	6823      	ldr	r3, [r4, #0]
 8017b92:	4433      	add	r3, r6
 8017b94:	6023      	str	r3, [r4, #0]
 8017b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b9a:	462a      	mov	r2, r5
 8017b9c:	f001 faa9 	bl	80190f2 <_realloc_r>
 8017ba0:	4606      	mov	r6, r0
 8017ba2:	2800      	cmp	r0, #0
 8017ba4:	d1e0      	bne.n	8017b68 <__ssputs_r+0x5c>
 8017ba6:	6921      	ldr	r1, [r4, #16]
 8017ba8:	4650      	mov	r0, sl
 8017baa:	f7fe fc25 	bl	80163f8 <_free_r>
 8017bae:	230c      	movs	r3, #12
 8017bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8017bb4:	f8ca 3000 	str.w	r3, [sl]
 8017bb8:	89a3      	ldrh	r3, [r4, #12]
 8017bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bbe:	81a3      	strh	r3, [r4, #12]
 8017bc0:	e7e9      	b.n	8017b96 <__ssputs_r+0x8a>
	...

08017bc4 <_svfiprintf_r>:
 8017bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bc8:	4698      	mov	r8, r3
 8017bca:	898b      	ldrh	r3, [r1, #12]
 8017bcc:	b09d      	sub	sp, #116	@ 0x74
 8017bce:	4607      	mov	r7, r0
 8017bd0:	061b      	lsls	r3, r3, #24
 8017bd2:	460d      	mov	r5, r1
 8017bd4:	4614      	mov	r4, r2
 8017bd6:	d510      	bpl.n	8017bfa <_svfiprintf_r+0x36>
 8017bd8:	690b      	ldr	r3, [r1, #16]
 8017bda:	b973      	cbnz	r3, 8017bfa <_svfiprintf_r+0x36>
 8017bdc:	2140      	movs	r1, #64	@ 0x40
 8017bde:	f7fc fa5b 	bl	8014098 <_malloc_r>
 8017be2:	6028      	str	r0, [r5, #0]
 8017be4:	6128      	str	r0, [r5, #16]
 8017be6:	b930      	cbnz	r0, 8017bf6 <_svfiprintf_r+0x32>
 8017be8:	230c      	movs	r3, #12
 8017bea:	603b      	str	r3, [r7, #0]
 8017bec:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf0:	b01d      	add	sp, #116	@ 0x74
 8017bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bf6:	2340      	movs	r3, #64	@ 0x40
 8017bf8:	616b      	str	r3, [r5, #20]
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c00:	f04f 0901 	mov.w	r9, #1
 8017c04:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8017da8 <_svfiprintf_r+0x1e4>
 8017c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c0a:	2320      	movs	r3, #32
 8017c0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c10:	2330      	movs	r3, #48	@ 0x30
 8017c12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017c16:	4623      	mov	r3, r4
 8017c18:	469a      	mov	sl, r3
 8017c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c1e:	b10a      	cbz	r2, 8017c24 <_svfiprintf_r+0x60>
 8017c20:	2a25      	cmp	r2, #37	@ 0x25
 8017c22:	d1f9      	bne.n	8017c18 <_svfiprintf_r+0x54>
 8017c24:	ebba 0b04 	subs.w	fp, sl, r4
 8017c28:	d00b      	beq.n	8017c42 <_svfiprintf_r+0x7e>
 8017c2a:	465b      	mov	r3, fp
 8017c2c:	4622      	mov	r2, r4
 8017c2e:	4629      	mov	r1, r5
 8017c30:	4638      	mov	r0, r7
 8017c32:	f7ff ff6b 	bl	8017b0c <__ssputs_r>
 8017c36:	3001      	adds	r0, #1
 8017c38:	f000 80a7 	beq.w	8017d8a <_svfiprintf_r+0x1c6>
 8017c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c3e:	445a      	add	r2, fp
 8017c40:	9209      	str	r2, [sp, #36]	@ 0x24
 8017c42:	f89a 3000 	ldrb.w	r3, [sl]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	f000 809f 	beq.w	8017d8a <_svfiprintf_r+0x1c6>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c52:	f10a 0a01 	add.w	sl, sl, #1
 8017c56:	9304      	str	r3, [sp, #16]
 8017c58:	9307      	str	r3, [sp, #28]
 8017c5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c64:	4654      	mov	r4, sl
 8017c66:	2205      	movs	r2, #5
 8017c68:	484f      	ldr	r0, [pc, #316]	@ (8017da8 <_svfiprintf_r+0x1e4>)
 8017c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c6e:	f7fd fd4e 	bl	801570e <memchr>
 8017c72:	9a04      	ldr	r2, [sp, #16]
 8017c74:	b9d8      	cbnz	r0, 8017cae <_svfiprintf_r+0xea>
 8017c76:	06d0      	lsls	r0, r2, #27
 8017c78:	bf44      	itt	mi
 8017c7a:	2320      	movmi	r3, #32
 8017c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c80:	0711      	lsls	r1, r2, #28
 8017c82:	bf44      	itt	mi
 8017c84:	232b      	movmi	r3, #43	@ 0x2b
 8017c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8017c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c90:	d015      	beq.n	8017cbe <_svfiprintf_r+0xfa>
 8017c92:	9a07      	ldr	r2, [sp, #28]
 8017c94:	4654      	mov	r4, sl
 8017c96:	2000      	movs	r0, #0
 8017c98:	f04f 0c0a 	mov.w	ip, #10
 8017c9c:	4621      	mov	r1, r4
 8017c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ca2:	3b30      	subs	r3, #48	@ 0x30
 8017ca4:	2b09      	cmp	r3, #9
 8017ca6:	d94b      	bls.n	8017d40 <_svfiprintf_r+0x17c>
 8017ca8:	b1b0      	cbz	r0, 8017cd8 <_svfiprintf_r+0x114>
 8017caa:	9207      	str	r2, [sp, #28]
 8017cac:	e014      	b.n	8017cd8 <_svfiprintf_r+0x114>
 8017cae:	eba0 0308 	sub.w	r3, r0, r8
 8017cb2:	46a2      	mov	sl, r4
 8017cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8017cb8:	4313      	orrs	r3, r2
 8017cba:	9304      	str	r3, [sp, #16]
 8017cbc:	e7d2      	b.n	8017c64 <_svfiprintf_r+0xa0>
 8017cbe:	9b03      	ldr	r3, [sp, #12]
 8017cc0:	1d19      	adds	r1, r3, #4
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	9103      	str	r1, [sp, #12]
 8017cc8:	bfbb      	ittet	lt
 8017cca:	425b      	neglt	r3, r3
 8017ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8017cd0:	9307      	strge	r3, [sp, #28]
 8017cd2:	9307      	strlt	r3, [sp, #28]
 8017cd4:	bfb8      	it	lt
 8017cd6:	9204      	strlt	r2, [sp, #16]
 8017cd8:	7823      	ldrb	r3, [r4, #0]
 8017cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8017cdc:	d10a      	bne.n	8017cf4 <_svfiprintf_r+0x130>
 8017cde:	7863      	ldrb	r3, [r4, #1]
 8017ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ce2:	d132      	bne.n	8017d4a <_svfiprintf_r+0x186>
 8017ce4:	9b03      	ldr	r3, [sp, #12]
 8017ce6:	3402      	adds	r4, #2
 8017ce8:	1d1a      	adds	r2, r3, #4
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017cf0:	9203      	str	r2, [sp, #12]
 8017cf2:	9305      	str	r3, [sp, #20]
 8017cf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017db8 <_svfiprintf_r+0x1f4>
 8017cf8:	2203      	movs	r2, #3
 8017cfa:	7821      	ldrb	r1, [r4, #0]
 8017cfc:	4650      	mov	r0, sl
 8017cfe:	f7fd fd06 	bl	801570e <memchr>
 8017d02:	b138      	cbz	r0, 8017d14 <_svfiprintf_r+0x150>
 8017d04:	eba0 000a 	sub.w	r0, r0, sl
 8017d08:	2240      	movs	r2, #64	@ 0x40
 8017d0a:	9b04      	ldr	r3, [sp, #16]
 8017d0c:	3401      	adds	r4, #1
 8017d0e:	4082      	lsls	r2, r0
 8017d10:	4313      	orrs	r3, r2
 8017d12:	9304      	str	r3, [sp, #16]
 8017d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d18:	2206      	movs	r2, #6
 8017d1a:	4824      	ldr	r0, [pc, #144]	@ (8017dac <_svfiprintf_r+0x1e8>)
 8017d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017d20:	f7fd fcf5 	bl	801570e <memchr>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d036      	beq.n	8017d96 <_svfiprintf_r+0x1d2>
 8017d28:	4b21      	ldr	r3, [pc, #132]	@ (8017db0 <_svfiprintf_r+0x1ec>)
 8017d2a:	bb1b      	cbnz	r3, 8017d74 <_svfiprintf_r+0x1b0>
 8017d2c:	9b03      	ldr	r3, [sp, #12]
 8017d2e:	3307      	adds	r3, #7
 8017d30:	f023 0307 	bic.w	r3, r3, #7
 8017d34:	3308      	adds	r3, #8
 8017d36:	9303      	str	r3, [sp, #12]
 8017d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d3a:	4433      	add	r3, r6
 8017d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d3e:	e76a      	b.n	8017c16 <_svfiprintf_r+0x52>
 8017d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d44:	460c      	mov	r4, r1
 8017d46:	2001      	movs	r0, #1
 8017d48:	e7a8      	b.n	8017c9c <_svfiprintf_r+0xd8>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	3401      	adds	r4, #1
 8017d4e:	f04f 0c0a 	mov.w	ip, #10
 8017d52:	4619      	mov	r1, r3
 8017d54:	9305      	str	r3, [sp, #20]
 8017d56:	4620      	mov	r0, r4
 8017d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d5c:	3a30      	subs	r2, #48	@ 0x30
 8017d5e:	2a09      	cmp	r2, #9
 8017d60:	d903      	bls.n	8017d6a <_svfiprintf_r+0x1a6>
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d0c6      	beq.n	8017cf4 <_svfiprintf_r+0x130>
 8017d66:	9105      	str	r1, [sp, #20]
 8017d68:	e7c4      	b.n	8017cf4 <_svfiprintf_r+0x130>
 8017d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d6e:	4604      	mov	r4, r0
 8017d70:	2301      	movs	r3, #1
 8017d72:	e7f0      	b.n	8017d56 <_svfiprintf_r+0x192>
 8017d74:	ab03      	add	r3, sp, #12
 8017d76:	462a      	mov	r2, r5
 8017d78:	a904      	add	r1, sp, #16
 8017d7a:	4638      	mov	r0, r7
 8017d7c:	9300      	str	r3, [sp, #0]
 8017d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8017db4 <_svfiprintf_r+0x1f0>)
 8017d80:	f7fc fab4 	bl	80142ec <_printf_float>
 8017d84:	1c42      	adds	r2, r0, #1
 8017d86:	4606      	mov	r6, r0
 8017d88:	d1d6      	bne.n	8017d38 <_svfiprintf_r+0x174>
 8017d8a:	89ab      	ldrh	r3, [r5, #12]
 8017d8c:	065b      	lsls	r3, r3, #25
 8017d8e:	f53f af2d 	bmi.w	8017bec <_svfiprintf_r+0x28>
 8017d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d94:	e72c      	b.n	8017bf0 <_svfiprintf_r+0x2c>
 8017d96:	ab03      	add	r3, sp, #12
 8017d98:	462a      	mov	r2, r5
 8017d9a:	a904      	add	r1, sp, #16
 8017d9c:	4638      	mov	r0, r7
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	4b04      	ldr	r3, [pc, #16]	@ (8017db4 <_svfiprintf_r+0x1f0>)
 8017da2:	f7fc fd3f 	bl	8014824 <_printf_i>
 8017da6:	e7ed      	b.n	8017d84 <_svfiprintf_r+0x1c0>
 8017da8:	0818cde1 	.word	0x0818cde1
 8017dac:	0818cdeb 	.word	0x0818cdeb
 8017db0:	080142ed 	.word	0x080142ed
 8017db4:	08017b0d 	.word	0x08017b0d
 8017db8:	0818cde7 	.word	0x0818cde7

08017dbc <_sungetc_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	1c4b      	adds	r3, r1, #1
 8017dc0:	4614      	mov	r4, r2
 8017dc2:	d103      	bne.n	8017dcc <_sungetc_r+0x10>
 8017dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8017dc8:	4628      	mov	r0, r5
 8017dca:	bd38      	pop	{r3, r4, r5, pc}
 8017dcc:	8993      	ldrh	r3, [r2, #12]
 8017dce:	b2cd      	uxtb	r5, r1
 8017dd0:	f023 0320 	bic.w	r3, r3, #32
 8017dd4:	8193      	strh	r3, [r2, #12]
 8017dd6:	6853      	ldr	r3, [r2, #4]
 8017dd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8017dda:	b18a      	cbz	r2, 8017e00 <_sungetc_r+0x44>
 8017ddc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017dde:	429a      	cmp	r2, r3
 8017de0:	dd08      	ble.n	8017df4 <_sungetc_r+0x38>
 8017de2:	6823      	ldr	r3, [r4, #0]
 8017de4:	1e5a      	subs	r2, r3, #1
 8017de6:	6022      	str	r2, [r4, #0]
 8017de8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017dec:	6863      	ldr	r3, [r4, #4]
 8017dee:	3301      	adds	r3, #1
 8017df0:	6063      	str	r3, [r4, #4]
 8017df2:	e7e9      	b.n	8017dc8 <_sungetc_r+0xc>
 8017df4:	4621      	mov	r1, r4
 8017df6:	f000 fdb5 	bl	8018964 <__submore>
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	d0f1      	beq.n	8017de2 <_sungetc_r+0x26>
 8017dfe:	e7e1      	b.n	8017dc4 <_sungetc_r+0x8>
 8017e00:	6921      	ldr	r1, [r4, #16]
 8017e02:	6822      	ldr	r2, [r4, #0]
 8017e04:	b141      	cbz	r1, 8017e18 <_sungetc_r+0x5c>
 8017e06:	4291      	cmp	r1, r2
 8017e08:	d206      	bcs.n	8017e18 <_sungetc_r+0x5c>
 8017e0a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8017e0e:	42a9      	cmp	r1, r5
 8017e10:	d102      	bne.n	8017e18 <_sungetc_r+0x5c>
 8017e12:	3a01      	subs	r2, #1
 8017e14:	6022      	str	r2, [r4, #0]
 8017e16:	e7ea      	b.n	8017dee <_sungetc_r+0x32>
 8017e18:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8017e1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8017e22:	2303      	movs	r3, #3
 8017e24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017e26:	4623      	mov	r3, r4
 8017e28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017e2c:	6023      	str	r3, [r4, #0]
 8017e2e:	2301      	movs	r3, #1
 8017e30:	e7de      	b.n	8017df0 <_sungetc_r+0x34>

08017e32 <__ssrefill_r>:
 8017e32:	b510      	push	{r4, lr}
 8017e34:	460c      	mov	r4, r1
 8017e36:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017e38:	b169      	cbz	r1, 8017e56 <__ssrefill_r+0x24>
 8017e3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e3e:	4299      	cmp	r1, r3
 8017e40:	d001      	beq.n	8017e46 <__ssrefill_r+0x14>
 8017e42:	f7fe fad9 	bl	80163f8 <_free_r>
 8017e46:	2000      	movs	r0, #0
 8017e48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017e4a:	6360      	str	r0, [r4, #52]	@ 0x34
 8017e4c:	6063      	str	r3, [r4, #4]
 8017e4e:	b113      	cbz	r3, 8017e56 <__ssrefill_r+0x24>
 8017e50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017e52:	6023      	str	r3, [r4, #0]
 8017e54:	bd10      	pop	{r4, pc}
 8017e56:	6923      	ldr	r3, [r4, #16]
 8017e58:	f04f 30ff 	mov.w	r0, #4294967295
 8017e5c:	6023      	str	r3, [r4, #0]
 8017e5e:	2300      	movs	r3, #0
 8017e60:	6063      	str	r3, [r4, #4]
 8017e62:	89a3      	ldrh	r3, [r4, #12]
 8017e64:	f043 0320 	orr.w	r3, r3, #32
 8017e68:	81a3      	strh	r3, [r4, #12]
 8017e6a:	e7f3      	b.n	8017e54 <__ssrefill_r+0x22>

08017e6c <__ssvfiscanf_r>:
 8017e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e70:	460c      	mov	r4, r1
 8017e72:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017e76:	2100      	movs	r1, #0
 8017e78:	4606      	mov	r6, r0
 8017e7a:	f10d 0804 	add.w	r8, sp, #4
 8017e7e:	4fa5      	ldr	r7, [pc, #660]	@ (8018114 <__ssvfiscanf_r+0x2a8>)
 8017e80:	9300      	str	r3, [sp, #0]
 8017e82:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017e86:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017e8a:	49a3      	ldr	r1, [pc, #652]	@ (8018118 <__ssvfiscanf_r+0x2ac>)
 8017e8c:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017e8e:	49a3      	ldr	r1, [pc, #652]	@ (801811c <__ssvfiscanf_r+0x2b0>)
 8017e90:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017e92:	7813      	ldrb	r3, [r2, #0]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	f000 8158 	beq.w	801814a <__ssvfiscanf_r+0x2de>
 8017e9a:	5cf9      	ldrb	r1, [r7, r3]
 8017e9c:	1c55      	adds	r5, r2, #1
 8017e9e:	f011 0108 	ands.w	r1, r1, #8
 8017ea2:	d019      	beq.n	8017ed8 <__ssvfiscanf_r+0x6c>
 8017ea4:	6863      	ldr	r3, [r4, #4]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	dd0f      	ble.n	8017eca <__ssvfiscanf_r+0x5e>
 8017eaa:	6823      	ldr	r3, [r4, #0]
 8017eac:	781a      	ldrb	r2, [r3, #0]
 8017eae:	5cba      	ldrb	r2, [r7, r2]
 8017eb0:	0712      	lsls	r2, r2, #28
 8017eb2:	d401      	bmi.n	8017eb8 <__ssvfiscanf_r+0x4c>
 8017eb4:	462a      	mov	r2, r5
 8017eb6:	e7ec      	b.n	8017e92 <__ssvfiscanf_r+0x26>
 8017eb8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017eba:	3301      	adds	r3, #1
 8017ebc:	3201      	adds	r2, #1
 8017ebe:	6023      	str	r3, [r4, #0]
 8017ec0:	9245      	str	r2, [sp, #276]	@ 0x114
 8017ec2:	6862      	ldr	r2, [r4, #4]
 8017ec4:	3a01      	subs	r2, #1
 8017ec6:	6062      	str	r2, [r4, #4]
 8017ec8:	e7ec      	b.n	8017ea4 <__ssvfiscanf_r+0x38>
 8017eca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017ecc:	4621      	mov	r1, r4
 8017ece:	4630      	mov	r0, r6
 8017ed0:	4798      	blx	r3
 8017ed2:	2800      	cmp	r0, #0
 8017ed4:	d0e9      	beq.n	8017eaa <__ssvfiscanf_r+0x3e>
 8017ed6:	e7ed      	b.n	8017eb4 <__ssvfiscanf_r+0x48>
 8017ed8:	2b25      	cmp	r3, #37	@ 0x25
 8017eda:	d012      	beq.n	8017f02 <__ssvfiscanf_r+0x96>
 8017edc:	4699      	mov	r9, r3
 8017ede:	6863      	ldr	r3, [r4, #4]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f340 8094 	ble.w	801800e <__ssvfiscanf_r+0x1a2>
 8017ee6:	6822      	ldr	r2, [r4, #0]
 8017ee8:	7813      	ldrb	r3, [r2, #0]
 8017eea:	454b      	cmp	r3, r9
 8017eec:	f040 812d 	bne.w	801814a <__ssvfiscanf_r+0x2de>
 8017ef0:	6863      	ldr	r3, [r4, #4]
 8017ef2:	3201      	adds	r2, #1
 8017ef4:	3b01      	subs	r3, #1
 8017ef6:	6022      	str	r2, [r4, #0]
 8017ef8:	6063      	str	r3, [r4, #4]
 8017efa:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8017efc:	3301      	adds	r3, #1
 8017efe:	9345      	str	r3, [sp, #276]	@ 0x114
 8017f00:	e7d8      	b.n	8017eb4 <__ssvfiscanf_r+0x48>
 8017f02:	9141      	str	r1, [sp, #260]	@ 0x104
 8017f04:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017f06:	7853      	ldrb	r3, [r2, #1]
 8017f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f0a:	bf04      	itt	eq
 8017f0c:	2310      	moveq	r3, #16
 8017f0e:	1c95      	addeq	r5, r2, #2
 8017f10:	f04f 020a 	mov.w	r2, #10
 8017f14:	bf08      	it	eq
 8017f16:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017f18:	46a9      	mov	r9, r5
 8017f1a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8017f1e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017f22:	2b09      	cmp	r3, #9
 8017f24:	d91e      	bls.n	8017f64 <__ssvfiscanf_r+0xf8>
 8017f26:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8018120 <__ssvfiscanf_r+0x2b4>
 8017f2a:	2203      	movs	r2, #3
 8017f2c:	4650      	mov	r0, sl
 8017f2e:	f7fd fbee 	bl	801570e <memchr>
 8017f32:	b138      	cbz	r0, 8017f44 <__ssvfiscanf_r+0xd8>
 8017f34:	eba0 000a 	sub.w	r0, r0, sl
 8017f38:	2301      	movs	r3, #1
 8017f3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017f3c:	464d      	mov	r5, r9
 8017f3e:	4083      	lsls	r3, r0
 8017f40:	4313      	orrs	r3, r2
 8017f42:	9341      	str	r3, [sp, #260]	@ 0x104
 8017f44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017f48:	2b78      	cmp	r3, #120	@ 0x78
 8017f4a:	d806      	bhi.n	8017f5a <__ssvfiscanf_r+0xee>
 8017f4c:	2b57      	cmp	r3, #87	@ 0x57
 8017f4e:	d810      	bhi.n	8017f72 <__ssvfiscanf_r+0x106>
 8017f50:	2b25      	cmp	r3, #37	@ 0x25
 8017f52:	d0c3      	beq.n	8017edc <__ssvfiscanf_r+0x70>
 8017f54:	d856      	bhi.n	8018004 <__ssvfiscanf_r+0x198>
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d064      	beq.n	8018024 <__ssvfiscanf_r+0x1b8>
 8017f5a:	2303      	movs	r3, #3
 8017f5c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017f5e:	230a      	movs	r3, #10
 8017f60:	9342      	str	r3, [sp, #264]	@ 0x108
 8017f62:	e077      	b.n	8018054 <__ssvfiscanf_r+0x1e8>
 8017f64:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017f66:	464d      	mov	r5, r9
 8017f68:	fb02 1103 	mla	r1, r2, r3, r1
 8017f6c:	3930      	subs	r1, #48	@ 0x30
 8017f6e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017f70:	e7d2      	b.n	8017f18 <__ssvfiscanf_r+0xac>
 8017f72:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017f76:	2a20      	cmp	r2, #32
 8017f78:	d8ef      	bhi.n	8017f5a <__ssvfiscanf_r+0xee>
 8017f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8017f80 <__ssvfiscanf_r+0x114>)
 8017f7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017f80:	08018033 	.word	0x08018033
 8017f84:	08017f5b 	.word	0x08017f5b
 8017f88:	08017f5b 	.word	0x08017f5b
 8017f8c:	0801808d 	.word	0x0801808d
 8017f90:	08017f5b 	.word	0x08017f5b
 8017f94:	08017f5b 	.word	0x08017f5b
 8017f98:	08017f5b 	.word	0x08017f5b
 8017f9c:	08017f5b 	.word	0x08017f5b
 8017fa0:	08017f5b 	.word	0x08017f5b
 8017fa4:	08017f5b 	.word	0x08017f5b
 8017fa8:	08017f5b 	.word	0x08017f5b
 8017fac:	080180a3 	.word	0x080180a3
 8017fb0:	08018089 	.word	0x08018089
 8017fb4:	0801800b 	.word	0x0801800b
 8017fb8:	0801800b 	.word	0x0801800b
 8017fbc:	0801800b 	.word	0x0801800b
 8017fc0:	08017f5b 	.word	0x08017f5b
 8017fc4:	08018045 	.word	0x08018045
 8017fc8:	08017f5b 	.word	0x08017f5b
 8017fcc:	08017f5b 	.word	0x08017f5b
 8017fd0:	08017f5b 	.word	0x08017f5b
 8017fd4:	08017f5b 	.word	0x08017f5b
 8017fd8:	080180b3 	.word	0x080180b3
 8017fdc:	0801804d 	.word	0x0801804d
 8017fe0:	0801802b 	.word	0x0801802b
 8017fe4:	08017f5b 	.word	0x08017f5b
 8017fe8:	08017f5b 	.word	0x08017f5b
 8017fec:	080180af 	.word	0x080180af
 8017ff0:	08017f5b 	.word	0x08017f5b
 8017ff4:	08018089 	.word	0x08018089
 8017ff8:	08017f5b 	.word	0x08017f5b
 8017ffc:	08017f5b 	.word	0x08017f5b
 8018000:	08018033 	.word	0x08018033
 8018004:	3b45      	subs	r3, #69	@ 0x45
 8018006:	2b02      	cmp	r3, #2
 8018008:	d8a7      	bhi.n	8017f5a <__ssvfiscanf_r+0xee>
 801800a:	2305      	movs	r3, #5
 801800c:	e021      	b.n	8018052 <__ssvfiscanf_r+0x1e6>
 801800e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018010:	4621      	mov	r1, r4
 8018012:	4630      	mov	r0, r6
 8018014:	4798      	blx	r3
 8018016:	2800      	cmp	r0, #0
 8018018:	f43f af65 	beq.w	8017ee6 <__ssvfiscanf_r+0x7a>
 801801c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801801e:	2800      	cmp	r0, #0
 8018020:	f040 808b 	bne.w	801813a <__ssvfiscanf_r+0x2ce>
 8018024:	f04f 30ff 	mov.w	r0, #4294967295
 8018028:	e08b      	b.n	8018142 <__ssvfiscanf_r+0x2d6>
 801802a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801802c:	f042 0220 	orr.w	r2, r2, #32
 8018030:	9241      	str	r2, [sp, #260]	@ 0x104
 8018032:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018038:	9241      	str	r2, [sp, #260]	@ 0x104
 801803a:	2210      	movs	r2, #16
 801803c:	2b6e      	cmp	r3, #110	@ 0x6e
 801803e:	9242      	str	r2, [sp, #264]	@ 0x108
 8018040:	d902      	bls.n	8018048 <__ssvfiscanf_r+0x1dc>
 8018042:	e005      	b.n	8018050 <__ssvfiscanf_r+0x1e4>
 8018044:	2300      	movs	r3, #0
 8018046:	9342      	str	r3, [sp, #264]	@ 0x108
 8018048:	2303      	movs	r3, #3
 801804a:	e002      	b.n	8018052 <__ssvfiscanf_r+0x1e6>
 801804c:	2308      	movs	r3, #8
 801804e:	9342      	str	r3, [sp, #264]	@ 0x108
 8018050:	2304      	movs	r3, #4
 8018052:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018054:	6863      	ldr	r3, [r4, #4]
 8018056:	2b00      	cmp	r3, #0
 8018058:	dd3a      	ble.n	80180d0 <__ssvfiscanf_r+0x264>
 801805a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801805c:	0659      	lsls	r1, r3, #25
 801805e:	d404      	bmi.n	801806a <__ssvfiscanf_r+0x1fe>
 8018060:	6823      	ldr	r3, [r4, #0]
 8018062:	781a      	ldrb	r2, [r3, #0]
 8018064:	5cba      	ldrb	r2, [r7, r2]
 8018066:	0712      	lsls	r2, r2, #28
 8018068:	d439      	bmi.n	80180de <__ssvfiscanf_r+0x272>
 801806a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801806c:	2b02      	cmp	r3, #2
 801806e:	dc48      	bgt.n	8018102 <__ssvfiscanf_r+0x296>
 8018070:	466b      	mov	r3, sp
 8018072:	4622      	mov	r2, r4
 8018074:	a941      	add	r1, sp, #260	@ 0x104
 8018076:	4630      	mov	r0, r6
 8018078:	f000 f9ae 	bl	80183d8 <_scanf_chars>
 801807c:	2801      	cmp	r0, #1
 801807e:	d064      	beq.n	801814a <__ssvfiscanf_r+0x2de>
 8018080:	2802      	cmp	r0, #2
 8018082:	f47f af17 	bne.w	8017eb4 <__ssvfiscanf_r+0x48>
 8018086:	e7c9      	b.n	801801c <__ssvfiscanf_r+0x1b0>
 8018088:	220a      	movs	r2, #10
 801808a:	e7d7      	b.n	801803c <__ssvfiscanf_r+0x1d0>
 801808c:	4629      	mov	r1, r5
 801808e:	4640      	mov	r0, r8
 8018090:	f000 fc2f 	bl	80188f2 <__sccl>
 8018094:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018096:	4605      	mov	r5, r0
 8018098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801809c:	9341      	str	r3, [sp, #260]	@ 0x104
 801809e:	2301      	movs	r3, #1
 80180a0:	e7d7      	b.n	8018052 <__ssvfiscanf_r+0x1e6>
 80180a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80180a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80180aa:	2300      	movs	r3, #0
 80180ac:	e7d1      	b.n	8018052 <__ssvfiscanf_r+0x1e6>
 80180ae:	2302      	movs	r3, #2
 80180b0:	e7cf      	b.n	8018052 <__ssvfiscanf_r+0x1e6>
 80180b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80180b4:	06c3      	lsls	r3, r0, #27
 80180b6:	f53f aefd 	bmi.w	8017eb4 <__ssvfiscanf_r+0x48>
 80180ba:	9b00      	ldr	r3, [sp, #0]
 80180bc:	07c0      	lsls	r0, r0, #31
 80180be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80180c0:	f103 0104 	add.w	r1, r3, #4
 80180c4:	9100      	str	r1, [sp, #0]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	bf4c      	ite	mi
 80180ca:	801a      	strhmi	r2, [r3, #0]
 80180cc:	601a      	strpl	r2, [r3, #0]
 80180ce:	e6f1      	b.n	8017eb4 <__ssvfiscanf_r+0x48>
 80180d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80180d2:	4621      	mov	r1, r4
 80180d4:	4630      	mov	r0, r6
 80180d6:	4798      	blx	r3
 80180d8:	2800      	cmp	r0, #0
 80180da:	d0be      	beq.n	801805a <__ssvfiscanf_r+0x1ee>
 80180dc:	e79e      	b.n	801801c <__ssvfiscanf_r+0x1b0>
 80180de:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80180e0:	3201      	adds	r2, #1
 80180e2:	9245      	str	r2, [sp, #276]	@ 0x114
 80180e4:	6862      	ldr	r2, [r4, #4]
 80180e6:	3a01      	subs	r2, #1
 80180e8:	2a00      	cmp	r2, #0
 80180ea:	6062      	str	r2, [r4, #4]
 80180ec:	dd02      	ble.n	80180f4 <__ssvfiscanf_r+0x288>
 80180ee:	3301      	adds	r3, #1
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	e7b5      	b.n	8018060 <__ssvfiscanf_r+0x1f4>
 80180f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80180f6:	4621      	mov	r1, r4
 80180f8:	4630      	mov	r0, r6
 80180fa:	4798      	blx	r3
 80180fc:	2800      	cmp	r0, #0
 80180fe:	d0af      	beq.n	8018060 <__ssvfiscanf_r+0x1f4>
 8018100:	e78c      	b.n	801801c <__ssvfiscanf_r+0x1b0>
 8018102:	2b04      	cmp	r3, #4
 8018104:	dc0e      	bgt.n	8018124 <__ssvfiscanf_r+0x2b8>
 8018106:	466b      	mov	r3, sp
 8018108:	4622      	mov	r2, r4
 801810a:	a941      	add	r1, sp, #260	@ 0x104
 801810c:	4630      	mov	r0, r6
 801810e:	f000 f9bd 	bl	801848c <_scanf_i>
 8018112:	e7b3      	b.n	801807c <__ssvfiscanf_r+0x210>
 8018114:	0818cce1 	.word	0x0818cce1
 8018118:	08017dbd 	.word	0x08017dbd
 801811c:	08017e33 	.word	0x08017e33
 8018120:	0818cde7 	.word	0x0818cde7
 8018124:	4b0a      	ldr	r3, [pc, #40]	@ (8018150 <__ssvfiscanf_r+0x2e4>)
 8018126:	2b00      	cmp	r3, #0
 8018128:	f43f aec4 	beq.w	8017eb4 <__ssvfiscanf_r+0x48>
 801812c:	466b      	mov	r3, sp
 801812e:	4622      	mov	r2, r4
 8018130:	a941      	add	r1, sp, #260	@ 0x104
 8018132:	4630      	mov	r0, r6
 8018134:	f7fc fc96 	bl	8014a64 <_scanf_float>
 8018138:	e7a0      	b.n	801807c <__ssvfiscanf_r+0x210>
 801813a:	89a3      	ldrh	r3, [r4, #12]
 801813c:	065b      	lsls	r3, r3, #25
 801813e:	f53f af71 	bmi.w	8018024 <__ssvfiscanf_r+0x1b8>
 8018142:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8018146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801814a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801814c:	e7f9      	b.n	8018142 <__ssvfiscanf_r+0x2d6>
 801814e:	bf00      	nop
 8018150:	08014a65 	.word	0x08014a65

08018154 <__sfputc_r>:
 8018154:	6893      	ldr	r3, [r2, #8]
 8018156:	3b01      	subs	r3, #1
 8018158:	2b00      	cmp	r3, #0
 801815a:	6093      	str	r3, [r2, #8]
 801815c:	b410      	push	{r4}
 801815e:	da08      	bge.n	8018172 <__sfputc_r+0x1e>
 8018160:	6994      	ldr	r4, [r2, #24]
 8018162:	42a3      	cmp	r3, r4
 8018164:	db01      	blt.n	801816a <__sfputc_r+0x16>
 8018166:	290a      	cmp	r1, #10
 8018168:	d103      	bne.n	8018172 <__sfputc_r+0x1e>
 801816a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801816e:	f7fd b944 	b.w	80153fa <__swbuf_r>
 8018172:	6813      	ldr	r3, [r2, #0]
 8018174:	1c58      	adds	r0, r3, #1
 8018176:	6010      	str	r0, [r2, #0]
 8018178:	4608      	mov	r0, r1
 801817a:	7019      	strb	r1, [r3, #0]
 801817c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018180:	4770      	bx	lr

08018182 <__sfputs_r>:
 8018182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018184:	4606      	mov	r6, r0
 8018186:	460f      	mov	r7, r1
 8018188:	4614      	mov	r4, r2
 801818a:	18d5      	adds	r5, r2, r3
 801818c:	42ac      	cmp	r4, r5
 801818e:	d101      	bne.n	8018194 <__sfputs_r+0x12>
 8018190:	2000      	movs	r0, #0
 8018192:	e007      	b.n	80181a4 <__sfputs_r+0x22>
 8018194:	463a      	mov	r2, r7
 8018196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801819a:	4630      	mov	r0, r6
 801819c:	f7ff ffda 	bl	8018154 <__sfputc_r>
 80181a0:	1c43      	adds	r3, r0, #1
 80181a2:	d1f3      	bne.n	801818c <__sfputs_r+0xa>
 80181a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080181a8 <_vfiprintf_r>:
 80181a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181ac:	460d      	mov	r5, r1
 80181ae:	b09d      	sub	sp, #116	@ 0x74
 80181b0:	4614      	mov	r4, r2
 80181b2:	4698      	mov	r8, r3
 80181b4:	4606      	mov	r6, r0
 80181b6:	b118      	cbz	r0, 80181c0 <_vfiprintf_r+0x18>
 80181b8:	6a03      	ldr	r3, [r0, #32]
 80181ba:	b90b      	cbnz	r3, 80181c0 <_vfiprintf_r+0x18>
 80181bc:	f7fc fef0 	bl	8014fa0 <__sinit>
 80181c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181c2:	07d9      	lsls	r1, r3, #31
 80181c4:	d405      	bmi.n	80181d2 <_vfiprintf_r+0x2a>
 80181c6:	89ab      	ldrh	r3, [r5, #12]
 80181c8:	059a      	lsls	r2, r3, #22
 80181ca:	d402      	bmi.n	80181d2 <_vfiprintf_r+0x2a>
 80181cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181ce:	f7fd fa94 	bl	80156fa <__retarget_lock_acquire_recursive>
 80181d2:	89ab      	ldrh	r3, [r5, #12]
 80181d4:	071b      	lsls	r3, r3, #28
 80181d6:	d501      	bpl.n	80181dc <_vfiprintf_r+0x34>
 80181d8:	692b      	ldr	r3, [r5, #16]
 80181da:	b99b      	cbnz	r3, 8018204 <_vfiprintf_r+0x5c>
 80181dc:	4629      	mov	r1, r5
 80181de:	4630      	mov	r0, r6
 80181e0:	f7fd f94a 	bl	8015478 <__swsetup_r>
 80181e4:	b170      	cbz	r0, 8018204 <_vfiprintf_r+0x5c>
 80181e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181e8:	07dc      	lsls	r4, r3, #31
 80181ea:	d504      	bpl.n	80181f6 <_vfiprintf_r+0x4e>
 80181ec:	f04f 30ff 	mov.w	r0, #4294967295
 80181f0:	b01d      	add	sp, #116	@ 0x74
 80181f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f6:	89ab      	ldrh	r3, [r5, #12]
 80181f8:	0598      	lsls	r0, r3, #22
 80181fa:	d4f7      	bmi.n	80181ec <_vfiprintf_r+0x44>
 80181fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181fe:	f7fd fa7d 	bl	80156fc <__retarget_lock_release_recursive>
 8018202:	e7f3      	b.n	80181ec <_vfiprintf_r+0x44>
 8018204:	2300      	movs	r3, #0
 8018206:	f8cd 800c 	str.w	r8, [sp, #12]
 801820a:	f04f 0901 	mov.w	r9, #1
 801820e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80183c4 <_vfiprintf_r+0x21c>
 8018212:	9309      	str	r3, [sp, #36]	@ 0x24
 8018214:	2320      	movs	r3, #32
 8018216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801821a:	2330      	movs	r3, #48	@ 0x30
 801821c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018220:	4623      	mov	r3, r4
 8018222:	469a      	mov	sl, r3
 8018224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018228:	b10a      	cbz	r2, 801822e <_vfiprintf_r+0x86>
 801822a:	2a25      	cmp	r2, #37	@ 0x25
 801822c:	d1f9      	bne.n	8018222 <_vfiprintf_r+0x7a>
 801822e:	ebba 0b04 	subs.w	fp, sl, r4
 8018232:	d00b      	beq.n	801824c <_vfiprintf_r+0xa4>
 8018234:	465b      	mov	r3, fp
 8018236:	4622      	mov	r2, r4
 8018238:	4629      	mov	r1, r5
 801823a:	4630      	mov	r0, r6
 801823c:	f7ff ffa1 	bl	8018182 <__sfputs_r>
 8018240:	3001      	adds	r0, #1
 8018242:	f000 80a7 	beq.w	8018394 <_vfiprintf_r+0x1ec>
 8018246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018248:	445a      	add	r2, fp
 801824a:	9209      	str	r2, [sp, #36]	@ 0x24
 801824c:	f89a 3000 	ldrb.w	r3, [sl]
 8018250:	2b00      	cmp	r3, #0
 8018252:	f000 809f 	beq.w	8018394 <_vfiprintf_r+0x1ec>
 8018256:	2300      	movs	r3, #0
 8018258:	f04f 32ff 	mov.w	r2, #4294967295
 801825c:	f10a 0a01 	add.w	sl, sl, #1
 8018260:	9304      	str	r3, [sp, #16]
 8018262:	9307      	str	r3, [sp, #28]
 8018264:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018268:	931a      	str	r3, [sp, #104]	@ 0x68
 801826a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801826e:	4654      	mov	r4, sl
 8018270:	2205      	movs	r2, #5
 8018272:	4854      	ldr	r0, [pc, #336]	@ (80183c4 <_vfiprintf_r+0x21c>)
 8018274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018278:	f7fd fa49 	bl	801570e <memchr>
 801827c:	9a04      	ldr	r2, [sp, #16]
 801827e:	b9d8      	cbnz	r0, 80182b8 <_vfiprintf_r+0x110>
 8018280:	06d1      	lsls	r1, r2, #27
 8018282:	bf44      	itt	mi
 8018284:	2320      	movmi	r3, #32
 8018286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801828a:	0713      	lsls	r3, r2, #28
 801828c:	bf44      	itt	mi
 801828e:	232b      	movmi	r3, #43	@ 0x2b
 8018290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018294:	f89a 3000 	ldrb.w	r3, [sl]
 8018298:	2b2a      	cmp	r3, #42	@ 0x2a
 801829a:	d015      	beq.n	80182c8 <_vfiprintf_r+0x120>
 801829c:	9a07      	ldr	r2, [sp, #28]
 801829e:	4654      	mov	r4, sl
 80182a0:	2000      	movs	r0, #0
 80182a2:	f04f 0c0a 	mov.w	ip, #10
 80182a6:	4621      	mov	r1, r4
 80182a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182ac:	3b30      	subs	r3, #48	@ 0x30
 80182ae:	2b09      	cmp	r3, #9
 80182b0:	d94b      	bls.n	801834a <_vfiprintf_r+0x1a2>
 80182b2:	b1b0      	cbz	r0, 80182e2 <_vfiprintf_r+0x13a>
 80182b4:	9207      	str	r2, [sp, #28]
 80182b6:	e014      	b.n	80182e2 <_vfiprintf_r+0x13a>
 80182b8:	eba0 0308 	sub.w	r3, r0, r8
 80182bc:	46a2      	mov	sl, r4
 80182be:	fa09 f303 	lsl.w	r3, r9, r3
 80182c2:	4313      	orrs	r3, r2
 80182c4:	9304      	str	r3, [sp, #16]
 80182c6:	e7d2      	b.n	801826e <_vfiprintf_r+0xc6>
 80182c8:	9b03      	ldr	r3, [sp, #12]
 80182ca:	1d19      	adds	r1, r3, #4
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	9103      	str	r1, [sp, #12]
 80182d2:	bfbb      	ittet	lt
 80182d4:	425b      	neglt	r3, r3
 80182d6:	f042 0202 	orrlt.w	r2, r2, #2
 80182da:	9307      	strge	r3, [sp, #28]
 80182dc:	9307      	strlt	r3, [sp, #28]
 80182de:	bfb8      	it	lt
 80182e0:	9204      	strlt	r2, [sp, #16]
 80182e2:	7823      	ldrb	r3, [r4, #0]
 80182e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80182e6:	d10a      	bne.n	80182fe <_vfiprintf_r+0x156>
 80182e8:	7863      	ldrb	r3, [r4, #1]
 80182ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80182ec:	d132      	bne.n	8018354 <_vfiprintf_r+0x1ac>
 80182ee:	9b03      	ldr	r3, [sp, #12]
 80182f0:	3402      	adds	r4, #2
 80182f2:	1d1a      	adds	r2, r3, #4
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182fa:	9203      	str	r2, [sp, #12]
 80182fc:	9305      	str	r3, [sp, #20]
 80182fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80183d4 <_vfiprintf_r+0x22c>
 8018302:	2203      	movs	r2, #3
 8018304:	7821      	ldrb	r1, [r4, #0]
 8018306:	4650      	mov	r0, sl
 8018308:	f7fd fa01 	bl	801570e <memchr>
 801830c:	b138      	cbz	r0, 801831e <_vfiprintf_r+0x176>
 801830e:	eba0 000a 	sub.w	r0, r0, sl
 8018312:	2240      	movs	r2, #64	@ 0x40
 8018314:	9b04      	ldr	r3, [sp, #16]
 8018316:	3401      	adds	r4, #1
 8018318:	4082      	lsls	r2, r0
 801831a:	4313      	orrs	r3, r2
 801831c:	9304      	str	r3, [sp, #16]
 801831e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018322:	2206      	movs	r2, #6
 8018324:	4828      	ldr	r0, [pc, #160]	@ (80183c8 <_vfiprintf_r+0x220>)
 8018326:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801832a:	f7fd f9f0 	bl	801570e <memchr>
 801832e:	2800      	cmp	r0, #0
 8018330:	d03f      	beq.n	80183b2 <_vfiprintf_r+0x20a>
 8018332:	4b26      	ldr	r3, [pc, #152]	@ (80183cc <_vfiprintf_r+0x224>)
 8018334:	bb1b      	cbnz	r3, 801837e <_vfiprintf_r+0x1d6>
 8018336:	9b03      	ldr	r3, [sp, #12]
 8018338:	3307      	adds	r3, #7
 801833a:	f023 0307 	bic.w	r3, r3, #7
 801833e:	3308      	adds	r3, #8
 8018340:	9303      	str	r3, [sp, #12]
 8018342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018344:	443b      	add	r3, r7
 8018346:	9309      	str	r3, [sp, #36]	@ 0x24
 8018348:	e76a      	b.n	8018220 <_vfiprintf_r+0x78>
 801834a:	fb0c 3202 	mla	r2, ip, r2, r3
 801834e:	460c      	mov	r4, r1
 8018350:	2001      	movs	r0, #1
 8018352:	e7a8      	b.n	80182a6 <_vfiprintf_r+0xfe>
 8018354:	2300      	movs	r3, #0
 8018356:	3401      	adds	r4, #1
 8018358:	f04f 0c0a 	mov.w	ip, #10
 801835c:	4619      	mov	r1, r3
 801835e:	9305      	str	r3, [sp, #20]
 8018360:	4620      	mov	r0, r4
 8018362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018366:	3a30      	subs	r2, #48	@ 0x30
 8018368:	2a09      	cmp	r2, #9
 801836a:	d903      	bls.n	8018374 <_vfiprintf_r+0x1cc>
 801836c:	2b00      	cmp	r3, #0
 801836e:	d0c6      	beq.n	80182fe <_vfiprintf_r+0x156>
 8018370:	9105      	str	r1, [sp, #20]
 8018372:	e7c4      	b.n	80182fe <_vfiprintf_r+0x156>
 8018374:	fb0c 2101 	mla	r1, ip, r1, r2
 8018378:	4604      	mov	r4, r0
 801837a:	2301      	movs	r3, #1
 801837c:	e7f0      	b.n	8018360 <_vfiprintf_r+0x1b8>
 801837e:	ab03      	add	r3, sp, #12
 8018380:	462a      	mov	r2, r5
 8018382:	a904      	add	r1, sp, #16
 8018384:	4630      	mov	r0, r6
 8018386:	9300      	str	r3, [sp, #0]
 8018388:	4b11      	ldr	r3, [pc, #68]	@ (80183d0 <_vfiprintf_r+0x228>)
 801838a:	f7fb ffaf 	bl	80142ec <_printf_float>
 801838e:	4607      	mov	r7, r0
 8018390:	1c78      	adds	r0, r7, #1
 8018392:	d1d6      	bne.n	8018342 <_vfiprintf_r+0x19a>
 8018394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018396:	07d9      	lsls	r1, r3, #31
 8018398:	d405      	bmi.n	80183a6 <_vfiprintf_r+0x1fe>
 801839a:	89ab      	ldrh	r3, [r5, #12]
 801839c:	059a      	lsls	r2, r3, #22
 801839e:	d402      	bmi.n	80183a6 <_vfiprintf_r+0x1fe>
 80183a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80183a2:	f7fd f9ab 	bl	80156fc <__retarget_lock_release_recursive>
 80183a6:	89ab      	ldrh	r3, [r5, #12]
 80183a8:	065b      	lsls	r3, r3, #25
 80183aa:	f53f af1f 	bmi.w	80181ec <_vfiprintf_r+0x44>
 80183ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80183b0:	e71e      	b.n	80181f0 <_vfiprintf_r+0x48>
 80183b2:	ab03      	add	r3, sp, #12
 80183b4:	462a      	mov	r2, r5
 80183b6:	a904      	add	r1, sp, #16
 80183b8:	4630      	mov	r0, r6
 80183ba:	9300      	str	r3, [sp, #0]
 80183bc:	4b04      	ldr	r3, [pc, #16]	@ (80183d0 <_vfiprintf_r+0x228>)
 80183be:	f7fc fa31 	bl	8014824 <_printf_i>
 80183c2:	e7e4      	b.n	801838e <_vfiprintf_r+0x1e6>
 80183c4:	0818cde1 	.word	0x0818cde1
 80183c8:	0818cdeb 	.word	0x0818cdeb
 80183cc:	080142ed 	.word	0x080142ed
 80183d0:	08018183 	.word	0x08018183
 80183d4:	0818cde7 	.word	0x0818cde7

080183d8 <_scanf_chars>:
 80183d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183dc:	4615      	mov	r5, r2
 80183de:	688a      	ldr	r2, [r1, #8]
 80183e0:	4680      	mov	r8, r0
 80183e2:	460c      	mov	r4, r1
 80183e4:	b932      	cbnz	r2, 80183f4 <_scanf_chars+0x1c>
 80183e6:	698a      	ldr	r2, [r1, #24]
 80183e8:	2a00      	cmp	r2, #0
 80183ea:	bf14      	ite	ne
 80183ec:	f04f 32ff 	movne.w	r2, #4294967295
 80183f0:	2201      	moveq	r2, #1
 80183f2:	608a      	str	r2, [r1, #8]
 80183f4:	6822      	ldr	r2, [r4, #0]
 80183f6:	2700      	movs	r7, #0
 80183f8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8018488 <_scanf_chars+0xb0>
 80183fc:	06d1      	lsls	r1, r2, #27
 80183fe:	bf5f      	itttt	pl
 8018400:	681a      	ldrpl	r2, [r3, #0]
 8018402:	1d11      	addpl	r1, r2, #4
 8018404:	6019      	strpl	r1, [r3, #0]
 8018406:	6816      	ldrpl	r6, [r2, #0]
 8018408:	69a0      	ldr	r0, [r4, #24]
 801840a:	b188      	cbz	r0, 8018430 <_scanf_chars+0x58>
 801840c:	2801      	cmp	r0, #1
 801840e:	d107      	bne.n	8018420 <_scanf_chars+0x48>
 8018410:	682b      	ldr	r3, [r5, #0]
 8018412:	781a      	ldrb	r2, [r3, #0]
 8018414:	6963      	ldr	r3, [r4, #20]
 8018416:	5c9b      	ldrb	r3, [r3, r2]
 8018418:	b953      	cbnz	r3, 8018430 <_scanf_chars+0x58>
 801841a:	2f00      	cmp	r7, #0
 801841c:	d031      	beq.n	8018482 <_scanf_chars+0xaa>
 801841e:	e022      	b.n	8018466 <_scanf_chars+0x8e>
 8018420:	2802      	cmp	r0, #2
 8018422:	d120      	bne.n	8018466 <_scanf_chars+0x8e>
 8018424:	682b      	ldr	r3, [r5, #0]
 8018426:	781b      	ldrb	r3, [r3, #0]
 8018428:	f819 3003 	ldrb.w	r3, [r9, r3]
 801842c:	071b      	lsls	r3, r3, #28
 801842e:	d41a      	bmi.n	8018466 <_scanf_chars+0x8e>
 8018430:	6823      	ldr	r3, [r4, #0]
 8018432:	3701      	adds	r7, #1
 8018434:	06da      	lsls	r2, r3, #27
 8018436:	bf5e      	ittt	pl
 8018438:	682b      	ldrpl	r3, [r5, #0]
 801843a:	781b      	ldrbpl	r3, [r3, #0]
 801843c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018440:	682a      	ldr	r2, [r5, #0]
 8018442:	686b      	ldr	r3, [r5, #4]
 8018444:	3201      	adds	r2, #1
 8018446:	3b01      	subs	r3, #1
 8018448:	602a      	str	r2, [r5, #0]
 801844a:	68a2      	ldr	r2, [r4, #8]
 801844c:	606b      	str	r3, [r5, #4]
 801844e:	3a01      	subs	r2, #1
 8018450:	60a2      	str	r2, [r4, #8]
 8018452:	b142      	cbz	r2, 8018466 <_scanf_chars+0x8e>
 8018454:	2b00      	cmp	r3, #0
 8018456:	dcd7      	bgt.n	8018408 <_scanf_chars+0x30>
 8018458:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801845c:	4629      	mov	r1, r5
 801845e:	4640      	mov	r0, r8
 8018460:	4798      	blx	r3
 8018462:	2800      	cmp	r0, #0
 8018464:	d0d0      	beq.n	8018408 <_scanf_chars+0x30>
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	f013 0310 	ands.w	r3, r3, #16
 801846c:	d105      	bne.n	801847a <_scanf_chars+0xa2>
 801846e:	68e2      	ldr	r2, [r4, #12]
 8018470:	3201      	adds	r2, #1
 8018472:	60e2      	str	r2, [r4, #12]
 8018474:	69a2      	ldr	r2, [r4, #24]
 8018476:	b102      	cbz	r2, 801847a <_scanf_chars+0xa2>
 8018478:	7033      	strb	r3, [r6, #0]
 801847a:	6923      	ldr	r3, [r4, #16]
 801847c:	2000      	movs	r0, #0
 801847e:	443b      	add	r3, r7
 8018480:	6123      	str	r3, [r4, #16]
 8018482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018486:	bf00      	nop
 8018488:	0818cce1 	.word	0x0818cce1

0801848c <_scanf_i>:
 801848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018490:	4698      	mov	r8, r3
 8018492:	b087      	sub	sp, #28
 8018494:	4b72      	ldr	r3, [pc, #456]	@ (8018660 <_scanf_i+0x1d4>)
 8018496:	460c      	mov	r4, r1
 8018498:	4682      	mov	sl, r0
 801849a:	4616      	mov	r6, r2
 801849c:	4627      	mov	r7, r4
 801849e:	f04f 0b00 	mov.w	fp, #0
 80184a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80184a6:	ab03      	add	r3, sp, #12
 80184a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80184ac:	4b6d      	ldr	r3, [pc, #436]	@ (8018664 <_scanf_i+0x1d8>)
 80184ae:	69a1      	ldr	r1, [r4, #24]
 80184b0:	4a6d      	ldr	r2, [pc, #436]	@ (8018668 <_scanf_i+0x1dc>)
 80184b2:	2903      	cmp	r1, #3
 80184b4:	bf08      	it	eq
 80184b6:	461a      	moveq	r2, r3
 80184b8:	68a3      	ldr	r3, [r4, #8]
 80184ba:	9201      	str	r2, [sp, #4]
 80184bc:	1e5a      	subs	r2, r3, #1
 80184be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80184c2:	bf89      	itett	hi
 80184c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80184c8:	f04f 0900 	movls.w	r9, #0
 80184cc:	eb03 0905 	addhi.w	r9, r3, r5
 80184d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80184d4:	bf88      	it	hi
 80184d6:	60a3      	strhi	r3, [r4, #8]
 80184d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80184dc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80184e0:	463d      	mov	r5, r7
 80184e2:	6023      	str	r3, [r4, #0]
 80184e4:	6831      	ldr	r1, [r6, #0]
 80184e6:	ab03      	add	r3, sp, #12
 80184e8:	2202      	movs	r2, #2
 80184ea:	7809      	ldrb	r1, [r1, #0]
 80184ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80184f0:	f7fd f90d 	bl	801570e <memchr>
 80184f4:	b328      	cbz	r0, 8018542 <_scanf_i+0xb6>
 80184f6:	f1bb 0f01 	cmp.w	fp, #1
 80184fa:	d159      	bne.n	80185b0 <_scanf_i+0x124>
 80184fc:	6862      	ldr	r2, [r4, #4]
 80184fe:	b92a      	cbnz	r2, 801850c <_scanf_i+0x80>
 8018500:	6822      	ldr	r2, [r4, #0]
 8018502:	2108      	movs	r1, #8
 8018504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018508:	6061      	str	r1, [r4, #4]
 801850a:	6022      	str	r2, [r4, #0]
 801850c:	6822      	ldr	r2, [r4, #0]
 801850e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8018512:	6022      	str	r2, [r4, #0]
 8018514:	68a2      	ldr	r2, [r4, #8]
 8018516:	1e51      	subs	r1, r2, #1
 8018518:	60a1      	str	r1, [r4, #8]
 801851a:	b192      	cbz	r2, 8018542 <_scanf_i+0xb6>
 801851c:	6832      	ldr	r2, [r6, #0]
 801851e:	1c51      	adds	r1, r2, #1
 8018520:	6031      	str	r1, [r6, #0]
 8018522:	7812      	ldrb	r2, [r2, #0]
 8018524:	f805 2b01 	strb.w	r2, [r5], #1
 8018528:	6872      	ldr	r2, [r6, #4]
 801852a:	3a01      	subs	r2, #1
 801852c:	2a00      	cmp	r2, #0
 801852e:	6072      	str	r2, [r6, #4]
 8018530:	dc07      	bgt.n	8018542 <_scanf_i+0xb6>
 8018532:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8018536:	4631      	mov	r1, r6
 8018538:	4650      	mov	r0, sl
 801853a:	4790      	blx	r2
 801853c:	2800      	cmp	r0, #0
 801853e:	f040 8085 	bne.w	801864c <_scanf_i+0x1c0>
 8018542:	f10b 0b01 	add.w	fp, fp, #1
 8018546:	f1bb 0f03 	cmp.w	fp, #3
 801854a:	d1cb      	bne.n	80184e4 <_scanf_i+0x58>
 801854c:	6863      	ldr	r3, [r4, #4]
 801854e:	b90b      	cbnz	r3, 8018554 <_scanf_i+0xc8>
 8018550:	230a      	movs	r3, #10
 8018552:	6063      	str	r3, [r4, #4]
 8018554:	6863      	ldr	r3, [r4, #4]
 8018556:	f04f 0b00 	mov.w	fp, #0
 801855a:	4944      	ldr	r1, [pc, #272]	@ (801866c <_scanf_i+0x1e0>)
 801855c:	6960      	ldr	r0, [r4, #20]
 801855e:	1ac9      	subs	r1, r1, r3
 8018560:	f000 f9c7 	bl	80188f2 <__sccl>
 8018564:	68a3      	ldr	r3, [r4, #8]
 8018566:	6822      	ldr	r2, [r4, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d03d      	beq.n	80185e8 <_scanf_i+0x15c>
 801856c:	6831      	ldr	r1, [r6, #0]
 801856e:	6960      	ldr	r0, [r4, #20]
 8018570:	f891 c000 	ldrb.w	ip, [r1]
 8018574:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018578:	2800      	cmp	r0, #0
 801857a:	d035      	beq.n	80185e8 <_scanf_i+0x15c>
 801857c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8018580:	d124      	bne.n	80185cc <_scanf_i+0x140>
 8018582:	0510      	lsls	r0, r2, #20
 8018584:	d522      	bpl.n	80185cc <_scanf_i+0x140>
 8018586:	f10b 0b01 	add.w	fp, fp, #1
 801858a:	f1b9 0f00 	cmp.w	r9, #0
 801858e:	d003      	beq.n	8018598 <_scanf_i+0x10c>
 8018590:	3301      	adds	r3, #1
 8018592:	f109 39ff 	add.w	r9, r9, #4294967295
 8018596:	60a3      	str	r3, [r4, #8]
 8018598:	6873      	ldr	r3, [r6, #4]
 801859a:	3b01      	subs	r3, #1
 801859c:	2b00      	cmp	r3, #0
 801859e:	6073      	str	r3, [r6, #4]
 80185a0:	dd1b      	ble.n	80185da <_scanf_i+0x14e>
 80185a2:	6833      	ldr	r3, [r6, #0]
 80185a4:	3301      	adds	r3, #1
 80185a6:	6033      	str	r3, [r6, #0]
 80185a8:	68a3      	ldr	r3, [r4, #8]
 80185aa:	3b01      	subs	r3, #1
 80185ac:	60a3      	str	r3, [r4, #8]
 80185ae:	e7d9      	b.n	8018564 <_scanf_i+0xd8>
 80185b0:	f1bb 0f02 	cmp.w	fp, #2
 80185b4:	d1ae      	bne.n	8018514 <_scanf_i+0x88>
 80185b6:	6822      	ldr	r2, [r4, #0]
 80185b8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80185bc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80185c0:	d1bf      	bne.n	8018542 <_scanf_i+0xb6>
 80185c2:	2110      	movs	r1, #16
 80185c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80185c8:	6061      	str	r1, [r4, #4]
 80185ca:	e7a2      	b.n	8018512 <_scanf_i+0x86>
 80185cc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80185d0:	6022      	str	r2, [r4, #0]
 80185d2:	780b      	ldrb	r3, [r1, #0]
 80185d4:	f805 3b01 	strb.w	r3, [r5], #1
 80185d8:	e7de      	b.n	8018598 <_scanf_i+0x10c>
 80185da:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80185de:	4631      	mov	r1, r6
 80185e0:	4650      	mov	r0, sl
 80185e2:	4798      	blx	r3
 80185e4:	2800      	cmp	r0, #0
 80185e6:	d0df      	beq.n	80185a8 <_scanf_i+0x11c>
 80185e8:	6823      	ldr	r3, [r4, #0]
 80185ea:	05d9      	lsls	r1, r3, #23
 80185ec:	d50d      	bpl.n	801860a <_scanf_i+0x17e>
 80185ee:	42bd      	cmp	r5, r7
 80185f0:	d909      	bls.n	8018606 <_scanf_i+0x17a>
 80185f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80185f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80185fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80185fe:	4632      	mov	r2, r6
 8018600:	464d      	mov	r5, r9
 8018602:	4650      	mov	r0, sl
 8018604:	4798      	blx	r3
 8018606:	42bd      	cmp	r5, r7
 8018608:	d028      	beq.n	801865c <_scanf_i+0x1d0>
 801860a:	6822      	ldr	r2, [r4, #0]
 801860c:	f012 0210 	ands.w	r2, r2, #16
 8018610:	d113      	bne.n	801863a <_scanf_i+0x1ae>
 8018612:	702a      	strb	r2, [r5, #0]
 8018614:	4639      	mov	r1, r7
 8018616:	6863      	ldr	r3, [r4, #4]
 8018618:	4650      	mov	r0, sl
 801861a:	9e01      	ldr	r6, [sp, #4]
 801861c:	47b0      	blx	r6
 801861e:	f8d8 3000 	ldr.w	r3, [r8]
 8018622:	6821      	ldr	r1, [r4, #0]
 8018624:	1d1a      	adds	r2, r3, #4
 8018626:	f011 0f20 	tst.w	r1, #32
 801862a:	f8c8 2000 	str.w	r2, [r8]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	d00f      	beq.n	8018652 <_scanf_i+0x1c6>
 8018632:	6018      	str	r0, [r3, #0]
 8018634:	68e3      	ldr	r3, [r4, #12]
 8018636:	3301      	adds	r3, #1
 8018638:	60e3      	str	r3, [r4, #12]
 801863a:	1bed      	subs	r5, r5, r7
 801863c:	6923      	ldr	r3, [r4, #16]
 801863e:	2000      	movs	r0, #0
 8018640:	445d      	add	r5, fp
 8018642:	442b      	add	r3, r5
 8018644:	6123      	str	r3, [r4, #16]
 8018646:	b007      	add	sp, #28
 8018648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801864c:	f04f 0b00 	mov.w	fp, #0
 8018650:	e7ca      	b.n	80185e8 <_scanf_i+0x15c>
 8018652:	07ca      	lsls	r2, r1, #31
 8018654:	bf4c      	ite	mi
 8018656:	8018      	strhmi	r0, [r3, #0]
 8018658:	6018      	strpl	r0, [r3, #0]
 801865a:	e7eb      	b.n	8018634 <_scanf_i+0x1a8>
 801865c:	2001      	movs	r0, #1
 801865e:	e7f2      	b.n	8018646 <_scanf_i+0x1ba>
 8018660:	0801aba8 	.word	0x0801aba8
 8018664:	08017b09 	.word	0x08017b09
 8018668:	0801922d 	.word	0x0801922d
 801866c:	0818ce02 	.word	0x0818ce02

08018670 <__sflush_r>:
 8018670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018678:	0716      	lsls	r6, r2, #28
 801867a:	4605      	mov	r5, r0
 801867c:	460c      	mov	r4, r1
 801867e:	d454      	bmi.n	801872a <__sflush_r+0xba>
 8018680:	684b      	ldr	r3, [r1, #4]
 8018682:	2b00      	cmp	r3, #0
 8018684:	dc02      	bgt.n	801868c <__sflush_r+0x1c>
 8018686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018688:	2b00      	cmp	r3, #0
 801868a:	dd48      	ble.n	801871e <__sflush_r+0xae>
 801868c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801868e:	2e00      	cmp	r6, #0
 8018690:	d045      	beq.n	801871e <__sflush_r+0xae>
 8018692:	2300      	movs	r3, #0
 8018694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018698:	682f      	ldr	r7, [r5, #0]
 801869a:	6a21      	ldr	r1, [r4, #32]
 801869c:	602b      	str	r3, [r5, #0]
 801869e:	d030      	beq.n	8018702 <__sflush_r+0x92>
 80186a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80186a2:	89a3      	ldrh	r3, [r4, #12]
 80186a4:	0759      	lsls	r1, r3, #29
 80186a6:	d505      	bpl.n	80186b4 <__sflush_r+0x44>
 80186a8:	6863      	ldr	r3, [r4, #4]
 80186aa:	1ad2      	subs	r2, r2, r3
 80186ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80186ae:	b10b      	cbz	r3, 80186b4 <__sflush_r+0x44>
 80186b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80186b2:	1ad2      	subs	r2, r2, r3
 80186b4:	2300      	movs	r3, #0
 80186b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80186b8:	6a21      	ldr	r1, [r4, #32]
 80186ba:	4628      	mov	r0, r5
 80186bc:	47b0      	blx	r6
 80186be:	1c43      	adds	r3, r0, #1
 80186c0:	89a3      	ldrh	r3, [r4, #12]
 80186c2:	d106      	bne.n	80186d2 <__sflush_r+0x62>
 80186c4:	6829      	ldr	r1, [r5, #0]
 80186c6:	291d      	cmp	r1, #29
 80186c8:	d82b      	bhi.n	8018722 <__sflush_r+0xb2>
 80186ca:	4a2a      	ldr	r2, [pc, #168]	@ (8018774 <__sflush_r+0x104>)
 80186cc:	410a      	asrs	r2, r1
 80186ce:	07d6      	lsls	r6, r2, #31
 80186d0:	d427      	bmi.n	8018722 <__sflush_r+0xb2>
 80186d2:	2200      	movs	r2, #0
 80186d4:	04d9      	lsls	r1, r3, #19
 80186d6:	6062      	str	r2, [r4, #4]
 80186d8:	6922      	ldr	r2, [r4, #16]
 80186da:	6022      	str	r2, [r4, #0]
 80186dc:	d504      	bpl.n	80186e8 <__sflush_r+0x78>
 80186de:	1c42      	adds	r2, r0, #1
 80186e0:	d101      	bne.n	80186e6 <__sflush_r+0x76>
 80186e2:	682b      	ldr	r3, [r5, #0]
 80186e4:	b903      	cbnz	r3, 80186e8 <__sflush_r+0x78>
 80186e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80186e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80186ea:	602f      	str	r7, [r5, #0]
 80186ec:	b1b9      	cbz	r1, 801871e <__sflush_r+0xae>
 80186ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80186f2:	4299      	cmp	r1, r3
 80186f4:	d002      	beq.n	80186fc <__sflush_r+0x8c>
 80186f6:	4628      	mov	r0, r5
 80186f8:	f7fd fe7e 	bl	80163f8 <_free_r>
 80186fc:	2300      	movs	r3, #0
 80186fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8018700:	e00d      	b.n	801871e <__sflush_r+0xae>
 8018702:	2301      	movs	r3, #1
 8018704:	4628      	mov	r0, r5
 8018706:	47b0      	blx	r6
 8018708:	4602      	mov	r2, r0
 801870a:	1c50      	adds	r0, r2, #1
 801870c:	d1c9      	bne.n	80186a2 <__sflush_r+0x32>
 801870e:	682b      	ldr	r3, [r5, #0]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d0c6      	beq.n	80186a2 <__sflush_r+0x32>
 8018714:	2b1d      	cmp	r3, #29
 8018716:	d001      	beq.n	801871c <__sflush_r+0xac>
 8018718:	2b16      	cmp	r3, #22
 801871a:	d11d      	bne.n	8018758 <__sflush_r+0xe8>
 801871c:	602f      	str	r7, [r5, #0]
 801871e:	2000      	movs	r0, #0
 8018720:	e021      	b.n	8018766 <__sflush_r+0xf6>
 8018722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018726:	b21b      	sxth	r3, r3
 8018728:	e01a      	b.n	8018760 <__sflush_r+0xf0>
 801872a:	690f      	ldr	r7, [r1, #16]
 801872c:	2f00      	cmp	r7, #0
 801872e:	d0f6      	beq.n	801871e <__sflush_r+0xae>
 8018730:	0793      	lsls	r3, r2, #30
 8018732:	680e      	ldr	r6, [r1, #0]
 8018734:	600f      	str	r7, [r1, #0]
 8018736:	bf0c      	ite	eq
 8018738:	694b      	ldreq	r3, [r1, #20]
 801873a:	2300      	movne	r3, #0
 801873c:	eba6 0807 	sub.w	r8, r6, r7
 8018740:	608b      	str	r3, [r1, #8]
 8018742:	f1b8 0f00 	cmp.w	r8, #0
 8018746:	ddea      	ble.n	801871e <__sflush_r+0xae>
 8018748:	4643      	mov	r3, r8
 801874a:	463a      	mov	r2, r7
 801874c:	6a21      	ldr	r1, [r4, #32]
 801874e:	4628      	mov	r0, r5
 8018750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018752:	47b0      	blx	r6
 8018754:	2800      	cmp	r0, #0
 8018756:	dc08      	bgt.n	801876a <__sflush_r+0xfa>
 8018758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801875c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018760:	f04f 30ff 	mov.w	r0, #4294967295
 8018764:	81a3      	strh	r3, [r4, #12]
 8018766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801876a:	4407      	add	r7, r0
 801876c:	eba8 0800 	sub.w	r8, r8, r0
 8018770:	e7e7      	b.n	8018742 <__sflush_r+0xd2>
 8018772:	bf00      	nop
 8018774:	dfbffffe 	.word	0xdfbffffe

08018778 <_fflush_r>:
 8018778:	b538      	push	{r3, r4, r5, lr}
 801877a:	690b      	ldr	r3, [r1, #16]
 801877c:	4605      	mov	r5, r0
 801877e:	460c      	mov	r4, r1
 8018780:	b913      	cbnz	r3, 8018788 <_fflush_r+0x10>
 8018782:	2500      	movs	r5, #0
 8018784:	4628      	mov	r0, r5
 8018786:	bd38      	pop	{r3, r4, r5, pc}
 8018788:	b118      	cbz	r0, 8018792 <_fflush_r+0x1a>
 801878a:	6a03      	ldr	r3, [r0, #32]
 801878c:	b90b      	cbnz	r3, 8018792 <_fflush_r+0x1a>
 801878e:	f7fc fc07 	bl	8014fa0 <__sinit>
 8018792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d0f3      	beq.n	8018782 <_fflush_r+0xa>
 801879a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801879c:	07d0      	lsls	r0, r2, #31
 801879e:	d404      	bmi.n	80187aa <_fflush_r+0x32>
 80187a0:	0599      	lsls	r1, r3, #22
 80187a2:	d402      	bmi.n	80187aa <_fflush_r+0x32>
 80187a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187a6:	f7fc ffa8 	bl	80156fa <__retarget_lock_acquire_recursive>
 80187aa:	4628      	mov	r0, r5
 80187ac:	4621      	mov	r1, r4
 80187ae:	f7ff ff5f 	bl	8018670 <__sflush_r>
 80187b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80187b4:	4605      	mov	r5, r0
 80187b6:	07da      	lsls	r2, r3, #31
 80187b8:	d4e4      	bmi.n	8018784 <_fflush_r+0xc>
 80187ba:	89a3      	ldrh	r3, [r4, #12]
 80187bc:	059b      	lsls	r3, r3, #22
 80187be:	d4e1      	bmi.n	8018784 <_fflush_r+0xc>
 80187c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187c2:	f7fc ff9b 	bl	80156fc <__retarget_lock_release_recursive>
 80187c6:	e7dd      	b.n	8018784 <_fflush_r+0xc>

080187c8 <__swhatbuf_r>:
 80187c8:	b570      	push	{r4, r5, r6, lr}
 80187ca:	460c      	mov	r4, r1
 80187cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187d0:	b096      	sub	sp, #88	@ 0x58
 80187d2:	4615      	mov	r5, r2
 80187d4:	2900      	cmp	r1, #0
 80187d6:	461e      	mov	r6, r3
 80187d8:	da0c      	bge.n	80187f4 <__swhatbuf_r+0x2c>
 80187da:	89a3      	ldrh	r3, [r4, #12]
 80187dc:	2100      	movs	r1, #0
 80187de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80187e2:	bf14      	ite	ne
 80187e4:	2340      	movne	r3, #64	@ 0x40
 80187e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80187ea:	2000      	movs	r0, #0
 80187ec:	6031      	str	r1, [r6, #0]
 80187ee:	602b      	str	r3, [r5, #0]
 80187f0:	b016      	add	sp, #88	@ 0x58
 80187f2:	bd70      	pop	{r4, r5, r6, pc}
 80187f4:	466a      	mov	r2, sp
 80187f6:	f000 f8ed 	bl	80189d4 <_fstat_r>
 80187fa:	2800      	cmp	r0, #0
 80187fc:	dbed      	blt.n	80187da <__swhatbuf_r+0x12>
 80187fe:	9901      	ldr	r1, [sp, #4]
 8018800:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018804:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018808:	4259      	negs	r1, r3
 801880a:	4159      	adcs	r1, r3
 801880c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018810:	e7eb      	b.n	80187ea <__swhatbuf_r+0x22>

08018812 <__smakebuf_r>:
 8018812:	898b      	ldrh	r3, [r1, #12]
 8018814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018816:	079d      	lsls	r5, r3, #30
 8018818:	4606      	mov	r6, r0
 801881a:	460c      	mov	r4, r1
 801881c:	d507      	bpl.n	801882e <__smakebuf_r+0x1c>
 801881e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018822:	6023      	str	r3, [r4, #0]
 8018824:	6123      	str	r3, [r4, #16]
 8018826:	2301      	movs	r3, #1
 8018828:	6163      	str	r3, [r4, #20]
 801882a:	b003      	add	sp, #12
 801882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801882e:	ab01      	add	r3, sp, #4
 8018830:	466a      	mov	r2, sp
 8018832:	f7ff ffc9 	bl	80187c8 <__swhatbuf_r>
 8018836:	9f00      	ldr	r7, [sp, #0]
 8018838:	4605      	mov	r5, r0
 801883a:	4630      	mov	r0, r6
 801883c:	4639      	mov	r1, r7
 801883e:	f7fb fc2b 	bl	8014098 <_malloc_r>
 8018842:	b948      	cbnz	r0, 8018858 <__smakebuf_r+0x46>
 8018844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018848:	059a      	lsls	r2, r3, #22
 801884a:	d4ee      	bmi.n	801882a <__smakebuf_r+0x18>
 801884c:	f023 0303 	bic.w	r3, r3, #3
 8018850:	f043 0302 	orr.w	r3, r3, #2
 8018854:	81a3      	strh	r3, [r4, #12]
 8018856:	e7e2      	b.n	801881e <__smakebuf_r+0xc>
 8018858:	89a3      	ldrh	r3, [r4, #12]
 801885a:	6020      	str	r0, [r4, #0]
 801885c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018860:	81a3      	strh	r3, [r4, #12]
 8018862:	9b01      	ldr	r3, [sp, #4]
 8018864:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018868:	b15b      	cbz	r3, 8018882 <__smakebuf_r+0x70>
 801886a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801886e:	4630      	mov	r0, r6
 8018870:	f000 f8c2 	bl	80189f8 <_isatty_r>
 8018874:	b128      	cbz	r0, 8018882 <__smakebuf_r+0x70>
 8018876:	89a3      	ldrh	r3, [r4, #12]
 8018878:	f023 0303 	bic.w	r3, r3, #3
 801887c:	f043 0301 	orr.w	r3, r3, #1
 8018880:	81a3      	strh	r3, [r4, #12]
 8018882:	89a3      	ldrh	r3, [r4, #12]
 8018884:	431d      	orrs	r5, r3
 8018886:	81a5      	strh	r5, [r4, #12]
 8018888:	e7cf      	b.n	801882a <__smakebuf_r+0x18>

0801888a <_putc_r>:
 801888a:	b570      	push	{r4, r5, r6, lr}
 801888c:	460d      	mov	r5, r1
 801888e:	4614      	mov	r4, r2
 8018890:	4606      	mov	r6, r0
 8018892:	b118      	cbz	r0, 801889c <_putc_r+0x12>
 8018894:	6a03      	ldr	r3, [r0, #32]
 8018896:	b90b      	cbnz	r3, 801889c <_putc_r+0x12>
 8018898:	f7fc fb82 	bl	8014fa0 <__sinit>
 801889c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801889e:	07d8      	lsls	r0, r3, #31
 80188a0:	d405      	bmi.n	80188ae <_putc_r+0x24>
 80188a2:	89a3      	ldrh	r3, [r4, #12]
 80188a4:	0599      	lsls	r1, r3, #22
 80188a6:	d402      	bmi.n	80188ae <_putc_r+0x24>
 80188a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188aa:	f7fc ff26 	bl	80156fa <__retarget_lock_acquire_recursive>
 80188ae:	68a3      	ldr	r3, [r4, #8]
 80188b0:	3b01      	subs	r3, #1
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	60a3      	str	r3, [r4, #8]
 80188b6:	da05      	bge.n	80188c4 <_putc_r+0x3a>
 80188b8:	69a2      	ldr	r2, [r4, #24]
 80188ba:	4293      	cmp	r3, r2
 80188bc:	db12      	blt.n	80188e4 <_putc_r+0x5a>
 80188be:	b2eb      	uxtb	r3, r5
 80188c0:	2b0a      	cmp	r3, #10
 80188c2:	d00f      	beq.n	80188e4 <_putc_r+0x5a>
 80188c4:	6823      	ldr	r3, [r4, #0]
 80188c6:	1c5a      	adds	r2, r3, #1
 80188c8:	6022      	str	r2, [r4, #0]
 80188ca:	701d      	strb	r5, [r3, #0]
 80188cc:	b2ed      	uxtb	r5, r5
 80188ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80188d0:	07da      	lsls	r2, r3, #31
 80188d2:	d405      	bmi.n	80188e0 <_putc_r+0x56>
 80188d4:	89a3      	ldrh	r3, [r4, #12]
 80188d6:	059b      	lsls	r3, r3, #22
 80188d8:	d402      	bmi.n	80188e0 <_putc_r+0x56>
 80188da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188dc:	f7fc ff0e 	bl	80156fc <__retarget_lock_release_recursive>
 80188e0:	4628      	mov	r0, r5
 80188e2:	bd70      	pop	{r4, r5, r6, pc}
 80188e4:	4629      	mov	r1, r5
 80188e6:	4622      	mov	r2, r4
 80188e8:	4630      	mov	r0, r6
 80188ea:	f7fc fd86 	bl	80153fa <__swbuf_r>
 80188ee:	4605      	mov	r5, r0
 80188f0:	e7ed      	b.n	80188ce <_putc_r+0x44>

080188f2 <__sccl>:
 80188f2:	b570      	push	{r4, r5, r6, lr}
 80188f4:	780b      	ldrb	r3, [r1, #0]
 80188f6:	4604      	mov	r4, r0
 80188f8:	3801      	subs	r0, #1
 80188fa:	2b5e      	cmp	r3, #94	@ 0x5e
 80188fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018900:	bf13      	iteet	ne
 8018902:	1c4a      	addne	r2, r1, #1
 8018904:	1c8a      	addeq	r2, r1, #2
 8018906:	784b      	ldrbeq	r3, [r1, #1]
 8018908:	2100      	movne	r1, #0
 801890a:	bf08      	it	eq
 801890c:	2101      	moveq	r1, #1
 801890e:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018912:	42a8      	cmp	r0, r5
 8018914:	d1fb      	bne.n	801890e <__sccl+0x1c>
 8018916:	b90b      	cbnz	r3, 801891c <__sccl+0x2a>
 8018918:	1e50      	subs	r0, r2, #1
 801891a:	bd70      	pop	{r4, r5, r6, pc}
 801891c:	f081 0101 	eor.w	r1, r1, #1
 8018920:	4610      	mov	r0, r2
 8018922:	54e1      	strb	r1, [r4, r3]
 8018924:	4602      	mov	r2, r0
 8018926:	f812 5b01 	ldrb.w	r5, [r2], #1
 801892a:	2d2d      	cmp	r5, #45	@ 0x2d
 801892c:	d005      	beq.n	801893a <__sccl+0x48>
 801892e:	2d5d      	cmp	r5, #93	@ 0x5d
 8018930:	d016      	beq.n	8018960 <__sccl+0x6e>
 8018932:	2d00      	cmp	r5, #0
 8018934:	d0f1      	beq.n	801891a <__sccl+0x28>
 8018936:	462b      	mov	r3, r5
 8018938:	e7f2      	b.n	8018920 <__sccl+0x2e>
 801893a:	7846      	ldrb	r6, [r0, #1]
 801893c:	2e5d      	cmp	r6, #93	@ 0x5d
 801893e:	d0fa      	beq.n	8018936 <__sccl+0x44>
 8018940:	42b3      	cmp	r3, r6
 8018942:	dcf8      	bgt.n	8018936 <__sccl+0x44>
 8018944:	3002      	adds	r0, #2
 8018946:	461a      	mov	r2, r3
 8018948:	3201      	adds	r2, #1
 801894a:	4296      	cmp	r6, r2
 801894c:	54a1      	strb	r1, [r4, r2]
 801894e:	dcfb      	bgt.n	8018948 <__sccl+0x56>
 8018950:	1af2      	subs	r2, r6, r3
 8018952:	1c5d      	adds	r5, r3, #1
 8018954:	3a01      	subs	r2, #1
 8018956:	42b3      	cmp	r3, r6
 8018958:	bfa8      	it	ge
 801895a:	2200      	movge	r2, #0
 801895c:	18ab      	adds	r3, r5, r2
 801895e:	e7e1      	b.n	8018924 <__sccl+0x32>
 8018960:	4610      	mov	r0, r2
 8018962:	e7da      	b.n	801891a <__sccl+0x28>

08018964 <__submore>:
 8018964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018968:	460c      	mov	r4, r1
 801896a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801896c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018970:	4299      	cmp	r1, r3
 8018972:	d11a      	bne.n	80189aa <__submore+0x46>
 8018974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018978:	f7fb fb8e 	bl	8014098 <_malloc_r>
 801897c:	b918      	cbnz	r0, 8018986 <__submore+0x22>
 801897e:	f04f 30ff 	mov.w	r0, #4294967295
 8018982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801898a:	6360      	str	r0, [r4, #52]	@ 0x34
 801898c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018990:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018992:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018996:	7083      	strb	r3, [r0, #2]
 8018998:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801899c:	7043      	strb	r3, [r0, #1]
 801899e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80189a2:	7003      	strb	r3, [r0, #0]
 80189a4:	6020      	str	r0, [r4, #0]
 80189a6:	2000      	movs	r0, #0
 80189a8:	e7eb      	b.n	8018982 <__submore+0x1e>
 80189aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80189ac:	0077      	lsls	r7, r6, #1
 80189ae:	463a      	mov	r2, r7
 80189b0:	f000 fb9f 	bl	80190f2 <_realloc_r>
 80189b4:	4605      	mov	r5, r0
 80189b6:	2800      	cmp	r0, #0
 80189b8:	d0e1      	beq.n	801897e <__submore+0x1a>
 80189ba:	eb00 0806 	add.w	r8, r0, r6
 80189be:	4601      	mov	r1, r0
 80189c0:	4632      	mov	r2, r6
 80189c2:	4640      	mov	r0, r8
 80189c4:	f7fc feb1 	bl	801572a <memcpy>
 80189c8:	f8c4 8000 	str.w	r8, [r4]
 80189cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80189d0:	e7e9      	b.n	80189a6 <__submore+0x42>
	...

080189d4 <_fstat_r>:
 80189d4:	b538      	push	{r3, r4, r5, lr}
 80189d6:	2300      	movs	r3, #0
 80189d8:	4d06      	ldr	r5, [pc, #24]	@ (80189f4 <_fstat_r+0x20>)
 80189da:	4604      	mov	r4, r0
 80189dc:	4608      	mov	r0, r1
 80189de:	4611      	mov	r1, r2
 80189e0:	602b      	str	r3, [r5, #0]
 80189e2:	f7e8 fedf 	bl	80017a4 <_fstat>
 80189e6:	1c43      	adds	r3, r0, #1
 80189e8:	d102      	bne.n	80189f0 <_fstat_r+0x1c>
 80189ea:	682b      	ldr	r3, [r5, #0]
 80189ec:	b103      	cbz	r3, 80189f0 <_fstat_r+0x1c>
 80189ee:	6023      	str	r3, [r4, #0]
 80189f0:	bd38      	pop	{r3, r4, r5, pc}
 80189f2:	bf00      	nop
 80189f4:	200034b0 	.word	0x200034b0

080189f8 <_isatty_r>:
 80189f8:	b538      	push	{r3, r4, r5, lr}
 80189fa:	2300      	movs	r3, #0
 80189fc:	4d05      	ldr	r5, [pc, #20]	@ (8018a14 <_isatty_r+0x1c>)
 80189fe:	4604      	mov	r4, r0
 8018a00:	4608      	mov	r0, r1
 8018a02:	602b      	str	r3, [r5, #0]
 8018a04:	f7e8 fede 	bl	80017c4 <_isatty>
 8018a08:	1c43      	adds	r3, r0, #1
 8018a0a:	d102      	bne.n	8018a12 <_isatty_r+0x1a>
 8018a0c:	682b      	ldr	r3, [r5, #0]
 8018a0e:	b103      	cbz	r3, 8018a12 <_isatty_r+0x1a>
 8018a10:	6023      	str	r3, [r4, #0]
 8018a12:	bd38      	pop	{r3, r4, r5, pc}
 8018a14:	200034b0 	.word	0x200034b0

08018a18 <nan>:
 8018a18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018a20 <nan+0x8>
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop
 8018a20:	00000000 	.word	0x00000000
 8018a24:	7ff80000 	.word	0x7ff80000

08018a28 <__assert_func>:
 8018a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a2a:	4614      	mov	r4, r2
 8018a2c:	461a      	mov	r2, r3
 8018a2e:	4b09      	ldr	r3, [pc, #36]	@ (8018a54 <__assert_func+0x2c>)
 8018a30:	4605      	mov	r5, r0
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	68d8      	ldr	r0, [r3, #12]
 8018a36:	b954      	cbnz	r4, 8018a4e <__assert_func+0x26>
 8018a38:	4b07      	ldr	r3, [pc, #28]	@ (8018a58 <__assert_func+0x30>)
 8018a3a:	461c      	mov	r4, r3
 8018a3c:	9100      	str	r1, [sp, #0]
 8018a3e:	4907      	ldr	r1, [pc, #28]	@ (8018a5c <__assert_func+0x34>)
 8018a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a44:	462b      	mov	r3, r5
 8018a46:	f000 fc01 	bl	801924c <fiprintf>
 8018a4a:	f000 fc11 	bl	8019270 <abort>
 8018a4e:	4b04      	ldr	r3, [pc, #16]	@ (8018a60 <__assert_func+0x38>)
 8018a50:	e7f4      	b.n	8018a3c <__assert_func+0x14>
 8018a52:	bf00      	nop
 8018a54:	200000f0 	.word	0x200000f0
 8018a58:	0818ce50 	.word	0x0818ce50
 8018a5c:	0818ce22 	.word	0x0818ce22
 8018a60:	0818ce15 	.word	0x0818ce15

08018a64 <rshift>:
 8018a64:	6903      	ldr	r3, [r0, #16]
 8018a66:	114a      	asrs	r2, r1, #5
 8018a68:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a70:	f100 0414 	add.w	r4, r0, #20
 8018a74:	dd45      	ble.n	8018b02 <rshift+0x9e>
 8018a76:	f011 011f 	ands.w	r1, r1, #31
 8018a7a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018a7e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018a82:	d10c      	bne.n	8018a9e <rshift+0x3a>
 8018a84:	f100 0710 	add.w	r7, r0, #16
 8018a88:	4629      	mov	r1, r5
 8018a8a:	42b1      	cmp	r1, r6
 8018a8c:	d334      	bcc.n	8018af8 <rshift+0x94>
 8018a8e:	1a9b      	subs	r3, r3, r2
 8018a90:	1eea      	subs	r2, r5, #3
 8018a92:	009b      	lsls	r3, r3, #2
 8018a94:	4296      	cmp	r6, r2
 8018a96:	bf38      	it	cc
 8018a98:	2300      	movcc	r3, #0
 8018a9a:	4423      	add	r3, r4
 8018a9c:	e015      	b.n	8018aca <rshift+0x66>
 8018a9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018aa2:	f1c1 0820 	rsb	r8, r1, #32
 8018aa6:	f105 0e04 	add.w	lr, r5, #4
 8018aaa:	46a1      	mov	r9, r4
 8018aac:	40cf      	lsrs	r7, r1
 8018aae:	4576      	cmp	r6, lr
 8018ab0:	46f4      	mov	ip, lr
 8018ab2:	d815      	bhi.n	8018ae0 <rshift+0x7c>
 8018ab4:	1a9a      	subs	r2, r3, r2
 8018ab6:	3501      	adds	r5, #1
 8018ab8:	0092      	lsls	r2, r2, #2
 8018aba:	3a04      	subs	r2, #4
 8018abc:	42ae      	cmp	r6, r5
 8018abe:	bf38      	it	cc
 8018ac0:	2200      	movcc	r2, #0
 8018ac2:	18a3      	adds	r3, r4, r2
 8018ac4:	50a7      	str	r7, [r4, r2]
 8018ac6:	b107      	cbz	r7, 8018aca <rshift+0x66>
 8018ac8:	3304      	adds	r3, #4
 8018aca:	1b1a      	subs	r2, r3, r4
 8018acc:	42a3      	cmp	r3, r4
 8018ace:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018ad2:	bf08      	it	eq
 8018ad4:	2300      	moveq	r3, #0
 8018ad6:	6102      	str	r2, [r0, #16]
 8018ad8:	bf08      	it	eq
 8018ada:	6143      	streq	r3, [r0, #20]
 8018adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ae0:	f8dc c000 	ldr.w	ip, [ip]
 8018ae4:	fa0c fc08 	lsl.w	ip, ip, r8
 8018ae8:	ea4c 0707 	orr.w	r7, ip, r7
 8018aec:	f849 7b04 	str.w	r7, [r9], #4
 8018af0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018af4:	40cf      	lsrs	r7, r1
 8018af6:	e7da      	b.n	8018aae <rshift+0x4a>
 8018af8:	f851 cb04 	ldr.w	ip, [r1], #4
 8018afc:	f847 cf04 	str.w	ip, [r7, #4]!
 8018b00:	e7c3      	b.n	8018a8a <rshift+0x26>
 8018b02:	4623      	mov	r3, r4
 8018b04:	e7e1      	b.n	8018aca <rshift+0x66>

08018b06 <__hexdig_fun>:
 8018b06:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018b0a:	2b09      	cmp	r3, #9
 8018b0c:	d802      	bhi.n	8018b14 <__hexdig_fun+0xe>
 8018b0e:	3820      	subs	r0, #32
 8018b10:	b2c0      	uxtb	r0, r0
 8018b12:	4770      	bx	lr
 8018b14:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018b18:	2b05      	cmp	r3, #5
 8018b1a:	d801      	bhi.n	8018b20 <__hexdig_fun+0x1a>
 8018b1c:	3847      	subs	r0, #71	@ 0x47
 8018b1e:	e7f7      	b.n	8018b10 <__hexdig_fun+0xa>
 8018b20:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018b24:	2b05      	cmp	r3, #5
 8018b26:	d801      	bhi.n	8018b2c <__hexdig_fun+0x26>
 8018b28:	3827      	subs	r0, #39	@ 0x27
 8018b2a:	e7f1      	b.n	8018b10 <__hexdig_fun+0xa>
 8018b2c:	2000      	movs	r0, #0
 8018b2e:	4770      	bx	lr

08018b30 <__gethex>:
 8018b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b34:	b085      	sub	sp, #20
 8018b36:	468a      	mov	sl, r1
 8018b38:	4690      	mov	r8, r2
 8018b3a:	9302      	str	r3, [sp, #8]
 8018b3c:	680b      	ldr	r3, [r1, #0]
 8018b3e:	9001      	str	r0, [sp, #4]
 8018b40:	1c9c      	adds	r4, r3, #2
 8018b42:	46a1      	mov	r9, r4
 8018b44:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018b48:	2830      	cmp	r0, #48	@ 0x30
 8018b4a:	d0fa      	beq.n	8018b42 <__gethex+0x12>
 8018b4c:	eba9 0303 	sub.w	r3, r9, r3
 8018b50:	f1a3 0b02 	sub.w	fp, r3, #2
 8018b54:	f7ff ffd7 	bl	8018b06 <__hexdig_fun>
 8018b58:	4605      	mov	r5, r0
 8018b5a:	2800      	cmp	r0, #0
 8018b5c:	d166      	bne.n	8018c2c <__gethex+0xfc>
 8018b5e:	2201      	movs	r2, #1
 8018b60:	499e      	ldr	r1, [pc, #632]	@ (8018ddc <__gethex+0x2ac>)
 8018b62:	4648      	mov	r0, r9
 8018b64:	f7fc fd1f 	bl	80155a6 <strncmp>
 8018b68:	4607      	mov	r7, r0
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d165      	bne.n	8018c3a <__gethex+0x10a>
 8018b6e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018b72:	4626      	mov	r6, r4
 8018b74:	f7ff ffc7 	bl	8018b06 <__hexdig_fun>
 8018b78:	2800      	cmp	r0, #0
 8018b7a:	d060      	beq.n	8018c3e <__gethex+0x10e>
 8018b7c:	4623      	mov	r3, r4
 8018b7e:	7818      	ldrb	r0, [r3, #0]
 8018b80:	4699      	mov	r9, r3
 8018b82:	3301      	adds	r3, #1
 8018b84:	2830      	cmp	r0, #48	@ 0x30
 8018b86:	d0fa      	beq.n	8018b7e <__gethex+0x4e>
 8018b88:	f7ff ffbd 	bl	8018b06 <__hexdig_fun>
 8018b8c:	fab0 f580 	clz	r5, r0
 8018b90:	f04f 0b01 	mov.w	fp, #1
 8018b94:	096d      	lsrs	r5, r5, #5
 8018b96:	464a      	mov	r2, r9
 8018b98:	4616      	mov	r6, r2
 8018b9a:	3201      	adds	r2, #1
 8018b9c:	7830      	ldrb	r0, [r6, #0]
 8018b9e:	f7ff ffb2 	bl	8018b06 <__hexdig_fun>
 8018ba2:	2800      	cmp	r0, #0
 8018ba4:	d1f8      	bne.n	8018b98 <__gethex+0x68>
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	498c      	ldr	r1, [pc, #560]	@ (8018ddc <__gethex+0x2ac>)
 8018baa:	4630      	mov	r0, r6
 8018bac:	f7fc fcfb 	bl	80155a6 <strncmp>
 8018bb0:	2800      	cmp	r0, #0
 8018bb2:	d13e      	bne.n	8018c32 <__gethex+0x102>
 8018bb4:	b944      	cbnz	r4, 8018bc8 <__gethex+0x98>
 8018bb6:	1c74      	adds	r4, r6, #1
 8018bb8:	4622      	mov	r2, r4
 8018bba:	4616      	mov	r6, r2
 8018bbc:	3201      	adds	r2, #1
 8018bbe:	7830      	ldrb	r0, [r6, #0]
 8018bc0:	f7ff ffa1 	bl	8018b06 <__hexdig_fun>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	d1f8      	bne.n	8018bba <__gethex+0x8a>
 8018bc8:	1ba4      	subs	r4, r4, r6
 8018bca:	00a7      	lsls	r7, r4, #2
 8018bcc:	7833      	ldrb	r3, [r6, #0]
 8018bce:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8018bd2:	2b50      	cmp	r3, #80	@ 0x50
 8018bd4:	d13d      	bne.n	8018c52 <__gethex+0x122>
 8018bd6:	7873      	ldrb	r3, [r6, #1]
 8018bd8:	2b2b      	cmp	r3, #43	@ 0x2b
 8018bda:	d032      	beq.n	8018c42 <__gethex+0x112>
 8018bdc:	2b2d      	cmp	r3, #45	@ 0x2d
 8018bde:	d033      	beq.n	8018c48 <__gethex+0x118>
 8018be0:	1c71      	adds	r1, r6, #1
 8018be2:	2400      	movs	r4, #0
 8018be4:	7808      	ldrb	r0, [r1, #0]
 8018be6:	f7ff ff8e 	bl	8018b06 <__hexdig_fun>
 8018bea:	1e43      	subs	r3, r0, #1
 8018bec:	b2db      	uxtb	r3, r3
 8018bee:	2b18      	cmp	r3, #24
 8018bf0:	d82f      	bhi.n	8018c52 <__gethex+0x122>
 8018bf2:	f1a0 0210 	sub.w	r2, r0, #16
 8018bf6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018bfa:	f7ff ff84 	bl	8018b06 <__hexdig_fun>
 8018bfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8018c02:	230a      	movs	r3, #10
 8018c04:	fa5f fc8c 	uxtb.w	ip, ip
 8018c08:	f1bc 0f18 	cmp.w	ip, #24
 8018c0c:	d91e      	bls.n	8018c4c <__gethex+0x11c>
 8018c0e:	b104      	cbz	r4, 8018c12 <__gethex+0xe2>
 8018c10:	4252      	negs	r2, r2
 8018c12:	4417      	add	r7, r2
 8018c14:	f8ca 1000 	str.w	r1, [sl]
 8018c18:	b1ed      	cbz	r5, 8018c56 <__gethex+0x126>
 8018c1a:	f1bb 0f00 	cmp.w	fp, #0
 8018c1e:	bf0c      	ite	eq
 8018c20:	2506      	moveq	r5, #6
 8018c22:	2500      	movne	r5, #0
 8018c24:	4628      	mov	r0, r5
 8018c26:	b005      	add	sp, #20
 8018c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c2c:	2500      	movs	r5, #0
 8018c2e:	462c      	mov	r4, r5
 8018c30:	e7b1      	b.n	8018b96 <__gethex+0x66>
 8018c32:	2c00      	cmp	r4, #0
 8018c34:	d1c8      	bne.n	8018bc8 <__gethex+0x98>
 8018c36:	4627      	mov	r7, r4
 8018c38:	e7c8      	b.n	8018bcc <__gethex+0x9c>
 8018c3a:	464e      	mov	r6, r9
 8018c3c:	462f      	mov	r7, r5
 8018c3e:	2501      	movs	r5, #1
 8018c40:	e7c4      	b.n	8018bcc <__gethex+0x9c>
 8018c42:	2400      	movs	r4, #0
 8018c44:	1cb1      	adds	r1, r6, #2
 8018c46:	e7cd      	b.n	8018be4 <__gethex+0xb4>
 8018c48:	2401      	movs	r4, #1
 8018c4a:	e7fb      	b.n	8018c44 <__gethex+0x114>
 8018c4c:	fb03 0002 	mla	r0, r3, r2, r0
 8018c50:	e7cf      	b.n	8018bf2 <__gethex+0xc2>
 8018c52:	4631      	mov	r1, r6
 8018c54:	e7de      	b.n	8018c14 <__gethex+0xe4>
 8018c56:	eba6 0309 	sub.w	r3, r6, r9
 8018c5a:	4629      	mov	r1, r5
 8018c5c:	3b01      	subs	r3, #1
 8018c5e:	2b07      	cmp	r3, #7
 8018c60:	dc0a      	bgt.n	8018c78 <__gethex+0x148>
 8018c62:	9801      	ldr	r0, [sp, #4]
 8018c64:	f7fd fc12 	bl	801648c <_Balloc>
 8018c68:	4604      	mov	r4, r0
 8018c6a:	b940      	cbnz	r0, 8018c7e <__gethex+0x14e>
 8018c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8018de0 <__gethex+0x2b0>)
 8018c6e:	4602      	mov	r2, r0
 8018c70:	21e4      	movs	r1, #228	@ 0xe4
 8018c72:	485c      	ldr	r0, [pc, #368]	@ (8018de4 <__gethex+0x2b4>)
 8018c74:	f7ff fed8 	bl	8018a28 <__assert_func>
 8018c78:	3101      	adds	r1, #1
 8018c7a:	105b      	asrs	r3, r3, #1
 8018c7c:	e7ef      	b.n	8018c5e <__gethex+0x12e>
 8018c7e:	f100 0a14 	add.w	sl, r0, #20
 8018c82:	2300      	movs	r3, #0
 8018c84:	4655      	mov	r5, sl
 8018c86:	469b      	mov	fp, r3
 8018c88:	45b1      	cmp	r9, r6
 8018c8a:	d337      	bcc.n	8018cfc <__gethex+0x1cc>
 8018c8c:	f845 bb04 	str.w	fp, [r5], #4
 8018c90:	eba5 050a 	sub.w	r5, r5, sl
 8018c94:	4658      	mov	r0, fp
 8018c96:	10ad      	asrs	r5, r5, #2
 8018c98:	6125      	str	r5, [r4, #16]
 8018c9a:	016d      	lsls	r5, r5, #5
 8018c9c:	f7fd fcea 	bl	8016674 <__hi0bits>
 8018ca0:	f8d8 6000 	ldr.w	r6, [r8]
 8018ca4:	1a2d      	subs	r5, r5, r0
 8018ca6:	42b5      	cmp	r5, r6
 8018ca8:	dd54      	ble.n	8018d54 <__gethex+0x224>
 8018caa:	1bad      	subs	r5, r5, r6
 8018cac:	4620      	mov	r0, r4
 8018cae:	4629      	mov	r1, r5
 8018cb0:	f7fe f887 	bl	8016dc2 <__any_on>
 8018cb4:	4681      	mov	r9, r0
 8018cb6:	b178      	cbz	r0, 8018cd8 <__gethex+0x1a8>
 8018cb8:	1e6b      	subs	r3, r5, #1
 8018cba:	f04f 0901 	mov.w	r9, #1
 8018cbe:	1159      	asrs	r1, r3, #5
 8018cc0:	f003 021f 	and.w	r2, r3, #31
 8018cc4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018cc8:	fa09 f202 	lsl.w	r2, r9, r2
 8018ccc:	420a      	tst	r2, r1
 8018cce:	d003      	beq.n	8018cd8 <__gethex+0x1a8>
 8018cd0:	454b      	cmp	r3, r9
 8018cd2:	dc36      	bgt.n	8018d42 <__gethex+0x212>
 8018cd4:	f04f 0902 	mov.w	r9, #2
 8018cd8:	442f      	add	r7, r5
 8018cda:	4629      	mov	r1, r5
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f7ff fec1 	bl	8018a64 <rshift>
 8018ce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ce6:	42bb      	cmp	r3, r7
 8018ce8:	da42      	bge.n	8018d70 <__gethex+0x240>
 8018cea:	4621      	mov	r1, r4
 8018cec:	9801      	ldr	r0, [sp, #4]
 8018cee:	f7fd fc0d 	bl	801650c <_Bfree>
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018cf6:	25a3      	movs	r5, #163	@ 0xa3
 8018cf8:	6013      	str	r3, [r2, #0]
 8018cfa:	e793      	b.n	8018c24 <__gethex+0xf4>
 8018cfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018d00:	2a2e      	cmp	r2, #46	@ 0x2e
 8018d02:	d012      	beq.n	8018d2a <__gethex+0x1fa>
 8018d04:	2b20      	cmp	r3, #32
 8018d06:	d104      	bne.n	8018d12 <__gethex+0x1e2>
 8018d08:	f845 bb04 	str.w	fp, [r5], #4
 8018d0c:	f04f 0b00 	mov.w	fp, #0
 8018d10:	465b      	mov	r3, fp
 8018d12:	7830      	ldrb	r0, [r6, #0]
 8018d14:	9303      	str	r3, [sp, #12]
 8018d16:	f7ff fef6 	bl	8018b06 <__hexdig_fun>
 8018d1a:	9b03      	ldr	r3, [sp, #12]
 8018d1c:	f000 000f 	and.w	r0, r0, #15
 8018d20:	4098      	lsls	r0, r3
 8018d22:	3304      	adds	r3, #4
 8018d24:	ea4b 0b00 	orr.w	fp, fp, r0
 8018d28:	e7ae      	b.n	8018c88 <__gethex+0x158>
 8018d2a:	45b1      	cmp	r9, r6
 8018d2c:	d8ea      	bhi.n	8018d04 <__gethex+0x1d4>
 8018d2e:	2201      	movs	r2, #1
 8018d30:	492a      	ldr	r1, [pc, #168]	@ (8018ddc <__gethex+0x2ac>)
 8018d32:	4630      	mov	r0, r6
 8018d34:	9303      	str	r3, [sp, #12]
 8018d36:	f7fc fc36 	bl	80155a6 <strncmp>
 8018d3a:	9b03      	ldr	r3, [sp, #12]
 8018d3c:	2800      	cmp	r0, #0
 8018d3e:	d1e1      	bne.n	8018d04 <__gethex+0x1d4>
 8018d40:	e7a2      	b.n	8018c88 <__gethex+0x158>
 8018d42:	1ea9      	subs	r1, r5, #2
 8018d44:	4620      	mov	r0, r4
 8018d46:	f7fe f83c 	bl	8016dc2 <__any_on>
 8018d4a:	2800      	cmp	r0, #0
 8018d4c:	d0c2      	beq.n	8018cd4 <__gethex+0x1a4>
 8018d4e:	f04f 0903 	mov.w	r9, #3
 8018d52:	e7c1      	b.n	8018cd8 <__gethex+0x1a8>
 8018d54:	da09      	bge.n	8018d6a <__gethex+0x23a>
 8018d56:	1b75      	subs	r5, r6, r5
 8018d58:	4621      	mov	r1, r4
 8018d5a:	9801      	ldr	r0, [sp, #4]
 8018d5c:	462a      	mov	r2, r5
 8018d5e:	1b7f      	subs	r7, r7, r5
 8018d60:	f7fd fdee 	bl	8016940 <__lshift>
 8018d64:	4604      	mov	r4, r0
 8018d66:	f100 0a14 	add.w	sl, r0, #20
 8018d6a:	f04f 0900 	mov.w	r9, #0
 8018d6e:	e7b8      	b.n	8018ce2 <__gethex+0x1b2>
 8018d70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018d74:	42bd      	cmp	r5, r7
 8018d76:	dd6f      	ble.n	8018e58 <__gethex+0x328>
 8018d78:	1bed      	subs	r5, r5, r7
 8018d7a:	42ae      	cmp	r6, r5
 8018d7c:	dc34      	bgt.n	8018de8 <__gethex+0x2b8>
 8018d7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018d82:	2b02      	cmp	r3, #2
 8018d84:	d022      	beq.n	8018dcc <__gethex+0x29c>
 8018d86:	2b03      	cmp	r3, #3
 8018d88:	d024      	beq.n	8018dd4 <__gethex+0x2a4>
 8018d8a:	2b01      	cmp	r3, #1
 8018d8c:	d115      	bne.n	8018dba <__gethex+0x28a>
 8018d8e:	42ae      	cmp	r6, r5
 8018d90:	d113      	bne.n	8018dba <__gethex+0x28a>
 8018d92:	2e01      	cmp	r6, #1
 8018d94:	d10b      	bne.n	8018dae <__gethex+0x27e>
 8018d96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018d9a:	2562      	movs	r5, #98	@ 0x62
 8018d9c:	9a02      	ldr	r2, [sp, #8]
 8018d9e:	6013      	str	r3, [r2, #0]
 8018da0:	2301      	movs	r3, #1
 8018da2:	6123      	str	r3, [r4, #16]
 8018da4:	f8ca 3000 	str.w	r3, [sl]
 8018da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018daa:	601c      	str	r4, [r3, #0]
 8018dac:	e73a      	b.n	8018c24 <__gethex+0xf4>
 8018dae:	1e71      	subs	r1, r6, #1
 8018db0:	4620      	mov	r0, r4
 8018db2:	f7fe f806 	bl	8016dc2 <__any_on>
 8018db6:	2800      	cmp	r0, #0
 8018db8:	d1ed      	bne.n	8018d96 <__gethex+0x266>
 8018dba:	4621      	mov	r1, r4
 8018dbc:	9801      	ldr	r0, [sp, #4]
 8018dbe:	f7fd fba5 	bl	801650c <_Bfree>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018dc6:	2550      	movs	r5, #80	@ 0x50
 8018dc8:	6013      	str	r3, [r2, #0]
 8018dca:	e72b      	b.n	8018c24 <__gethex+0xf4>
 8018dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d1f3      	bne.n	8018dba <__gethex+0x28a>
 8018dd2:	e7e0      	b.n	8018d96 <__gethex+0x266>
 8018dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d1dd      	bne.n	8018d96 <__gethex+0x266>
 8018dda:	e7ee      	b.n	8018dba <__gethex+0x28a>
 8018ddc:	0818cc88 	.word	0x0818cc88
 8018de0:	0818cb1b 	.word	0x0818cb1b
 8018de4:	0818ce51 	.word	0x0818ce51
 8018de8:	1e6f      	subs	r7, r5, #1
 8018dea:	f1b9 0f00 	cmp.w	r9, #0
 8018dee:	d130      	bne.n	8018e52 <__gethex+0x322>
 8018df0:	b127      	cbz	r7, 8018dfc <__gethex+0x2cc>
 8018df2:	4639      	mov	r1, r7
 8018df4:	4620      	mov	r0, r4
 8018df6:	f7fd ffe4 	bl	8016dc2 <__any_on>
 8018dfa:	4681      	mov	r9, r0
 8018dfc:	117a      	asrs	r2, r7, #5
 8018dfe:	2301      	movs	r3, #1
 8018e00:	f007 071f 	and.w	r7, r7, #31
 8018e04:	4629      	mov	r1, r5
 8018e06:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	40bb      	lsls	r3, r7
 8018e0e:	1b76      	subs	r6, r6, r5
 8018e10:	2502      	movs	r5, #2
 8018e12:	4213      	tst	r3, r2
 8018e14:	bf18      	it	ne
 8018e16:	f049 0902 	orrne.w	r9, r9, #2
 8018e1a:	f7ff fe23 	bl	8018a64 <rshift>
 8018e1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018e22:	f1b9 0f00 	cmp.w	r9, #0
 8018e26:	d047      	beq.n	8018eb8 <__gethex+0x388>
 8018e28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e2c:	2b02      	cmp	r3, #2
 8018e2e:	d015      	beq.n	8018e5c <__gethex+0x32c>
 8018e30:	2b03      	cmp	r3, #3
 8018e32:	d017      	beq.n	8018e64 <__gethex+0x334>
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d109      	bne.n	8018e4c <__gethex+0x31c>
 8018e38:	f019 0f02 	tst.w	r9, #2
 8018e3c:	d006      	beq.n	8018e4c <__gethex+0x31c>
 8018e3e:	f8da 3000 	ldr.w	r3, [sl]
 8018e42:	ea49 0903 	orr.w	r9, r9, r3
 8018e46:	f019 0f01 	tst.w	r9, #1
 8018e4a:	d10e      	bne.n	8018e6a <__gethex+0x33a>
 8018e4c:	f045 0510 	orr.w	r5, r5, #16
 8018e50:	e032      	b.n	8018eb8 <__gethex+0x388>
 8018e52:	f04f 0901 	mov.w	r9, #1
 8018e56:	e7d1      	b.n	8018dfc <__gethex+0x2cc>
 8018e58:	2501      	movs	r5, #1
 8018e5a:	e7e2      	b.n	8018e22 <__gethex+0x2f2>
 8018e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e5e:	f1c3 0301 	rsb	r3, r3, #1
 8018e62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d0f0      	beq.n	8018e4c <__gethex+0x31c>
 8018e6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018e6e:	f104 0314 	add.w	r3, r4, #20
 8018e72:	f04f 0c00 	mov.w	ip, #0
 8018e76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018e7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018e88:	d01b      	beq.n	8018ec2 <__gethex+0x392>
 8018e8a:	3201      	adds	r2, #1
 8018e8c:	6002      	str	r2, [r0, #0]
 8018e8e:	2d02      	cmp	r5, #2
 8018e90:	f104 0314 	add.w	r3, r4, #20
 8018e94:	d13c      	bne.n	8018f10 <__gethex+0x3e0>
 8018e96:	f8d8 2000 	ldr.w	r2, [r8]
 8018e9a:	3a01      	subs	r2, #1
 8018e9c:	42b2      	cmp	r2, r6
 8018e9e:	d109      	bne.n	8018eb4 <__gethex+0x384>
 8018ea0:	1171      	asrs	r1, r6, #5
 8018ea2:	2201      	movs	r2, #1
 8018ea4:	f006 061f 	and.w	r6, r6, #31
 8018ea8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018eac:	fa02 f606 	lsl.w	r6, r2, r6
 8018eb0:	421e      	tst	r6, r3
 8018eb2:	d13a      	bne.n	8018f2a <__gethex+0x3fa>
 8018eb4:	f045 0520 	orr.w	r5, r5, #32
 8018eb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018eba:	601c      	str	r4, [r3, #0]
 8018ebc:	9b02      	ldr	r3, [sp, #8]
 8018ebe:	601f      	str	r7, [r3, #0]
 8018ec0:	e6b0      	b.n	8018c24 <__gethex+0xf4>
 8018ec2:	4299      	cmp	r1, r3
 8018ec4:	f843 cc04 	str.w	ip, [r3, #-4]
 8018ec8:	d8d9      	bhi.n	8018e7e <__gethex+0x34e>
 8018eca:	68a3      	ldr	r3, [r4, #8]
 8018ecc:	459b      	cmp	fp, r3
 8018ece:	db17      	blt.n	8018f00 <__gethex+0x3d0>
 8018ed0:	6861      	ldr	r1, [r4, #4]
 8018ed2:	9801      	ldr	r0, [sp, #4]
 8018ed4:	3101      	adds	r1, #1
 8018ed6:	f7fd fad9 	bl	801648c <_Balloc>
 8018eda:	4681      	mov	r9, r0
 8018edc:	b918      	cbnz	r0, 8018ee6 <__gethex+0x3b6>
 8018ede:	4b1a      	ldr	r3, [pc, #104]	@ (8018f48 <__gethex+0x418>)
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	2184      	movs	r1, #132	@ 0x84
 8018ee4:	e6c5      	b.n	8018c72 <__gethex+0x142>
 8018ee6:	6922      	ldr	r2, [r4, #16]
 8018ee8:	f104 010c 	add.w	r1, r4, #12
 8018eec:	300c      	adds	r0, #12
 8018eee:	3202      	adds	r2, #2
 8018ef0:	0092      	lsls	r2, r2, #2
 8018ef2:	f7fc fc1a 	bl	801572a <memcpy>
 8018ef6:	4621      	mov	r1, r4
 8018ef8:	464c      	mov	r4, r9
 8018efa:	9801      	ldr	r0, [sp, #4]
 8018efc:	f7fd fb06 	bl	801650c <_Bfree>
 8018f00:	6923      	ldr	r3, [r4, #16]
 8018f02:	1c5a      	adds	r2, r3, #1
 8018f04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018f08:	6122      	str	r2, [r4, #16]
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	615a      	str	r2, [r3, #20]
 8018f0e:	e7be      	b.n	8018e8e <__gethex+0x35e>
 8018f10:	6922      	ldr	r2, [r4, #16]
 8018f12:	455a      	cmp	r2, fp
 8018f14:	dd0b      	ble.n	8018f2e <__gethex+0x3fe>
 8018f16:	2101      	movs	r1, #1
 8018f18:	4620      	mov	r0, r4
 8018f1a:	f7ff fda3 	bl	8018a64 <rshift>
 8018f1e:	3701      	adds	r7, #1
 8018f20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f24:	42bb      	cmp	r3, r7
 8018f26:	f6ff aee0 	blt.w	8018cea <__gethex+0x1ba>
 8018f2a:	2501      	movs	r5, #1
 8018f2c:	e7c2      	b.n	8018eb4 <__gethex+0x384>
 8018f2e:	f016 061f 	ands.w	r6, r6, #31
 8018f32:	d0fa      	beq.n	8018f2a <__gethex+0x3fa>
 8018f34:	4453      	add	r3, sl
 8018f36:	f1c6 0620 	rsb	r6, r6, #32
 8018f3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018f3e:	f7fd fb99 	bl	8016674 <__hi0bits>
 8018f42:	42b0      	cmp	r0, r6
 8018f44:	dbe7      	blt.n	8018f16 <__gethex+0x3e6>
 8018f46:	e7f0      	b.n	8018f2a <__gethex+0x3fa>
 8018f48:	0818cb1b 	.word	0x0818cb1b

08018f4c <L_shift>:
 8018f4c:	f1c2 0208 	rsb	r2, r2, #8
 8018f50:	0092      	lsls	r2, r2, #2
 8018f52:	b570      	push	{r4, r5, r6, lr}
 8018f54:	f1c2 0620 	rsb	r6, r2, #32
 8018f58:	6843      	ldr	r3, [r0, #4]
 8018f5a:	6804      	ldr	r4, [r0, #0]
 8018f5c:	fa03 f506 	lsl.w	r5, r3, r6
 8018f60:	40d3      	lsrs	r3, r2
 8018f62:	432c      	orrs	r4, r5
 8018f64:	6004      	str	r4, [r0, #0]
 8018f66:	f840 3f04 	str.w	r3, [r0, #4]!
 8018f6a:	4288      	cmp	r0, r1
 8018f6c:	d3f4      	bcc.n	8018f58 <L_shift+0xc>
 8018f6e:	bd70      	pop	{r4, r5, r6, pc}

08018f70 <__match>:
 8018f70:	6803      	ldr	r3, [r0, #0]
 8018f72:	3301      	adds	r3, #1
 8018f74:	b530      	push	{r4, r5, lr}
 8018f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f7a:	b914      	cbnz	r4, 8018f82 <__match+0x12>
 8018f7c:	6003      	str	r3, [r0, #0]
 8018f7e:	2001      	movs	r0, #1
 8018f80:	bd30      	pop	{r4, r5, pc}
 8018f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018f8a:	2d19      	cmp	r5, #25
 8018f8c:	bf98      	it	ls
 8018f8e:	3220      	addls	r2, #32
 8018f90:	42a2      	cmp	r2, r4
 8018f92:	d0f0      	beq.n	8018f76 <__match+0x6>
 8018f94:	2000      	movs	r0, #0
 8018f96:	e7f3      	b.n	8018f80 <__match+0x10>

08018f98 <__hexnan>:
 8018f98:	680b      	ldr	r3, [r1, #0]
 8018f9a:	6801      	ldr	r1, [r0, #0]
 8018f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa0:	115e      	asrs	r6, r3, #5
 8018fa2:	f013 031f 	ands.w	r3, r3, #31
 8018fa6:	f04f 0500 	mov.w	r5, #0
 8018faa:	b087      	sub	sp, #28
 8018fac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018fb0:	4682      	mov	sl, r0
 8018fb2:	4690      	mov	r8, r2
 8018fb4:	46ab      	mov	fp, r5
 8018fb6:	bf18      	it	ne
 8018fb8:	3604      	addne	r6, #4
 8018fba:	9301      	str	r3, [sp, #4]
 8018fbc:	9502      	str	r5, [sp, #8]
 8018fbe:	1f37      	subs	r7, r6, #4
 8018fc0:	f846 5c04 	str.w	r5, [r6, #-4]
 8018fc4:	46b9      	mov	r9, r7
 8018fc6:	463c      	mov	r4, r7
 8018fc8:	1c4b      	adds	r3, r1, #1
 8018fca:	784a      	ldrb	r2, [r1, #1]
 8018fcc:	9303      	str	r3, [sp, #12]
 8018fce:	b342      	cbz	r2, 8019022 <__hexnan+0x8a>
 8018fd0:	4610      	mov	r0, r2
 8018fd2:	9105      	str	r1, [sp, #20]
 8018fd4:	9204      	str	r2, [sp, #16]
 8018fd6:	f7ff fd96 	bl	8018b06 <__hexdig_fun>
 8018fda:	2800      	cmp	r0, #0
 8018fdc:	d151      	bne.n	8019082 <__hexnan+0xea>
 8018fde:	9a04      	ldr	r2, [sp, #16]
 8018fe0:	9905      	ldr	r1, [sp, #20]
 8018fe2:	2a20      	cmp	r2, #32
 8018fe4:	d818      	bhi.n	8019018 <__hexnan+0x80>
 8018fe6:	9b02      	ldr	r3, [sp, #8]
 8018fe8:	459b      	cmp	fp, r3
 8018fea:	dd13      	ble.n	8019014 <__hexnan+0x7c>
 8018fec:	454c      	cmp	r4, r9
 8018fee:	d206      	bcs.n	8018ffe <__hexnan+0x66>
 8018ff0:	2d07      	cmp	r5, #7
 8018ff2:	dc04      	bgt.n	8018ffe <__hexnan+0x66>
 8018ff4:	462a      	mov	r2, r5
 8018ff6:	4649      	mov	r1, r9
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	f7ff ffa7 	bl	8018f4c <L_shift>
 8018ffe:	4544      	cmp	r4, r8
 8019000:	d951      	bls.n	80190a6 <__hexnan+0x10e>
 8019002:	2300      	movs	r3, #0
 8019004:	f1a4 0904 	sub.w	r9, r4, #4
 8019008:	f8cd b008 	str.w	fp, [sp, #8]
 801900c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019010:	461d      	mov	r5, r3
 8019012:	464c      	mov	r4, r9
 8019014:	9903      	ldr	r1, [sp, #12]
 8019016:	e7d7      	b.n	8018fc8 <__hexnan+0x30>
 8019018:	2a29      	cmp	r2, #41	@ 0x29
 801901a:	d156      	bne.n	80190ca <__hexnan+0x132>
 801901c:	3102      	adds	r1, #2
 801901e:	f8ca 1000 	str.w	r1, [sl]
 8019022:	f1bb 0f00 	cmp.w	fp, #0
 8019026:	d050      	beq.n	80190ca <__hexnan+0x132>
 8019028:	454c      	cmp	r4, r9
 801902a:	d206      	bcs.n	801903a <__hexnan+0xa2>
 801902c:	2d07      	cmp	r5, #7
 801902e:	dc04      	bgt.n	801903a <__hexnan+0xa2>
 8019030:	462a      	mov	r2, r5
 8019032:	4649      	mov	r1, r9
 8019034:	4620      	mov	r0, r4
 8019036:	f7ff ff89 	bl	8018f4c <L_shift>
 801903a:	4544      	cmp	r4, r8
 801903c:	d935      	bls.n	80190aa <__hexnan+0x112>
 801903e:	f1a8 0204 	sub.w	r2, r8, #4
 8019042:	4623      	mov	r3, r4
 8019044:	f853 1b04 	ldr.w	r1, [r3], #4
 8019048:	429f      	cmp	r7, r3
 801904a:	f842 1f04 	str.w	r1, [r2, #4]!
 801904e:	d2f9      	bcs.n	8019044 <__hexnan+0xac>
 8019050:	1b3b      	subs	r3, r7, r4
 8019052:	3e03      	subs	r6, #3
 8019054:	3401      	adds	r4, #1
 8019056:	2200      	movs	r2, #0
 8019058:	f023 0303 	bic.w	r3, r3, #3
 801905c:	3304      	adds	r3, #4
 801905e:	42b4      	cmp	r4, r6
 8019060:	bf88      	it	hi
 8019062:	2304      	movhi	r3, #4
 8019064:	4443      	add	r3, r8
 8019066:	f843 2b04 	str.w	r2, [r3], #4
 801906a:	429f      	cmp	r7, r3
 801906c:	d2fb      	bcs.n	8019066 <__hexnan+0xce>
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	b91b      	cbnz	r3, 801907a <__hexnan+0xe2>
 8019072:	4547      	cmp	r7, r8
 8019074:	d127      	bne.n	80190c6 <__hexnan+0x12e>
 8019076:	2301      	movs	r3, #1
 8019078:	603b      	str	r3, [r7, #0]
 801907a:	2005      	movs	r0, #5
 801907c:	b007      	add	sp, #28
 801907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019082:	3501      	adds	r5, #1
 8019084:	f10b 0b01 	add.w	fp, fp, #1
 8019088:	2d08      	cmp	r5, #8
 801908a:	dd05      	ble.n	8019098 <__hexnan+0x100>
 801908c:	4544      	cmp	r4, r8
 801908e:	d9c1      	bls.n	8019014 <__hexnan+0x7c>
 8019090:	2300      	movs	r3, #0
 8019092:	3c04      	subs	r4, #4
 8019094:	2501      	movs	r5, #1
 8019096:	6023      	str	r3, [r4, #0]
 8019098:	6822      	ldr	r2, [r4, #0]
 801909a:	f000 000f 	and.w	r0, r0, #15
 801909e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80190a2:	6020      	str	r0, [r4, #0]
 80190a4:	e7b6      	b.n	8019014 <__hexnan+0x7c>
 80190a6:	2508      	movs	r5, #8
 80190a8:	e7b4      	b.n	8019014 <__hexnan+0x7c>
 80190aa:	9b01      	ldr	r3, [sp, #4]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d0de      	beq.n	801906e <__hexnan+0xd6>
 80190b0:	f1c3 0320 	rsb	r3, r3, #32
 80190b4:	f04f 32ff 	mov.w	r2, #4294967295
 80190b8:	40da      	lsrs	r2, r3
 80190ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80190be:	4013      	ands	r3, r2
 80190c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80190c4:	e7d3      	b.n	801906e <__hexnan+0xd6>
 80190c6:	3f04      	subs	r7, #4
 80190c8:	e7d1      	b.n	801906e <__hexnan+0xd6>
 80190ca:	2004      	movs	r0, #4
 80190cc:	e7d6      	b.n	801907c <__hexnan+0xe4>

080190ce <__ascii_mbtowc>:
 80190ce:	b082      	sub	sp, #8
 80190d0:	b901      	cbnz	r1, 80190d4 <__ascii_mbtowc+0x6>
 80190d2:	a901      	add	r1, sp, #4
 80190d4:	b142      	cbz	r2, 80190e8 <__ascii_mbtowc+0x1a>
 80190d6:	b14b      	cbz	r3, 80190ec <__ascii_mbtowc+0x1e>
 80190d8:	7813      	ldrb	r3, [r2, #0]
 80190da:	600b      	str	r3, [r1, #0]
 80190dc:	7812      	ldrb	r2, [r2, #0]
 80190de:	1e10      	subs	r0, r2, #0
 80190e0:	bf18      	it	ne
 80190e2:	2001      	movne	r0, #1
 80190e4:	b002      	add	sp, #8
 80190e6:	4770      	bx	lr
 80190e8:	4610      	mov	r0, r2
 80190ea:	e7fb      	b.n	80190e4 <__ascii_mbtowc+0x16>
 80190ec:	f06f 0001 	mvn.w	r0, #1
 80190f0:	e7f8      	b.n	80190e4 <__ascii_mbtowc+0x16>

080190f2 <_realloc_r>:
 80190f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190f6:	4680      	mov	r8, r0
 80190f8:	4615      	mov	r5, r2
 80190fa:	460c      	mov	r4, r1
 80190fc:	b921      	cbnz	r1, 8019108 <_realloc_r+0x16>
 80190fe:	4611      	mov	r1, r2
 8019100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019104:	f7fa bfc8 	b.w	8014098 <_malloc_r>
 8019108:	b92a      	cbnz	r2, 8019116 <_realloc_r+0x24>
 801910a:	f7fd f975 	bl	80163f8 <_free_r>
 801910e:	2400      	movs	r4, #0
 8019110:	4620      	mov	r0, r4
 8019112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019116:	f000 f8b2 	bl	801927e <_malloc_usable_size_r>
 801911a:	4285      	cmp	r5, r0
 801911c:	4606      	mov	r6, r0
 801911e:	d802      	bhi.n	8019126 <_realloc_r+0x34>
 8019120:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019124:	d8f4      	bhi.n	8019110 <_realloc_r+0x1e>
 8019126:	4629      	mov	r1, r5
 8019128:	4640      	mov	r0, r8
 801912a:	f7fa ffb5 	bl	8014098 <_malloc_r>
 801912e:	4607      	mov	r7, r0
 8019130:	2800      	cmp	r0, #0
 8019132:	d0ec      	beq.n	801910e <_realloc_r+0x1c>
 8019134:	42b5      	cmp	r5, r6
 8019136:	462a      	mov	r2, r5
 8019138:	4621      	mov	r1, r4
 801913a:	bf28      	it	cs
 801913c:	4632      	movcs	r2, r6
 801913e:	f7fc faf4 	bl	801572a <memcpy>
 8019142:	4621      	mov	r1, r4
 8019144:	4640      	mov	r0, r8
 8019146:	463c      	mov	r4, r7
 8019148:	f7fd f956 	bl	80163f8 <_free_r>
 801914c:	e7e0      	b.n	8019110 <_realloc_r+0x1e>
	...

08019150 <_strtoul_l.constprop.0>:
 8019150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019154:	4686      	mov	lr, r0
 8019156:	460d      	mov	r5, r1
 8019158:	4e33      	ldr	r6, [pc, #204]	@ (8019228 <_strtoul_l.constprop.0+0xd8>)
 801915a:	4628      	mov	r0, r5
 801915c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019160:	5d37      	ldrb	r7, [r6, r4]
 8019162:	f017 0708 	ands.w	r7, r7, #8
 8019166:	d1f8      	bne.n	801915a <_strtoul_l.constprop.0+0xa>
 8019168:	2c2d      	cmp	r4, #45	@ 0x2d
 801916a:	d12f      	bne.n	80191cc <_strtoul_l.constprop.0+0x7c>
 801916c:	782c      	ldrb	r4, [r5, #0]
 801916e:	2701      	movs	r7, #1
 8019170:	1c85      	adds	r5, r0, #2
 8019172:	f033 0010 	bics.w	r0, r3, #16
 8019176:	d109      	bne.n	801918c <_strtoul_l.constprop.0+0x3c>
 8019178:	2c30      	cmp	r4, #48	@ 0x30
 801917a:	d12c      	bne.n	80191d6 <_strtoul_l.constprop.0+0x86>
 801917c:	7828      	ldrb	r0, [r5, #0]
 801917e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019182:	2858      	cmp	r0, #88	@ 0x58
 8019184:	d127      	bne.n	80191d6 <_strtoul_l.constprop.0+0x86>
 8019186:	786c      	ldrb	r4, [r5, #1]
 8019188:	2310      	movs	r3, #16
 801918a:	3502      	adds	r5, #2
 801918c:	f04f 38ff 	mov.w	r8, #4294967295
 8019190:	2600      	movs	r6, #0
 8019192:	fbb8 f8f3 	udiv	r8, r8, r3
 8019196:	fb03 f908 	mul.w	r9, r3, r8
 801919a:	4630      	mov	r0, r6
 801919c:	ea6f 0909 	mvn.w	r9, r9
 80191a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80191a4:	f1bc 0f09 	cmp.w	ip, #9
 80191a8:	d81c      	bhi.n	80191e4 <_strtoul_l.constprop.0+0x94>
 80191aa:	4664      	mov	r4, ip
 80191ac:	42a3      	cmp	r3, r4
 80191ae:	dd2a      	ble.n	8019206 <_strtoul_l.constprop.0+0xb6>
 80191b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80191b4:	d007      	beq.n	80191c6 <_strtoul_l.constprop.0+0x76>
 80191b6:	4580      	cmp	r8, r0
 80191b8:	d322      	bcc.n	8019200 <_strtoul_l.constprop.0+0xb0>
 80191ba:	d101      	bne.n	80191c0 <_strtoul_l.constprop.0+0x70>
 80191bc:	45a1      	cmp	r9, r4
 80191be:	db1f      	blt.n	8019200 <_strtoul_l.constprop.0+0xb0>
 80191c0:	fb00 4003 	mla	r0, r0, r3, r4
 80191c4:	2601      	movs	r6, #1
 80191c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191ca:	e7e9      	b.n	80191a0 <_strtoul_l.constprop.0+0x50>
 80191cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80191ce:	bf04      	itt	eq
 80191d0:	782c      	ldrbeq	r4, [r5, #0]
 80191d2:	1c85      	addeq	r5, r0, #2
 80191d4:	e7cd      	b.n	8019172 <_strtoul_l.constprop.0+0x22>
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d1d8      	bne.n	801918c <_strtoul_l.constprop.0+0x3c>
 80191da:	2c30      	cmp	r4, #48	@ 0x30
 80191dc:	bf0c      	ite	eq
 80191de:	2308      	moveq	r3, #8
 80191e0:	230a      	movne	r3, #10
 80191e2:	e7d3      	b.n	801918c <_strtoul_l.constprop.0+0x3c>
 80191e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80191e8:	f1bc 0f19 	cmp.w	ip, #25
 80191ec:	d801      	bhi.n	80191f2 <_strtoul_l.constprop.0+0xa2>
 80191ee:	3c37      	subs	r4, #55	@ 0x37
 80191f0:	e7dc      	b.n	80191ac <_strtoul_l.constprop.0+0x5c>
 80191f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80191f6:	f1bc 0f19 	cmp.w	ip, #25
 80191fa:	d804      	bhi.n	8019206 <_strtoul_l.constprop.0+0xb6>
 80191fc:	3c57      	subs	r4, #87	@ 0x57
 80191fe:	e7d5      	b.n	80191ac <_strtoul_l.constprop.0+0x5c>
 8019200:	f04f 36ff 	mov.w	r6, #4294967295
 8019204:	e7df      	b.n	80191c6 <_strtoul_l.constprop.0+0x76>
 8019206:	1c73      	adds	r3, r6, #1
 8019208:	d106      	bne.n	8019218 <_strtoul_l.constprop.0+0xc8>
 801920a:	2322      	movs	r3, #34	@ 0x22
 801920c:	4630      	mov	r0, r6
 801920e:	f8ce 3000 	str.w	r3, [lr]
 8019212:	b932      	cbnz	r2, 8019222 <_strtoul_l.constprop.0+0xd2>
 8019214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019218:	b107      	cbz	r7, 801921c <_strtoul_l.constprop.0+0xcc>
 801921a:	4240      	negs	r0, r0
 801921c:	2a00      	cmp	r2, #0
 801921e:	d0f9      	beq.n	8019214 <_strtoul_l.constprop.0+0xc4>
 8019220:	b106      	cbz	r6, 8019224 <_strtoul_l.constprop.0+0xd4>
 8019222:	1e69      	subs	r1, r5, #1
 8019224:	6011      	str	r1, [r2, #0]
 8019226:	e7f5      	b.n	8019214 <_strtoul_l.constprop.0+0xc4>
 8019228:	0818cce1 	.word	0x0818cce1

0801922c <_strtoul_r>:
 801922c:	f7ff bf90 	b.w	8019150 <_strtoul_l.constprop.0>

08019230 <__ascii_wctomb>:
 8019230:	4603      	mov	r3, r0
 8019232:	4608      	mov	r0, r1
 8019234:	b141      	cbz	r1, 8019248 <__ascii_wctomb+0x18>
 8019236:	2aff      	cmp	r2, #255	@ 0xff
 8019238:	d904      	bls.n	8019244 <__ascii_wctomb+0x14>
 801923a:	228a      	movs	r2, #138	@ 0x8a
 801923c:	f04f 30ff 	mov.w	r0, #4294967295
 8019240:	601a      	str	r2, [r3, #0]
 8019242:	4770      	bx	lr
 8019244:	2001      	movs	r0, #1
 8019246:	700a      	strb	r2, [r1, #0]
 8019248:	4770      	bx	lr
	...

0801924c <fiprintf>:
 801924c:	b40e      	push	{r1, r2, r3}
 801924e:	b503      	push	{r0, r1, lr}
 8019250:	ab03      	add	r3, sp, #12
 8019252:	4601      	mov	r1, r0
 8019254:	4805      	ldr	r0, [pc, #20]	@ (801926c <fiprintf+0x20>)
 8019256:	f853 2b04 	ldr.w	r2, [r3], #4
 801925a:	6800      	ldr	r0, [r0, #0]
 801925c:	9301      	str	r3, [sp, #4]
 801925e:	f7fe ffa3 	bl	80181a8 <_vfiprintf_r>
 8019262:	b002      	add	sp, #8
 8019264:	f85d eb04 	ldr.w	lr, [sp], #4
 8019268:	b003      	add	sp, #12
 801926a:	4770      	bx	lr
 801926c:	200000f0 	.word	0x200000f0

08019270 <abort>:
 8019270:	2006      	movs	r0, #6
 8019272:	b508      	push	{r3, lr}
 8019274:	f000 f834 	bl	80192e0 <raise>
 8019278:	2001      	movs	r0, #1
 801927a:	f7e8 fa43 	bl	8001704 <_exit>

0801927e <_malloc_usable_size_r>:
 801927e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019282:	1f18      	subs	r0, r3, #4
 8019284:	2b00      	cmp	r3, #0
 8019286:	bfbc      	itt	lt
 8019288:	580b      	ldrlt	r3, [r1, r0]
 801928a:	18c0      	addlt	r0, r0, r3
 801928c:	4770      	bx	lr

0801928e <_raise_r>:
 801928e:	291f      	cmp	r1, #31
 8019290:	b538      	push	{r3, r4, r5, lr}
 8019292:	4605      	mov	r5, r0
 8019294:	460c      	mov	r4, r1
 8019296:	d904      	bls.n	80192a2 <_raise_r+0x14>
 8019298:	2316      	movs	r3, #22
 801929a:	6003      	str	r3, [r0, #0]
 801929c:	f04f 30ff 	mov.w	r0, #4294967295
 80192a0:	bd38      	pop	{r3, r4, r5, pc}
 80192a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80192a4:	b112      	cbz	r2, 80192ac <_raise_r+0x1e>
 80192a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80192aa:	b94b      	cbnz	r3, 80192c0 <_raise_r+0x32>
 80192ac:	4628      	mov	r0, r5
 80192ae:	f000 f831 	bl	8019314 <_getpid_r>
 80192b2:	4622      	mov	r2, r4
 80192b4:	4601      	mov	r1, r0
 80192b6:	4628      	mov	r0, r5
 80192b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192bc:	f000 b818 	b.w	80192f0 <_kill_r>
 80192c0:	2b01      	cmp	r3, #1
 80192c2:	d00a      	beq.n	80192da <_raise_r+0x4c>
 80192c4:	1c59      	adds	r1, r3, #1
 80192c6:	d103      	bne.n	80192d0 <_raise_r+0x42>
 80192c8:	2316      	movs	r3, #22
 80192ca:	6003      	str	r3, [r0, #0]
 80192cc:	2001      	movs	r0, #1
 80192ce:	e7e7      	b.n	80192a0 <_raise_r+0x12>
 80192d0:	2100      	movs	r1, #0
 80192d2:	4620      	mov	r0, r4
 80192d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80192d8:	4798      	blx	r3
 80192da:	2000      	movs	r0, #0
 80192dc:	e7e0      	b.n	80192a0 <_raise_r+0x12>
	...

080192e0 <raise>:
 80192e0:	4b02      	ldr	r3, [pc, #8]	@ (80192ec <raise+0xc>)
 80192e2:	4601      	mov	r1, r0
 80192e4:	6818      	ldr	r0, [r3, #0]
 80192e6:	f7ff bfd2 	b.w	801928e <_raise_r>
 80192ea:	bf00      	nop
 80192ec:	200000f0 	.word	0x200000f0

080192f0 <_kill_r>:
 80192f0:	b538      	push	{r3, r4, r5, lr}
 80192f2:	2300      	movs	r3, #0
 80192f4:	4d06      	ldr	r5, [pc, #24]	@ (8019310 <_kill_r+0x20>)
 80192f6:	4604      	mov	r4, r0
 80192f8:	4608      	mov	r0, r1
 80192fa:	4611      	mov	r1, r2
 80192fc:	602b      	str	r3, [r5, #0]
 80192fe:	f7e8 f9f1 	bl	80016e4 <_kill>
 8019302:	1c43      	adds	r3, r0, #1
 8019304:	d102      	bne.n	801930c <_kill_r+0x1c>
 8019306:	682b      	ldr	r3, [r5, #0]
 8019308:	b103      	cbz	r3, 801930c <_kill_r+0x1c>
 801930a:	6023      	str	r3, [r4, #0]
 801930c:	bd38      	pop	{r3, r4, r5, pc}
 801930e:	bf00      	nop
 8019310:	200034b0 	.word	0x200034b0

08019314 <_getpid_r>:
 8019314:	f7e8 b9de 	b.w	80016d4 <_getpid>

08019318 <_init>:
 8019318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801931a:	bf00      	nop
 801931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801931e:	bc08      	pop	{r3}
 8019320:	469e      	mov	lr, r3
 8019322:	4770      	bx	lr

08019324 <_fini>:
 8019324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019326:	bf00      	nop
 8019328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801932a:	bc08      	pop	{r3}
 801932c:	469e      	mov	lr, r3
 801932e:	4770      	bx	lr
